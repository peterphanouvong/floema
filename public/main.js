/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r,n,s,i,o,a={"./app/animations/Highlight.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js");r("./app/utils/text.js");class i extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.elementLabel=this.element.querySelector(".about__highlight__label")}animateIn(){this.elementLabel&&(this.animateInTimeline=n.default.timeline(),this.animateInTimeline.set(this.element,{autoAlpha:1}),this.animateInTimeline.fromTo(this.elementLabel,{autoAlpha:0,y:"5rem"},{autoAlpha:1,duration:1.2,delay:1,ease:"expo.out",y:"0%"}))}animateOut(){this.elementLabel&&n.default.set(this.element,{autoAlpha:0})}onResize(){}}const o=i},"./app/animations/Paragraph.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js");class o extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t});e.querySelectorAll("p").forEach((e=>{(0,i.split)({element:e,append:!1}),(0,i.split)({element:e,append:!1})})),this.elementWordSpans=this.element.querySelectorAll("span span")}animateIn(){n.default.set(this.element,{autoAlpha:1}),n.default.fromTo(this.elementWords,{y:"100%"},{delay:.5,duration:1.5,ease:"expo.out",stagger:{amount:1},y:"0%"})}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementWords=(0,i.calculate)(this.elementWordSpans)}}const a=o},"./app/animations/Title.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js");class o extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t});const{lines:r}=(0,i.splitChars)({element:e});this.lines=r}animateIn(){this.animateInTimeline=n.default.timeline({delay:.5}),this.animateInTimeline.set(this.element,{autoAlpha:1}),this.lines.forEach(((e,t)=>{this.animateInTimeline.fromTo(e.querySelectorAll("span"),{y:"100%"},{delay:.2*t,duration:1.2,ease:"elastic.out(0.3, 0.6)",stagger:{amount:.1,from:"random"},y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){}}const a=o},"./app/classes/Animation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.element=e,this.createObserver()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateIn(){}animateOut(){}}const i=s},"./app/classes/AsyncLoad.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e}){super({element:e}),this.element=e,this.createObserver()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(this.element.src?this.element.classList.add("loaded"):(this.element.src=this.element.getAttribute("data-src"),this.element.onload=()=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ColorsManager:()=>s});var n=r("./node_modules/gsap/index.js");const s=new class{change({backgroundColor:e,color:t}){n.default.to(document.documentElement,{backgroundColor:e,color:t,duration:1.5})}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/lodash/each.js"),s=r.n(n),i=r("./node_modules/events/events.js"),o=r.n(i);class a extends(o()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},s()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}const l=a},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>g});var n=r("./node_modules/gsap/index.js"),s=r("./node_modules/lodash/each.js"),i=r.n(s),o=r("./node_modules/lodash/map.js"),a=r.n(o),l=r("./node_modules/prefix/index.js"),u=r.n(l),c=r("./app/animations/Highlight.js"),h=r("./app/animations/Paragraph.js"),d=r("./app/animations/Title.js"),p=r("./app/classes/AsyncLoad.js"),f=r("./app/classes/Colors.js");const g=class{constructor({element:e,elements:t,id:r}){this.selector=e,this.selectorChildren={...t,animationsTitles:'[data-animation="title"]',animationsParagraphs:'[data-animation="paragraph"]',animationsHighlights:'[data-animation="highlight"]',preloaders:"[data-src]"},this.id=r,this.transformPrefix=u()("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},i()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))})),this.scroll={current:0,target:0,last:0,limit:0},this.onResize(),this.createAnimations(),this.createPreloader()}createPreloader(){this.preloaders=a()(this.elements.preloaders,(e=>new p.default({element:e})))}createAnimations(){this.animations=[],this.animationsTitles=a()(this.elements.animationsTitles,(e=>new d.default({element:e}))),this.animations.push(...this.animationsTitles),this.animationsParagraphs=a()(this.elements.animationsParagraphs,(e=>new h.default({element:e}))),this.animations.push(...this.animationsParagraphs),this.animationsHighlights=a()(this.elements.animationsHighlights,(e=>new c.default({element:e}))),this.animations.push(...this.animationsHighlights)}show(){return new Promise((e=>{f.ColorsManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),this.animateIn=n.default.timeline(),this.animateIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),this.animateIn.call((t=>{this.addEventListeners(),this.onResize(),e()}))}))}hide(){return new Promise((e=>{this.destroy(),this.animateOut=n.default.timeline(),this.animateOut.to(this.element,{autoAlpha:0,onComplete:e})}))}update(){this.scroll.target=n.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}destroy(){this.removeEventListeners()}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),i()(this.animations,(e=>e.onResize()))}onWheel({pixelY:e}){this.scroll.target+=e}addEventListeners(){window.addEventListener("resize",this.onResize.bind(this))}removeEventListeners(){window.removeEventListener("resize",this.onResize.bind(this))}}},"./app/components/Button.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/gsap/all.js"),s=r("./app/classes/Component.js");class i extends s.default{constructor(e){super({element:e}),this.path=e.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.timeline=n.default.timeline({paused:!0}),this.timeline.fromTo(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`},{strokeDashoffset:0,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/components/Canvas/About/Gallery.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/lodash/map.js"),s=r.n(n),i=r("./app/components/Canvas/About/Media.js"),o=r("./node_modules/gsap/index.js"),a=r("./node_modules/ogl/src/core/Transform.js");class l{constructor({element:e,gl:t,geometry:r,scene:n,index:s,sizes:i}){this.element=e,this.geometry=r,this.gl=t,this.index=s,this.scene=n,this.sizes=i,this.group=new a.Transform,this.createMedias(),this.group.setParent(this.scene)}show(){s()(this.medias,(e=>e.show()))}hide(){s()(this.medias,(e=>e.hide()))}createMedias(){this.mediaElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=s()(this.mediaElements,((e,t)=>new i.default({element:e,gl:this.gl,geometry:this.geometry,scene:this.group,index:t,sizes:this.sizes}))),this.scroll={current:0,target:0,last:0,lerp:.1,y:0},this.y={current:0,target:0,lerp:.1,limit:0}}onResize(e){this.bounds=this.element.getBoundingClientRect(),this.sizes=e.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.y.limit=this.bounds.height-window.innerHeight,s()(this.medias,(t=>t.onResize(e)))}onTouchDown({x:e,y:t}){}onTouchMove({x:e,y:t}){const r=(e.start-e.end)/20;console.log(r),this.scroll.target+=r}onTouchUp({x:e,y:t}){}onWheel({pixelY:e}){this.y.target+=e}update(e){if(!this.bounds)return;const t=e.current-e.target;this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.scroll.current<this.scroll.target?this.direction="left":this.scroll.current>this.scroll.target&&(this.direction="right"),this.scroll.target-=1,this.scroll.target-=t/10,s()(this.medias,((e,t)=>{"left"===this.direction&&e.mesh.position.x+e.mesh.scale.x+.125<-this.sizes.width/2?e.extra.x+=this.width:"right"===this.direction&&e.mesh.position.x-e.mesh.scale.x-.125>this.sizes.width/2&&(e.extra.x-=this.width),e.update(this.scroll)})),this.group.position.y=e.current/window.innerHeight*this.sizes.height}destroy(){console.log("destroy gallery  "),this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Program.js"),s=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./app/shaders/plane-vertex.glsl"),o=r("./app/shaders/plane-fragment.glsl"),a=r("./node_modules/gsap/index.js");const l=class{constructor({element:e,gl:t,geometry:r,scene:n,index:s,sizes:i}){this.element=e,this.gl=t,this.geometry=r,this.scene=n,this.index=s,this.sizes=i,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){console.log("about",this.element.childNodes[0].getAttribute("data-src")),this.texture=window.TEXTURES[this.element.childNodes[0].getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{vertex:i.default,fragment:o.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:1}}})}createMesh(){this.mesh=new s.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.position.x+=this.index*this.mesh.scale.x}createBounds({sizes:e}){this.bounds=this.element.getBoundingClientRect(),this.sizes=e,this.updateScale(e),this.updateX(),this.updateY()}onResize(e){this.createBounds(e)}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}updateRotation(){this.mesh.rotation.z=a.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+(this.bounds.left-e)/window.innerWidth*this.sizes.width+this.extra.x}updateY(e=0){this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-(this.bounds.top-e)/window.innerHeight*this.sizes.height-this.extra.y,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(e){this.updateX(e.current),this.updateY(e.y),this.updateRotation()}}},"./app/components/Canvas/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/lodash/map.js"),s=r.n(n),i=r("./node_modules/ogl/src/extras/Plane.js"),o=r("./app/components/Canvas/About/Gallery.js");const a=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.sizes=r,this.scene=t,this.createGeometry(),this.createGalleries(),this.show()}show(){s()(this.galleries,(e=>e.show()))}hide(){s()(this.galleries,(e=>e.hide()))}createGeometry(){this.geometry=new i.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=s()(this.galleriesElements,((e,t)=>new o.default({element:e,index:t,gl:this.gl,geometry:this.geometry,scene:this.scene,sizes:this.sizes}))),console.log(this.galleries)}onWheel(e){s()(this.galleries,(t=>t.onWheel(e)))}onResize(e){s()(this.galleries,(t=>t.onResize(e)))}onTouchDown(e){s()(this.galleries,(t=>t.onTouchDown(e)))}onTouchMove(e){s()(this.galleries,(t=>t.onTouchMove(e)))}onTouchUp(e){s()(this.galleries,(t=>t.onTouchUp(e)))}update(e){s()(this.galleries,(t=>t.update(e)))}destroy(){s()(this.galleries,(e=>e.destroy()))}}},"./app/components/Canvas/Collections/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Program.js"),s=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./app/shaders/plane-vertex.glsl"),o=r("./app/shaders/plane-fragment.glsl"),a=r("./node_modules/gsap/index.js");const l=class{constructor({element:e,gl:t,geometry:r,scene:n,index:s,sizes:i}){this.element=e,this.gl=t,this.geometry=r,this.scene=n,this.index=s,this.sizes=i,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=window.TEXTURES[this.element.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{vertex:i.default,fragment:o.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:1}}})}createMesh(){this.mesh=new s.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.position.x+=this.index*this.mesh.scale.x}createBounds({sizes:e}){this.bounds=this.element.getBoundingClientRect(),this.sizes=e,this.updateScale(e),this.updateX(),this.updateY()}onResize(e){this.createBounds(e)}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+(this.bounds.left-e)/window.innerWidth*this.sizes.width}updateY(e=0){this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-(this.bounds.top-e)/window.innerHeight*this.sizes.height-this.extra.y}update(e){this.updateX(e.x),this.updateY(e.y)}}},"./app/components/Canvas/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var n=r("./app/components/Canvas/Collections/Media.js"),s=r("./node_modules/lodash/map.js"),i=r.n(s),o=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Plane.js"),l=r("./node_modules/gsap/index.js"),u=r("./node_modules/prefix/index.js"),c=r.n(u);const h=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.sizes=r,this.group=new o.Transform,this.scene=t,this.transformPrefix=c()("transform"),this.galleryElement=document.querySelector(".collections__gallery"),this.galleryWrapperElement=document.querySelector(".collections__gallery__wrapper"),this.mediasElements=document.querySelectorAll(".collections__gallery__media__image"),this.descriptionElements=document.querySelectorAll(".collections__content__article"),this.titleElements=document.querySelector(".collections__titles"),this.createGeometry(),this.createGallery(),this.show(),this.group.setParent(t),this.x={current:0,target:0,lerp:.1,limit:0},this.scroll={x:0,y:0}}show(){i()(this.medias,(e=>e.show()))}hide(){i()(this.medias,(e=>e.hide()))}createGeometry(){this.geometry=new a.Plane(this.gl)}createGallery(){this.medias=i()(this.mediasElements,((e,t)=>new n.default({element:e,index:t,gl:this.gl,geometry:this.geometry,scene:this.group,sizes:this.sizes})))}onChangeIndex(e){const t=parseInt(this.medias[e].element.getAttribute("data-collection"));i()(this.descriptionElements,((e,r)=>{r===t?e.classList.add("collections__content__article--active"):e.classList.remove("collections__content__article--active")})),this.titleElements.style[this.transformPrefix]=`\n      translateY(-${250*t}%)\n      translate(-50%, -50%) rotate(-90deg)\n    `,console.log(t)}onWheel({pixelX:e,pixelY:t}){this.x.target+=e,this.x.target+=t}onResize(e){this.galleryBounds=this.galleryWrapperElement.getBoundingClientRect(),this.sizes=e.sizes,i()(this.medias,(t=>t.onResize(e))),this.x.limit=this.galleryBounds.width-this.medias[0].element.clientWidth}onTouchDown({x:e,y:t}){}onTouchMove({x:e,y:t}){this.x.target+=(e.start-e.end)/20}onTouchUp({x:e,y:t}){}update(){if(!this.galleryBounds)return;this.x.target=l.default.utils.clamp(0,this.x.limit,this.x.target),this.x.current=l.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.scroll.x=this.x.current,this.galleryElement.style[this.transformPrefix]=`translateX(-${this.x.current}px)`,i()(this.medias,((e,t)=>{e.update(this.scroll)}));const e=Math.round(this.x.current/(this.x.limit+this.medias[0].element.clientWidth)*this.medias.length);this.index!==e&&(this.onChangeIndex(e),this.index=e)}destroy(){console.log("destrpy home"),this.scene.removeChild(this.group)}}},"./app/components/Canvas/Home/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Program.js"),s=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./app/shaders/plane-vertex.glsl"),o=r("./app/shaders/plane-fragment.glsl"),a=r("./node_modules/gsap/index.js");const l=class{constructor({element:e,gl:t,geometry:r,scene:n,index:s,sizes:i}){this.element=e,this.gl=t,this.geometry=r,this.scene=n,this.index=s,this.sizes=i,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=window.TEXTURES[this.element.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{vertex:i.default,fragment:o.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:0}}})}createMesh(){this.mesh=new s.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.position.x+=this.index*this.mesh.scale.x}createBounds({sizes:e}){this.bounds=this.element.getBoundingClientRect(),this.sizes=e,this.updateScale(e),this.updateX(),this.updateY()}onResize(e){this.createBounds(e)}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:.4})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+(this.bounds.left-e)/window.innerWidth*this.sizes.width+this.extra.x}updateY(e=0){this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-(this.bounds.top-e)/window.innerHeight*this.sizes.height-this.extra.y}update(e){this.updateX(e.x),this.updateY(e.y)}}},"./app/components/Canvas/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./app/components/Canvas/Home/Media.js"),s=r("./node_modules/lodash/map.js"),i=r.n(s),o=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Plane.js"),l=r("./node_modules/gsap/index.js");const u=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.sizes=r,this.group=new o.Transform,this.scene=t,this.galleryElement=document.querySelector(".home_gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image "),this.createGeometry(),this.createGallery(),this.show(),this.group.setParent(t),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scroll={x:0,y:0}}show(){i()(this.medias,(e=>e.show()))}hide(){i()(this.medias,(e=>e.hide()))}createGeometry(){this.geometry=new a.Plane(this.gl)}createGallery(){this.medias=i()(this.mediasElements,((e,t)=>new n.default({element:e,index:t,gl:this.gl,geometry:this.geometry,scene:this.group,sizes:this.sizes})))}onWheel({pixelX:e,pixelY:t}){this.x.target+=e,this.y.target+=t}onResize(e){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=e.sizes,i()(this.medias,(t=>t.onResize(e)))}onTouchDown({x:e,y:t}){}onTouchMove({x:e,y:t}){this.x.target+=(e.start-e.end)/20,this.y.target+=(t.start-t.end)/20}onTouchUp({x:e,y:t}){}update(){this.galleryBounds&&(this.x.current=l.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=l.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="left":this.scroll.x>this.x.current&&(this.x.direction="right"),this.scroll.y<this.y.current?this.y.direction="down":this.scroll.y>this.y.current&&(this.y.direction="up"),this.galleryWidth=this.galleryBounds.width/window.innerWidth*this.sizes.width,this.galleryHeight=this.galleryBounds.height/window.innerHeight*this.sizes.height,this.scroll.x=this.x.current,this.scroll.y=this.y.current,i()(this.medias,((e,t)=>{"left"===this.x.direction&&e.mesh.position.x+e.mesh.scale.x/2<-this.sizes.width/2?(e.extra.x+=this.galleryWidth,e.mesh.rotation.z=l.default.utils.random(.03*-Math.PI,.03*Math.PI)):"right"===this.x.direction&&e.mesh.position.x-e.mesh.scale.x/2>this.sizes.width/2&&(e.extra.x-=this.galleryWidth,e.mesh.rotation.z=l.default.utils.random(.03*-Math.PI,.03*Math.PI)),"up"===this.y.direction&&e.mesh.position.y+e.mesh.scale.y/2<-this.sizes.height/2?(e.extra.y-=this.galleryHeight,e.mesh.rotation.z=l.default.utils.random(.03*-Math.PI,.03*Math.PI)):"down"===this.y.direction&&e.mesh.position.y-e.mesh.scale.y/2>this.sizes.height/2&&(e.extra.y+=this.galleryHeight,e.mesh.rotation.z=l.default.utils.random(.03*-Math.PI,.03*Math.PI)),e.update(this.scroll)})))}destroy(){console.log("destrpy home"),this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/ogl/src/core/Renderer.js"),s=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),o=r("./app/components/Canvas/About/index.js"),a=r("./app/components/Canvas/Collections/index.js"),l=r("./app/components/Canvas/Home/index.js");class u{constructor({template:e}){this.template=e,this.x={start:0,end:0},this.y={start:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.isDown=!1}createRenderer(){this.renderer=new n.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new s.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new l.default({gl:this.gl,scene:this.scene})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createAbout(){this.about=new o.default({gl:this.gl,scene:this.scene})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}createCollections(){this.collections=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}onPreloaded(){this.onChange(this.template),this.onResize()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:this.gl.canvas.width/this.gl.canvas.height});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,r=t*this.camera.aspect;this.sizes={height:t,width:r},this.home&&this.home.onResize({sizes:this.sizes}),this.about&&this.about.onResize({sizes:this.sizes}),this.collections&&this.collections.onResize({sizes:this.sizes})}onChangeStart(){this.home&&this.home.hide(),this.about&&this.about.hide(),this.collections&&this.collections.hide()}onChange(e){console.log("template:",e),"home"===e?this.createHome():this.destroyHome(),"about"===e?this.createAbout():this.destroyAbout(),"collections"===e?this.createCollections():this.destroyCollections()}onWheel(e){this.home&&this.home.onWheel(e),this.about&&this.about.onWheel(e),this.collections&&this.collections.onWheel(e)}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY,this.home&&this.home.onTouchDown({x:this.x,y:this.y}),this.about&&this.about.onTouchDown({x:this.x,y:this.y}),this.collections&&this.collections.onTouchDown({x:this.x,y:this.y})}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,r=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=r,this.home&&this.home.onTouchMove({x:this.x,y:this.y}),this.about&&this.about.onTouchMove({x:this.x,y:this.y}),this.collections&&this.collections.onTouchMove({x:this.x,y:this.y})}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,r=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=r}update(e){this.home&&this.home.update(),this.about&&this.about.update(e),this.collections&&this.collections.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./app/classes/Component.js"),s=r("./node_modules/gsap/index.js"),i=r("./app/utils/color.js");class o extends n.default{constructor({template:e}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.onChange(e)}onChange(e){"about"===e?(s.default.to(this.element,{color:i.COLOR_BRIGHT_GRAY,duration:1.5}),s.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75})):(s.default.to(this.element,{color:i.COLOR_QUARTER_SPANISH_WHITE,duration:1.5}),s.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:0,duration:.75}))}}},"./app/components/Preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./app/classes/Component.js"),s=r("./node_modules/gsap/index.js"),i=r("./node_modules/ogl/src/core/Texture.js"),o=r("./app/utils/text.js");class a extends n.default{constructor({canvas:e}){super({element:".preloader",elements:{text:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),(0,o.split)({element:this.elements.text,expression:"<br>"}),(0,o.split)({element:this.elements.text,expression:"<br>"}),this.elements.titleSpans=this.elements.text.querySelectorAll("span span"),this.canvas=e,window.TEXTURES={},this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((e=>{const t=new i.Texture(this.canvas.gl,{generateMipmaps:!1}),r=new window.Image;r.crossOrigin="anonymouse",r.src=e,r.onload=()=>{t.image=r,this.onAssetLoaded()},window.TEXTURES[e]=t}))}onAssetLoaded(){this.length+=1;const e=Math.round(this.length/window.ASSETS.length*100);this.elements.numberText.innerText=e+"%",100===e&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.animateOut=s.default.timeline({delay:2}),this.animateOut.to(this.elements.titleSpans,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:1.5,ease:"expo.out",y:"100%"},"-=1.4"),this.animateOut.to(this.element,{duration:1.5,ease:"expo.out",scaleY:0,transformOrigin:"100% 100%"},"-=1"),this.animateOut.call((e=>this.emit("completed")))}))}destroy(){this.element.parentNode.removeChild(this.element)}}const l=a},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/lodash/each.js"),s=r.n(n),i=r("./app/pages/About/index.js"),o=r("./app/pages/Collections/index.js"),a=r("./app/pages/Detail/index.js"),l=r("./app/pages/Home/index.js"),u=r("./app/components/Canvas/index.js"),c=r("./app/components/Navigation.js"),h=r("./app/components/Preloader.js"),d=r("./node_modules/normalize-wheel/index.js"),p=r.n(d);new class{constructor(){this.createContent(),this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPages(),this.addLinkListeners(),this.addEventListeners(),this.onResize(),this.update()}createNavigation(){this.navigation=new c.default({template:this.template})}createPreloader(){this.preloader=new h.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new u.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new i.default,collections:new o.default,detail:new a.default,home:new l.default},this.page=this.pages[this.template],this.page.create()}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}onPreloaded(){this.preloader.destroy(),this.canvas.onPreloaded(),this.page.show()}async onChange({url:e,push:t=!0}){this.canvas.onChangeStart(),this.page.hide();const r=await window.fetch(e);if(200===r.status){const n=await r.text(),s=document.createElement("div");t&&window.history.pushState({},"",e),s.innerHTML=n;const i=s.querySelector(".content");this.template=i.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=i.innerHTML,this.canvas.onChange(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("error")}onResize(){this.canvas&&this.canvas.onResize&&this.canvas.onResize(),this.page&&this.page.onResize&&this.page.onResize()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const t=p()(e);this.page&&this.page.onWheel&&this.page.onWheel(t),this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t)}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");s()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:r}=e;this.onChange({url:r})}}))}}},"./app/pages/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Page.js");class s extends n.default{constructor(){super({elements:{wrapper:".about__wrapper"},element:".about",id:"about"})}}const i=s},"./app/pages/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Page.js");class s extends n.default{constructor(){super({element:".collections",id:"collections"})}}const i=s},"./app/pages/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./app/classes/Page.js"),s=r("./app/components/Button.js");class i extends n.default{constructor(){super({element:".detail",id:"detail",elements:{button:".detail__button"}})}create(){super.create(),this.link=new s.default(this.elements.button)}destroy(){super.destroy(),this.link.removeEventListeners()}}const o=i},"./app/pages/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./app/classes/Page.js"),s=r("./app/components/Button.js");class i extends n.default{constructor(){super({element:".home",elements:{button:".home__link",titles:".home__titles",gallery:".home_gallery",navigation:".navigation"},id:"home"})}create(){super.create(),this.link=new s.default(this.elements.button)}destroy(){super.destroy(),this.link.removeEventListeners()}}const o=i},"./app/utils/color.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{COLOR_BRIGHT_GRAY:()=>n,COLOR_QUARTER_SPANISH_WHITE:()=>s});const n="#37384c",s="#f9f1e7"},"./app/utils/text.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{splitChars:()=>i,split:()=>o,calculate:()=>a});var n=r("./node_modules/lodash/each.js"),s=r.n(n);function i({element:e}){const t=e.innerHTML.toString().trim().split("<br>");let r="";t.forEach((e=>{const t=e.split("").map((e=>" "===e?e:`<span>${e}</span>`)).join("");r+=`<span data-class="line">${t}</span><br>`})),e.innerHTML=r;return{chars:e.querySelectorAll("span span"),lines:e.querySelectorAll('[data-class="line"]')}}function o({element:e,expression:t=" ",append:r=!0}){const n=function(e,t){const r=e.split("<br>");let n=[];return s()(r,((e,r)=>{r>0&&n.push("<br>"),n=n.concat(e.split(t));let i=!1,o="";const a=[];s()(n,(e=>{i||!e.includes("<a")&&!e.includes("<strong")||(o="",i=!0),i&&(o+=` ${e}`),i&&(e.includes("/a>")||e.includes("/strong>"))&&(a.push(o),o=""),i||""!==o||a.push(e),i&&(e.includes("/a>")||e.includes("/strong>"))&&(i=!1)})),n=a})),n}(e.innerHTML.toString().trim(),t);let i="";s()(n,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");s()(t,((e,t)=>{i+=t>0?"<br>"+l(e):l(e)}))}else i+=l(e)})),e.innerHTML=i;const o=e.querySelectorAll("span");return r&&s()(o,(e=>{const t=1===e.textContent.length,r=""!==e.innerHTML.trim(),n="&"!==e.textContent,s="-"!==e.textContent;t&&r&&n&&s&&(e.innerHTML=`${e.textContent}&nbsp;`)})),o}function a(e){const t=[];let r=[],n=e[0].offsetTop;return s()(e,((s,i)=>{s.offsetTop===n&&r.push(s),s.offsetTop!==n&&(t.push(r),r=[],r.push(s),n=s.offsetTop),i+1===e.length&&t.push(r)})),t}function l(e){return""===(e=e.trim())||" "===e?e:"<br>"===e?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},n={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},s={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var r=[],n=e.replace(/\033\[(\d+)m/g,(function(e,t){var n=s[t];if(n)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===n[0]?n:'<span style="'+n+';">');var o=i[t];return o?(r.pop(),o):""})),o=r.length;return o>0&&(n+=Array(o+1).join("</span>")),n}function a(e){for(var t in s[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],s[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],s[90]="color:#"+e.darkgrey,n){var r=e[n[t]]||"000";s[t]="color:#"+r,t=parseInt(t),s[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var n in r){var s=e.hasOwnProperty(n)?e[n]:null;if(s){if("reset"===n){if("string"==typeof s&&(s=[s]),!Array.isArray(s)||0===s.length||s.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+n+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[n];s[0]||(s[0]=i[0]),1!==s.length&&s[1]||(s=[s[0]]).push(i[1]),s=s.slice(0,2)}else if("string"!=typeof s)throw new Error("The value of `"+n+"` property must be a hex string, e.g.: FF0000");t[n]=s}else t[n]=r[n]}a(t)},o.reset=function(){a(r)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return s}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=s,o.tags.close=i),o.reset()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,n){function s(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",s),r([].slice.call(arguments))}g(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&g(e,"error",t,r)}(e,s,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var s,i,o,u;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(s=l(e))>0&&o.length>s&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},s=c.bind(n);return s.listener=r,n.wrapFn=s,s}function d(e,t,r){var n=e._events;if(void 0===n)return[];var s=n[t];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(s):f(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function g(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(i){n.once&&e.removeEventListener(t,s),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var s="error"===e,i=this._events;if(void 0!==i)s=s&&void 0===i.error;else if(!s)return!1;if(s){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var u=l.length,c=f(l,u);for(r=0;r<u;++r)n(c[r],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,n,s,i,o;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,s=i;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var s,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(s=i[n])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>ye,default:()=>ye,_getBBox:()=>z,_createElement:()=>k,checkPrefix:()=>R});var n,s,i,o,a,l,u,c=r("./node_modules/gsap/gsap-core.js"),h={},d=180/Math.PI,p=Math.PI/180,f=Math.atan2,g=/([A-Z])/g,m=/(?:left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},_=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},b=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},x=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},D=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},w=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},E=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},C=function(e,t,r){return e.style[t]=r},A=function(e,t,r){return e.style.setProperty(t,r)},j=function(e,t,r){return e._gsap[t]=r},T=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},M=function(e,t,r,n,s){var i=e._gsap;i.scaleX=i.scaleY=r,i.renderTransform(s,i)},F=function(e,t,r,n,s){var i=e._gsap;i[t]=r,i.renderTransform(s,i)},S="transform",P=S+"Origin",k=function(e,t){var r=s.createElementNS?s.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):s.createElement(e);return r.style?r:s.createElement(e)},L=function e(t,r,n){var s=getComputedStyle(t);return s[r]||s.getPropertyValue(r.replace(g,"-$1").toLowerCase())||s.getPropertyValue(r)||!n&&e(t,R(r)||r,1)||""},O="O,Moz,ms,Ms,Webkit".split(","),R=function(e,t,r){var n=(t||a).style,s=5;if(e in n&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);s--&&!(O[s]+e in n););return s<0?null:(3===s?"ms":s>=0?O[s]:"")+e},q=function(){"undefined"!=typeof window&&window.document&&(n=window,s=n.document,i=s.documentElement,a=k("div")||{style:{}},k("div"),S=R(S),P=S+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!R("perspective"),o=1)},B=function e(t){var r,n=k("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(n),n.appendChild(this),this.style.display="block",t)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(r=this._gsapBBox());return s&&(o?s.insertBefore(this,o):s.appendChild(this)),i.removeChild(n),this.style.cssText=a,r},I=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},z=function(e){var t;try{t=e.getBBox()}catch(r){t=B.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===B||(t=B.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+I(e,["x","cx","x1"])||0,y:+I(e,["y","cy","y1"])||0,width:0,height:0}},N=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!z(e))},U=function(e,t){if(t){var r=e.style;t in h&&t!==P&&(t=S),r.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty(t.replace(g,"-$1").toLowerCase())):r.removeAttribute(t)}},H=function(e,t,r,n,s,i){var o=new c.PropTween(e._pt,t,r,0,1,i?E:w);return e._pt=o,o.b=n,o.e=s,e._props.push(r),o},V={deg:1,rad:1,turn:1},X=function e(t,r,n,i){var o,l,u,d,p=parseFloat(n)||0,f=(n+"").trim().substr((p+"").length)||"px",g=a.style,v=m.test(r),y="svg"===t.tagName.toLowerCase(),_=(y?"client":"offset")+(v?"Width":"Height"),b=100,x="px"===i,D="%"===i;return i===f||!p||V[i]||V[f]?p:("px"!==f&&!x&&(p=e(t,r,n,"px")),d=t.getCTM&&N(t),!D&&"%"!==f||!h[r]&&!~r.indexOf("adius")?(g[v?"width":"height"]=b+(x?f:i),l=~r.indexOf("adius")||"em"===i&&t.appendChild&&!y?t:t.parentNode,d&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==s&&l.appendChild||(l=s.body),(u=l._gsap)&&D&&u.width&&v&&u.time===c._ticker.time?(0,c._round)(p/u.width*b):((D||"%"===f)&&(g.position=L(t,"position")),l===t&&(g.position="static"),l.appendChild(a),o=a[_],l.removeChild(a),g.position="absolute",v&&D&&((u=(0,c._getCache)(l)).time=c._ticker.time,u.width=l[_]),(0,c._round)(x?o*p/b:o&&p?b/o*p:0))):(o=d?t.getBBox()[v?"width":"height"]:t[_],(0,c._round)(D?p/o*b:p/100*o)))},Y=function(e,t,r,n){var s;return o||q(),t in y&&"transform"!==t&&~(t=y[t]).indexOf(",")&&(t=t.split(",")[0]),h[t]&&"transform"!==t?(s=ne(e,n),s="transformOrigin"!==t?s[t]:s.svg?s.origin:se(L(e,P))+" "+s.zOrigin+"px"):(!(s=e.style[t])||"auto"===s||n||~(s+"").indexOf("calc("))&&(s=Z[t]&&Z[t](e,t,r)||L(e,t)||(0,c._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(s+"").trim().indexOf(" ")?X(e,t,s,r)+r:s},G=function(e,t,r,n){if(!r||"none"===r){var s=R(t,e,1),i=s&&L(e,s,1);i&&i!==r?(t=s,r=i):"borderColor"===t&&(r=L(e,"borderTopColor"))}var o,a,l,u,h,d,p,f,g,m,v,y,_=new c.PropTween(this._pt,e.style,t,0,1,c._renderComplexString),b=0,x=0;if(_.b=r,_.e=n,r+="","auto"===(n+="")&&(e.style[t]=n,n=L(e,t)||n,e.style[t]=r),o=[r,n],(0,c._colorStringFilter)(o),n=o[1],l=(r=o[0]).match(c._numWithUnitExp)||[],(n.match(c._numWithUnitExp)||[]).length){for(;a=c._numWithUnitExp.exec(n);)p=a[0],g=n.substring(b,a.index),h?h=(h+1)%5:"rgba("!==g.substr(-5)&&"hsla("!==g.substr(-5)||(h=1),p!==(d=l[x++]||"")&&(u=parseFloat(d)||0,v=d.substr((u+"").length),(y="="===p.charAt(1)?+(p.charAt(0)+"1"):0)&&(p=p.substr(2)),f=parseFloat(p),m=p.substr((f+"").length),b=c._numWithUnitExp.lastIndex-m.length,m||(m=m||c._config.units[t]||v,b===n.length&&(n+=m,_.e+=m)),v!==m&&(u=X(e,t,d,m)||0),_._pt={_next:_._pt,p:g||1===x?g:",",s:u,c:y?y*f:f-u,m:h&&h<4||"zIndex"===t?Math.round:0});_.c=b<n.length?n.substring(b,n.length):""}else _.r="display"===t&&"none"===n?E:w;return c._relExp.test(n)&&(_.e=0),this._pt=_,_},W={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},K=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,n,s,i=t.t,o=i.style,a=t.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(s=(a=a.split(",")).length;--s>-1;)r=a[s],h[r]&&(n=1,r="transformOrigin"===r?P:S),U(i,r);n&&(U(i,S),l&&(l.svg&&i.removeAttribute("transform"),ne(i,1),l.uncache=1))}},Z={clearProps:function(e,t,r,n,s){if("isFromStart"!==s.data){var i=e._pt=new c.PropTween(e._pt,t,r,0,0,K);return i.u=n,i.pr=-10,i.tween=s,e._props.push(r),1}}},$=[1,0,0,1,0,0],Q={},J=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},ee=function(e){var t=L(e,S);return J(t)?$:t.substr(7).match(c._numExp).map(c._round)},te=function(e,t){var r,n,s,o,a=e._gsap||(0,c._getCache)(e),l=e.style,u=ee(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(s=e.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?$:u:(u!==$||e.offsetParent||e===i||a.svg||(s=l.display,l.display="block",(r=e.parentNode)&&e.offsetParent||(o=1,n=e.nextSibling,i.appendChild(e)),u=ee(e),s?l.display=s:U(e,"display"),o&&(n?r.insertBefore(e,n):r?r.appendChild(e):i.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},re=function(e,t,r,n,s,i){var o,a,l,u=e._gsap,c=s||te(e,!0),h=u.xOrigin||0,d=u.yOrigin||0,p=u.xOffset||0,f=u.yOffset||0,g=c[0],m=c[1],v=c[2],y=c[3],_=c[4],b=c[5],x=t.split(" "),D=parseFloat(x[0])||0,w=parseFloat(x[1])||0;r?c!==$&&(a=g*y-m*v)&&(l=D*(-m/a)+w*(g/a)-(g*b-m*_)/a,D=D*(y/a)+w*(-v/a)+(v*b-y*_)/a,w=l):(D=(o=z(e)).x+(~x[0].indexOf("%")?D/100*o.width:D),w=o.y+(~(x[1]||x[0]).indexOf("%")?w/100*o.height:w)),n||!1!==n&&u.smooth?(_=D-h,b=w-d,u.xOffset=p+(_*g+b*v)-_,u.yOffset=f+(_*m+b*y)-b):u.xOffset=u.yOffset=0,u.xOrigin=D,u.yOrigin=w,u.smooth=!!n,u.origin=t,u.originIsAbsolute=!!r,e.style[P]="0px 0px",i&&(H(i,u,"xOrigin",h,D),H(i,u,"yOrigin",d,w),H(i,u,"xOffset",p,u.xOffset),H(i,u,"yOffset",f,u.yOffset)),e.setAttribute("data-svg-origin",D+" "+w)},ne=function(e,t){var r=e._gsap||new c.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var n,s,i,o,a,l,h,g,m,v,y,_,b,x,D,w,E,C,A,j,T,M,F,k,O,R,q,B,I,z,U,H,V=e.style,X=r.scaleX<0,Y="px",G="deg",W=L(e,P)||"0";return n=s=i=l=h=g=m=v=y=0,o=a=1,r.svg=!(!e.getCTM||!N(e)),x=te(e,r.svg),r.svg&&(k=(!r.uncache||"0px 0px"===W)&&!t&&e.getAttribute("data-svg-origin"),re(e,k||W,!!k||r.originIsAbsolute,!1!==r.smooth,x)),_=r.xOrigin||0,b=r.yOrigin||0,x!==$&&(C=x[0],A=x[1],j=x[2],T=x[3],n=M=x[4],s=F=x[5],6===x.length?(o=Math.sqrt(C*C+A*A),a=Math.sqrt(T*T+j*j),l=C||A?f(A,C)*d:0,(m=j||T?f(j,T)*d+l:0)&&(a*=Math.abs(Math.cos(m*p))),r.svg&&(n-=_-(_*C+b*j),s-=b-(_*A+b*T))):(H=x[6],z=x[7],q=x[8],B=x[9],I=x[10],U=x[11],n=x[12],s=x[13],i=x[14],h=(D=f(H,I))*d,D&&(k=M*(w=Math.cos(-D))+q*(E=Math.sin(-D)),O=F*w+B*E,R=H*w+I*E,q=M*-E+q*w,B=F*-E+B*w,I=H*-E+I*w,U=z*-E+U*w,M=k,F=O,H=R),g=(D=f(-j,I))*d,D&&(w=Math.cos(-D),U=T*(E=Math.sin(-D))+U*w,C=k=C*w-q*E,A=O=A*w-B*E,j=R=j*w-I*E),l=(D=f(A,C))*d,D&&(k=C*(w=Math.cos(D))+A*(E=Math.sin(D)),O=M*w+F*E,A=A*w-C*E,F=F*w-M*E,C=k,M=O),h&&Math.abs(h)+Math.abs(l)>359.9&&(h=l=0,g=180-g),o=(0,c._round)(Math.sqrt(C*C+A*A+j*j)),a=(0,c._round)(Math.sqrt(F*F+H*H)),D=f(M,F),m=Math.abs(D)>2e-4?D*d:0,y=U?1/(U<0?-U:U):0),r.svg&&(k=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!J(L(e,S)),k&&e.setAttribute("transform",k))),Math.abs(m)>90&&Math.abs(m)<270&&(X?(o*=-1,m+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,m+=m<=0?180:-180)),r.x=n-((r.xPercent=n&&(r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-n)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+Y,r.y=s-((r.yPercent=s&&(r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-s)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+Y,r.z=i+Y,r.scaleX=(0,c._round)(o),r.scaleY=(0,c._round)(a),r.rotation=(0,c._round)(l)+G,r.rotationX=(0,c._round)(h)+G,r.rotationY=(0,c._round)(g)+G,r.skewX=m+G,r.skewY=v+G,r.transformPerspective=y+Y,(r.zOrigin=parseFloat(W.split(" ")[2])||0)&&(V[P]=se(W)),r.xOffset=r.yOffset=0,r.force3D=c._config.force3D,r.renderTransform=r.svg?he:u?ce:oe,r.uncache=0,r},se=function(e){return(e=e.split(" "))[0]+" "+e[1]},ie=function(e,t,r){var n=(0,c.getUnit)(t);return(0,c._round)(parseFloat(t)+parseFloat(X(e,"x",r+"px",n)))+n},oe=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ce(e,t)},ae="0deg",le="0px",ue=") ",ce=function(e,t){var r=t||this,n=r.xPercent,s=r.yPercent,i=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,c=r.rotationX,h=r.skewX,d=r.skewY,f=r.scaleX,g=r.scaleY,m=r.transformPerspective,v=r.force3D,y=r.target,_=r.zOrigin,b="",x="auto"===v&&e&&1!==e||!0===v;if(_&&(c!==ae||u!==ae)){var D,w=parseFloat(u)*p,E=Math.sin(w),C=Math.cos(w);w=parseFloat(c)*p,D=Math.cos(w),i=ie(y,i,E*D*-_),o=ie(y,o,-Math.sin(w)*-_),a=ie(y,a,C*D*-_+_)}m!==le&&(b+="perspective("+m+ue),(n||s)&&(b+="translate("+n+"%, "+s+"%) "),(x||i!==le||o!==le||a!==le)&&(b+=a!==le||x?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+ue),l!==ae&&(b+="rotate("+l+ue),u!==ae&&(b+="rotateY("+u+ue),c!==ae&&(b+="rotateX("+c+ue),h===ae&&d===ae||(b+="skew("+h+", "+d+ue),1===f&&1===g||(b+="scale("+f+", "+g+ue),y.style[S]=b||"translate(0, 0)"},he=function(e,t){var r,n,s,i,o,a=t||this,l=a.xPercent,u=a.yPercent,h=a.x,d=a.y,f=a.rotation,g=a.skewX,m=a.skewY,v=a.scaleX,y=a.scaleY,_=a.target,b=a.xOrigin,x=a.yOrigin,D=a.xOffset,w=a.yOffset,E=a.forceCSS,C=parseFloat(h),A=parseFloat(d);f=parseFloat(f),g=parseFloat(g),(m=parseFloat(m))&&(g+=m=parseFloat(m),f+=m),f||g?(f*=p,g*=p,r=Math.cos(f)*v,n=Math.sin(f)*v,s=Math.sin(f-g)*-y,i=Math.cos(f-g)*y,g&&(m*=p,o=Math.tan(g-m),s*=o=Math.sqrt(1+o*o),i*=o,m&&(o=Math.tan(m),r*=o=Math.sqrt(1+o*o),n*=o)),r=(0,c._round)(r),n=(0,c._round)(n),s=(0,c._round)(s),i=(0,c._round)(i)):(r=v,i=y,n=s=0),(C&&!~(h+"").indexOf("px")||A&&!~(d+"").indexOf("px"))&&(C=X(_,"x",h,"px"),A=X(_,"y",d,"px")),(b||x||D||w)&&(C=(0,c._round)(C+b-(b*r+x*s)+D),A=(0,c._round)(A+x-(b*n+x*i)+w)),(l||u)&&(o=_.getBBox(),C=(0,c._round)(C+l/100*o.width),A=(0,c._round)(A+u/100*o.height)),o="matrix("+r+","+n+","+s+","+i+","+C+","+A+")",_.setAttribute("transform",o),E&&(_.style[S]=o)},de=function(e,t,r,n,s,i){var o,a,l=360,u=(0,c._isString)(s),h=parseFloat(s)*(u&&~s.indexOf("rad")?d:1),p=i?h*i:h-n,f=n+p+"deg";return u&&("short"===(o=s.split("_")[1])&&(p%=l)!==p%180&&(p+=p<0?l:-360),"cw"===o&&p<0?p=(p+36e9)%l-~~(p/l)*l:"ccw"===o&&p>0&&(p=(p-36e9)%l-~~(p/l)*l)),e._pt=a=new c.PropTween(e._pt,t,r,n,p,b),a.e=f,a.u="deg",e._props.push(r),a},pe=function(e,t){for(var r in t)e[r]=t[r];return e},fe=function(e,t,r){var n,s,i,o,a,l,u,d=pe({},r._gsap),p=r.style;for(s in d.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[S]=t,n=ne(r,1),U(r,S),r.setAttribute("transform",i)):(i=getComputedStyle(r)[S],p[S]=t,n=ne(r,1),p[S]=i),h)(i=d[s])!==(o=n[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(a=(0,c.getUnit)(i)!==(u=(0,c.getUnit)(o))?X(r,s,i,u):parseFloat(i),l=parseFloat(o),e._pt=new c.PropTween(e._pt,n,s,a,l-a,_),e._pt.u=u||0,e._props.push(s));pe(n,d)};(0,c._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",n="Right",s="Bottom",i="Left",o=(t<3?[r,n,s,i]:[r+i,r+n,s+n,s+i]).map((function(r){return t<2?e+r:"border"+r+e}));Z[t>1?"border"+e:e]=function(e,t,r,n,s){var i,a;if(arguments.length<4)return i=o.map((function(t){return Y(e,t,r)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(n+"").split(" "),a={},o.forEach((function(e,t){return a[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,a,s)}}));var ge,me,ve,ye={name:"css",register:q,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,n,s){var i,a,l,u,d,p,f,g,m,b,w,E,C,A,j,T,M,F,P,k=this._props,L=e.style,O=r.vars.startAt;for(f in o||q(),t)if("autoRound"!==f&&(a=t[f],!c._plugins[f]||!(0,c._checkPlugin)(f,t,r,n,e,s)))if(d=typeof a,p=Z[f],"function"===d&&(d=typeof(a=a.call(r,n,e,s))),"string"===d&&~a.indexOf("random(")&&(a=(0,c._replaceRandom)(a)),p)p(this,e,f,a,r)&&(j=1);else if("--"===f.substr(0,2))i=(getComputedStyle(e).getPropertyValue(f)+"").trim(),a+="",c._colorExp.lastIndex=0,c._colorExp.test(i)||(g=(0,c.getUnit)(i),m=(0,c.getUnit)(a)),m?g!==m&&(i=X(e,f,i,m)+m):g&&(a+=g),this.add(L,"setProperty",i,a,n,s,0,0,f),k.push(f);else if("undefined"!==d){if(O&&f in O?(i="function"==typeof O[f]?O[f].call(r,n,e,s):O[f],f in c._config.units&&!(0,c.getUnit)(i)&&(i+=c._config.units[f]),"="===(i+"").charAt(1)&&(i=Y(e,f))):i=Y(e,f),u=parseFloat(i),(b="string"===d&&"="===a.charAt(1)?+(a.charAt(0)+"1"):0)&&(a=a.substr(2)),l=parseFloat(a),f in y&&("autoAlpha"===f&&(1===u&&"hidden"===Y(e,"visibility")&&l&&(u=0),H(this,L,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=y[f]).indexOf(",")&&(f=f.split(",")[0])),w=f in h)if(E||((C=e._gsap).renderTransform&&!t.parseTransform||ne(e,t.parseTransform),A=!1!==t.smoothOrigin&&C.smooth,(E=this._pt=new c.PropTween(this._pt,L,S,0,1,C.renderTransform,C,0,-1)).dep=1),"scale"===f)this._pt=new c.PropTween(this._pt,C,"scaleY",C.scaleY,(b?b*l:l-C.scaleY)||0),k.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M=void 0,F=void 0,P=void 0,M=(T=a).split(" "),F=M[0],P=M[1]||"50%","top"!==F&&"bottom"!==F&&"left"!==P&&"right"!==P||(T=F,F=P,P=T),M[0]=W[F]||F,M[1]=W[P]||P,a=M.join(" "),C.svg?re(e,a,0,A,0,this):((m=parseFloat(a.split(" ")[2])||0)!==C.zOrigin&&H(this,C,"zOrigin",C.zOrigin,m),H(this,L,f,se(i),se(a)));continue}if("svgOrigin"===f){re(e,a,1,A,0,this);continue}if(f in Q){de(this,C,f,u,a,b);continue}if("smoothOrigin"===f){H(this,C,"smooth",C.smooth,a);continue}if("force3D"===f){C[f]=a;continue}if("transform"===f){fe(this,a,e);continue}}else f in L||(f=R(f)||f);if(w||(l||0===l)&&(u||0===u)&&!v.test(a)&&f in L)l||(l=0),(g=(i+"").substr((u+"").length))!==(m=(0,c.getUnit)(a)||(f in c._config.units?c._config.units[f]:g))&&(u=X(e,f,i,m)),this._pt=new c.PropTween(this._pt,w?C:L,f,u,b?b*l:l-u,w||"px"!==m&&"zIndex"!==f||!1===t.autoRound?_:D),this._pt.u=m||0,g!==m&&(this._pt.b=i,this._pt.r=x);else if(f in L)G.call(this,e,f,i,a);else{if(!(f in e)){(0,c._missingPlugin)(f,a);continue}this.add(e,f,i||e[f],a,n,s)}k.push(f)}j&&(0,c._sortPropTweensByPriority)(this)},get:Y,aliases:y,getSetter:function(e,t,r){var n=y[t];return n&&n.indexOf(",")<0&&(t=n),t in h&&t!==P&&(e._gsap.x||Y(e,"x"))?r&&l===r?"scale"===t?T:j:(l=r||{})&&("scale"===t?M:F):e.style&&!(0,c._isUndefined)(e.style[t])?C:~t.indexOf("-")?A:(0,c._getSetter)(e,t)},core:{_removeProperty:U,_getMatrix:te}};c.gsap.utils.checkPrefix=R,ge="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",me="rotation,rotationX,rotationY,skewX,skewY",ve=(0,c._forEachName)(ge+","+me+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){h[e]=1})),(0,c._forEachName)(me,(function(e){c._config.units[e]="deg",Q[e]=1})),y[ve[13]]=ge+","+me,(0,c._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");y[t[1]]=ve[t[0]]})),(0,c._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){c._config.units[e]="px"})),c.gsap.registerPlugin(ye)},"./node_modules/gsap/CSSRulePlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSRulePlugin:()=>h,default:()=>h});var n,s,i,o,a=function(){return"undefined"!=typeof window},l=function(){return n||a()&&(n=window.gsap)&&n.registerPlugin&&n},u=function(){return s||(c(),o||console.warn("Please gsap.registerPlugin(CSSPlugin, CSSRulePlugin)")),s},c=function(e){n=e||l(),a()&&(window,i=document),n&&(o=n.plugins.css)&&(s=1)},h={version:"3.7.1",name:"cssRule",init:function(e,t,r,n,s){if(!u()||void 0===e.cssText)return!1;var a=e._gsProxy=e._gsProxy||i.createElement("div");this.ss=e,this.style=a.style,a.style.cssText=e.cssText,o.prototype.init.call(this,a,t,r,n,s)},render:function(e,t){for(var r,n=t._pt,s=t.style,i=t.ss;n;)n.r(e,n.d),n=n._next;for(r=s.length;--r>-1;)i[s[r]]=s[s[r]]},getRule:function(e){u();var t,r,n,s,o=i.all?"rules":"cssRules",a=i.styleSheets,l=a.length,c=":"===e.charAt(0);for(e=(c?"":",")+e.split("::").join(":").toLowerCase()+",",c&&(s=[]);l--;){try{if(!(r=a[l][o]))continue;t=r.length}catch(e){console.warn(e);continue}for(;--t>-1;)if((n=r[t]).selectorText&&-1!==(","+n.selectorText.split("::").join(":").toLowerCase()+",").indexOf(e)){if(!c)return n.style;s.push(n.style)}}return s},register:c};l()&&n.registerPlugin(h)},"./node_modules/gsap/Draggable.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Draggable:()=>Ee,default:()=>Ee});var n=r("./node_modules/gsap/utils/matrix.js");var s,i,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C=function(){return"undefined"!=typeof window},A=function(){return s||C()&&(s=window.gsap)&&s.registerPlugin&&s},j=function(e){return"function"==typeof e},T=function(e){return"object"==typeof e},M=function(e){return void 0===e},F=function(){return!1},S="transform",P="transformOrigin",k=function(e){return Math.round(1e4*e)/1e4},L=Array.isArray,O=function(e,t){var r=o.createElementNS?o.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):o.createElement(e);return r.style?r:o.createElement(e)},R=180/Math.PI,q=1e20,B=new n.Matrix2D,I=Date.now||function(){return(new Date).getTime()},z=[],N={},U=0,H=/^(?:a|input|textarea|button|select)$/i,V=0,X={},Y={},G=function(e,t){var r,n={};for(r in e)n[r]=t?e[r]*t:e[r];return n},W=function e(t,r){for(var n,s=t.length;s--;)r?t[s].style.touchAction=r:t[s].style.removeProperty("touch-action"),(n=t[s].children)&&n.length&&e(n,r)},K=function(){return z.forEach((function(e){return e()}))},Z=function(){return!z.length&&s.ticker.remove(K)},$=function(e){for(var t=z.length;t--;)z[t]===e&&z.splice(t,1);s.to(Z,{overwrite:!0,delay:15,duration:0,onComplete:Z,data:"_draggable"})},Q=function(e,t,r,n){if(e.addEventListener){var s=m[t];n=n||(f?{passive:!1}:null),e.addEventListener(s||t,r,n),s&&t!==s&&e.addEventListener(t,r,n)}},J=function(e,t,r){if(e.removeEventListener){var n=m[t];e.removeEventListener(n||t,r),n&&t!==n&&e.removeEventListener(t,r)}},ee=function(e){e.preventDefault&&e.preventDefault(),e.preventManipulation&&e.preventManipulation()},te=function e(t){y=t.touches&&v<t.touches.length,J(t.target,"touchend",e)},re=function(e){y=e.touches&&v<e.touches.length,Q(e.target,"touchend",te)},ne=function(e){return i.pageYOffset||e.scrollTop||e.documentElement.scrollTop||e.body.scrollTop||0},se=function(e){return i.pageXOffset||e.scrollLeft||e.documentElement.scrollLeft||e.body.scrollLeft||0},ie=function e(t,r){Q(t,"scroll",r),ae(t.parentNode)||e(t.parentNode,r)},oe=function e(t,r){J(t,"scroll",r),ae(t.parentNode)||e(t.parentNode,r)},ae=function(e){return!(e&&e!==a&&9!==e.nodeType&&e!==o.body&&e!==i&&e.nodeType&&e.parentNode)},le=function(e,t){var r="x"===t?"Width":"Height",n="scroll"+r,s="client"+r;return Math.max(0,ae(e)?Math.max(a[n],l[n])-(i["inner"+r]||a[s]||l[s]):e[n]-e[s])},ue=function e(t,r){var n=le(t,"x"),s=le(t,"y");ae(t)?t=Y:e(t.parentNode,r),t._gsMaxScrollX=n,t._gsMaxScrollY=s,r||(t._gsScrollX=t.scrollLeft||0,t._gsScrollY=t.scrollTop||0)},ce=function(e,t,r){var n=e.style;n&&(M(n[t])&&(t=d(t,e)||t),null==r?n.removeProperty&&n.removeProperty(t.replace(/([A-Z])/g,"-$1").toLowerCase()):n[t]=r)},he=function(e){return i.getComputedStyle(e instanceof Element?e:e.host||(e.parentNode||{}).host||e)},de={},pe=function(e){if(e===i)return de.left=de.top=0,de.width=de.right=a.clientWidth||e.innerWidth||l.clientWidth||0,de.height=de.bottom=(e.innerHeight||0)-20<a.clientHeight?a.clientHeight:e.innerHeight||l.clientHeight||0,de;var t=e.ownerDocument||o,r=M(e.pageX)?e.nodeType||M(e.left)||M(e.top)?p(e)[0].getBoundingClientRect():e:{left:e.pageX-se(t),top:e.pageY-ne(t),right:e.pageX-se(t)+1,bottom:e.pageY-ne(t)+1};return M(r.right)&&!M(r.width)?(r.right=r.left+r.width,r.bottom=r.top+r.height):M(r.width)&&(r={width:r.right-r.left,height:r.bottom-r.top,right:r.right,left:r.left,bottom:r.bottom,top:r.top}),r},fe=function(e,t,r){var n,s=e.vars,i=s[r],o=e._listeners[t];return j(i)&&(n=i.apply(s.callbackScope||e,s[r+"Params"]||[e.pointerEvent])),o&&!1===e.dispatchEvent(t)&&(n=!1),n},ge=function(e,t){var r,n,s,o=p(e)[0];return o.nodeType||o===i?ve(o,t):M(e.left)?{left:n=e.min||e.minX||e.minRotation||0,top:r=e.min||e.minY||0,width:(e.max||e.maxX||e.maxRotation||0)-n,height:(e.max||e.maxY||0)-r}:(s={x:0,y:0},{left:e.left-s.x,top:e.top-s.y,width:e.width,height:e.height})},me={},ve=function(e,t){t=p(t)[0];var r,s,a,l,u,c,h,d,f,g,m,v,y,_,b=e.getBBox&&e.ownerSVGElement,x=e.ownerDocument||o;if(e===i)a=ne(x),s=(r=se(x))+(x.documentElement.clientWidth||e.innerWidth||x.body.clientWidth||0),l=a+((e.innerHeight||0)-20<x.documentElement.clientHeight?x.documentElement.clientHeight:e.innerHeight||x.body.clientHeight||0);else{if(t===i||M(t))return e.getBoundingClientRect();r=a=0,b?(m=(g=e.getBBox()).width,v=g.height):(e.viewBox&&(g=e.viewBox.baseVal)&&(r=g.x||0,a=g.y||0,m=g.width,v=g.height),m||(g="border-box"===(y=he(e)).boxSizing,m=(parseFloat(y.width)||e.clientWidth||0)+(g?0:parseFloat(y.borderLeftWidth)+parseFloat(y.borderRightWidth)),v=(parseFloat(y.height)||e.clientHeight||0)+(g?0:parseFloat(y.borderTopWidth)+parseFloat(y.borderBottomWidth)))),s=m,l=v}return e===t?{left:r,top:a,width:s-r,height:l-a}:(c=(u=(0,n.getGlobalMatrix)(t,!0).multiply((0,n.getGlobalMatrix)(e))).apply({x:r,y:a}),h=u.apply({x:s,y:a}),d=u.apply({x:s,y:l}),f=u.apply({x:r,y:l}),r=Math.min(c.x,h.x,d.x,f.x),a=Math.min(c.y,h.y,d.y,f.y),{left:r+((_=t.parentNode||{}).scrollLeft||0),top:a+(_.scrollTop||0),width:Math.max(c.x,h.x,d.x,f.x)-r,height:Math.max(c.y,h.y,d.y,f.y)-a})},ye=function(e,t,r,n,s,i){var o,a,l,u={};if(t)if(1!==s&&t instanceof Array){if(u.end=o=[],l=t.length,T(t[0]))for(a=0;a<l;a++)o[a]=G(t[a],s);else for(a=0;a<l;a++)o[a]=t[a]*s;r+=1.1,n-=1.1}else j(t)?u.end=function(r){var n,i,o=t.call(e,r);if(1!==s)if(T(o)){for(i in n={},o)n[i]=o[i]*s;o=n}else o*=s;return o}:u.end=t;return(r||0===r)&&(u.max=r),(n||0===n)&&(u.min=n),i&&(u.velocity=0),u},_e=function e(t){var r;return!(!t||!t.getAttribute||t===l)&&(!("true"!==(r=t.getAttribute("data-clickable"))&&("false"===r||!t.onclick&&!H.test(t.nodeName+"")&&"true"!==t.getAttribute("contentEditable")))||e(t.parentNode))},be=function(e,t){for(var r,n=e.length;n--;)(r=e[n]).ondragstart=r.onselectstart=t?null:F,s.set(r,{lazy:!0,userSelect:t?"text":"none"})},xe=function e(t){return"fixed"===he(t).position||((t=t.parentNode)&&1===t.nodeType?e(t):void 0)},De=function(e,t){e=s.utils.toArray(e)[0],t=t||{};var r,n,i,o,a,l,u=document.createElement("div"),c=u.style,h=e.firstChild,d=0,p=0,f=e.scrollTop,g=e.scrollLeft,m=e.scrollWidth,v=e.scrollHeight,y=0,_=0,b=0;w&&!1!==t.force3D?(a="translate3d(",l="px,0px)"):S&&(a="translate(",l="px)"),this.scrollTop=function(e,t){if(!arguments.length)return-this.top();this.top(-e,t)},this.scrollLeft=function(e,t){if(!arguments.length)return-this.left();this.left(-e,t)},this.left=function(r,n){if(!arguments.length)return-(e.scrollLeft+p);var i=e.scrollLeft-g,o=p;if((i>2||i<-2)&&!n)return g=e.scrollLeft,s.killTweensOf(this,{left:1,scrollLeft:1}),this.left(-g),void(t.onKill&&t.onKill());(r=-r)<0?(p=r-.5|0,r=0):r>_?(p=r-_|0,r=_):p=0,(p||o)&&(this._skip||(c[S]=a+-p+"px,"+-d+l),p+y>=0&&(c.paddingRight=p+y+"px")),e.scrollLeft=0|r,g=e.scrollLeft},this.top=function(r,n){if(!arguments.length)return-(e.scrollTop+d);var i=e.scrollTop-f,o=d;if((i>2||i<-2)&&!n)return f=e.scrollTop,s.killTweensOf(this,{top:1,scrollTop:1}),this.top(-f),void(t.onKill&&t.onKill());(r=-r)<0?(d=r-.5|0,r=0):r>b?(d=r-b|0,r=b):d=0,(d||o)&&(this._skip||(c[S]=a+-p+"px,"+-d+l)),e.scrollTop=0|r,f=e.scrollTop},this.maxScrollTop=function(){return b},this.maxScrollLeft=function(){return _},this.disable=function(){for(h=u.firstChild;h;)o=h.nextSibling,e.appendChild(h),h=o;e===u.parentNode&&e.removeChild(u)},this.enable=function(){if((h=e.firstChild)!==u){for(;h;)o=h.nextSibling,u.appendChild(h),h=o;e.appendChild(u),this.calibrate()}},this.calibrate=function(t){var s,o,a,l=e.clientWidth===r;f=e.scrollTop,g=e.scrollLeft,l&&e.clientHeight===n&&u.offsetHeight===i&&m===e.scrollWidth&&v===e.scrollHeight&&!t||((d||p)&&(o=this.left(),a=this.top(),this.left(-e.scrollLeft),this.top(-e.scrollTop)),s=he(e),l&&!t||(c.display="block",c.width="auto",c.paddingRight="0px",(y=Math.max(0,e.scrollWidth-e.clientWidth))&&(y+=parseFloat(s.paddingLeft)+(E?parseFloat(s.paddingRight):0))),c.display="inline-block",c.position="relative",c.overflow="visible",c.verticalAlign="top",c.boxSizing="content-box",c.width="100%",c.paddingRight=y+"px",E&&(c.paddingBottom=s.paddingBottom),r=e.clientWidth,n=e.clientHeight,m=e.scrollWidth,v=e.scrollHeight,_=e.scrollWidth-r,b=e.scrollHeight-n,i=u.offsetHeight,c.display="block",(o||a)&&(this.left(o),this.top(a)))},this.content=u,this.element=e,this._skip=!1,this.enable()},we=function(e){if(C()&&document.body){var t=window&&window.navigator;i=window,o=document,a=o.documentElement,l=o.body,u=O("div"),D=!!window.PointerEvent,(c=O("div")).style.cssText="visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab",x="grab"===c.style.cursor?"grab":"move",_=t&&-1!==t.userAgent.toLowerCase().indexOf("android"),g="ontouchstart"in a&&"orientation"in i||t&&(t.MaxTouchPoints>0||t.msMaxTouchPoints>0),n=O("div"),v=O("div"),y=v.style,j=l,y.display="inline-block",y.position="relative",n.style.cssText=v.innerHTML="width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden",n.appendChild(v),j.appendChild(n),r=v.offsetHeight+18>n.scrollHeight,j.removeChild(n),E=r,m=function(e){for(var t=e.split(","),r=(("onpointerdown"in u?"pointerdown,pointermove,pointerup,pointercancel":"onmspointerdown"in u?"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel":e).split(",")),n={},s=4;--s>-1;)n[t[s]]=r[s],n[r[s]]=t[s];try{a.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){f=1}}))}catch(e){}return n}("touchstart,touchmove,touchend,touchcancel"),Q(o,"touchcancel",F),Q(i,"touchmove",F),l&&l.addEventListener("touchstart",F),Q(o,"contextmenu",(function(){for(var e in N)N[e].isPressed&&N[e].endDrag()})),s=h=A()}var r,n,v,y,j;s?(b=s.plugins.inertia,d=s.utils.checkPrefix,S=d(S),P=d(P),p=s.utils.toArray,w=!!d("perspective")):e&&console.warn("Please gsap.registerPlugin(Draggable)")},Ee=function(e){var t,r;function l(t,r){var u;u=e.call(this)||this,h||we(1),t=p(t)[0],b||(b=s.plugins.inertia),u.vars=r=G(r||{}),u.target=t,u.x=u.y=u.rotation=0,u.dragResistance=parseFloat(r.dragResistance)||0,u.edgeResistance=isNaN(r.edgeResistance)?1:parseFloat(r.edgeResistance)||0,u.lockAxis=r.lockAxis,u.autoScroll=r.autoScroll||0,u.lockedAxis=null,u.allowEventDefault=!!r.allowEventDefault,s.getProperty(t,"x");var d,f,w,E,C,A,F,S,O,H,Z,te,le,de,ve,Ee,Ce,Ae,je,Te,Me,Fe,Se,Pe,ke,Le,Oe,Re,qe,Be,Ie,ze,Ne=(r.type||"x,y").toLowerCase(),Ue=~Ne.indexOf("x")||~Ne.indexOf("y"),He=-1!==Ne.indexOf("rotation"),Ve=He?"rotation":Ue?"x":"left",Xe=Ue?"y":"top",Ye=!(!~Ne.indexOf("x")&&!~Ne.indexOf("left")&&"scroll"!==Ne),Ge=!(!~Ne.indexOf("y")&&!~Ne.indexOf("top")&&"scroll"!==Ne),We=r.minimumMovement||2,Ke=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(u),Ze=p(r.trigger||r.handle||t),$e={},Qe=0,Je=!1,et=r.autoScrollMarginTop||40,tt=r.autoScrollMarginRight||40,rt=r.autoScrollMarginBottom||40,nt=r.autoScrollMarginLeft||40,st=r.clickableTest||_e,it=0,ot=t._gsap||s.core.getCache(t),at=xe(t),lt=function(e,r){return parseFloat(ot.get(t,e,r))},ut=t.ownerDocument||o,ct=function(e){return ee(e),e.stopImmediatePropagation&&e.stopImmediatePropagation(),!1},ht=function e(r){if(Ke.autoScroll&&Ke.isDragging&&(Je||Ce)){var n,s,o,l,u,c,h,d,p=t,g=15*Ke.autoScroll;for(Je=!1,Y.scrollTop=null!=i.pageYOffset?i.pageYOffset:null!=ut.documentElement.scrollTop?ut.documentElement.scrollTop:ut.body.scrollTop,Y.scrollLeft=null!=i.pageXOffset?i.pageXOffset:null!=ut.documentElement.scrollLeft?ut.documentElement.scrollLeft:ut.body.scrollLeft,l=Ke.pointerX-Y.scrollLeft,u=Ke.pointerY-Y.scrollTop;p&&!s;)n=(s=ae(p.parentNode))?Y:p.parentNode,o=s?{bottom:Math.max(a.clientHeight,i.innerHeight||0),right:Math.max(a.clientWidth,i.innerWidth||0),left:0,top:0}:n.getBoundingClientRect(),c=h=0,Ge&&((d=n._gsMaxScrollY-n.scrollTop)<0?h=d:u>o.bottom-rt&&d?(Je=!0,h=Math.min(d,g*(1-Math.max(0,o.bottom-u)/rt)|0)):u<o.top+et&&n.scrollTop&&(Je=!0,h=-Math.min(n.scrollTop,g*(1-Math.max(0,u-o.top)/et)|0)),h&&(n.scrollTop+=h)),Ye&&((d=n._gsMaxScrollX-n.scrollLeft)<0?c=d:l>o.right-tt&&d?(Je=!0,c=Math.min(d,g*(1-Math.max(0,o.right-l)/tt)|0)):l<o.left+nt&&n.scrollLeft&&(Je=!0,c=-Math.min(n.scrollLeft,g*(1-Math.max(0,l-o.left)/nt)|0)),c&&(n.scrollLeft+=c)),s&&(c||h)&&(i.scrollTo(n.scrollLeft,n.scrollTop),Et(Ke.pointerX+c,Ke.pointerY+h)),p=n}if(Ce){var m=Ke.x,v=Ke.y;He?(Ke.deltaX=m-parseFloat(ot.rotation),Ke.rotation=m,ot.rotation=m+"deg",ot.renderTransform(1,ot)):f?(Ge&&(Ke.deltaY=v-f.top(),f.top(v)),Ye&&(Ke.deltaX=m-f.left(),f.left(m))):Ue?(Ge&&(Ke.deltaY=v-parseFloat(ot.y),ot.y=v+"px"),Ye&&(Ke.deltaX=m-parseFloat(ot.x),ot.x=m+"px"),ot.renderTransform(1,ot)):(Ge&&(Ke.deltaY=v-parseFloat(t.style.top||0),t.style.top=v+"px"),Ye&&(Ke.deltaX=m-parseFloat(t.style.left||0),t.style.left=m+"px")),!S||r||Re||(Re=!0,!1===fe(Ke,"drag","onDrag")&&(Ye&&(Ke.x-=Ke.deltaX),Ge&&(Ke.y-=Ke.deltaY),e(!0)),Re=!1)}Ce=!1},dt=function(e,r){var n,i,o=Ke.x,a=Ke.y;t._gsap||(ot=s.core.getCache(t)),ot.uncache&&s.getProperty(t,"x"),Ue?(Ke.x=parseFloat(ot.x),Ke.y=parseFloat(ot.y)):He?Ke.x=Ke.rotation=parseFloat(ot.rotation):f?(Ke.y=f.top(),Ke.x=f.left()):(Ke.y=parseFloat(t.style.top||(i=he(t))&&i.top)||0,Ke.x=parseFloat(t.style.left||(i||{}).left)||0),(je||Te||Me)&&!r&&(Ke.isDragging||Ke.isThrowing)&&(Me&&(X.x=Ke.x,X.y=Ke.y,(n=Me(X)).x!==Ke.x&&(Ke.x=n.x,Ce=!0),n.y!==Ke.y&&(Ke.y=n.y,Ce=!0)),je&&(n=je(Ke.x))!==Ke.x&&(Ke.x=n,He&&(Ke.rotation=n),Ce=!0),Te&&((n=Te(Ke.y))!==Ke.y&&(Ke.y=n),Ce=!0)),Ce&&ht(!0),e||(Ke.deltaX=Ke.x-o,Ke.deltaY=Ke.y-a,fe(Ke,"throwupdate","onThrowUpdate"))},pt=function(e,t,r,n){return null==t&&(t=-q),null==r&&(r=q),j(e)?function(s){var i=Ke.isPressed?1-Ke.edgeResistance:1;return e.call(Ke,s>r?r+(s-r)*i:s<t?t+(s-t)*i:s)*n}:L(e)?function(n){for(var s,i,o=e.length,a=0,l=q;--o>-1;)(i=(s=e[o])-n)<0&&(i=-i),i<l&&s>=t&&s<=r&&(a=o,l=i);return e[a]}:isNaN(e)?function(e){return e}:function(){return e*n}},ft=function(){var e,n,s,i;F=!1,f?(f.calibrate(),Ke.minX=Z=-f.maxScrollLeft(),Ke.minY=le=-f.maxScrollTop(),Ke.maxX=H=Ke.maxY=te=0,F=!0):r.bounds&&(e=ge(r.bounds,t.parentNode),He?(Ke.minX=Z=e.left,Ke.maxX=H=e.left+e.width,Ke.minY=le=Ke.maxY=te=0):M(r.bounds.maxX)&&M(r.bounds.maxY)?(n=ge(t,t.parentNode),Ke.minX=Z=Math.round(lt(Ve,"px")+e.left-n.left-.5),Ke.minY=le=Math.round(lt(Xe,"px")+e.top-n.top-.5),Ke.maxX=H=Math.round(Z+(e.width-n.width)),Ke.maxY=te=Math.round(le+(e.height-n.height))):(e=r.bounds,Ke.minX=Z=e.minX,Ke.minY=le=e.minY,Ke.maxX=H=e.maxX,Ke.maxY=te=e.maxY),Z>H&&(Ke.minX=H,Ke.maxX=H=Z,Z=Ke.minX),le>te&&(Ke.minY=te,Ke.maxY=te=le,le=Ke.minY),He&&(Ke.minRotation=Z,Ke.maxRotation=H),F=!0),r.liveSnap&&(s=!0===r.liveSnap?r.snap||{}:r.liveSnap,i=L(s)||j(s),He?(je=pt(i?s:s.rotation,Z,H,1),Te=null):s.points?Me=function(e,t,r,n,s,i,o){return i=i&&i<q?i*i:q,j(e)?function(a){var l,u,c,h=Ke.isPressed?1-Ke.edgeResistance:1,d=a.x,p=a.y;return a.x=d=d>r?r+(d-r)*h:d<t?t+(d-t)*h:d,a.y=p=p>s?s+(p-s)*h:p<n?n+(p-n)*h:p,(l=e.call(Ke,a))!==a&&(a.x=l.x,a.y=l.y),1!==o&&(a.x*=o,a.y*=o),i<q&&(u=a.x-d)*u+(c=a.y-p)*c>i&&(a.x=d,a.y=p),a}:L(e)?function(t){for(var r,n,s,o,a=e.length,l=0,u=q;--a>-1;)(o=(r=(s=e[a]).x-t.x)*r+(n=s.y-t.y)*n)<u&&(l=a,u=o);return u<=i?e[l]:t}:function(e){return e}}(i?s:s.points,Z,H,le,te,s.radius,f?-1:1):(Ye&&(je=pt(i?s:s.x||s.left||s.scrollLeft,Z,H,f?-1:1)),Ge&&(Te=pt(i?s:s.y||s.top||s.scrollTop,le,te,f?-1:1))))},gt=function(){Ke.isThrowing=!1,fe(Ke,"throwcomplete","onThrowComplete")},mt=function(){Ke.isThrowing=!1},vt=function(e,n){var i,o,a,l;e&&b?(!0===e&&(i=r.snap||r.liveSnap||{},o=L(i)||j(i),e={resistance:(r.throwResistance||r.resistance||1e3)/(He?10:1)},He?e.rotation=ye(Ke,o?i:i.rotation,H,Z,1,n):(Ye&&(e[Ve]=ye(Ke,o?i:i.points||i.x||i.left,H,Z,f?-1:1,n||"x"===Ke.lockedAxis)),Ge&&(e[Xe]=ye(Ke,o?i:i.points||i.y||i.top,te,le,f?-1:1,n||"y"===Ke.lockedAxis)),(i.points||L(i)&&T(i[0]))&&(e.linkedProps=Ve+","+Xe,e.radius=i.radius))),Ke.isThrowing=!0,l=isNaN(r.overshootTolerance)?1===r.edgeResistance?0:1-Ke.edgeResistance+.2:r.overshootTolerance,e.duration||(e.duration={max:Math.max(r.minDuration||0,"maxDuration"in r?r.maxDuration:2),min:isNaN(r.minDuration)?0===l||T(e)&&e.resistance>1e3?0:.5:r.minDuration,overshoot:l}),Ke.tween=a=s.to(f||t,{inertia:e,data:"_draggable",onComplete:gt,onInterrupt:mt,onUpdate:r.fastMode?fe:dt,onUpdateParams:r.fastMode?[Ke,"onthrowupdate","onThrowUpdate"]:i&&i.radius?[!1,!0]:[]}),r.fastMode||(f&&(f._skip=!0),a.render(1e9,!0,!0),dt(!0,!0),Ke.endX=Ke.x,Ke.endY=Ke.y,He&&(Ke.endRotation=Ke.x),a.play(0),dt(!0,!0),f&&(f._skip=!1))):F&&Ke.applyBounds()},yt=function(e){var r,s=Pe;Pe=(0,n.getGlobalMatrix)(t.parentNode,!0),e&&Ke.isPressed&&!Pe.equals(s||new n.Matrix2D)&&(r=s.inverse().apply({x:w,y:E}),Pe.apply(r,r),w=r.x,E=r.y),Pe.equals(B)&&(Pe=null)},_t=function(){var e,r,s,i=1-Ke.edgeResistance,o=at?se(ut):0,a=at?ne(ut):0;yt(!1),me.x=Ke.pointerX-o,me.y=Ke.pointerY-a,Pe&&Pe.apply(me,me),w=me.x,E=me.y,Ce&&(Et(Ke.pointerX,Ke.pointerY),ht(!0)),ze=(0,n.getGlobalMatrix)(t),f?(ft(),A=f.top(),C=f.left()):(bt()?(dt(!0,!0),ft()):Ke.applyBounds(),He?(e=t.ownerSVGElement?[ot.xOrigin-t.getBBox().x,ot.yOrigin-t.getBBox().y]:(he(t)[P]||"0 0").split(" "),Ee=Ke.rotationOrigin=(0,n.getGlobalMatrix)(t).apply({x:parseFloat(e[0])||0,y:parseFloat(e[1])||0}),dt(!0,!0),r=Ke.pointerX-Ee.x-o,s=Ee.y-Ke.pointerY+a,C=Ke.x,A=Ke.y=Math.atan2(s,r)*R):(A=lt(Xe,"px"),C=lt(Ve,"px"))),F&&i&&(C>H?C=H+(C-H)/i:C<Z&&(C=Z-(Z-C)/i),He||(A>te?A=te+(A-te)/i:A<le&&(A=le-(le-A)/i))),Ke.startX=C=k(C),Ke.startY=A=k(A)},bt=function(){return Ke.tween&&Ke.tween.isActive()},xt=function(){!c.parentNode||bt()||Ke.isDragging||c.parentNode.removeChild(c)},Dt=function(e,n){var o;if(!d||Ke.isPressed||!e||!("mousedown"!==e.type&&"pointerdown"!==e.type||n)&&I()-it<30&&m[Ke.pointerEvent.type])Ie&&e&&d&&ee(e);else{if(ke=bt(),Ke.pointerEvent=e,m[e.type]?(Se=~e.type.indexOf("touch")?e.currentTarget||e.target:ut,Q(Se,"touchend",Ct),Q(Se,"touchmove",wt),Q(Se,"touchcancel",Ct),Q(ut,"touchstart",re)):(Se=null,Q(ut,"mousemove",wt)),Oe=null,D&&Se||(Q(ut,"mouseup",Ct),e&&e.target&&Q(e.target,"mouseup",Ct)),Fe=st.call(Ke,e.target)&&!1===r.dragClickables&&!n)return Q(e.target,"change",Ct),fe(Ke,"pressInit","onPressInit"),fe(Ke,"press","onPress"),be(Ze,!0),void(Ie=!1);var a;if(Le=!(!Se||Ye===Ge||!1===Ke.vars.allowNativeTouchScrolling||Ke.vars.allowContextMenu&&e&&(e.ctrlKey||e.which>2))&&(Ye?"y":"x"),(Ie=!Le&&!Ke.allowEventDefault)&&(ee(e),Q(i,"touchforcechange",ee)),e.changedTouches?(e=de=e.changedTouches[0],ve=e.identifier):e.pointerId?ve=e.pointerId:de=ve=null,v++,a=ht,z.push(a),1===z.length&&s.ticker.add(K),E=Ke.pointerY=e.pageY,w=Ke.pointerX=e.pageX,fe(Ke,"pressInit","onPressInit"),(Le||Ke.autoScroll)&&ue(t.parentNode),!t.parentNode||!Ke.autoScroll||f||He||!t.parentNode._gsMaxScrollX||c.parentNode||t.getBBox||(c.style.width=t.parentNode.scrollWidth+"px",t.parentNode.appendChild(c)),_t(),Ke.tween&&Ke.tween.kill(),Ke.isThrowing=!1,s.killTweensOf(f||t,$e,!0),f&&s.killTweensOf(t,{scrollTo:1},!0),Ke.tween=Ke.lockedAxis=null,(r.zIndexBoost||!He&&!f&&!1!==r.zIndexBoost)&&(t.style.zIndex=l.zIndex++),Ke.isPressed=!0,S=!(!r.onDrag&&!Ke._listeners.drag),O=!(!r.onMove&&!Ke._listeners.move),!1!==r.cursor||r.activeCursor)for(o=Ze.length;--o>-1;)s.set(Ze[o],{cursor:r.activeCursor||r.cursor||("grab"===x?"grabbing":x)});fe(Ke,"press","onPress")}},wt=function(e){var r,n,s,o,a,l,u=e;if(d&&!y&&Ke.isPressed&&e){if(Ke.pointerEvent=e,r=e.changedTouches){if((e=r[0])!==de&&e.identifier!==ve){for(o=r.length;--o>-1&&(e=r[o]).identifier!==ve&&e.target!==t;);if(o<0)return}}else if(e.pointerId&&ve&&e.pointerId!==ve)return;Se&&Le&&!Oe&&(me.x=e.pageX-(at?se(ut):0),me.y=e.pageY-(at?ne(ut):0),Pe&&Pe.apply(me,me),n=me.x,s=me.y,((a=Math.abs(n-w))!==(l=Math.abs(s-E))&&(a>We||l>We)||_&&Le===Oe)&&(Oe=a>l&&Ye?"x":"y",Le&&Oe!==Le&&Q(i,"touchforcechange",ee),!1!==Ke.vars.lockAxisOnTouchScroll&&Ye&&Ge&&(Ke.lockedAxis="x"===Oe?"y":"x",j(Ke.vars.onLockAxis)&&Ke.vars.onLockAxis.call(Ke,u)),_&&Le===Oe))?Ct(u):(Ke.allowEventDefault||Le&&(!Oe||Le===Oe)||!1===u.cancelable?Ie&&(Ie=!1):(ee(u),Ie=!0),Ke.autoScroll&&(Je=!0),Et(e.pageX,e.pageY,O))}else Ie&&e&&d&&ee(e)},Et=function(e,t,r){var n,s,i,o,a,l,u=1-Ke.dragResistance,c=1-Ke.edgeResistance,h=Ke.pointerX,d=Ke.pointerY,p=A,f=Ke.x,g=Ke.y,m=Ke.endX,v=Ke.endY,y=Ke.endRotation,_=Ce;Ke.pointerX=e,Ke.pointerY=t,at&&(e-=se(ut),t-=ne(ut)),He?(o=Math.atan2(Ee.y-t,e-Ee.x)*R,(a=Ke.y-o)>180?(A-=360,Ke.y=o):a<-180&&(A+=360,Ke.y=o),Ke.x!==C||Math.abs(A-o)>We?(Ke.y=o,i=C+(A-o)*u):i=C):(Pe&&(l=e*Pe.a+t*Pe.c+Pe.e,t=e*Pe.b+t*Pe.d+Pe.f,e=l),(s=t-E)<We&&s>-We&&(s=0),(n=e-w)<We&&n>-We&&(n=0),(Ke.lockAxis||Ke.lockedAxis)&&(n||s)&&((l=Ke.lockedAxis)||(Ke.lockedAxis=l=Ye&&Math.abs(n)>Math.abs(s)?"y":Ge?"x":null,l&&j(Ke.vars.onLockAxis)&&Ke.vars.onLockAxis.call(Ke,Ke.pointerEvent)),"y"===l?s=0:"x"===l&&(n=0)),i=k(C+n*u),o=k(A+s*u)),(je||Te||Me)&&(Ke.x!==i||Ke.y!==o&&!He)?(Me&&(X.x=i,X.y=o,l=Me(X),i=k(l.x),o=k(l.y)),je&&(i=k(je(i))),Te&&(o=k(Te(o)))):F&&(i>H?i=H+Math.round((i-H)*c):i<Z&&(i=Z+Math.round((i-Z)*c)),He||(o>te?o=Math.round(te+(o-te)*c):o<le&&(o=Math.round(le+(o-le)*c)))),(Ke.x!==i||Ke.y!==o&&!He)&&(He?(Ke.endRotation=Ke.x=Ke.endX=i,Ce=!0):(Ge&&(Ke.y=Ke.endY=o,Ce=!0),Ye&&(Ke.x=Ke.endX=i,Ce=!0)),r&&!1===fe(Ke,"move","onMove")?(Ke.pointerX=h,Ke.pointerY=d,A=p,Ke.x=f,Ke.y=g,Ke.endX=m,Ke.endY=v,Ke.endRotation=y,Ce=_):!Ke.isDragging&&Ke.isPressed&&(Ke.isDragging=!0,fe(Ke,"dragstart","onDragStart")))},Ct=function e(n,o){if(d&&Ke.isPressed&&(!n||null==ve||o||!(n.pointerId&&n.pointerId!==ve&&n.target!==t||n.changedTouches&&!function(e,t){for(var r=e.length;r--;)if(e[r].identifier===t)return!0}(n.changedTouches,ve)))){Ke.isPressed=!1;var a,l,u,c,h,p=n,f=Ke.isDragging,g=Ke.vars.allowContextMenu&&n&&(n.ctrlKey||n.which>2),m=s.delayedCall(.001,xt);if(Se?(J(Se,"touchend",e),J(Se,"touchmove",wt),J(Se,"touchcancel",e),J(ut,"touchstart",re)):J(ut,"mousemove",wt),J(i,"touchforcechange",ee),D&&Se||(J(ut,"mouseup",e),n&&n.target&&J(n.target,"mouseup",e)),Ce=!1,f&&(Qe=V=I(),Ke.isDragging=!1),Fe&&!g)return n&&(J(n.target,"change",e),Ke.pointerEvent=p),be(Ze,!1),fe(Ke,"release","onRelease"),fe(Ke,"click","onClick"),void(Fe=!1);for($(ht),l=Ze.length;--l>-1;)ce(Ze[l],"cursor",r.cursor||(!1!==r.cursor?x:null));if(v--,n){if((a=n.changedTouches)&&(n=a[0])!==de&&n.identifier!==ve){for(l=a.length;--l>-1&&(n=a[l]).identifier!==ve&&n.target!==t;);if(l<0)return}Ke.pointerEvent=p,Ke.pointerX=n.pageX,Ke.pointerY=n.pageY}return g&&p?(ee(p),Ie=!0,fe(Ke,"release","onRelease")):p&&!f?(Ie=!1,ke&&(r.snap||r.bounds)&&vt(r.inertia||r.throwProps),fe(Ke,"release","onRelease"),_&&"touchmove"===p.type||-1!==p.type.indexOf("cancel")||(fe(Ke,"click","onClick"),I()-it<300&&fe(Ke,"doubleclick","onDoubleClick"),c=p.target||t,it=I(),h=function(){it===qe||!Ke.enabled()||Ke.isPressed||p.defaultPrevented||(c.click?c.click():ut.createEvent&&((u=ut.createEvent("MouseEvents")).initMouseEvent("click",!0,!0,i,1,Ke.pointerEvent.screenX,Ke.pointerEvent.screenY,Ke.pointerX,Ke.pointerY,!1,!1,!1,!1,0,null),c.dispatchEvent(u)))},_||p.defaultPrevented||s.delayedCall(.05,h))):(vt(r.inertia||r.throwProps),Ke.allowEventDefault||!p||!1===r.dragClickables&&st.call(Ke,p.target)||!f||Le&&(!Oe||Le!==Oe)||!1===p.cancelable?Ie=!1:(Ie=!0,ee(p)),fe(Ke,"release","onRelease")),bt()&&m.duration(Ke.tween.duration()),f&&fe(Ke,"dragend","onDragEnd"),!0}Ie&&n&&d&&ee(n)},At=function(e){if(e&&Ke.isDragging&&!f){var r=e.target||t.parentNode,n=r.scrollLeft-r._gsScrollX,s=r.scrollTop-r._gsScrollY;(n||s)&&(Pe?(w-=n*Pe.a+s*Pe.c,E-=s*Pe.d+n*Pe.b):(w-=n,E-=s),r._gsScrollX+=n,r._gsScrollY+=s,Et(Ke.pointerX,Ke.pointerY))}},jt=function(e){var t=I(),r=t-it<40,n=t-Qe<40,s=r&&qe===it,i=Ke.pointerEvent&&Ke.pointerEvent.defaultPrevented,o=r&&Be===it,a=e.isTrusted||null==e.isTrusted&&r&&s;if((s||n&&!1!==Ke.vars.suppressClickOnDrag)&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),r&&(!Ke.pointerEvent||!Ke.pointerEvent.defaultPrevented)&&(!s||a&&!o))return a&&s&&(Be=it),void(qe=it);(Ke.isPressed||n||r)&&(a&&e.detail&&r&&!i||ee(e)),r||n||(e&&e.target&&(Ke.pointerEvent=e),fe(Ke,"click","onClick"))},Tt=function(e){return Pe?{x:e.x*Pe.a+e.y*Pe.c+Pe.e,y:e.x*Pe.b+e.y*Pe.d+Pe.f}:{x:e.x,y:e.y}};return(Ae=l.get(t))&&Ae.kill(),u.startDrag=function(e,r){var n,s,i,o;Dt(e||Ke.pointerEvent,!0),r&&!Ke.hitTest(e||Ke.pointerEvent)&&(n=pe(e||Ke.pointerEvent),s=pe(t),i=Tt({x:n.left+n.width/2,y:n.top+n.height/2}),o=Tt({x:s.left+s.width/2,y:s.top+s.height/2}),w-=i.x-o.x,E-=i.y-o.y),Ke.isDragging||(Ke.isDragging=!0,fe(Ke,"dragstart","onDragStart"))},u.drag=wt,u.endDrag=function(e){return Ct(e||Ke.pointerEvent,!0)},u.timeSinceDrag=function(){return Ke.isDragging?0:(I()-Qe)/1e3},u.timeSinceClick=function(){return(I()-it)/1e3},u.hitTest=function(e,t){return l.hitTest(Ke.target,e,t)},u.getDirection=function(e,r){var n,s,i,o,a,l,u="velocity"===e&&b?e:T(e)&&!He?"element":"start";return"element"===u&&(a=pe(Ke.target),l=pe(e)),n="start"===u?Ke.x-C:"velocity"===u?b.getVelocity(t,Ve):a.left+a.width/2-(l.left+l.width/2),He?n<0?"counter-clockwise":"clockwise":(r=r||2,s="start"===u?Ke.y-A:"velocity"===u?b.getVelocity(t,Xe):a.top+a.height/2-(l.top+l.height/2),o=(i=Math.abs(n/s))<1/r?"":n<0?"left":"right",i<r&&(""!==o&&(o+="-"),o+=s<0?"up":"down"),o)},u.applyBounds=function(e,n){var s,o,a,l,u,c;if(e&&r.bounds!==e)return r.bounds=e,Ke.update(!0,n);if(dt(!0),ft(),F&&!bt()){if(s=Ke.x,o=Ke.y,s>H?s=H:s<Z&&(s=Z),o>te?o=te:o<le&&(o=le),(Ke.x!==s||Ke.y!==o)&&(a=!0,Ke.x=Ke.endX=s,He?Ke.endRotation=s:Ke.y=Ke.endY=o,Ce=!0,ht(!0),Ke.autoScroll&&!Ke.isDragging))for(ue(t.parentNode),l=t,Y.scrollTop=null!=i.pageYOffset?i.pageYOffset:null!=ut.documentElement.scrollTop?ut.documentElement.scrollTop:ut.body.scrollTop,Y.scrollLeft=null!=i.pageXOffset?i.pageXOffset:null!=ut.documentElement.scrollLeft?ut.documentElement.scrollLeft:ut.body.scrollLeft;l&&!c;)u=(c=ae(l.parentNode))?Y:l.parentNode,Ge&&u.scrollTop>u._gsMaxScrollY&&(u.scrollTop=u._gsMaxScrollY),Ye&&u.scrollLeft>u._gsMaxScrollX&&(u.scrollLeft=u._gsMaxScrollX),l=u;Ke.isThrowing&&(a||Ke.endX>H||Ke.endX<Z||Ke.endY>te||Ke.endY<le)&&vt(r.inertia||r.throwProps,a)}return Ke},u.update=function(e,r,s){if(r&&Ke.isPressed){var i=(0,n.getGlobalMatrix)(t),o=ze.apply({x:Ke.x-C,y:Ke.y-A}),a=(0,n.getGlobalMatrix)(t.parentNode,!0);a.apply({x:i.e-o.x,y:i.f-o.y},o),Ke.x-=o.x-a.e,Ke.y-=o.y-a.f,ht(!0),_t()}var l=Ke.x,u=Ke.y;return yt(!r),e?Ke.applyBounds():(Ce&&s&&ht(!0),dt(!0)),r&&(Et(Ke.pointerX,Ke.pointerY),Ce&&ht(!0)),Ke.isPressed&&!r&&(Ye&&Math.abs(l-Ke.x)>.01||Ge&&Math.abs(u-Ke.y)>.01&&!He)&&_t(),Ke.autoScroll&&(ue(t.parentNode,Ke.isDragging),Je=Ke.isDragging,ht(!0),oe(t,At),ie(t,At)),Ke},u.enable=function(e){var n,i,o,a={lazy:!0};if(!1!==r.cursor&&(a.cursor=r.cursor||x),s.utils.checkPrefix("touchCallout")&&(a.touchCallout="none"),"soft"!==e){for(W(Ze,Ye===Ge?"none":r.allowNativeTouchScrolling&&t.scrollHeight===t.clientHeight==(t.scrollWidth===t.clientHeight)||r.allowEventDefault?"manipulation":Ye?"pan-y":"pan-x"),i=Ze.length;--i>-1;)o=Ze[i],D||Q(o,"mousedown",Dt),Q(o,"touchstart",Dt),Q(o,"click",jt,!0),s.set(o,a),o.getBBox&&o.ownerSVGElement&&s.set(o.ownerSVGElement,{touchAction:Ye===Ge?"none":r.allowNativeTouchScrolling||r.allowEventDefault?"manipulation":Ye?"pan-y":"pan-x"}),r.allowContextMenu||Q(o,"contextmenu",ct);be(Ze,!1)}return ie(t,At),d=!0,b&&"soft"!==e&&b.track(f||t,Ue?"x,y":He?"rotation":"top,left"),t._gsDragID=n="d"+U++,N[n]=Ke,f&&(f.enable(),f.element._gsDragID=n),(r.bounds||He)&&_t(),r.bounds&&Ke.applyBounds(),Ke},u.disable=function(e){for(var r,n=Ke.isDragging,s=Ze.length;--s>-1;)ce(Ze[s],"cursor",null);if("soft"!==e){for(W(Ze,null),s=Ze.length;--s>-1;)r=Ze[s],ce(r,"touchCallout",null),J(r,"mousedown",Dt),J(r,"touchstart",Dt),J(r,"click",jt),J(r,"contextmenu",ct);be(Ze,!0),Se&&(J(Se,"touchcancel",Ct),J(Se,"touchend",Ct),J(Se,"touchmove",wt)),J(ut,"mouseup",Ct),J(ut,"mousemove",wt)}return oe(t,At),d=!1,b&&"soft"!==e&&b.untrack(f||t,Ue?"x,y":He?"rotation":"top,left"),f&&f.disable(),$(ht),Ke.isDragging=Ke.isPressed=Fe=!1,n&&fe(Ke,"dragend","onDragEnd"),Ke},u.enabled=function(e,t){return arguments.length?e?Ke.enable(t):Ke.disable(t):d},u.kill=function(){return Ke.isThrowing=!1,Ke.tween&&Ke.tween.kill(),Ke.disable(),s.set(Ze,{clearProps:"userSelect"}),delete N[t._gsDragID],Ke},~Ne.indexOf("scroll")&&(f=u.scrollProxy=new De(t,function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e}({onKill:function(){Ke.isPressed&&Ct(null)}},r)),t.style.overflowY=Ge&&!g?"auto":"hidden",t.style.overflowX=Ye&&!g?"auto":"hidden",t=f.content),He?$e.rotation=1:(Ye&&($e[Ve]=1),Ge&&($e[Xe]=1)),ot.force3D=!("force3D"in r)||r.force3D,u.enable(),u}return r=e,(t=l).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,l.register=function(e){s=e,we()},l.create=function(e,t){return h||we(!0),p(e).map((function(e){return new l(e,t)}))},l.get=function(e){return N[(p(e)[0]||{})._gsDragID]},l.timeSinceDrag=function(){return(I()-V)/1e3},l.hitTest=function(e,t,r){if(e===t)return!1;var n,s,i,o=pe(e),a=pe(t),l=o.top,u=o.left,c=o.right,h=o.bottom,d=o.width,p=o.height,f=a.left>c||a.right<u||a.top>h||a.bottom<l;return f||!r?!f:(i=-1!==(r+"").indexOf("%"),r=parseFloat(r)||0,(n={left:Math.max(u,a.left),top:Math.max(l,a.top)}).width=Math.min(c,a.right)-n.left,n.height=Math.min(h,a.bottom)-n.top,!(n.width<0||n.height<0)&&(i?(r*=.01,(s=n.width*n.height)>=d*p*r||s>=a.width*a.height*r):n.width>r&&n.height>r))},l}(function(){function e(e){this._listeners={},this.target=e||this}var t=e.prototype;return t.addEventListener=function(e,t){var r=this._listeners[e]||(this._listeners[e]=[]);~r.indexOf(t)||r.push(t)},t.removeEventListener=function(e,t){var r=this._listeners[e],n=r&&r.indexOf(t)||-1;n>-1&&r.splice(n,1)},t.dispatchEvent=function(e){var t,r=this;return(this._listeners[e]||[]).forEach((function(n){return!1===n.call(r,{type:e,target:r.target})&&(t=!1)})),t},e}());!function(e,t){for(var r in t)r in e||(e[r]=t[r])}(Ee.prototype,{pointerX:0,pointerY:0,startX:0,startY:0,deltaX:0,deltaY:0,isDragging:!1,isPressed:!1}),Ee.zIndex=1e3,Ee.version="3.7.1",A()&&s.registerPlugin(Ee)},"./node_modules/gsap/EasePack.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{SlowMo:()=>d,ExpoScaleEase:()=>p,RoughEase:()=>f,EasePack:()=>g,default:()=>g});var n,s,i=function(){return n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n},o=function(e,t){return!!(void 0===e?t:e&&!~(e+"").indexOf("false"))},a=function(e){if(n=e||i()){s=n.registerEase;var t,r=n.parseEase(),o=function(e){return function(t){var r=.5+t/2;e.config=function(t){return e(2*(1-t)*t*r+t*t)}}};for(t in r)r[t].config||o(r[t]);for(t in s("slow",d),s("expoScale",p),s("rough",f),g)"version"!==t&&n.core.globals(t,g[t]);1}},l=function(e,t,r){var n=(e=Math.min(1,e||.7))<1?t||0===t?t:.7:0,s=(1-e)/2,i=s+e,a=o(r);return function(e){var t=e+(.5-e)*n;return e<s?a?1-(e=1-e/s)*e:t-(e=1-e/s)*e*e*e*t:e>i?a?1===e?0:1-(e=(e-i)/s)*e:t+(e-t)*(e=(e-i)/s)*e*e*e:a?1:t}},u=function(e,t,r){var s=Math.log(t/e),i=t-e;return r&&(r=n.parseEase(r)),function(t){return(e*Math.exp(s*(r?r(t):t))-e)/i}},c=function(e,t,r){this.t=e,this.v=t,r&&(this.next=r,r.prev=this,this.c=r.v-t,this.gap=r.t-e)},h=function(e){"object"!=typeof e&&(e={points:+e||20});for(var t,r,s,i,a,l,u,h=e.taper||"none",d=[],p=0,f=0|(+e.points||20),g=f,m=o(e.randomize,!0),v=o(e.clamp),y=n?n.parseEase(e.template):0,_=.4*(+e.strength||1);--g>-1;)t=m?Math.random():1/f*g,r=y?y(t):t,s="none"===h?_:"out"===h?(i=1-t)*i*_:"in"===h?t*t*_:t<.5?(i=2*t)*i*.5*_:(i=2*(1-t))*i*.5*_,m?r+=Math.random()*s-.5*s:g%2?r+=.5*s:r-=.5*s,v&&(r>1?r=1:r<0&&(r=0)),d[p++]={x:t,y:r};for(d.sort((function(e,t){return e.x-t.x})),l=new c(1,1,null),g=f;g--;)a=d[g],l=new c(a.x,a.y,l);return u=new c(0,0,l.t?l:l.next),function(e){var t=u;if(e>t.t){for(;t.next&&e>=t.t;)t=t.next;t=t.prev}else for(;t.prev&&e<=t.t;)t=t.prev;return u=t,t.v+(e-t.t)/t.gap*t.c}},d=l(.7);d.ease=d,d.config=l;var p=u(1,2);p.config=u;var f=h();f.ease=f,f.config=h;var g={SlowMo:d,RoughEase:f,ExpoScaleEase:p};for(var m in g)g[m].register=a,g[m].version="3.7.1";i()&&n.registerPlugin(d)},"./node_modules/gsap/EaselPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{EaselPlugin:()=>w,default:()=>w});var n,s,i,o,a,l,u="redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset".split(","),c=function(){return"undefined"!=typeof window},h=function(){return n||c()&&(n=window.gsap)&&n.registerPlugin&&n},d=function(){return o||i&&i.createjs||i||{}},p=function(e){return console.warn(e)},f=function(e){var t=e.getBounds&&e.getBounds();t||(t=e.nominalBounds||{x:0,y:0,width:100,height:100},e.setBounds&&e.setBounds(t.x,t.y,t.width,t.height)),e.cache&&e.cache(t.x,t.y,t.width,t.height),p("EaselPlugin: for filters to display in EaselJS, you must call the object's cache() method first. GSAP attempted to use the target's getBounds() for the cache but that may not be completely accurate. "+e)},g=function(e,t,r){a||(a=d().ColorFilter)||p("EaselPlugin error: The EaselJS ColorFilter JavaScript file wasn't loaded.");for(var s,i,o,l,c,h,g=e.filters||[],m=g.length;m--;)if(g[m]instanceof a){i=g[m];break}if(i||(i=new a,g.push(i),e.filters=g),o=i.clone(),null!=t.tint)s=n.utils.splitColor(t.tint),l=null!=t.tintAmount?+t.tintAmount:1,o.redOffset=+s[0]*l,o.greenOffset=+s[1]*l,o.blueOffset=+s[2]*l,o.redMultiplier=o.greenMultiplier=o.blueMultiplier=1-l;else for(c in t)"exposure"!==c&&"brightness"!==c&&(o[c]=+t[c]);for(null!=t.exposure?(o.redOffset=o.greenOffset=o.blueOffset=255*(+t.exposure-1),o.redMultiplier=o.greenMultiplier=o.blueMultiplier=1):null!=t.brightness&&(l=+t.brightness-1,o.redOffset=o.greenOffset=o.blueOffset=l>0?255*l:0,o.redMultiplier=o.greenMultiplier=o.blueMultiplier=1-Math.abs(l)),m=8;m--;)i[c=u[m]]!==o[c]&&(h=r.add(i,c,i[c],o[c]))&&(h.op="easel_colorFilter");r._props.push("easel_colorFilter"),e.cacheID||f(e)},m=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],v=.212671,y=.71516,_=.072169,b=function(e,t){if(!(e instanceof Array&&t instanceof Array))return t;var r,n,s=[],i=0,o=0;for(r=0;r<4;r++){for(n=0;n<5;n++)o=4===n?e[i+4]:0,s[i+n]=e[i]*t[n]+e[i+1]*t[n+5]+e[i+2]*t[n+10]+e[i+3]*t[n+15]+o;i+=5}return s},x=function(e,t,r){l||(l=d().ColorMatrixFilter)||p("EaselPlugin: The EaselJS ColorMatrixFilter JavaScript file wasn't loaded.");for(var s,i,o,a,u,c,h=e.filters||[],g=h.length;--g>-1;)if(h[g]instanceof l){o=h[g];break}for(o||(o=new l(m.slice()),h.push(o),e.filters=h),i=o.matrix,s=m.slice(),null!=t.colorize&&(s=function(e,t,r){isNaN(r)&&(r=1);var s=n.utils.splitColor(t),i=s[0]/255,o=s[1]/255,a=s[2]/255,l=1-r;return b([l+r*i*v,r*i*y,r*i*_,0,0,r*o*v,l+r*o*y,r*o*_,0,0,r*a*v,r*a*y,l+r*a*_,0,0,0,0,0,1,0],e)}(s,t.colorize,Number(t.colorizeAmount))),null!=t.contrast&&(u=s,c=Number(t.contrast),s=isNaN(c)?u:b([c+=.01,0,0,0,128*(1-c),0,c,0,0,128*(1-c),0,0,c,0,128*(1-c),0,0,0,1,0],u)),null!=t.hue&&(s=function(e,t){if(isNaN(t))return e;t*=Math.PI/180;var r=Math.cos(t),n=Math.sin(t);return b([v+r*(1-v)+n*-v,y+r*-y+n*-y,_+r*-_+n*(1-_),0,0,v+r*-v+.143*n,y+.28484*r+.14*n,_+r*-_+-.283*n,0,0,v+r*-v+-.787329*n,y+r*-y+n*y,_+r*(1-_)+n*_,0,0,0,0,0,1,0,0,0,0,0,1],e)}(s,Number(t.hue))),null!=t.saturation&&(s=function(e,t){if(isNaN(t))return e;var r=1-t,n=r*v,s=r*y,i=r*_;return b([n+t,s,i,0,0,n,s+t,i,0,0,n,s,i+t,0,0,0,0,0,1,0],e)}(s,Number(t.saturation))),g=s.length;--g>-1;)s[g]!==i[g]&&(a=r.add(i,g,i[g],s[g]))&&(a.op="easel_colorMatrixFilter");r._props.push("easel_colorMatrixFilter"),e.cacheID||f(),r._matrix=i},D=function(e){n=e||h(),c()&&(i=window),n&&(s=1)},w={version:"3.7.1",name:"easel",init:function(e,t,r,i,o){var a,l,u,c,h,d,f;for(a in s||(D(),n||p("Please gsap.registerPlugin(EaselPlugin)")),this.target=e,t)if(h=t[a],"colorFilter"===a||"tint"===a||"tintAmount"===a||"exposure"===a||"brightness"===a)u||(g(e,t.colorFilter||t,this),u=!0);else if("saturation"===a||"contrast"===a||"hue"===a||"colorize"===a||"colorizeAmount"===a)c||(x(e,t.colorMatrixFilter||t,this),c=!0);else if("frame"===a){if("string"==typeof h&&"="!==h.charAt(1)&&(d=e.labels))for(f=0;f<d.length;f++)d[f].label===h&&(h=d[f].position);(l=this.add(e,"gotoAndStop",e.currentFrame,h,i,o,Math.round))&&(l.op=a)}else null!=e[a]&&this.add(e,a,"get",h)},render:function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next;t.target.cacheID&&t.target.updateCache()},register:D,registerCreateJS:function(e){o=e}};h()&&n.registerPlugin(w)},"./node_modules/gsap/MotionPathPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{MotionPathPlugin:()=>D,default:()=>D});var n,s,i,o,a=r("./node_modules/gsap/utils/paths.js"),l=r("./node_modules/gsap/utils/matrix.js"),u="x,translateX,left,marginLeft,xPercent".split(","),c="y,translateY,top,marginTop,yPercent".split(","),h=Math.PI/180,d=function(e,t,r,n){for(var s=t.length,i=2===n?0:n,o=0;o<s;o++)e[i]=parseFloat(t[o][r]),2===n&&(e[i+1]=0),i+=2;return e},p=function(e,t,r){return parseFloat(e._gsap.get(e,t,r||"px"))||0},f=function(e){var t,r=e[0],n=e[1];for(t=2;t<e.length;t+=2)r=e[t]+=r,n=e[t+1]+=n},g=function(e,t,r,n,s,i,o,l,u){"cubic"===o.type?t=[t]:(!1!==o.fromCurrent&&t.unshift(p(r,n,l),s?p(r,s,u):0),o.relative&&f(t),t=[(s?a.pointsToSegment:a.flatPointsToSegment)(t,o.curviness)]);return t=i(b(t,r,o)),x(e,r,n,t,"x",l),s&&x(e,r,s,t,"y",u),(0,a.cacheRawPathMeasurements)(t,o.resolution||(0===o.curviness?20:12))},m=function(e){return e},v=/[-+\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/g,y=function(e,t,r){var n,s,i,o=(0,l.getGlobalMatrix)(e);return"svg"===(e.tagName+"").toLowerCase()?(s=(n=e.viewBox.baseVal).x,i=n.y,n.width||(n={width:+e.getAttribute("width"),height:+e.getAttribute("height")})):(n=t&&e.getBBox&&e.getBBox(),s=i=0),t&&"auto"!==t&&(s+=t.push?t[0]*(n?n.width:e.offsetWidth||0):t.x,i+=t.push?t[1]*(n?n.height:e.offsetHeight||0):t.y),r.apply(s||i?o.apply({x:s,y:i}):{x:o.e,y:o.f})},_=function(e,t,r,n){var s,i=(0,l.getGlobalMatrix)(e.parentNode,!0,!0),o=i.clone().multiply((0,l.getGlobalMatrix)(t)),a=y(e,r,i),u=y(t,n,i),c=u.x,h=u.y;return o.e=o.f=0,"auto"===n&&t.getTotalLength&&"path"===t.tagName.toLowerCase()&&(s=t.getAttribute("d").match(v)||[],c+=(s=o.apply({x:+s[0],y:+s[1]})).x,h+=s.y),(s||t.getBBox&&e.getBBox&&t.ownerSVGElement===e.ownerSVGElement)&&(c-=(s=o.apply(t.getBBox())).x,h-=s.y),o.e=c-a.x,o.f=h-a.y,o},b=function(e,t,r){var s,i,l,u=r.align,c=r.matrix,h=r.offsetX,d=r.offsetY,f=r.alignOrigin,g=e[0][0],m=e[0][1],v=p(t,"x"),y=p(t,"y");return e&&e.length?(u&&("self"===u||(s=o(u)[0]||t)===t?(0,a.transformRawPath)(e,1,0,0,1,v-g,y-m):(f&&!1!==f[2]?n.set(t,{transformOrigin:100*f[0]+"% "+100*f[1]+"%"}):f=[p(t,"xPercent")/-100,p(t,"yPercent")/-100],l=(i=_(t,s,f,"auto")).apply({x:g,y:m}),(0,a.transformRawPath)(e,i.a,i.b,i.c,i.d,v+i.e-(l.x-i.e),y+i.f-(l.y-i.f)))),c?(0,a.transformRawPath)(e,c.a,c.b,c.c,c.d,c.e,c.f):(h||d)&&(0,a.transformRawPath)(e,1,0,0,1,h||0,d||0),e):(0,a.getRawPath)("M0,0L0,0")},x=function(e,t,r,n,o,a){var l=t._gsap,u=l.harness,c=u&&u.aliases&&u.aliases[r],h=c&&c.indexOf(",")<0?c:r,d=e._pt=new s(e._pt,t,h,0,0,m,0,l.set(t,h,e));d.u=i(l.get(t,h,a))||0,d.path=n,d.pp=o,e._props.push(h)},D={version:"3.7.1",name:"motionPath",register:function(e,t,r){i=(n=e).utils.getUnit,o=n.utils.toArray,s=r},init:function(e,t){if(!n)return console.warn("Please gsap.registerPlugin(MotionPathPlugin)"),!1;"object"==typeof t&&!t.style&&t.path||(t={path:t});var r,s,o,l,h=[],p=t,f=p.path,m=p.autoRotate,v=p.unitX,y=p.unitY,_=p.x,D=p.y,w=f[0],E=(o=t.start,l="end"in t?t.end:1,function(e){return o||1!==l?(0,a.sliceRawPath)(e,o,l):e});if(this.rawPaths=h,this.target=e,(this.rotate=m||0===m)&&(this.rOffset=parseFloat(m)||0,this.radians=!!t.useRadians,this.rProp=t.rotation||"rotation",this.rSet=e._gsap.set(e,this.rProp,this),this.ru=i(e._gsap.get(e,this.rProp))||0),Array.isArray(f)&&!("closed"in f)&&"number"!=typeof w){for(s in w)!_&&~u.indexOf(s)?_=s:!D&&~c.indexOf(s)&&(D=s);for(s in _&&D?h.push(g(this,d(d([],f,_,0),f,D,1),e,_,D,E,t,v||i(f[0][_]),y||i(f[0][D]))):_=D=0,w)s!==_&&s!==D&&h.push(g(this,d([],f,s,2),e,s,0,E,t,i(f[0][s])))}else r=E(b((0,a.getRawPath)(t.path),e,t)),(0,a.cacheRawPathMeasurements)(r,t.resolution),h.push(r),x(this,e,t.x||"x",r,"x",t.unitX||"px"),x(this,e,t.y||"y",r,"y",t.unitY||"px")},render:function(e,t){var r=t.rawPaths,n=r.length,s=t._pt;for(e>1?e=1:e<0&&(e=0);n--;)(0,a.getPositionOnPath)(r[n],e,!n&&t.rotate,r[n]);for(;s;)s.set(s.t,s.p,s.path[s.pp]+s.u,s.d,e),s=s._next;t.rotate&&t.rSet(t.target,t.rProp,r[0].angle*(t.radians?h:1)+t.rOffset+t.ru,t,e)},getLength:function(e){return(0,a.cacheRawPathMeasurements)((0,a.getRawPath)(e)).totalLength},sliceRawPath:a.sliceRawPath,getRawPath:a.getRawPath,pointsToSegment:a.pointsToSegment,stringToRawPath:a.stringToRawPath,rawPathToString:a.rawPathToString,transformRawPath:a.transformRawPath,getGlobalMatrix:l.getGlobalMatrix,getPositionOnPath:a.getPositionOnPath,cacheRawPathMeasurements:a.cacheRawPathMeasurements,convertToPath:function(e,t){return o(e).map((function(e){return(0,a.convertToPath)(e,!1!==t)}))},convertCoordinates:function(e,t,r){var n=(0,l.getGlobalMatrix)(t,!0,!0).multiply((0,l.getGlobalMatrix)(e));return r?n.apply(r):n},getAlignMatrix:_,getRelativePosition:function(e,t,r,n){var s=_(e,t,r,n);return{x:s.e,y:s.f}},arrayToRawPath:function(e,t){var r=d(d([],e,(t=t||{}).x||"x",0),e,t.y||"y",1);return t.relative&&f(r),["cubic"===t.type?r:(0,a.pointsToSegment)(r,t.curviness)]}};(n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n)&&n.registerPlugin(D)},"./node_modules/gsap/PixiPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{PixiPlugin:()=>U,default:()=>U});var n,s,i,o,a,l,u,c,h=function(){return"undefined"!=typeof window},d=function(){return n||h()&&(n=window.gsap)&&n.registerPlugin&&n},p=function(e){return"function"==typeof e},f=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],g=.212671,m=.71516,v=.072169,y=function(e,t){var r,n,s=[],i=0,o=0;for(r=0;r<4;r++){for(n=0;n<5;n++)o=4===n?e[i+4]:0,s[i+n]=e[i]*t[n]+e[i+1]*t[n+5]+e[i+2]*t[n+10]+e[i+3]*t[n+15]+o;i+=5}return s},_=function(e,t){var r=1-t,n=r*g,s=r*m,i=r*v;return y([n+t,s,i,0,0,n,s+t,i,0,0,n,s,i+t,0,0,0,0,0,1,0],e)},b=function(e,t,r){var n=i(t),s=n[0]/255,o=n[1]/255,a=n[2]/255,l=1-r;return y([l+r*s*g,r*s*m,r*s*v,0,0,r*o*g,l+r*o*m,r*o*v,0,0,r*a*g,r*a*m,l+r*a*v,0,0,0,0,0,1,0],e)},x=function(e,t){t*=Math.PI/180;var r=Math.cos(t),n=Math.sin(t);return y([g+r*(1-g)+n*-g,m+r*-m+n*-m,v+r*-v+n*(1-v),0,0,g+r*-g+.143*n,m+.28484*r+.14*n,v+r*-v+-.283*n,0,0,g+r*-g+-.787329*n,m+r*-m+n*m,v+r*(1-v)+n*v,0,0,0,0,0,1,0,0,0,0,0,1],e)},D=function(e,t){return y([t,0,0,0,.5*(1-t),0,t,0,0,.5*(1-t),0,0,t,0,.5*(1-t),0,0,0,1,0],e)},w=function(e,t){var r,n,s=o.filters[t],i=e.filters||[],a=i.length;for(s||(n=t+" not found. PixiPlugin.registerPIXI(PIXI)",console.warn(n));--a>-1;)if(i[a]instanceof s)return i[a];return r=new s,"BlurFilter"===t&&(r.blur=0),i.push(r),e.filters=i,r},E=function(e,t,r,n){t.add(r,e,r[e],n[e]),t._props.push(e)},C=function(e,t){var r=new o.filters.ColorMatrixFilter;return r.matrix=t,r.brightness(e,!0),r.matrix},A={contrast:1,saturation:1,colorizeAmount:0,colorize:"rgb(255,255,255)",hue:0,brightness:1},j=function(e,t,r){var n,s,i,o=w(e,"ColorMatrixFilter"),a=e._gsColorMatrixFilter=e._gsColorMatrixFilter||function(e){var t,r={};for(t in e)r[t]=e[t];return r}(A),l=t.combineCMF&&!("colorMatrixFilter"in t&&!t.colorMatrixFilter);i=o.matrix,t.resolution&&(o.resolution=t.resolution),t.matrix&&t.matrix.length===i.length?(s=t.matrix,1!==a.contrast&&E("contrast",r,a,A),a.hue&&E("hue",r,a,A),1!==a.brightness&&E("brightness",r,a,A),a.colorizeAmount&&(E("colorize",r,a,A),E("colorizeAmount",r,a,A)),1!==a.saturation&&E("saturation",r,a,A)):(s=f.slice(),null!=t.contrast?(s=D(s,+t.contrast),E("contrast",r,a,t)):1!==a.contrast&&(l?s=D(s,a.contrast):E("contrast",r,a,A)),null!=t.hue?(s=x(s,+t.hue),E("hue",r,a,t)):a.hue&&(l?s=x(s,a.hue):E("hue",r,a,A)),null!=t.brightness?(s=C(+t.brightness,s),E("brightness",r,a,t)):1!==a.brightness&&(l?s=C(a.brightness,s):E("brightness",r,a,A)),null!=t.colorize?(t.colorizeAmount="colorizeAmount"in t?+t.colorizeAmount:1,s=b(s,t.colorize,t.colorizeAmount),E("colorize",r,a,t),E("colorizeAmount",r,a,t)):a.colorizeAmount&&(l?s=b(s,a.colorize,a.colorizeAmount):(E("colorize",r,a,A),E("colorizeAmount",r,a,A))),null!=t.saturation?(s=_(s,+t.saturation),E("saturation",r,a,t)):1!==a.saturation&&(l?s=_(s,a.saturation):E("saturation",r,a,A))),n=s.length;for(;--n>-1;)s[n]!==i[n]&&r.add(i,n,i[n],s[n],"colorMatrixFilter");r._props.push("colorMatrixFilter")},T=function(e,t){var r=t.t,n=t.p,s=t.color;(0,t.set)(r,n,s[0]<<16|s[1]<<8|s[2])},M=function(e,t){var r=t.g;r&&(r.dirty++,r.clearDirty++)},F=function(e,t){t.t.visible=!!t.t.alpha},S=function(e,t,r,n){var s=e[t],o=i(p(s)?e[t.indexOf("set")||!p(e["get"+t.substr(3)])?t:"get"+t.substr(3)]():s),u=i(r);n._pt=new a(n._pt,e,t,0,0,T,{t:e,p:t,color:o,set:l(e,t)}),n.add(o,0,o[0],u[0]),n.add(o,1,o[1],u[1]),n.add(o,2,o[2],u[2])},P={tint:1,lineColor:1,fillColor:1},k="position,scale,skew,pivot,anchor,tilePosition,tileScale".split(","),L={x:"position",y:"position",tileX:"tilePosition",tileY:"tilePosition"},O={colorMatrixFilter:1,saturation:1,contrast:1,hue:1,colorize:1,colorizeAmount:1,brightness:1,combineCMF:1},R=Math.PI/180,q=function(e){return"string"==typeof e},B=function(e){return q(e)&&"="===e.charAt(1)?e.substr(0,2)+parseFloat(e.substr(2))*R:e*R},I=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e5*(t.s+t.c*e))/1e5,t)},z=function(e,t,r,n,s,i){var o,l,u=360*(i?R:1),c=q(s),h=c&&"="===s.charAt(1)?+(s.charAt(0)+"1"):0,d=parseFloat(h?s.substr(2):s)*(i?R:1),p=h?d*h:d-n,f=n+p;return c&&("short"===(o=s.split("_")[1])&&(p%=u)!==p%(u/2)&&(p+=p<0?u:-u),"cw"===o&&p<0?p=(p+1e10*u)%u-~~(p/u)*u:"ccw"===o&&p>0&&(p=(p-1e10*u)%u-~~(p/u)*u)),e._pt=l=new a(e._pt,t,r,n,p,I),l.e=f,l},N=function(){h()&&(s=window,n=d(),o=o||s.PIXI,i=function(e){return n.utils.splitColor("0x"===(e+"").substr(0,2)?"#"+e.substr(2):e)})};for(u=0;u<k.length;u++)c=k[u],L[c+"X"]=c,L[c+"Y"]=c;var U={version:"3.7.1",name:"pixi",register:function(e,t,r){n=e,a=r,l=t.getSetter,N()},registerPIXI:function(e){o=e},init:function(e,t,r,n,s){if(o||N(),!e instanceof o.DisplayObject)return!1;var i,l,u,c,h,d,p,f,g,m="4"===o.VERSION.charAt(0);for(d in t){if(i=L[d],u=t[d],i)l=~d.charAt(d.length-1).toLowerCase().indexOf("x")?"x":"y",this.add(e[i],l,e[i][l],"skew"===i?B(u):u);else if("scale"===d||"anchor"===d||"pivot"===d||"tileScale"===d)this.add(e[d],"x",e[d].x,u),this.add(e[d],"y",e[d].y,u);else if("rotation"===d||"angle"===d)z(this,e,d,e[d],u,"rotation"===d);else if(O[d])c||(j(e,t.colorMatrixFilter||t,this),c=!0);else if("blur"===d||"blurX"===d||"blurY"===d||"blurPadding"===d){if(h=w(e,"BlurFilter"),this.add(h,d,h[d],u),0!==t.blurPadding)for(p=t.blurPadding||2*Math.max(h[d],u),f=e.filters.length;--f>-1;)e.filters[f].padding=Math.max(e.filters[f].padding,p)}else if(P[d])if(("lineColor"===d||"fillColor"===d)&&e instanceof o.Graphics)for(g=(e.geometry||e).graphicsData,this._pt=new a(this._pt,e,d,0,0,M,{g:e.geometry||e}),f=g.length;--f>-1;)S(m?g[f]:g[f][d.substr(0,4)+"Style"],m?d:"color",u,this);else S(e,d,u,this);else"autoAlpha"===d?(this._pt=new a(this._pt,e,"visible",0,0,F),this.add(e,"alpha",e.alpha,u),this._props.push("alpha","visible")):"resolution"!==d&&this.add(e,d,"get",u);this._props.push(d)}}};d()&&n.registerPlugin(U)},"./node_modules/gsap/ScrollToPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ScrollToPlugin:()=>_,default:()=>_});var n,s,i,o,a,l,u,c=function(){return"undefined"!=typeof window},h=function(){return n||c()&&(n=window.gsap)&&n.registerPlugin&&n},d=function(e){return"string"==typeof e},p=function(e){return"function"==typeof e},f=function(e,t){var r="x"===t?"Width":"Height",n="scroll"+r,s="client"+r;return e===i||e===o||e===a?Math.max(o[n],a[n])-(i["inner"+r]||o[s]||a[s]):e[n]-e["offset"+r]},g=function(e,t){var r="scroll"+("x"===t?"Left":"Top");return e===i&&(null!=e.pageXOffset?r="page"+t.toUpperCase()+"Offset":e=null!=o[r]?o:a),function(){return e[r]}},m=function(e,t){if(!(e=l(e)[0])||!e.getBoundingClientRect)return console.warn("scrollTo target doesn't exist. Using 0")||{x:0,y:0};var r=e.getBoundingClientRect(),n=!t||t===i||t===a,s=n?{top:o.clientTop-(i.pageYOffset||o.scrollTop||a.scrollTop||0),left:o.clientLeft-(i.pageXOffset||o.scrollLeft||a.scrollLeft||0)}:t.getBoundingClientRect(),u={x:r.left-s.left,y:r.top-s.top};return!n&&t&&(u.x+=g(t,"x")(),u.y+=g(t,"y")()),u},v=function(e,t,r,n,s){return isNaN(e)||"object"==typeof e?d(e)&&"="===e.charAt(1)?parseFloat(e.substr(2))*("-"===e.charAt(0)?-1:1)+n-s:"max"===e?f(t,r)-s:Math.min(f(t,r),m(e,t)[r]-s):parseFloat(e)-s},y=function(){n=h(),c()&&n&&document.body&&(i=window,a=document.body,o=document.documentElement,l=n.utils.toArray,n.config({autoKillThreshold:7}),u=n.config(),s=1)},_={version:"3.7.1",name:"scrollTo",rawVars:1,register:function(e){n=e,y()},init:function(e,t,r,o,a){s||y();var l=this,u=n.getProperty(e,"scrollSnapType");l.isWin=e===i,l.target=e,l.tween=r,t=function(e,t,r,n){if(p(e)&&(e=e(t,r,n)),"object"!=typeof e)return d(e)&&"max"!==e&&"="!==e.charAt(1)?{x:e,y:e}:{y:e};if(e.nodeType)return{y:e,x:e};var s,i={};for(s in e)i[s]="onAutoKill"!==s&&p(e[s])?e[s](t,r,n):e[s];return i}(t,o,e,a),l.vars=t,l.autoKill=!!t.autoKill,l.getX=g(e,"x"),l.getY=g(e,"y"),l.x=l.xPrev=l.getX(),l.y=l.yPrev=l.getY(),u&&"none"!==u&&(l.snap=1,l.snapInline=e.style.scrollSnapType,e.style.scrollSnapType="none"),null!=t.x?(l.add(l,"x",l.x,v(t.x,e,"x",l.x,t.offsetX||0),o,a),l._props.push("scrollTo_x")):l.skipX=1,null!=t.y?(l.add(l,"y",l.y,v(t.y,e,"y",l.y,t.offsetY||0),o,a),l._props.push("scrollTo_y")):l.skipY=1},render:function(e,t){for(var r,n,s,o,a,l=t._pt,c=t.target,h=t.tween,d=t.autoKill,p=t.xPrev,g=t.yPrev,m=t.isWin,v=t.snap,y=t.snapInline;l;)l.r(e,l.d),l=l._next;r=m||!t.skipX?t.getX():p,s=(n=m||!t.skipY?t.getY():g)-g,o=r-p,a=u.autoKillThreshold,t.x<0&&(t.x=0),t.y<0&&(t.y=0),d&&(!t.skipX&&(o>a||o<-a)&&r<f(c,"x")&&(t.skipX=1),!t.skipY&&(s>a||s<-a)&&n<f(c,"y")&&(t.skipY=1),t.skipX&&t.skipY&&(h.kill(),t.vars.onAutoKill&&t.vars.onAutoKill.apply(h,t.vars.onAutoKillParams||[]))),m?i.scrollTo(t.skipX?r:t.x,t.skipY?n:t.y):(t.skipY||(c.scrollTop=t.y),t.skipX||(c.scrollLeft=t.x)),!v||1!==e&&0!==e||(n=c.scrollTop,r=c.scrollLeft,y?c.style.scrollSnapType=y:c.style.removeProperty("scroll-snap-type"),c.scrollTop=n+1,c.scrollLeft=r+1,c.scrollTop=n,c.scrollLeft=r),t.xPrev=t.x,t.yPrev=t.y},kill:function(e){var t="scrollTo"===e;(t||"scrollTo_x"===e)&&(this.skipX=1),(t||"scrollTo_y"===e)&&(this.skipY=1)}};_.max=f,_.getOffset=m,_.buildGetter=g,h()&&n.registerPlugin(_)},"./node_modules/gsap/ScrollTrigger.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ScrollTrigger:()=>ut,default:()=>ut});var n,s,i,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C,A,j,T,M,F,S=1,P=[],k=[],L=Date.now,O=L(),R=0,q=1,B=function(e){return e},I=function(e){return Math.round(1e5*e)/1e5||0},z=function(){return"undefined"!=typeof window},N=function(){return n||z()&&(n=window.gsap)&&n.registerPlugin&&n},U=function(e){return!!~u.indexOf(e)},H=function(e,t){return~P.indexOf(e)&&P[P.indexOf(e)+1][t]},V=function(e,t){var r=t.s,n=t.sc,s=k.indexOf(e),i=n===_e.sc?1:2;return!~s&&(s=k.push(e)-1),k[s+i]||(k[s+i]=H(e,r)||(U(e)?n:function(t){return arguments.length?e[r]=t:e[r]}))},X=function(e){return H(e,"getBoundingClientRect")||(U(e)?function(){return st.width=i.innerWidth,st.height=i.innerHeight,st}:function(){return De(e)})},Y=function(e,t){var r=t.s,n=t.d2,s=t.d,o=t.a;return(r="scroll"+n)&&(o=H(e,r))?o()-X(e)()[s]:U(e)?Math.max(a[r],l[r])-(i["inner"+n]||a["client"+n]||l["client"+n]):e[r]-e["offset"+n]},G=function(e,t){for(var r=0;r<w.length;r+=3)(!t||~t.indexOf(w[r+1]))&&e(w[r],w[r+1],w[r+2])},W=function(e){return"string"==typeof e},K=function(e){return"function"==typeof e},Z=function(e){return"number"==typeof e},$=function(e){return"object"==typeof e},Q=function(e){return K(e)&&e()},J=function(e,t){return function(){var r=Q(e),n=Q(t);return function(){Q(r),Q(n)}}},ee=Math.abs,te="scrollLeft",re="scrollTop",ne="left",se="top",ie="right",oe="bottom",ae="width",le="height",ue="Right",ce="Left",he="Top",de="Bottom",pe="padding",fe="margin",ge="Width",me="Height",ve="px",ye={s:te,p:ne,p2:ce,os:ie,os2:ue,d:ae,d2:ge,a:"x",sc:function(e){return arguments.length?i.scrollTo(e,_e.sc()):i.pageXOffset||o.scrollLeft||a.scrollLeft||l.scrollLeft||0}},_e={s:re,p:se,p2:he,os:oe,os2:de,d:le,d2:me,a:"y",op:ye,sc:function(e){return arguments.length?i.scrollTo(ye.sc(),e):i.pageYOffset||o.scrollTop||a.scrollTop||l.scrollTop||0}},be=function(e){return i.getComputedStyle(e)},xe=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},De=function(e,t){var r=t&&"matrix(1, 0, 0, 1, 0, 0)"!==be(e)[_]&&n.to(e,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),s=e.getBoundingClientRect();return r&&r.progress(0).kill(),s},we=function(e,t){var r=t.d2;return e["offset"+r]||e["client"+r]||0},Ee=function(e){var t,r=[],n=e.labels,s=e.duration();for(t in n)r.push(n[t]/s);return r},Ce=function(e,t,r,n){return r.split(",").forEach((function(r){return e(t,r,n)}))},Ae=function(e,t,r){return e.addEventListener(t,r,{passive:!0})},je=function(e,t,r){return e.removeEventListener(t,r)},Te={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Me={toggleActions:"play",anticipatePin:0},Fe={top:0,left:0,center:.5,bottom:1,right:1},Se=function(e,t){if(W(e)){var r=e.indexOf("="),n=~r?+(e.charAt(r-1)+1)*parseFloat(e.substr(r+1)):0;~r&&(e.indexOf("%")>r&&(n*=t/100),e=e.substr(0,r-1)),e=n+(e in Fe?Fe[e]*t:~e.indexOf("%")?parseFloat(e)*t/100:parseFloat(e)||0)}return e},Pe=function(e,t,r,n,s,i,a){var u=s.startColor,c=s.endColor,h=s.fontSize,d=s.indent,p=s.fontWeight,f=o.createElement("div"),g=U(r)||"fixed"===H(r,"pinType"),m=-1!==e.indexOf("scroller"),v=g?l:r,y=-1!==e.indexOf("start"),_=y?u:c,b="border-color:"+_+";font-size:"+h+";color:"+_+";font-weight:"+p+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return b+="position:"+(m&&g?"fixed;":"absolute;"),(m||!g)&&(b+=(n===_e?ie:oe)+":"+(i+parseFloat(d))+"px;"),a&&(b+="box-sizing:border-box;text-align:left;width:"+a.offsetWidth+"px;"),f._isStart=y,f.setAttribute("class","gsap-marker-"+e),f.style.cssText=b,f.innerText=t||0===t?e+"-"+t:e,v.children[0]?v.insertBefore(f,v.children[0]):v.appendChild(f),f._offset=f["offset"+n.op.d2],ke(f,0,n,y),f},ke=function(e,t,r,s){var i={display:"block"},o=r[s?"os2":"p2"],a=r[s?"p2":"os2"];e._isFlipped=s,i[r.a+"Percent"]=s?-100:0,i[r.a]=s?"1px":0,i["border"+o+ge]=1,i["border"+a+ge]=0,i[r.p]=t+"px",n.set(e,i)},Le=[],Oe={},Re=function(){return d||(d=h($e))},qe=function(){d||(d=h($e),R||Ve("scrollStart"),R=L())},Be=function(){return!v&&!A&&!o.fullscreenElement&&c.restart(!0)},Ie={},ze=[],Ne=[],Ue=function(e){var t,r=n.ticker.frame,o=[],a=0;if(M!==r||S){for(Ge();a<Ne.length;a+=4)(t=i.matchMedia(Ne[a]).matches)!==Ne[a+3]&&(Ne[a+3]=t,t?o.push(a):Ge(1,Ne[a])||K(Ne[a+2])&&Ne[a+2]());for(Ye(),a=0;a<o.length;a++)t=o[a],T=Ne[t],Ne[t+2]=Ne[t+1](e);T=0,s&&We(0,1),M=r,Ve("matchMedia")}},He=function e(){return je(ut,"scrollEnd",e)||We(!0)},Ve=function(e){return Ie[e]&&Ie[e].map((function(e){return e()}))||ze},Xe=[],Ye=function(e){for(var t=0;t<Xe.length;t+=5)e&&Xe[t+4]!==e||(Xe[t].style.cssText=Xe[t+1],Xe[t].getBBox&&Xe[t].setAttribute("transform",Xe[t+2]||""),Xe[t+3].uncache=1)},Ge=function(e,t){var r;for(b=0;b<Le.length;b++)r=Le[b],t&&r.media!==t||(e?r.kill(1):r.revert());t&&Ye(t),t||Ve("revert")},We=function(e,t){if(!R||e){F=!0;var r=Ve("refreshInit");E&&ut.sort(),t||Ge(),Le.forEach((function(e){return e.refresh()})),r.forEach((function(e){return e&&e.render&&e.render(-1)})),k.forEach((function(e){return"function"==typeof e&&(e.rec=0)})),c.pause(),F=!1,Ve("refresh")}else Ae(ut,"scrollEnd",He)},Ke=0,Ze=1,$e=function(){if(!F){var e=Le.length,t=L(),r=t-O>=50,n=e&&Le[0].scroll();if(Ze=Ke>n?-1:1,Ke=n,r&&(R&&!y&&t-R>200&&(R=0,Ve("scrollEnd")),g=O,O=t),Ze<0){for(b=e;b-- >0;)Le[b]&&Le[b].update(0,r);Ze=1}else for(b=0;b<e;b++)Le[b]&&Le[b].update(0,r);d=0}},Qe=[ne,se,oe,ie,"marginBottom","marginRight","marginTop","marginLeft","display","flexShrink","float","zIndex","grid-column-start","grid-column-end","grid-row-start","grid-row-end","grid-area","justify-self","align-self","place-self"],Je=Qe.concat([ae,le,"boxSizing","maxWidth","maxHeight","position",fe,pe,"paddingTop","paddingRight","paddingBottom","paddingLeft"]),et=function(e,t,r,n){if(e.parentNode!==t){for(var s,i=Qe.length,o=t.style,a=e.style;i--;)o[s=Qe[i]]=r[s];o.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(o.display="inline-block"),a.bottom=a.right="auto",o.overflow="visible",o.boxSizing="border-box",o.width=we(e,ye)+ve,o.height=we(e,_e)+ve,o.padding=a.margin=a.top=a.left="0",rt(n),a.width=a.maxWidth=r.width,a.height=a.maxHeight=r.height,a.padding=r.padding,e.parentNode.insertBefore(t,e),t.appendChild(e)}},tt=/([A-Z])/g,rt=function(e){if(e){var t,r,s=e.t.style,i=e.length,o=0;for((e.t._gsap||n.core.getCache(e.t)).uncache=1;o<i;o+=2)r=e[o+1],t=e[o],r?s[t]=r:s[t]&&s.removeProperty(t.replace(tt,"-$1").toLowerCase())}},nt=function(e){for(var t=Je.length,r=e.style,n=[],s=0;s<t;s++)n.push(Je[s],r[Je[s]]);return n.t=e,n},st={left:0,top:0},it=function(e,t,r,n,s,i,o,u,c,h,d,f){if(K(e)&&(e=e(u)),W(e)&&"max"===e.substr(0,3)&&(e=f+("="===e.charAt(4)?Se("0"+e.substr(3),r):0)),Z(e))o&&ke(o,r,n,!0);else{K(t)&&(t=t(u));var g,m,v,y=p(t)[0]||l,_=De(y)||{},b=e.split(" ");_&&(_.left||_.top)||"none"!==be(y).display||(v=y.style.display,y.style.display="block",_=De(y),v?y.style.display=v:y.style.removeProperty("display")),g=Se(b[0],_[n.d]),m=Se(b[1]||"0",r),e=_[n.p]-c[n.p]-h+g+s-m,o&&ke(o,m,n,r-m<20||o._isStart&&m>20),r-=r-m}if(i){var x=e+r,D=i._isStart;f="scroll"+n.d2,ke(i,x,n,D&&x>20||!D&&(d?Math.max(l[f],a[f]):i.parentNode[f])<=x+1),d&&(c=De(o),d&&(i.style[n.op.p]=c[n.op.p]-n.op.m-i._offset+ve))}return Math.round(e)},ot=/(?:webkit|moz|length|cssText|inset)/i,at=function(e,t,r,s){if(e.parentNode!==t){var i,o,a=e.style;if(t===l){for(i in e._stOrig=a.cssText,o=be(e))+i||ot.test(i)||!o[i]||"string"!=typeof a[i]||"0"===i||(a[i]=o[i]);a.top=r,a.left=s}else a.cssText=e._stOrig;n.core.getCache(e).uncache=1,t.appendChild(e)}},lt=function(e,t){var r,s,i=V(e,t),o="_scroll"+t.p2,a=function t(a,l,u,c,h){var d=t.tween,p=l.onComplete,f={};return d&&d.kill(),r=Math.round(u),l[o]=a,l.modifiers=f,f[o]=function(e){return(e=I(i()))!==r&&e!==s&&Math.abs(e-r)>2?(d.kill(),t.tween=0):e=u+c*d.ratio+h*d.ratio*d.ratio,s=r,r=I(e)},l.onComplete=function(){t.tween=0,p&&p.call(d)},d=t.tween=n.to(e,l)};return e[o]=i,e.addEventListener("wheel",(function(){return a.tween&&a.tween.kill()&&(a.tween=0)}),{passive:!0}),a};ye.op=_e;var ut=function(){function e(t,r){s||e.register(n)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(t,r)}return e.prototype.init=function(t,r){if(this.progress=this.start=0,this.vars&&this.kill(1),q){var s,u,c,h,d,m,_,x,D,w,A,M,F,k,O,I,z,N,G,Q,J,te,re,ne,se,ie,oe,ae,le,ue,ce,he,de,me,Ce,Fe,ke,Re,Ie,ze=(t=xe(W(t)||Z(t)||t.nodeType?{trigger:t}:t,Me)).horizontal?ye:_e,Ne=t,Ue=Ne.onUpdate,Ve=Ne.toggleClass,Xe=Ne.id,Ye=Ne.onToggle,Ge=Ne.onRefresh,We=Ne.scrub,Ke=Ne.trigger,$e=Ne.pin,Qe=Ne.pinSpacing,Je=Ne.invalidateOnRefresh,tt=Ne.anticipatePin,ot=Ne.onScrubComplete,ut=Ne.onSnapComplete,ct=Ne.once,ht=Ne.snap,dt=Ne.pinReparent,pt=!We&&0!==We,ft=p(t.scroller||i)[0],gt=n.core.getCache(ft),mt=U(ft),vt="pinType"in t?"fixed"===t.pinType:mt||"fixed"===H(ft,"pinType"),yt=[t.onEnter,t.onLeave,t.onEnterBack,t.onLeaveBack],_t=pt&&t.toggleActions.split(" "),bt="markers"in t?t.markers:Me.markers,xt=mt?0:parseFloat(be(ft)["border"+ze.p2+ge])||0,Dt=this,wt=t.onRefreshInit&&function(){return t.onRefreshInit(Dt)},Et=function(e,t,r){var n=r.d,s=r.d2,o=r.a;return(o=H(e,"getBoundingClientRect"))?function(){return o()[n]}:function(){return(t?i["inner"+s]:e["client"+s])||0}}(ft,mt,ze),Ct=function(e,t){return!t||~P.indexOf(e)?X(e):function(){return st}}(ft,mt),At=0;Dt.media=T,tt*=45,Dt.scroller=ft,Dt.scroll=V(ft,ze),h=Dt.scroll(),Dt.vars=t,r=r||t.animation,"refreshPriority"in t&&(E=1),gt.tweenScroll=gt.tweenScroll||{top:lt(ft,_e),left:lt(ft,ye)},Dt.tweenTo=s=gt.tweenScroll[ze.p],r&&(r.vars.lazy=!1,r._initted||!1!==r.vars.immediateRender&&!1!==t.immediateRender&&r.render(0,!0,!0),Dt.animation=r.pause(),r.scrollTrigger=Dt,(ce=Z(We)&&We)&&(ue=n.to(r,{ease:"power3",duration:ce,onComplete:function(){return ot&&ot(Dt)}})),ae=0,Xe||(Xe=r.vars.id)),Le.push(Dt),ht&&($(ht)&&!ht.push||(ht={snapTo:ht}),"scrollBehavior"in l.style&&n.set(mt?[l,a]:ft,{scrollBehavior:"auto"}),c=K(ht.snapTo)?ht.snapTo:"labels"===ht.snapTo?function(e){return function(t){return n.utils.snap(Ee(e),t)}}(r):"labelsDirectional"===ht.snapTo?(ke=r,function(e,t){var r,n=Ee(ke);if(n.sort((function(e,t){return e-t})),t.direction>0){for(e-=1e-4,r=0;r<n.length;r++)if(n[r]>=e)return n[r];return n.pop()}for(r=n.length,e+=1e-4;r--;)if(n[r]<=e)return n[r];return n[0]}):n.utils.snap(ht.snapTo),he=ht.duration||{min:.1,max:2},he=$(he)?f(he.min,he.max):f(he,he),de=n.delayedCall(ht.delay||ce/2||.1,(function(){if(Math.abs(Dt.getVelocity())<10&&!y&&At!==Dt.scroll()){var e=r&&!pt?r.totalProgress():Dt.progress,t=(e-le)/(L()-g)*1e3||0,i=n.utils.clamp(-Dt.progress,1-Dt.progress,ee(t/2)*t/.185),o=Dt.progress+(!1===ht.inertia?0:i),a=f(0,1,c(o,Dt)),l=Dt.scroll(),u=Math.round(m+a*F),h=ht,d=h.onStart,p=h.onInterrupt,v=h.onComplete,b=s.tween;if(l<=_&&l>=m&&u!==l){if(b&&!b._initted&&b.data<=Math.abs(u-l))return;!1===ht.inertia&&(i=a-Dt.progress),s(u,{duration:he(ee(.185*Math.max(ee(o-e),ee(a-e))/t/.05||0)),ease:ht.ease||"power3",data:Math.abs(u-l),onInterrupt:function(){return de.restart(!0)&&p&&p(Dt)},onComplete:function(){At=Dt.scroll(),ae=le=r&&!pt?r.totalProgress():Dt.progress,ut&&ut(Dt),v&&v(Dt)}},l,i*F,u-l-i*F),d&&d(Dt,s.tween)}}else Dt.isActive&&de.restart(!0)})).pause()),Xe&&(Oe[Xe]=Dt),Ke=Dt.trigger=p(Ke||$e)[0],$e=!0===$e?Ke:p($e)[0],W(Ve)&&(Ve={targets:Ke,className:Ve}),$e&&(!1===Qe||Qe===fe||(Qe=!(!Qe&&"flex"===be($e.parentNode).display)&&pe),Dt.pin=$e,!1!==t.force3D&&n.set($e,{force3D:!0}),(u=n.core.getCache($e)).spacer?k=u.pinState:(u.spacer=z=o.createElement("div"),z.setAttribute("class","pin-spacer"+(Xe?" pin-spacer-"+Xe:"")),u.pinState=k=nt($e)),Dt.spacer=z=u.spacer,oe=be($e),re=oe[Qe+ze.os2],G=n.getProperty($e),Q=n.quickSetter($e,ze.a,ve),et($e,z,oe),I=nt($e)),bt&&(M=$(bt)?xe(bt,Te):Te,w=Pe("scroller-start",Xe,ft,ze,M,0),A=Pe("scroller-end",Xe,ft,ze,M,0,w),N=w["offset"+ze.op.d2],x=Pe("start",Xe,ft,ze,M,N),D=Pe("end",Xe,ft,ze,M,N),vt||P.length&&!0===H(ft,"fixedMarkers")||(Ie=be(Re=mt?l:ft).position,Re.style.position="absolute"===Ie||"fixed"===Ie?Ie:"relative",n.set([w,A],{force3D:!0}),se=n.quickSetter(w,ze.a,ve),ie=n.quickSetter(A,ze.a,ve))),Dt.revert=function(e){var t=!1!==e||!Dt.enabled,n=v;t!==Dt.isReverted&&(t&&(Dt.scroll.rec||(Dt.scroll.rec=Dt.scroll()),Ce=Math.max(Dt.scroll(),Dt.scroll.rec||0),me=Dt.progress,Fe=r&&r.progress()),x&&[x,D,w,A].forEach((function(e){return e.style.display=t?"none":"block"})),t&&(v=1),Dt.update(t),v=n,$e&&(t?function(e,t,r){if(rt(r),e.parentNode===t){var n=t.parentNode;n&&(n.insertBefore(e,t),n.removeChild(t))}}($e,z,k):(!dt||!Dt.isActive)&&et($e,z,be($e),ne)),Dt.isReverted=t)},Dt.refresh=function(s,i){if(!v&&Dt.enabled||i)if($e&&s&&R)Ae(e,"scrollEnd",He);else{v=1,ue&&ue.pause(),Je&&r&&r.progress(0).invalidate(),Dt.isReverted||Dt.revert();for(var o,a,u,c,f,g,y,b,E,j,T=Et(),M=Ct(),S=Y(ft,ze),P=0,L=0,q=t.end,B=t.endTrigger||Ke,N=t.start||(0!==t.start&&Ke?$e?"0 0":"0 100%":0),U=t.pinnedContainer&&p(t.pinnedContainer)[0],H=Ke&&Math.max(0,Le.indexOf(Dt))||0,X=H;X--;)(g=Le[X]).end||g.refresh(0,1)||(v=1),!(y=g.pin)||y!==Ke&&y!==$e||g.isReverted||(j||(j=[]),j.unshift(g),g.revert());for(m=it(N,Ke,T,ze,Dt.scroll(),x,w,Dt,M,xt,vt,S)||($e?-.001:0),K(q)&&(q=q(Dt)),W(q)&&!q.indexOf("+=")&&(~q.indexOf(" ")?q=(W(N)?N.split(" ")[0]:"")+q:(P=Se(q.substr(2),T),q=W(N)?N:m+P,B=Ke)),_=Math.max(m,it(q||(B?"100% 0":S),B,T,ze,Dt.scroll()+P,D,A,Dt,M,xt,vt,S))||-.001,F=_-m||(m-=.01)&&.001,P=0,X=H;X--;)(y=(g=Le[X]).pin)&&g.start-g._pinPush<m&&(o=g.end-g.start,(y===Ke||y===U)&&(P+=o),y===$e&&(L+=o));if(m+=P,_+=P,Dt._pinPush=L,x&&P&&((o={})[ze.a]="+="+P,U&&(o[ze.p]="-="+Dt.scroll()),n.set([x,D],o)),$e)o=be($e),c=ze===_e,u=Dt.scroll(),J=parseFloat(G(ze.a))+L,!S&&_>1&&((mt?l:ft).style["overflow-"+ze.a]="scroll"),et($e,z,o),I=nt($e),a=De($e,!0),b=vt&&V(ft,c?ye:_e)(),Qe&&((ne=[Qe+ze.os2,F+L+ve]).t=z,(X=Qe===pe?we($e,ze)+F+L:0)&&ne.push(ze.d,X+ve),rt(ne),vt&&Dt.scroll(Ce)),vt&&((f={top:a.top+(c?u-m:b)+ve,left:a.left+(c?b:u-m)+ve,boxSizing:"border-box",position:"fixed"}).width=f.maxWidth=Math.ceil(a.width)+ve,f.height=f.maxHeight=Math.ceil(a.height)+ve,f.margin=f.marginTop=f.marginRight=f.marginBottom=f.marginLeft="0",f.padding=o.padding,f.paddingTop=o.paddingTop,f.paddingRight=o.paddingRight,f.paddingBottom=o.paddingBottom,f.paddingLeft=o.paddingLeft,O=function(e,t,r){for(var n,s=[],i=e.length,o=r?8:0;o<i;o+=2)n=e[o],s.push(n,n in t?t[n]:e[o+1]);return s.t=e.t,s}(k,f,dt)),r?(E=r._initted,C(1),r.render(r.duration(),!0,!0),te=G(ze.a)-J+F+L,F!==te&&O.splice(O.length-2,2),r.render(0,!0,!0),E||r.invalidate(),C(0)):te=F;else if(Ke&&Dt.scroll())for(a=Ke.parentNode;a&&a!==l;)a._pinOffset&&(m-=a._pinOffset,_-=a._pinOffset),a=a.parentNode;j&&j.forEach((function(e){return e.revert(!1)})),Dt.start=m,Dt.end=_,(h=d=Dt.scroll())<Ce&&Dt.scroll(Ce),Dt.revert(!1),v=0,r&&pt&&r._initted&&r.progress()!==Fe&&r.progress(Fe,!0).render(r.time(),!0,!0),me!==Dt.progress&&(ue&&r.totalProgress(me,!0),Dt.progress=me,Dt.update()),$e&&Qe&&(z._pinOffset=Math.round(Dt.progress*te)),Ge&&Ge(Dt)}},Dt.getVelocity=function(){return(Dt.scroll()-d)/(L()-g)*1e3||0},Dt.update=function(e,t){var n,i,o,a,u,c=Dt.scroll(),f=e?0:(c-m)/F,y=f<0?0:f>1?1:f||0,b=Dt.progress;if(t&&(d=h,h=c,ht&&(le=ae,ae=r&&!pt?r.totalProgress():y)),tt&&!y&&$e&&!v&&!S&&R&&m<c+(c-d)/(L()-g)*tt&&(y=1e-4),y!==b&&Dt.enabled){if(a=(u=(n=Dt.isActive=!!y&&y<1)!==(!!b&&b<1))||!!y!=!!b,Dt.direction=y>b?1:-1,Dt.progress=y,pt||(!ue||v||S?r&&r.totalProgress(y,!!v):(ue.vars.totalProgress=y,ue.invalidate().restart())),$e)if(e&&Qe&&(z.style[Qe+ze.os2]=re),vt){if(a){if(o=!e&&y>b&&_+1>c&&c+1>=Y(ft,ze),dt)if(e||!n&&!o)at($e,z);else{var x=De($e,!0),D=c-m;at($e,l,x.top+(ze===_e?D:0)+ve,x.left+(ze===_e?0:D)+ve)}rt(n||o?O:I),te!==F&&y<1&&n||Q(J+(1!==y||o?0:te))}}else Q(J+te*y);ht&&!s.tween&&!v&&!S&&de.restart(!0),Ve&&(u||ct&&y&&(y<1||!j))&&p(Ve.targets).forEach((function(e){return e.classList[n||ct?"add":"remove"](Ve.className)})),Ue&&!pt&&!e&&Ue(Dt),a&&!v?(i=y&&!b?0:1===y?1:1===b?2:3,pt&&(o=!u&&"none"!==_t[i+1]&&_t[i+1]||_t[i],r&&("complete"===o||"reset"===o||o in r)&&("complete"===o?r.pause().totalProgress(1):"reset"===o?r.restart(!0).pause():"restart"===o?r.restart(!0):r[o]()),Ue&&Ue(Dt)),!u&&j||(Ye&&u&&Ye(Dt),yt[i]&&yt[i](Dt),ct&&(1===y?Dt.kill(!1,1):yt[i]=0),u||yt[i=1===y?1:3]&&yt[i](Dt))):pt&&Ue&&!v&&Ue(Dt)}ie&&(se(c+(w._isFlipped?1:0)),ie(c))},Dt.enable=function(t,r){Dt.enabled||(Dt.enabled=!0,Ae(ft,"resize",Be),Ae(ft,"scroll",qe),wt&&Ae(e,"refreshInit",wt),!1!==t&&(Dt.progress=me=0,h=d=At=Dt.scroll()),!1!==r&&Dt.refresh())},Dt.getTween=function(e){return e&&s?s.tween:ue},Dt.disable=function(t,r){if(Dt.enabled&&(!1!==t&&Dt.revert(),Dt.enabled=Dt.isActive=!1,r||ue&&ue.pause(),Ce=0,u&&(u.uncache=1),wt&&je(e,"refreshInit",wt),de&&(de.pause(),s.tween&&s.tween.kill()&&(s.tween=0)),!mt)){for(var n=Le.length;n--;)if(Le[n].scroller===ft&&Le[n]!==Dt)return;je(ft,"resize",Be),je(ft,"scroll",qe)}},Dt.kill=function(e,t){Dt.disable(e,t),Xe&&delete Oe[Xe];var n=Le.indexOf(Dt);Le.splice(n,1),n===b&&Ze>0&&b--,n=0,Le.forEach((function(e){return e.scroller===Dt.scroller&&(n=1)})),n||(Dt.scroll.rec=0),r&&(r.scrollTrigger=null,e&&r.render(-1),t||r.kill()),x&&[x,D,w,A].forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),$e&&(u&&(u.uncache=1),n=0,Le.forEach((function(e){return e.pin===$e&&n++})),n||(u.spacer=0))},Dt.enable(!1,!1),r&&r.add&&!F?n.delayedCall(.01,(function(){return m||_||Dt.refresh()}))&&(F=.01)&&(m=_=0):Dt.refresh()}else this.update=this.refresh=this.kill=B},e.register=function(t){if(!s&&(n=t||N(),z()&&window.document&&(i=window,o=document,a=o.documentElement,l=o.body),n&&(p=n.utils.toArray,f=n.utils.clamp,C=n.core.suppressOverwrites||B,n.core.globals("ScrollTrigger",e),l))){h=i.requestAnimationFrame||function(e){return setTimeout(e,16)},Ae(i,"wheel",qe),u=[i,o,a,l],Ae(o,"scroll",qe);var r,d=l.style,g=d.borderTop;d.borderTop="1px solid #000",r=De(l),_e.m=Math.round(r.top+_e.sc())||0,ye.m=Math.round(r.left+ye.sc())||0,g?d.borderTop=g:d.removeProperty("border-top"),m=setInterval(Re,200),n.delayedCall(.5,(function(){return S=0})),Ae(o,"touchcancel",B),Ae(l,"touchstart",B),Ce(Ae,o,"pointerdown,touchstart,mousedown",(function(){return y=1})),Ce(Ae,o,"pointerup,touchend,mouseup",(function(){return y=0})),_=n.utils.checkPrefix("transform"),Je.push(_),s=L(),c=n.delayedCall(.2,We).pause(),w=[o,"visibilitychange",function(){var e=i.innerWidth,t=i.innerHeight;o.hidden?(x=e,D=t):x===e&&D===t||Be()},o,"DOMContentLoaded",We,i,"load",function(){return R||We()},i,"resize",Be],G(Ae)}return s},e.defaults=function(e){for(var t in e)Me[t]=e[t]},e.kill=function(){q=0,Le.slice(0).forEach((function(e){return e.kill(1)}))},e.config=function(e){"limitCallbacks"in e&&(j=!!e.limitCallbacks);var t=e.syncInterval;t&&clearInterval(m)||(m=t)&&setInterval(Re,t),"autoRefreshEvents"in e&&(G(je)||G(Ae,e.autoRefreshEvents||"none"),A=-1===(e.autoRefreshEvents+"").indexOf("resize"))},e.scrollerProxy=function(e,t){var r=p(e)[0],n=k.indexOf(r),s=U(r);~n&&k.splice(n,s?6:2),s?P.unshift(i,t,l,t,a,t):P.unshift(r,t)},e.matchMedia=function(e){var t,r,n,s,o;for(r in e)n=Ne.indexOf(r),s=e[r],T=r,"all"===r?s():(t=i.matchMedia(r))&&(t.matches&&(o=s()),~n?(Ne[n+1]=J(Ne[n+1],s),Ne[n+2]=J(Ne[n+2],o)):(n=Ne.length,Ne.push(r,s,o),t.addListener?t.addListener(Ue):t.addEventListener("change",Ue)),Ne[n+3]=t.matches),T=0;return Ne},e.clearMatchMedia=function(e){e||(Ne.length=0),(e=Ne.indexOf(e))>=0&&Ne.splice(e,4)},e}();ut.version="3.7.1",ut.saveStyles=function(e){return e?p(e).forEach((function(e){if(e&&e.style){var t=Xe.indexOf(e);t>=0&&Xe.splice(t,5),Xe.push(e,e.style.cssText,e.getBBox&&e.getAttribute("transform"),n.core.getCache(e),T)}})):Xe},ut.revert=function(e,t){return Ge(!e,t)},ut.create=function(e,t){return new ut(e,t)},ut.refresh=function(e){return e?Be():We(!0)},ut.update=$e,ut.maxScroll=function(e,t){return Y(e,t?ye:_e)},ut.getScrollFunc=function(e,t){return V(p(e)[0],t?ye:_e)},ut.getById=function(e){return Oe[e]},ut.getAll=function(){return Le.slice(0)},ut.isScrolling=function(){return!!R},ut.addEventListener=function(e,t){var r=Ie[e]||(Ie[e]=[]);~r.indexOf(t)||r.push(t)},ut.removeEventListener=function(e,t){var r=Ie[e],n=r&&r.indexOf(t);n>=0&&r.splice(n,1)},ut.batch=function(e,t){var r,s=[],i={},o=t.interval||.016,a=t.batchMax||1e9,l=function(e,t){var r=[],s=[],i=n.delayedCall(o,(function(){t(r,s),r=[],s=[]})).pause();return function(e){r.length||i.restart(!0),r.push(e.trigger),s.push(e),a<=r.length&&i.progress(1)}};for(r in t)i[r]="on"===r.substr(0,2)&&K(t[r])&&"onRefreshInit"!==r?l(0,t[r]):t[r];return K(a)&&(a=a(),Ae(ut,"refresh",(function(){return a=t.batchMax()}))),p(e).forEach((function(e){var t={};for(r in i)t[r]=i[r];t.trigger=e,s.push(ut.create(t))})),s},ut.sort=function(e){return Le.sort(e||function(e,t){return-1e6*(e.vars.refreshPriority||0)+e.start-(t.start+-1e6*(t.vars.refreshPriority||0))})},N()&&n.registerPlugin(ut)},"./node_modules/gsap/TextPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{TextPlugin:()=>o,default:()=>o});var n,s,i=r("./node_modules/gsap/utils/strings.js"),o={version:"3.7.1",name:"text",init:function(e,t,r){var n,o,a,l,u,c,h,d,p=e.nodeName.toUpperCase(),f=this;if(f.svg=e.getBBox&&("TEXT"===p||"TSPAN"===p),!("innerHTML"in e)&&!f.svg)return!1;if(f.target=e,"object"!=typeof t&&(t={value:t}),"value"in t){for(f.delimiter=t.delimiter||"",a=(0,i.splitInnerHTML)(e,f.delimiter),s||(s=document.createElement("div")),s.innerHTML=t.value,o=(0,i.splitInnerHTML)(s,f.delimiter),f.from=r._from,f.from&&(p=a,a=o,o=p),f.hasClass=!(!t.newClass&&!t.oldClass),f.newClass=t.newClass,f.oldClass=t.oldClass,n=(p=a.length-o.length)<0?a:o,f.fillChar=t.fillChar||(t.padSpace?"&nbsp;":""),p<0&&(p=-p);--p>-1;)n.push(f.fillChar);if("diff"===t.type){for(l=0,u=[],c=[],h="",p=0;p<o.length;p++)(d=o[p])===a[p]?h+=d:(u[l]=h+d,c[l++]=h+a[p],h="");o=u,a=c,h&&(o.push(h),a.push(h))}t.speed&&r.duration(Math.min(.05/t.speed*n.length,t.maxDuration||9999)),this.original=a,this.text=o,this._props.push("text")}else f.text=f.original=[""]},render:function(e,t){e>1?e=1:e<0&&(e=0),t.from&&(e=1-e);var r,n,s,i=t.text,o=t.hasClass,a=t.newClass,l=t.oldClass,u=t.delimiter,c=t.target,h=t.fillChar,d=t.original,p=i.length,f=e*p+.5|0;o?(n=l&&f!==p,s=((r=a&&f)?"<span class='"+a+"'>":"")+i.slice(0,f).join(u)+(r?"</span>":"")+(n?"<span class='"+l+"'>":"")+u+d.slice(f).join(u)+(n?"</span>":"")):s=i.slice(0,f).join(u)+u+d.slice(f).join(u),t.svg?c.textContent=s:c.innerHTML="&nbsp;"===h&&~s.indexOf("  ")?s.split("  ").join("&nbsp;&nbsp;"):s}};o.splitInnerHTML=i.splitInnerHTML,o.emojiSafeSplit=i.emojiSafeSplit,o.getText=i.getText,(n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n)&&n.registerPlugin(o)},"./node_modules/gsap/all.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{gsap:()=>f,default:()=>f,CSSPlugin:()=>s.default,TweenMax:()=>g,TweenLite:()=>n.TweenLite,TimelineMax:()=>n.TimelineMax,TimelineLite:()=>n.TimelineLite,Power0:()=>n.Power0,Power1:()=>n.Power1,Power2:()=>n.Power2,Power3:()=>n.Power3,Power4:()=>n.Power4,Linear:()=>n.Linear,Quad:()=>n.Quad,Cubic:()=>n.Cubic,Quart:()=>n.Quart,Quint:()=>n.Quint,Strong:()=>n.Strong,Elastic:()=>n.Elastic,Back:()=>n.Back,SteppedEase:()=>n.SteppedEase,Bounce:()=>n.Bounce,Sine:()=>n.Sine,Expo:()=>n.Expo,Circ:()=>n.Circ,wrap:()=>n.wrap,wrapYoyo:()=>n.wrapYoyo,distribute:()=>n.distribute,random:()=>n.random,snap:()=>n.snap,normalize:()=>n.normalize,getUnit:()=>n.getUnit,clamp:()=>n.clamp,splitColor:()=>n.splitColor,toArray:()=>n.toArray,mapRange:()=>n.mapRange,pipe:()=>n.pipe,unitize:()=>n.unitize,interpolate:()=>n.interpolate,shuffle:()=>n.shuffle,selector:()=>n.selector,Draggable:()=>i.Draggable,CSSRulePlugin:()=>o.CSSRulePlugin,EaselPlugin:()=>a.EaselPlugin,EasePack:()=>l.EasePack,ExpoScaleEase:()=>l.ExpoScaleEase,RoughEase:()=>l.RoughEase,SlowMo:()=>l.SlowMo,MotionPathPlugin:()=>u.MotionPathPlugin,PixiPlugin:()=>c.PixiPlugin,ScrollToPlugin:()=>h.ScrollToPlugin,ScrollTrigger:()=>d.ScrollTrigger,TextPlugin:()=>p.TextPlugin});var n=r("./node_modules/gsap/gsap-core.js"),s=r("./node_modules/gsap/CSSPlugin.js"),i=r("./node_modules/gsap/Draggable.js"),o=r("./node_modules/gsap/CSSRulePlugin.js"),a=r("./node_modules/gsap/EaselPlugin.js"),l=r("./node_modules/gsap/EasePack.js"),u=r("./node_modules/gsap/MotionPathPlugin.js"),c=r("./node_modules/gsap/PixiPlugin.js"),h=r("./node_modules/gsap/ScrollToPlugin.js"),d=r("./node_modules/gsap/ScrollTrigger.js"),p=r("./node_modules/gsap/TextPlugin.js"),f=n.default.registerPlugin(s.default)||n.default,g=f.core.Tween},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{GSCache:()=>Jt,Animation:()=>er,Timeline:()=>tr,Tween:()=>cr,PropTween:()=>Er,gsap:()=>Tr,Power0:()=>Mr,Power1:()=>Fr,Power2:()=>Sr,Power3:()=>Pr,Power4:()=>kr,Linear:()=>Lr,Quad:()=>Or,Cubic:()=>Rr,Quart:()=>qr,Quint:()=>Br,Strong:()=>Ir,Elastic:()=>zr,Back:()=>Nr,SteppedEase:()=>Ur,Bounce:()=>Hr,Sine:()=>Vr,Expo:()=>Xr,Circ:()=>Yr,TweenMax:()=>cr,TweenLite:()=>cr,TimelineMax:()=>tr,TimelineLite:()=>tr,default:()=>Tr,wrap:()=>Dt,wrapYoyo:()=>wt,distribute:()=>ft,random:()=>vt,snap:()=>mt,normalize:()=>bt,getUnit:()=>ot,clamp:()=>at,splitColor:()=>Lt,toArray:()=>ht,selector:()=>dt,mapRange:()=>Ct,pipe:()=>yt,unitize:()=>_t,interpolate:()=>At,shuffle:()=>pt,_getProperty:()=>we,_numExp:()=>ee,_numWithUnitExp:()=>te,_isString:()=>H,_isUndefined:()=>Y,_renderComplexString:()=>yr,_relExp:()=>ne,_setDefaults:()=>Se,_removeLinkedListItem:()=>qe,_forEachName:()=>Ee,_sortPropTweensByPriority:()=>wr,_colorStringFilter:()=>It,_replaceRandom:()=>Et,_checkPlugin:()=>ir,_plugins:()=>me,_ticker:()=>zt,_config:()=>k,_roundModifier:()=>gt,_round:()=>Ce,_missingPlugin:()=>ue,_getSetter:()=>gr,_getCache:()=>De,_colorExp:()=>qt});var i,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C,A,j,T,M,F,S,P,k={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},L={duration:.5,overwrite:!1,delay:0},O=1e8,R=1e-8,q=2*Math.PI,B=q/4,I=0,z=Math.sqrt,N=Math.cos,U=Math.sin,H=function(e){return"string"==typeof e},V=function(e){return"function"==typeof e},X=function(e){return"number"==typeof e},Y=function(e){return void 0===e},G=function(e){return"object"==typeof e},W=function(e){return!1!==e},K=function(){return"undefined"!=typeof window},Z=function(e){return V(e)||H(e)},$="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},Q=Array.isArray,J=/(?:-?\.?\d|\.)+/gi,ee=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,te=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,re=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,ne=/[+-]=-?[.\d]+/,se=/[^,'"\[\]\s]+/gi,ie=/[\d.+\-=]+(?:e[-+]\d*)*/i,oe={},ae={},le=function(e){return(ae=ke(e,oe))&&Tr},ue=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},ce=function(e,t){return!t&&console.warn(e)},he=function(e,t){return e&&(oe[e]=t)&&ae&&(ae[e]=t)||oe},de=function(){return 0},pe={},fe=[],ge={},me={},ve={},ye=30,_e=[],be="",xe=function(e){var t,r,n=e[0];if(G(n)||V(n)||(e=[e]),!(t=(n._gsap||{}).harness)){for(r=_e.length;r--&&!_e[r].targetTest(n););t=_e[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new Jt(e[r],t)))||e.splice(r,1);return e},De=function(e){return e._gsap||xe(ht(e))[0]._gsap},we=function(e,t,r){return(r=e[t])&&V(r)?e[t]():Y(r)&&e.getAttribute&&e.getAttribute(t)||r},Ee=function(e,t){return(e=e.split(",")).forEach(t)||e},Ce=function(e){return Math.round(1e5*e)/1e5||0},Ae=function(e,t){for(var r=t.length,n=0;e.indexOf(t[n])<0&&++n<r;);return n<r},je=function(){var e,t,r=fe.length,n=fe.slice(0);for(ge={},fe.length=0,e=0;e<r;e++)(t=n[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},Te=function(e,t,r,n){fe.length&&je(),e.render(t,r,n),fe.length&&je()},Me=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(se).length<2?t:H(e)?e.trim():e},Fe=function(e){return e},Se=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},Pe=function(e,t){for(var r in t)r in e||"duration"===r||"ease"===r||(e[r]=t[r])},ke=function(e,t){for(var r in t)e[r]=t[r];return e},Le=function e(t,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(t[n]=G(r[n])?e(t[n]||(t[n]={}),r[n]):r[n]);return t},Oe=function(e,t){var r,n={};for(r in e)r in t||(n[r]=e[r]);return n},Re=function(e){var t=e.parent||o,r=e.keyframes?Pe:Se;if(W(e.inherit))for(;t;)r(e,t.vars.defaults),t=t.parent||t._dp;return e},qe=function(e,t,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var s=t._prev,i=t._next;s?s._next=i:e[r]===t&&(e[r]=i),i?i._prev=s:e[n]===t&&(e[n]=s),t._next=t._prev=t.parent=null},Be=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},Ie=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},ze=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Ne=function e(t){return!t||t._ts&&e(t.parent)},Ue=function(e){return e._repeat?He(e._tTime,e=e.duration()+e._rDelay)*e:0},He=function(e,t){var r=Math.floor(e/=t);return e&&r===e?r-1:r},Ve=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Xe=function(e){return e._end=Ce(e._start+(e._tDur/Math.abs(e._ts||e._rts||R)||0))},Ye=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=Ce(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Xe(e),r._dirty||Ie(r,e)),e},Ge=function(e,t){var r;if((t._time||t._initted&&!t._dur)&&(r=Ve(e.rawTime(),t),(!t._dur||it(0,t.totalDuration(),r)-t._tTime>R)&&t.render(r,!0)),Ie(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},We=function(e,t,r,n){return t.parent&&Be(t),t._start=Ce((X(r)?r:r||e!==o?rt(e,r,t):e._time)+t._delay),t._end=Ce(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),function(e,t,r,n,s){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i,o=e[n];if(s)for(i=t[s];o&&o[s]>i;)o=o._prev;o?(t._next=o._next,o._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[n]=t,t._prev=o,t.parent=t._dp=e}(e,t,"_first","_last",e._sort?"_start":0),Qe(t)||(e._recent=t),n||Ge(e,t),e},Ke=function(e,t){return(oe.ScrollTrigger||ue("scrollTrigger",t))&&oe.ScrollTrigger.create(t,e)},Ze=function(e,t,r,n){return or(e,t),e._initted?!r&&e._pt&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&h!==zt.frame?(fe.push(e),e._lazy=[t,n],1):void 0:1},$e=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},Qe=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Je=function(e,t,r,n){var s=e._repeat,i=Ce(t)||0,o=e._tTime/e._tDur;return o&&!n&&(e._time*=i/e._dur),e._dur=i,e._tDur=s?s<0?1e10:Ce(i*(s+1)+e._rDelay*s):i,o&&!n?Ye(e,e._tTime=e._tDur*o):e.parent&&Xe(e),r||Ie(e.parent,e),e},et=function(e){return e instanceof tr?Ie(e):Je(e,e._dur)},tt={_start:0,endTime:de,totalDuration:de},rt=function e(t,r,n){var s,i,o,a=t.labels,l=t._recent||tt,u=t.duration()>=O?l.endTime(!1):t._dur;return H(r)&&(isNaN(r)||r in a)?(i=r.charAt(0),o="%"===r.substr(-1),s=r.indexOf("="),"<"===i||">"===i?(s>=0&&(r=r.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(o?(s<0?l:n).totalDuration()/100:1)):s<0?(r in a||(a[r]=u),a[r]):(i=parseFloat(r.charAt(s-1)+r.substr(s+1)),o&&n&&(i=i/100*(Q(n)?n[0]:n).totalDuration()),s>1?e(t,r.substr(0,s-1),n)+i:u+i)):null==r?u:+r},nt=function(e,t,r){var n,s,i=X(t[1]),o=(i?2:1)+(e<2?0:1),a=t[o];if(i&&(a.duration=t[1]),a.parent=r,e){for(n=a,s=r;s&&!("immediateRender"in n);)n=s.vars.defaults||{},s=W(s.vars.inherit)&&s.parent;a.immediateRender=W(n.immediateRender),e<2?a.runBackwards=1:a.startAt=t[o-1]}return new cr(t[0],a,t[o+1])},st=function(e,t){return e||0===e?t(e):t},it=function(e,t,r){return r<e?e:r>t?t:r},ot=function(e){if("string"!=typeof e)return"";var t=ie.exec(e);return t?e.substr(t.index+t[0].length):""},at=function(e,t,r){return st(r,(function(r){return it(e,t,r)}))},lt=[].slice,ut=function(e,t){return e&&G(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&G(e[0]))&&!e.nodeType&&e!==a},ct=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var n;return H(e)&&!t||ut(e,1)?(n=r).push.apply(n,ht(e)):r.push(e)}))||r},ht=function(e,t,r){return!H(e)||r||!l&&Nt()?Q(e)?ct(e,r):ut(e)?lt.call(e,0):e?[e]:[]:lt.call((t||u).querySelectorAll(e),0)},dt=function(e){return e=ht(e)[0]||ce("Invalid scope")||{},function(t){var r=e.current||e.nativeElement||e;return ht(t,r.querySelectorAll?r:r===e?ce("Invalid scope")||u.createElement("div"):e)}},pt=function(e){return e.sort((function(){return.5-Math.random()}))},ft=function(e){if(V(e))return e;var t=G(e)?e:{each:e},r=Wt(t.ease),n=t.from||0,s=parseFloat(t.base)||0,i={},o=n>0&&n<1,a=isNaN(n)||o,l=t.axis,u=n,c=n;return H(n)?u=c={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(u=n[0],c=n[1]),function(e,o,h){var d,p,f,g,m,v,y,_,b,x=(h||t).length,D=i[x];if(!D){if(!(b="auto"===t.grid?0:(t.grid||[1,O])[1])){for(y=-O;y<(y=h[b++].getBoundingClientRect().left)&&b<x;);b--}for(D=i[x]=[],d=a?Math.min(b,x)*u-.5:n%b,p=a?x*c/b-.5:n/b|0,y=0,_=O,v=0;v<x;v++)f=v%b-d,g=p-(v/b|0),D[v]=m=l?Math.abs("y"===l?g:f):z(f*f+g*g),m>y&&(y=m),m<_&&(_=m);"random"===n&&pt(D),D.max=y-_,D.min=_,D.v=x=(parseFloat(t.amount)||parseFloat(t.each)*(b>x?x-1:l?"y"===l?x/b:b:Math.max(b,x/b))||0)*("edges"===n?-1:1),D.b=x<0?s-x:s,D.u=ot(t.amount||t.each)||0,r=r&&x<0?Yt(r):r}return x=(D[e]-D.min)/D.max||0,Ce(D.b+(r?r(x):x)*D.v)+D.u}},gt=function(e){var t=e<1?Math.pow(10,(e+"").length-2):1;return function(r){var n=Math.round(parseFloat(r)/e)*e*t;return(n-n%1)/t+(X(r)?0:ot(r))}},mt=function(e,t){var r,n,s=Q(e);return!s&&G(e)&&(r=s=e.radius||O,e.values?(e=ht(e.values),(n=!X(e[0]))&&(r*=r)):e=gt(e.increment)),st(t,s?V(e)?function(t){return n=e(t),Math.abs(n-t)<=r?n:t}:function(t){for(var s,i,o=parseFloat(n?t.x:t),a=parseFloat(n?t.y:0),l=O,u=0,c=e.length;c--;)(s=n?(s=e[c].x-o)*s+(i=e[c].y-a)*i:Math.abs(e[c]-o))<l&&(l=s,u=c);return u=!r||l<=r?e[u]:t,n||u===t||X(t)?u:u+ot(t)}:gt(e))},vt=function(e,t,r,n){return st(Q(e)?!t:!0===r?!!(r=0):!n,(function(){return Q(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*n)/n}))},yt=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},_t=function(e,t){return function(r){return e(parseFloat(r))+(t||ot(r))}},bt=function(e,t,r){return Ct(e,t,0,1,r)},xt=function(e,t,r){return st(r,(function(r){return e[~~t(r)]}))},Dt=function e(t,r,n){var s=r-t;return Q(t)?xt(t,e(0,t.length),r):st(n,(function(e){return(s+(e-t)%s)%s+t}))},wt=function e(t,r,n){var s=r-t,i=2*s;return Q(t)?xt(t,e(0,t.length-1),r):st(n,(function(e){return t+((e=(i+(e-t)%i)%i||0)>s?i-e:e)}))},Et=function(e){for(var t,r,n,s,i=0,o="";~(t=e.indexOf("random(",i));)n=e.indexOf(")",t),s="["===e.charAt(t+7),r=e.substr(t+7,n-t-7).match(s?se:J),o+=e.substr(i,t-i)+vt(s?r:+r[0],s?0:+r[1],+r[2]||1e-5),i=n+1;return o+e.substr(i,e.length-i)},Ct=function(e,t,r,n,s){var i=t-e,o=n-r;return st(s,(function(t){return r+((t-e)/i*o||0)}))},At=function e(t,r,n,s){var i=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!i){var o,a,l,u,c,h=H(t),d={};if(!0===n&&(s=1)&&(n=null),h)t={p:t},r={p:r};else if(Q(t)&&!Q(r)){for(l=[],u=t.length,c=u-2,a=1;a<u;a++)l.push(e(t[a-1],t[a]));u--,i=function(e){e*=u;var t=Math.min(c,~~e);return l[t](e-t)},n=r}else s||(t=ke(Q(t)?[]:{},t));if(!l){for(o in r)sr.call(d,t,o,"get",r[o]);i=function(e){return _r(e,d)||(h?t.p:t)}}}return st(n,i)},jt=function(e,t,r){var n,s,i,o=e.labels,a=O;for(n in o)(s=o[n]-t)<0==!!r&&s&&a>(s=Math.abs(s))&&(i=n,a=s);return i},Tt=function(e,t,r){var n,s,i=e.vars,o=i[t];if(o)return n=i[t+"Params"],s=i.callbackScope||e,r&&fe.length&&je(),n?o.apply(s,n):o.call(s)},Mt=function(e){return Be(e),e.scrollTrigger&&e.scrollTrigger.kill(!1),e.progress()<1&&Tt(e,"onInterrupt"),e},Ft=function(e){var t=(e=!e.name&&e.default||e).name,r=V(e),n=t&&!r&&e.init?function(){this._props=[]}:e,s={init:de,render:_r,add:sr,kill:xr,modifier:br,rawVars:0},i={targetTest:0,get:0,getSetter:gr,aliases:{},register:0};if(Nt(),e!==n){if(me[t])return;Se(n,Se(Oe(e,s),i)),ke(n.prototype,ke(s,Oe(e,i))),me[n.prop=t]=n,e.targetTest&&(_e.push(n),pe[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}he(t,n),e.register&&e.register(Tr,n,Er)},St=255,Pt={aqua:[0,St,St],lime:[0,St,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,St],navy:[0,0,128],white:[St,St,St],olive:[128,128,0],yellow:[St,St,0],orange:[St,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[St,0,0],pink:[St,192,203],cyan:[0,St,St],transparent:[St,St,St,0]},kt=function(e,t,r){return(6*(e=e<0?e+1:e>1?e-1:e)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*St+.5|0},Lt=function(e,t,r){var n,s,i,o,a,l,u,c,h,d,p=e?X(e)?[e>>16,e>>8&St,e&St]:0:Pt.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Pt[e])p=Pt[e];else if("#"===e.charAt(0)){if(e.length<6&&(n=e.charAt(1),s=e.charAt(2),i=e.charAt(3),e="#"+n+n+s+s+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&St,p&St,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&St,e&St]}else if("hsl"===e.substr(0,3))if(p=d=e.match(J),t){if(~e.indexOf("="))return p=e.match(ee),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(s=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=kt(o+1/3,n,s),p[1]=kt(o,n,s),p[2]=kt(o-1/3,n,s);else p=e.match(J)||Pt.transparent;p=p.map(Number)}return t&&!d&&(n=p[0]/St,s=p[1]/St,i=p[2]/St,l=((u=Math.max(n,s,i))+(c=Math.min(n,s,i)))/2,u===c?o=a=0:(h=u-c,a=l>.5?h/(2-u-c):h/(u+c),o=u===n?(s-i)/h+(s<i?6:0):u===s?(i-n)/h+2:(n-s)/h+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},Ot=function(e){var t=[],r=[],n=-1;return e.split(qt).forEach((function(e){var s=e.match(te)||[];t.push.apply(t,s),r.push(n+=s.length+1)})),t.c=r,t},Rt=function(e,t,r){var n,s,i,o,a="",l=(e+a).match(qt),u=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=Lt(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(i=Ot(e),(n=r.c).join(a)!==i.c.join(a)))for(o=(s=e.replace(qt,"1").split(te)).length-1;c<o;c++)a+=s[c]+(~n.indexOf(c)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!s)for(o=(s=e.split(qt)).length-1;c<o;c++)a+=s[c]+l[c];return a+s[o]},qt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Pt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Bt=/hsl[a]?\(/,It=function(e){var t,r=e.join(" ");if(qt.lastIndex=0,qt.test(r))return t=Bt.test(r),e[1]=Rt(e[1],t),e[0]=Rt(e[0],t,Ot(e[1])),!0},zt=(b=Date.now,x=500,D=33,w=b(),E=w,A=C=1e3/240,T=function e(t){var r,n,s,i,o=b()-E,a=!0===t;if(o>x&&(w+=o-D),((r=(s=(E+=o)-w)-A)>0||a)&&(i=++v.frame,y=s-1e3*v.time,v.time=s/=1e3,A+=r+(r>=C?4:C-r),n=1),a||(f=g(e)),n)for(_=0;_<j.length;_++)j[_](s,y,i,t)},v={time:0,frame:0,tick:function(){T(!0)},deltaRatio:function(e){return y/(1e3/(e||60))},wake:function(){c&&(!l&&K()&&(a=l=window,u=a.document||{},oe.gsap=Tr,(a.gsapVersions||(a.gsapVersions=[])).push(Tr.version),le(ae||a.GreenSockGlobals||!a.gsap&&a||{}),m=a.requestAnimationFrame),f&&v.sleep(),g=m||function(e){return setTimeout(e,A-1e3*v.time+1|0)},p=1,T(2))},sleep:function(){(m?a.cancelAnimationFrame:clearTimeout)(f),p=0,g=de},lagSmoothing:function(e,t){x=e||1e8,D=Math.min(t,x,0)},fps:function(e){C=1e3/(e||240),A=1e3*v.time+C},add:function(e){j.indexOf(e)<0&&j.push(e),Nt()},remove:function(e){var t;~(t=j.indexOf(e))&&j.splice(t,1)&&_>=t&&_--},_listeners:j=[]}),Nt=function(){return!p&&zt.wake()},Ut={},Ht=/^[\d.\-M][\d.\-,\s]/,Vt=/["']/g,Xt=function(e){for(var t,r,n,s={},i=e.substr(1,e.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)r=i[a],t=a!==l-1?r.lastIndexOf(","):r.length,n=r.substr(0,t),s[o]=isNaN(n)?n.replace(Vt,"").trim():+n,o=r.substr(t+1).trim();return s},Yt=function(e){return function(t){return 1-e(1-t)}},Gt=function e(t,r){for(var n,s=t._first;s;)s instanceof tr?e(s,r):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===r||(s.timeline?e(s.timeline,r):(n=s._ease,s._ease=s._yEase,s._yEase=n,s._yoyo=r)),s=s._next},Wt=function(e,t){return e&&(V(e)?e:Ut[e]||function(e){var t,r,n,s,i=(e+"").split("("),o=Ut[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[Xt(i[1])]:(t=e,r=t.indexOf("(")+1,n=t.indexOf(")"),s=t.indexOf("(",r),t.substring(r,~s&&s<n?t.indexOf(")",n+1):n)).split(",").map(Me)):Ut._CE&&Ht.test(e)?Ut._CE("",e):o}(e))||t},Kt=function(e,t,r,n){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===n&&(n=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var s,i={easeIn:t,easeOut:r,easeInOut:n};return Ee(e,(function(e){for(var t in Ut[e]=oe[e]=i,Ut[s=e.toLowerCase()]=r,i)Ut[s+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Ut[e+"."+t]=i[t]})),i},Zt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},$t=function e(t,r,n){var s=r>=1?r:1,i=(n||(t?.3:.45))/(r<1?r:1),o=i/q*(Math.asin(1/s)||0),a=function(e){return 1===e?1:s*Math.pow(2,-10*e)*U((e-o)*i)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Zt(a);return i=q/i,l.config=function(r,n){return e(t,r,n)},l},Qt=function e(t,r){void 0===r&&(r=1.70158);var n=function(e){return e?--e*e*((r+1)*e+r)+1:0},s="out"===t?n:"in"===t?function(e){return 1-n(1-e)}:Zt(n);return s.config=function(r){return e(t,r)},s};Ee("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Kt(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),Ut.Linear.easeNone=Ut.none=Ut.Linear.easeIn,Kt("Elastic",$t("in"),$t("out"),$t()),M=7.5625,S=1/(F=2.75),Kt("Bounce",(function(e){return 1-P(1-e)}),P=function(e){return e<S?M*e*e:e<.7272727272727273?M*Math.pow(e-1.5/F,2)+.75:e<.9090909090909092?M*(e-=2.25/F)*e+.9375:M*Math.pow(e-2.625/F,2)+.984375}),Kt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Kt("Circ",(function(e){return-(z(1-e*e)-1)})),Kt("Sine",(function(e){return 1===e?1:1-N(e*B)})),Kt("Back",Qt("in"),Qt("out"),Qt()),Ut.SteppedEase=Ut.steps=oe.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,n=e+(t?0:1),s=t?1:0;return function(e){return((n*it(0,.99999999,e)|0)+s)*r}}},L.ease=Ut["quad.out"],Ee("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return be+=e+","+e+"Params,"}));var Jt=function(e,t){this.id=I++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:we,this.set=t?t.getSetter:gr},er=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Je(this,+e.duration,1,1),this.data=e.data,p||zt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Je(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Nt(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Ye(this,e),!r._dp||r.parent||Ge(r,this);r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&We(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===R||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),Te(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Ue(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Ue(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?He(this._tTime,r)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?Ve(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,ze(this.totalTime(it(-this._delay,this._tDur,t),!0))},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Nt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==R&&(this._tTime-=R)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&We(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(W(e)?this.totalDuration():this.duration())/Math.abs(this._ts)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ve(t.rawTime(e),this):this._tTime:this._tTime},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(t._ts||1),t=t._dp;return r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,et(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,et(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(rt(this,e),W(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,W(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-R))},t.eventCallback=function(e,t,r){var n=this.vars;return arguments.length>1?(t?(n[e]=t,r&&(n[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete n[e],this):n[e]},t.then=function(e){var t=this;return new Promise((function(r){var n=V(e)?e:Fe,s=function(){var e=t.then;t.then=null,V(n)&&(n=n(t))&&(n.then||n===t)&&(t.then=e),r(n),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?s():t._prom=s}))},t.kill=function(){Mt(this)},e}();Se(er.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var tr=function(e){function t(t,r){var s;return void 0===t&&(t={}),(s=e.call(this,t)||this).labels={},s.smoothChildTiming=!!t.smoothChildTiming,s.autoRemoveChildren=!!t.autoRemoveChildren,s._sort=W(t.sortChildren),o&&We(t.parent||o,n(s),r),t.reversed&&s.reverse(),t.paused&&s.paused(!0),t.scrollTrigger&&Ke(n(s),t.scrollTrigger),s}s(t,e);var r=t.prototype;return r.to=function(e,t,r){return nt(0,arguments,this),this},r.from=function(e,t,r){return nt(1,arguments,this),this},r.fromTo=function(e,t,r,n){return nt(2,arguments,this),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,Re(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new cr(e,t,rt(this,r),1),this},r.call=function(e,t,r){return We(this,cr.delayedCall(0,e,t),r)},r.staggerTo=function(e,t,r,n,s,i,o){return r.duration=t,r.stagger=r.stagger||n,r.onComplete=i,r.onCompleteParams=o,r.parent=this,new cr(e,r,rt(this,s)),this},r.staggerFrom=function(e,t,r,n,s,i,o){return r.runBackwards=1,Re(r).immediateRender=W(r.immediateRender),this.staggerTo(e,t,r,n,s,i,o)},r.staggerFromTo=function(e,t,r,n,s,i,o,a){return n.startAt=r,Re(n).immediateRender=W(n.immediateRender),this.staggerTo(e,t,n,s,i,o,a)},r.render=function(e,t,r){var n,s,i,a,l,u,c,h,d,p,f,g,m=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,_=this!==o&&e>v-R&&e>=0?v:e<R?0:e,b=this._zTime<0!=e<0&&(this._initted||!y);if(_!==this._tTime||r||b){if(m!==this._time&&y&&(_+=this._time-m,e+=this._time-m),n=_,d=this._start,u=!(h=this._ts),b&&(y||(m=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(f=this._yoyo,l=y+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*l+e,t,r);if(n=Ce(_%l),_===v?(a=this._repeat,n=y):((a=~~(_/l))&&a===_/l&&(n=y,a--),n>y&&(n=y)),p=He(this._tTime,l),!m&&this._tTime&&p!==a&&(p=a),f&&1&a&&(n=y-n,g=1),a!==p&&!this._lock){var x=f&&1&p,D=x===(f&&1&a);if(a<p&&(x=!x),m=x?0:y,this._lock=1,this.render(m||(g?0:Ce(a*l)),t,!y)._lock=0,this._tTime=_,!t&&this.parent&&Tt(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),m&&m!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,D&&(this._lock=2,m=x?y:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Gt(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(c=function(e,t,r){var n;if(r>t)for(n=e._first;n&&n._start<=r;){if(!n._dur&&"isPause"===n.data&&n._start>t)return n;n=n._next}else for(n=e._last;n&&n._start>=r;){if(!n._dur&&"isPause"===n.data&&n._start<t)return n;n=n._prev}}(this,Ce(m),Ce(n)),c&&(_-=n-(n=c._start))),this._tTime=_,this._time=n,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,m=0),!m&&n&&!t&&(Tt(this,"onStart"),this._tTime!==_))return this;if(n>=m&&e>=0)for(s=this._first;s;){if(i=s._next,(s._act||n>=s._start)&&s._ts&&c!==s){if(s.parent!==this)return this.render(e,t,r);if(s.render(s._ts>0?(n-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(n-s._start)*s._ts,t,r),n!==this._time||!this._ts&&!u){c=0,i&&(_+=this._zTime=-1e-8);break}}s=i}else{s=this._last;for(var w=e<0?e:n;s;){if(i=s._prev,(s._act||w<=s._end)&&s._ts&&c!==s){if(s.parent!==this)return this.render(e,t,r);if(s.render(s._ts>0?(w-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(w-s._start)*s._ts,t,r),n!==this._time||!this._ts&&!u){c=0,i&&(_+=this._zTime=w?-1e-8:R);break}}s=i}}if(c&&!t&&(this.pause(),c.render(n>=m?0:-1e-8)._zTime=n>=m?1:-1,this._ts))return this._start=d,Xe(this),this.render(e,t,r);this._onUpdate&&!t&&Tt(this,"onUpdate",!0),(_===v&&v>=this.totalDuration()||!_&&m)&&(d!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((e||!y)&&(_===v&&this._ts>0||!_&&this._ts<0)&&Be(this,1),t||e<0&&!m||!_&&!m&&v||(Tt(this,_===v&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(_<v&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(X(t)||(t=rt(this,t,e)),!(e instanceof er)){if(Q(e))return e.forEach((function(e){return r.add(e,t)})),this;if(H(e))return this.addLabel(e,t);if(!V(e))return this;e=cr.delayedCall(0,e)}return this!==e?We(this,e,t):this},r.getChildren=function(e,t,r,n){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===n&&(n=-O);for(var s=[],i=this._first;i;)i._start>=n&&(i instanceof cr?t&&s.push(i):(r&&s.push(i),e&&s.push.apply(s,i.getChildren(!0,t,r)))),i=i._next;return s},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return H(e)?this.removeLabel(e):V(e)?this.killTweensOf(e):(qe(this,e),e===this._recent&&(this._recent=this._last),Ie(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Ce(zt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=rt(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var n=cr.delayedCall(0,t||de,r);return n.data="isPause",this._hasPause=1,We(this,n,rt(this,e))},r.removePause=function(e){var t=this._first;for(e=rt(this,e);t;)t._start===e&&"isPause"===t.data&&Be(t),t=t._next},r.killTweensOf=function(e,t,r){for(var n=this.getTweensOf(e,r),s=n.length;s--;)rr!==n[s]&&n[s].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,n=[],s=ht(e),i=this._first,o=X(t);i;)i instanceof cr?Ae(i._targets,s)&&(o?(!rr||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&n.push(i):(r=i.getTweensOf(s,t)).length&&n.push.apply(n,r),i=i._next;return n},r.tweenTo=function(e,t){t=t||{};var r,n=this,s=rt(n,e),i=t,o=i.startAt,a=i.onStart,l=i.onStartParams,u=i.immediateRender,c=cr.to(n,Se({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:t.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale())||R,onStart:function(){if(n.pause(),!r){var e=t.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale());c._dur!==e&&Je(c,e,0,1).render(c._time,!0,!0),r=1}a&&a.apply(c,l||[])}},t));return u?c.render(0):c},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,Se({startAt:{time:rt(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),jt(this,rt(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),jt(this,rt(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+R)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var n,s=this._first,i=this.labels;s;)s._start>=r&&(s._start+=e,s._end+=e),s=s._next;if(t)for(n in i)i[n]>=r&&(i[n]+=e);return Ie(this)},r.invalidate=function(){var t=this._first;for(this._lock=0;t;)t.invalidate(),t=t._next;return e.prototype.invalidate.call(this)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Ie(this)},r.totalDuration=function(e){var t,r,n,s=0,i=this,a=i._last,l=O;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(n=i.parent;a;)t=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>l&&i._sort&&a._ts&&!i._lock?(i._lock=1,We(i,a,r-a._delay,1)._lock=0):l=r,r<0&&a._ts&&(s-=r,(!n&&!i._dp||n&&n.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),l=0),a._end>s&&a._ts&&(s=a._end),a=t;Je(i,i===o&&i._time>s?i._time:s,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(o._ts&&(Te(o,Ve(e,o)),h=zt.frame),zt.frame>=ye){ye+=k.autoSleep||120;var t=o._first;if((!t||!t._ts)&&k.autoSleep&&zt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||zt.sleep()}}},t}(er);Se(tr.prototype,{_lock:0,_hasPause:0,_forcing:0});var rr,nr=function(e,t,r,n,s,i,o){var a,l,u,c,h,d,p,f,g=new Er(this._pt,e,t,0,1,yr,null,s),m=0,v=0;for(g.b=r,g.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=Et(n)),i&&(i(f=[r,n],e,t),r=f[0],n=f[1]),l=r.match(re)||[];a=re.exec(n);)c=a[0],h=n.substring(m,a.index),u?u=(u+1)%5:"rgba("===h.substr(-5)&&(u=1),c!==l[v++]&&(d=parseFloat(l[v-1])||0,g._pt={_next:g._pt,p:h||1===v?h:",",s:d,c:"="===c.charAt(1)?parseFloat(c.substr(2))*("-"===c.charAt(0)?-1:1):parseFloat(c)-d,m:u&&u<4?Math.round:0},m=re.lastIndex);return g.c=m<n.length?n.substring(m,n.length):"",g.fp=o,(ne.test(n)||p)&&(g.e=0),this._pt=g,g},sr=function(e,t,r,n,s,i,o,a,l){V(n)&&(n=n(s||0,e,i));var u,c=e[t],h="get"!==r?r:V(c)?l?e[t.indexOf("set")||!V(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():c,d=V(c)?l?pr:dr:hr;if(H(n)&&(~n.indexOf("random(")&&(n=Et(n)),"="===n.charAt(1)&&((u=parseFloat(h)+parseFloat(n.substr(2))*("-"===n.charAt(0)?-1:1)+(ot(h)||0))||0===u)&&(n=u)),h!==n)return isNaN(h*n)||""===n?(!c&&!(t in e)&&ue(t,n),nr.call(this,e,t,h,n,d,a||k.stringFilter,l)):(u=new Er(this._pt,e,t,+h||0,n-(h||0),"boolean"==typeof c?vr:mr,0,d),l&&(u.fp=l),o&&u.modifier(o,this,e),this._pt=u)},ir=function(e,t,r,n,s,i){var o,a,l,u;if(me[e]&&!1!==(o=new me[e]).init(s,o.rawVars?t[e]:function(e,t,r,n,s){if(V(e)&&(e=ar(e,s,t,r,n)),!G(e)||e.style&&e.nodeType||Q(e)||$(e))return H(e)?ar(e,s,t,r,n):e;var i,o={};for(i in e)o[i]=ar(e[i],s,t,r,n);return o}(t[e],n,s,i,r),r,n,i)&&(r._pt=a=new Er(r._pt,s,e,0,1,o.render,o,0,o.priority),r!==d))for(l=r._ptLookup[r._targets.indexOf(s)],u=o._props.length;u--;)l[o._props[u]]=a;return o},or=function e(t,r){var n,s,a,l,u,c,h,d,p,f,g,m,v,y=t.vars,_=y.ease,b=y.startAt,x=y.immediateRender,D=y.lazy,w=y.onUpdate,E=y.onUpdateParams,C=y.callbackScope,A=y.runBackwards,j=y.yoyoEase,T=y.keyframes,M=y.autoRevert,F=t._dur,S=t._startAt,P=t._targets,k=t.parent,O=k&&"nested"===k.data?k.parent._targets:P,q="auto"===t._overwrite&&!i,B=t.timeline;if(B&&(!T||!_)&&(_="none"),t._ease=Wt(_,L.ease),t._yEase=j?Yt(Wt(!0===j?_:j,L.ease)):0,j&&t._yoyo&&!t._repeat&&(j=t._yEase,t._yEase=t._ease,t._ease=j),t._from=!B&&!!y.runBackwards,!B){if(m=(d=P[0]?De(P[0]).harness:0)&&y[d.prop],n=Oe(y,pe),S&&S.render(-1,!0).kill(),b)if(Be(t._startAt=cr.set(P,Se({data:"isStart",overwrite:!1,parent:k,immediateRender:!0,lazy:W(D),startAt:null,delay:0,onUpdate:w,onUpdateParams:E,callbackScope:C,stagger:0},b))),r<0&&!x&&!M&&t._startAt.render(-1,!0),x){if(r>0&&!M&&(t._startAt=0),F&&r<=0)return void(r&&(t._zTime=r))}else!1===M&&(t._startAt=0);else if(A&&F)if(S)!M&&(t._startAt=0);else if(r&&(x=!1),a=Se({overwrite:!1,data:"isFromStart",lazy:x&&W(D),immediateRender:x,stagger:0,parent:k},n),m&&(a[d.prop]=m),Be(t._startAt=cr.set(P,a)),r<0&&t._startAt.render(-1,!0),x){if(!r)return}else e(t._startAt,R);for(t._pt=0,D=F&&W(D)||D&&!F,s=0;s<P.length;s++){if(h=(u=P[s])._gsap||xe(P)[s]._gsap,t._ptLookup[s]=f={},ge[h.id]&&fe.length&&je(),g=O===P?s:O.indexOf(u),d&&!1!==(p=new d).init(u,m||n,t,g,O)&&(t._pt=l=new Er(t._pt,u,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(e){f[e]=l})),p.priority&&(c=1)),!d||m)for(a in n)me[a]&&(p=ir(a,n,t,g,u,O))?p.priority&&(c=1):f[a]=l=sr.call(t,u,a,"get",n[a],g,O,0,y.stringFilter);t._op&&t._op[s]&&t.kill(u,t._op[s]),q&&t._pt&&(rr=t,o.killTweensOf(u,f,t.globalTime(0)),v=!t.parent,rr=0),t._pt&&D&&(ge[h.id]=1)}c&&wr(t),t._onInit&&t._onInit(t)}t._onUpdate=w,t._initted=(!t._op||t._pt)&&!v},ar=function(e,t,r,n,s){return V(e)?e.call(t,r,n,s):H(e)&&~e.indexOf("random(")?Et(e):e},lr=be+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",ur=(lr+",id,stagger,delay,duration,paused,scrollTrigger").split(","),cr=function(e){function t(t,r,s,a){var l;"number"==typeof r&&(s.duration=r,r=s,s=null);var u,c,h,d,p,f,g,m,v=(l=e.call(this,a?r:Re(r))||this).vars,y=v.duration,_=v.delay,b=v.immediateRender,x=v.stagger,D=v.overwrite,w=v.keyframes,E=v.defaults,C=v.scrollTrigger,A=v.yoyoEase,j=r.parent||o,T=(Q(t)||$(t)?X(t[0]):"length"in r)?[t]:ht(t);if(l._targets=T.length?xe(T):ce("GSAP target "+t+" not found. https://greensock.com",!k.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=D,w||x||Z(y)||Z(_)){if(r=l.vars,(u=l.timeline=new tr({data:"nested",defaults:E||{}})).kill(),u.parent=u._dp=n(l),u._start=0,w)Se(u.vars.defaults,{ease:"none"}),x?T.forEach((function(e,t){return w.forEach((function(r,n){return u.to(e,r,n?">":t*x)}))})):w.forEach((function(e){return u.to(T,e,">")}));else{if(d=T.length,g=x?ft(x):de,G(x))for(p in x)~lr.indexOf(p)&&(m||(m={}),m[p]=x[p]);for(c=0;c<d;c++){for(p in h={},r)ur.indexOf(p)<0&&(h[p]=r[p]);h.stagger=0,A&&(h.yoyoEase=A),m&&ke(h,m),f=T[c],h.duration=+ar(y,n(l),c,f,T),h.delay=(+ar(_,n(l),c,f,T)||0)-l._delay,!x&&1===d&&h.delay&&(l._delay=_=h.delay,l._start+=_,h.delay=0),u.to(f,h,g(c,f,T))}u.duration()?y=_=0:l.timeline=0}y||l.duration(y=u.duration())}else l.timeline=0;return!0!==D||i||(rr=n(l),o.killTweensOf(T),rr=0),We(j,n(l),s),r.reversed&&l.reverse(),r.paused&&l.paused(!0),(b||!y&&!w&&l._start===Ce(j._time)&&W(b)&&Ne(n(l))&&"nested"!==j.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-_))),C&&Ke(n(l),C),l}s(t,e);var r=t.prototype;return r.render=function(e,t,r){var n,s,i,o,a,l,u,c,h,d=this._time,p=this._tDur,f=this._dur,g=e>p-R&&e>=0?p:e<R?0:e;if(f){if(g!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=e<0){if(n=g,c=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*o+e,t,r);if(n=Ce(g%o),g===p?(i=this._repeat,n=f):((i=~~(g/o))&&i===g/o&&(n=f,i--),n>f&&(n=f)),(l=this._yoyo&&1&i)&&(h=this._yEase,n=f-n),a=He(this._tTime,o),n===d&&!r&&this._initted)return this;i!==a&&(c&&this._yEase&&Gt(c,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=r=1,this.render(Ce(o*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ze(this,e<0?e:n,r,t))return this._tTime=0,this;if(f!==this._dur)return this.render(e,t,r)}if(this._tTime=g,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(h||this._ease)(n/f),this._from&&(this.ratio=u=1-u),n&&!d&&!t&&(Tt(this,"onStart"),this._tTime!==g))return this;for(s=this._pt;s;)s.r(u,s.d),s=s._next;c&&c.render(e<0?e:!n&&l?-1e-8:c._dur*u,t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(e<0&&this._startAt&&this._startAt.render(e,!0,r),Tt(this,"onUpdate")),this._repeat&&i!==a&&this.vars.onRepeat&&!t&&this.parent&&Tt(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(e<0&&this._startAt&&!this._onUpdate&&this._startAt.render(e,!0,!0),(e||!f)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&Be(this,1),t||e<0&&!d||!g&&!d||(Tt(this,g===p?"onComplete":"onReverseComplete",!0),this._prom&&!(g<p&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,n){var s,i,o,a=e.ratio,l=t<0||!t&&(!e._start&&$e(e)&&(e._initted||!Qe(e))||(e._ts<0||e._dp._ts<0)&&!Qe(e))?0:1,u=e._rDelay,c=0;if(u&&e._repeat&&(c=it(0,e._tDur,t),i=He(c,u),o=He(e._tTime,u),e._yoyo&&1&i&&(l=1-l),i!==o&&(a=1-l,e.vars.repeatRefresh&&e._initted&&e.invalidate())),l!==a||n||e._zTime===R||!t&&e._zTime){if(!e._initted&&Ze(e,t,n,r))return;for(o=e._zTime,e._zTime=t||(r?R:0),r||(r=t&&!o),e.ratio=l,e._from&&(l=1-l),e._time=0,e._tTime=c,s=e._pt;s;)s.r(l,s.d),s=s._next;e._startAt&&t<0&&e._startAt.render(t,!0,!0),e._onUpdate&&!r&&Tt(e,"onUpdate"),c&&e._repeat&&!r&&e.parent&&Tt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===l&&(l&&Be(e,1),r||(Tt(e,l?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),e.prototype.invalidate.call(this)},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?Mt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,rr&&!0!==rr.vars.overwrite)._first||Mt(this),this.parent&&r!==this.timeline.totalDuration()&&Je(this,this._dur*this.timeline._tDur/r,0,1),this}var n,s,i,o,a,l,u,c=this._targets,h=e?ht(e):c,d=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,n=r===t.length;n&&r--&&e[r]===t[r];);return r<0}(c,h))return"all"===t&&(this._pt=0),Mt(this);for(n=this._op=this._op||[],"all"!==t&&(H(t)&&(a={},Ee(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var r,n,s,i,o=e[0]?De(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(n in r=ke({},t),a)if(n in r)for(s=(i=a[n].split(",")).length;s--;)r[i[s]]=r[n];return r}(c,t)),u=c.length;u--;)if(~h.indexOf(c[u]))for(a in s=d[u],"all"===t?(n[u]=t,o=s,i={}):(i=n[u]=n[u]||{},o=t),o)(l=s&&s[a])&&("kill"in l.d&&!0!==l.d.kill(a)||qe(this,l,"_pt"),delete s[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&p&&Mt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,t){return nt(1,arguments)},t.delayedCall=function(e,r,n,s){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:s})},t.fromTo=function(e,t,r){return nt(2,arguments)},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return o.killTweensOf(e,t,r)},t}(er);Se(cr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Ee("staggerTo,staggerFrom,staggerFromTo",(function(e){cr[e]=function(){var t=new tr,r=lt.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var hr=function(e,t,r){return e[t]=r},dr=function(e,t,r){return e[t](r)},pr=function(e,t,r,n){return e[t](n.fp,r)},fr=function(e,t,r){return e.setAttribute(t,r)},gr=function(e,t){return V(e[t])?dr:Y(e[t])&&e.setAttribute?fr:hr},mr=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},vr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},yr=function(e,t){var r=t._pt,n="";if(!e&&t.b)n=t.b;else if(1===e&&t.e)n=t.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+n,r=r._next;n+=t.c}t.set(t.t,t.p,n,t)},_r=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},br=function(e,t,r,n){for(var s,i=this._pt;i;)s=i._next,i.p===n&&i.modifier(e,t,r),i=s},xr=function(e){for(var t,r,n=this._pt;n;)r=n._next,n.p===e&&!n.op||n.op===e?qe(this,n,"_pt"):n.dep||(t=1),n=r;return!t},Dr=function(e,t,r,n){n.mSet(e,t,n.m.call(n.tween,r,n.mt),n)},wr=function(e){for(var t,r,n,s,i=e._pt;i;){for(t=i._next,r=n;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:s)?i._prev._next=i:n=i,(i._next=r)?r._prev=i:s=i,i=t}e._pt=n},Er=function(){function e(e,t,r,n,s,i,o,a,l){this.t=t,this.s=n,this.c=s,this.p=r,this.r=i||mr,this.d=o||this,this.set=a||hr,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=Dr,this.m=e,this.mt=r,this.tween=t},e}();Ee(be+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return pe[e]=1})),oe.TweenMax=oe.TweenLite=cr,oe.TimelineLite=oe.TimelineMax=tr,o=new tr({sortChildren:!1,defaults:L,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),k.stringFilter=It;var Cr={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return Ft(e)}))},timeline:function(e){return new tr(e)},getTweensOf:function(e,t){return o.getTweensOf(e,t)},getProperty:function(e,t,r,n){H(e)&&(e=ht(e)[0]);var s=De(e||{}).get,i=r?Fe:Me;return"native"===r&&(r=""),e?t?i((me[t]&&me[t].get||s)(e,t,r,n)):function(t,r,n){return i((me[t]&&me[t].get||s)(e,t,r,n))}:e},quickSetter:function(e,t,r){if((e=ht(e)).length>1){var n=e.map((function(e){return Tr.quickSetter(e,t,r)})),s=n.length;return function(e){for(var t=s;t--;)n[t](e)}}e=e[0]||{};var i=me[t],o=De(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=i?function(t){var n=new i;d._pt=0,n.init(e,r?t+r:t,d,0,[e]),n.render(1,n),d._pt&&_r(1,d)}:o.set(e,a);return i?l:function(t){return l(e,a,r?t+r:t,o,1)}},isTweening:function(e){return o.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Wt(e.ease,L.ease)),Le(L,e||{})},config:function(e){return Le(k,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,n=e.plugins,s=e.defaults,i=e.extendTimeline;(n||"").split(",").forEach((function(e){return e&&!me[e]&&!oe[e]&&ce(t+" effect requires "+e+" plugin.")})),ve[t]=function(e,t,n){return r(ht(e),Se(t||{},s),n)},i&&(tr.prototype[t]=function(e,r,n){return this.add(ve[t](e,G(r)?r:(n=r)&&{},this),n)})},registerEase:function(e,t){Ut[e]=Wt(t)},parseEase:function(e,t){return arguments.length?Wt(e,t):Ut},getById:function(e){return o.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,n,s=new tr(e);for(s.smoothChildTiming=W(e.smoothChildTiming),o.remove(s),s._dp=0,s._time=s._tTime=o._time,r=o._first;r;)n=r._next,!t&&!r._dur&&r instanceof cr&&r.vars.onComplete===r._targets[0]||We(s,r,r._start-r._delay),r=n;return We(o,s,0),s},utils:{wrap:Dt,wrapYoyo:wt,distribute:ft,random:vt,snap:mt,normalize:bt,getUnit:ot,clamp:at,splitColor:Lt,toArray:ht,selector:dt,mapRange:Ct,pipe:yt,unitize:_t,interpolate:At,shuffle:pt},install:le,effects:ve,ticker:zt,updateRoot:tr.updateRoot,plugins:me,globalTimeline:o,core:{PropTween:Er,globals:he,Tween:cr,Timeline:tr,Animation:er,getCache:De,_removeLinkedListItem:qe,suppressOverwrites:function(e){return i=e}}};Ee("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Cr[e]=cr[e]})),zt.add(tr.updateRoot),d=Cr.to({},{duration:0});var Ar=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},jr=function(e,t){return{name:e,rawVars:1,init:function(e,r,n){n._onInit=function(e){var n,s;if(H(r)&&(n={},Ee(r,(function(e){return n[e]=1})),r=n),t){for(s in n={},r)n[s]=t(r[s]);r=n}!function(e,t){var r,n,s,i=e._targets;for(r in t)for(n=i.length;n--;)(s=e._ptLookup[n][r])&&(s=s.d)&&(s._pt&&(s=Ar(s,r)),s&&s.modifier&&s.modifier(t[r],e,i[n],r))}(e,r)}}}},Tr=Cr.registerPlugin({name:"attr",init:function(e,t,r,n,s){var i,o;for(i in t)(o=this.add(e,"setAttribute",(e.getAttribute(i)||0)+"",t[i],n,s,0,0,i))&&(o.op=i),this._props.push(i)}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r])}},jr("roundProps",gt),jr("modifiers"),jr("snap",mt))||Cr;cr.version=tr.version=Tr.version="3.7.1",c=1,K()&&Nt();var Mr=Ut.Power0,Fr=Ut.Power1,Sr=Ut.Power2,Pr=Ut.Power3,kr=Ut.Power4,Lr=Ut.Linear,Or=Ut.Quad,Rr=Ut.Cubic,qr=Ut.Quart,Br=Ut.Quint,Ir=Ut.Strong,zr=Ut.Elastic,Nr=Ut.Back,Ur=Ut.SteppedEase,Hr=Ut.Bounce,Vr=Ut.Sine,Xr=Ut.Expo,Yr=Ut.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{gsap:()=>i,default:()=>i,CSSPlugin:()=>s.CSSPlugin,TweenMax:()=>o,TweenLite:()=>n.TweenLite,TimelineMax:()=>n.TimelineMax,TimelineLite:()=>n.TimelineLite,Power0:()=>n.Power0,Power1:()=>n.Power1,Power2:()=>n.Power2,Power3:()=>n.Power3,Power4:()=>n.Power4,Linear:()=>n.Linear,Quad:()=>n.Quad,Cubic:()=>n.Cubic,Quart:()=>n.Quart,Quint:()=>n.Quint,Strong:()=>n.Strong,Elastic:()=>n.Elastic,Back:()=>n.Back,SteppedEase:()=>n.SteppedEase,Bounce:()=>n.Bounce,Sine:()=>n.Sine,Expo:()=>n.Expo,Circ:()=>n.Circ});var n=r("./node_modules/gsap/gsap-core.js"),s=r("./node_modules/gsap/CSSPlugin.js"),i=n.gsap.registerPlugin(s.CSSPlugin)||n.gsap,o=i.core.Tween},"./node_modules/gsap/utils/matrix.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Matrix2D:()=>C,getGlobalMatrix:()=>A,_getDocScrollTop:()=>v,_getDocScrollLeft:()=>y,_setDoc:()=>f,_isFixed:()=>b,_getCTM:()=>D});var n,s,i,o,a,l,u,c,h,d="transform",p=d+"Origin",f=function(e){var t=e.ownerDocument||e;!(d in e.style)&&"msTransform"in e.style&&(p=(d="msTransform")+"Origin");for(;t.parentNode&&(t=t.parentNode););if(s=window,u=new C,t){n=t,i=t.documentElement,o=t.body,(c=n.createElementNS("http://www.w3.org/2000/svg","g")).style.transform="none";var r=t.createElement("div"),a=t.createElement("div");o.appendChild(r),r.appendChild(a),r.style.position="static",r.style[d]="translate3d(0,0,1px)",h=a.offsetParent!==r,o.removeChild(r)}return t},g=[],m=[],v=function(){return s.pageYOffset||n.scrollTop||i.scrollTop||o.scrollTop||0},y=function(){return s.pageXOffset||n.scrollLeft||i.scrollLeft||o.scrollLeft||0},_=function(e){return e.ownerSVGElement||("svg"===(e.tagName+"").toLowerCase()?e:null)},b=function e(t){return"fixed"===s.getComputedStyle(t).position||((t=t.parentNode)&&1===t.nodeType?e(t):void 0)},x=function e(t,r){if(t.parentNode&&(n||f(t))){var s=_(t),i=s?s.getAttribute("xmlns")||"http://www.w3.org/2000/svg":"http://www.w3.org/1999/xhtml",o=s?r?"rect":"g":"div",u=2!==r?0:100,c=3===r?100:0,h="position:absolute;display:block;pointer-events:none;margin:0;padding:0;",d=n.createElementNS?n.createElementNS(i.replace(/^https/,"http"),o):n.createElement(o);return r&&(s?(l||(l=e(t)),d.setAttribute("width",.01),d.setAttribute("height",.01),d.setAttribute("transform","translate("+u+","+c+")"),l.appendChild(d)):(a||((a=e(t)).style.cssText=h),d.style.cssText=h+"width:0.1px;height:0.1px;top:"+c+"px;left:"+u+"px",a.appendChild(d))),d}throw"Need document and parent."},D=function(e){var t,r=e.getCTM();return r||(t=e.style[d],e.style[d]="none",e.appendChild(c),r=c.getCTM(),e.removeChild(c),t?e.style[d]=t:e.style.removeProperty(d.replace(/([A-Z])/g,"-$1").toLowerCase())),r},w=function(e,t){var r,n,i,o,c,f,v=_(e),y=e===v,b=v?g:m,w=e.parentNode;if(e===s)return e;if(b.length||b.push(x(e,1),x(e,2),x(e,3)),r=v?l:a,v)y?(o=-(i=D(e)).e/i.a,c=-i.f/i.d,n=u):(i=e.getBBox(),o=(n=(n=e.transform?e.transform.baseVal:{}).numberOfItems?n.numberOfItems>1?function(e){for(var t=new C,r=0;r<e.numberOfItems;r++)t.multiply(e.getItem(r).matrix);return t}(n):n.getItem(0).matrix:u).a*i.x+n.c*i.y,c=n.b*i.x+n.d*i.y),t&&"g"===e.tagName.toLowerCase()&&(o=c=0),(y?v:w).appendChild(r),r.setAttribute("transform","matrix("+n.a+","+n.b+","+n.c+","+n.d+","+(n.e+o)+","+(n.f+c)+")");else{if(o=c=0,h)for(n=e.offsetParent,i=e;i&&(i=i.parentNode)&&i!==n&&i.parentNode;)(s.getComputedStyle(i)[d]+"").length>4&&(o=i.offsetLeft,c=i.offsetTop,i=0);if("absolute"!==(f=s.getComputedStyle(e)).position&&"fixed"!==f.position)for(n=e.offsetParent;w&&w!==n;)o+=w.scrollLeft||0,c+=w.scrollTop||0,w=w.parentNode;(i=r.style).top=e.offsetTop-c+"px",i.left=e.offsetLeft-o+"px",i[d]=f[d],i[p]=f[p],i.position="fixed"===f.position?"fixed":"absolute",e.parentNode.appendChild(r)}return r},E=function(e,t,r,n,s,i,o){return e.a=t,e.b=r,e.c=n,e.d=s,e.e=i,e.f=o,e},C=function(){function e(e,t,r,n,s,i){void 0===e&&(e=1),void 0===t&&(t=0),void 0===r&&(r=0),void 0===n&&(n=1),void 0===s&&(s=0),void 0===i&&(i=0),E(this,e,t,r,n,s,i)}var t=e.prototype;return t.inverse=function(){var e=this.a,t=this.b,r=this.c,n=this.d,s=this.e,i=this.f,o=e*n-t*r||1e-10;return E(this,n/o,-t/o,-r/o,e/o,(r*i-n*s)/o,-(e*i-t*s)/o)},t.multiply=function(e){var t=this.a,r=this.b,n=this.c,s=this.d,i=this.e,o=this.f,a=e.a,l=e.c,u=e.b,c=e.d,h=e.e,d=e.f;return E(this,a*t+u*n,a*r+u*s,l*t+c*n,l*r+c*s,i+h*t+d*n,o+h*r+d*s)},t.clone=function(){return new e(this.a,this.b,this.c,this.d,this.e,this.f)},t.equals=function(e){var t=this.a,r=this.b,n=this.c,s=this.d,i=this.e,o=this.f;return t===e.a&&r===e.b&&n===e.c&&s===e.d&&i===e.e&&o===e.f},t.apply=function(e,t){void 0===t&&(t={});var r=e.x,n=e.y,s=this.a,i=this.b,o=this.c,a=this.d,l=this.e,u=this.f;return t.x=r*s+n*o+l||0,t.y=r*i+n*a+u||0,t},e}();function A(e,t,r,s){if(!e||!e.parentNode||(n||f(e)).documentElement===e)return new C;var i=function(e){for(var t,r;e&&e!==o;)(r=e._gsap)&&r.uncache&&r.get(e,"x"),r&&!r.scaleX&&!r.scaleY&&r.renderTransform&&(r.scaleX=r.scaleY=1e-4,r.renderTransform(1,r),t?t.push(r):t=[r]),e=e.parentNode;return t}(e),a=_(e)?g:m,l=w(e,r),u=a[0].getBoundingClientRect(),c=a[1].getBoundingClientRect(),h=a[2].getBoundingClientRect(),d=l.parentNode,p=!s&&b(e),x=new C((c.left-u.left)/100,(c.top-u.top)/100,(h.left-u.left)/100,(h.top-u.top)/100,u.left+(p?0:y()),u.top+(p?0:v()));if(d.removeChild(l),i)for(u=i.length;u--;)(c=i[u]).scaleX=c.scaleY=0,c.renderTransform(1,c);return t?x.inverse():x}},"./node_modules/gsap/utils/paths.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{getRawPath:()=>T,copyRawPath:()=>M,reverseSegment:()=>F,convertToPath:()=>P,getRotationAtProgress:()=>k,sliceRawPath:()=>O,cacheRawPathMeasurements:()=>q,subdivideSegment:()=>B,getPositionOnPath:()=>z,transformRawPath:()=>N,stringToRawPath:()=>H,bezierToPoints:()=>V,flatPointsToSegment:()=>X,pointsToSegment:()=>Y,simplifyPoints:()=>W,getClosestData:()=>Z,subdivideSegmentNear:()=>$,rawPathToString:()=>Q});var n,s=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,i=/(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,o=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,a=/(^[#\.][a-z]|[a-y][a-z])/i,l=Math.PI/180,u=180/Math.PI,c=Math.sin,h=Math.cos,d=Math.abs,p=Math.sqrt,f=Math.atan2,g=1e8,m=function(e){return"string"==typeof e},v=function(e){return"number"==typeof e},y={},_={},b=1e5,x=function(e){return Math.round((e+g)%1*b)/b||(e<0?0:1)},D=function(e){return Math.round(e*b)/b||0},w=function(e){return Math.round(1e10*e)/1e10||0},E=function(e,t,r,n){var s=e[t],i=1===n?6:B(s,r,n);if(i&&i+r+2<s.length)return e.splice(t,0,s.slice(0,r+i+2)),s.splice(0,r+i),1},C=function(e,t,r){var n=e.length,s=~~(r*n);if(e[s]>t)for(;--s&&e[s]>t;);else for(;e[++s]<t&&s<n;);return s},A=function(e,t){return t.totalLength=e.totalLength,e.samples?(t.samples=e.samples.slice(0),t.lookup=e.lookup.slice(0),t.minLength=e.minLength,t.resolution=e.resolution):e.totalPoints&&(t.totalPoints=e.totalPoints),t},j=function(e,t){var r=e.length,n=e[r-1]||[],s=n.length;r&&t[0]===n[s-2]&&t[1]===n[s-1]&&(t=n.concat(t.slice(2)),r--),e[r]=t};function T(e){var t,r=(e=m(e)&&a.test(e)&&document.querySelector(e)||e).getAttribute?e:0;return r&&(e=e.getAttribute("d"))?(r._gsPath||(r._gsPath={}),(t=r._gsPath[e])&&!t._dirty?t:r._gsPath[e]=H(e)):e?m(e)?H(e):v(e[0])?[e]:e:console.warn("Expecting a <path> element or an SVG path data string")}function M(e){for(var t=[],r=0;r<e.length;r++)t[r]=A(e[r],e[r].slice(0));return A(e,t)}function F(e){var t,r=0;for(e.reverse();r<e.length;r+=2)t=e[r],e[r]=e[r+1],e[r+1]=t;e.reversed=!e.reversed}var S={rect:"rx,ry,x,y,width,height",circle:"r,cx,cy",ellipse:"rx,ry,cx,cy",line:"x1,x2,y1,y2"};function P(e,t){var r,n,s,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C=e.tagName.toLowerCase(),A=.552284749831;return"path"!==C&&e.getBBox?(l=function(e,t){var r,n=document.createElementNS("http://www.w3.org/2000/svg","path"),s=[].slice.call(e.attributes),i=s.length;for(t=","+t+",";--i>-1;)r=s[i].nodeName.toLowerCase(),t.indexOf(","+r+",")<0&&n.setAttributeNS(null,r,s[i].nodeValue);return n}(e,"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"),E=function(e,t){for(var r=t?t.split(","):[],n={},s=r.length;--s>-1;)n[r[s]]=+e.getAttribute(r[s])||0;return n}(e,S[C]),"rect"===C?(o=E.rx,a=E.ry||o,n=E.x,s=E.y,d=E.width-2*o,p=E.height-2*a,r=o||a?"M"+(y=(m=(g=n+o)+d)+o)+","+(b=s+a)+" V"+(x=b+p)+" C"+[y,D=x+a*A,v=m+o*A,w=x+a,m,w,m-(m-g)/3,w,g+(m-g)/3,w,g,w,f=n+o*(1-A),w,n,D,n,x,n,x-(x-b)/3,n,b+(x-b)/3,n,b,n,_=s+a*(1-A),f,s,g,s,g+(m-g)/3,s,m-(m-g)/3,s,m,s,v,s,y,_,y,b].join(",")+"z":"M"+(n+d)+","+s+" v"+p+" h"+-d+" v"+-p+" h"+d+"z"):"circle"===C||"ellipse"===C?("circle"===C?c=(o=a=E.r)*A:(o=E.rx,c=(a=E.ry)*A),r="M"+((n=E.cx)+o)+","+(s=E.cy)+" C"+[n+o,s+c,n+(u=o*A),s+a,n,s+a,n-u,s+a,n-o,s+c,n-o,s,n-o,s-c,n-u,s-a,n,s-a,n+u,s-a,n+o,s-c,n+o,s].join(",")+"z"):"line"===C?r="M"+E.x1+","+E.y1+" L"+E.x2+","+E.y2:"polyline"!==C&&"polygon"!==C||(r="M"+(n=(h=(e.getAttribute("points")+"").match(i)||[]).shift())+","+(s=h.shift())+" L"+h.join(","),"polygon"===C&&(r+=","+n+","+s+"z")),l.setAttribute("d",Q(l._gsRawPath=H(r))),t&&e.parentNode&&(e.parentNode.insertBefore(l,e),e.parentNode.removeChild(e)),l):e}function k(e,t){var r=I(e,t>=1?1-1e-9:t||1e-9);return L(r.segment,r.i,r.t)}function L(e,t,r){var n,s=e[t],i=e[t+2],o=e[t+4];return s+=(i-s)*r,s+=((i+=(o-i)*r)-s)*r,n=i+(o+(e[t+6]-o)*r-i)*r-s,s=e[t+1],s+=((i=e[t+3])-s)*r,s+=((i+=((o=e[t+5])-i)*r)-s)*r,D(f(i+(o+(e[t+7]-o)*r-i)*r-s,n)*u)}function O(e,t,r){r=void 0===r?1:w(r)||0,t=w(t)||0;var n=Math.max(0,~~(d(r-t)-1e-8)),s=M(e);if(t>r&&(t=1-t,r=1-r,function(e,t){var r=e.length;for(t||e.reverse();r--;)e[r].reversed||F(e[r])}(s),s.totalLength=0),t<0||r<0){var i=Math.abs(~~Math.min(t,r))+1;t+=i,r+=i}s.totalLength||q(s);var o,a,l,u,c,h,p,f,g=r>1,m=I(s,t,y,!0),v=I(s,r,_),b=v.segment,x=m.segment,D=v.segIndex,C=m.segIndex,A=v.i,T=m.i,S=C===D,P=A===T&&S;if(g||n){for(o=D<C||S&&A<T||P&&v.t<m.t,E(s,C,T,m.t)&&(C++,o||(D++,P?(v.t=(v.t-m.t)/(1-m.t),A=0):S&&(A-=T))),1-(r-t)<1e-5?D=C-1:!v.t&&D?D--:E(s,D,A,v.t)&&o&&C++,1===m.t&&(C=(C+1)%s.length),c=[],p=1+(h=s.length)*n,f=C,p+=(h-C+D)%h,u=0;u<p;u++)j(c,s[f++%h]);s=c}else if(l=1===v.t?6:B(b,A,v.t),t!==r)for(a=B(x,T,P?m.t/v.t:m.t),S&&(l+=a),b.splice(A+l+2),(a||T)&&x.splice(0,T+a),u=s.length;u--;)(u<C||u>D)&&s.splice(u,1);else b.angle=L(b,A+l,0),m=b[A+=l],v=b[A+1],b.length=b.totalLength=0,b.totalPoints=s.totalPoints=8,b.push(m,v,m,v,m,v,m,v);return s.totalLength=0,s}function R(e,t,r){t=t||0,e.samples||(e.samples=[],e.lookup=[]);var n,s,i,o,a,l,u,c,h,f,m,v,y,_,b,x,D,w=~~e.resolution||12,E=1/w,C=r?t+6*r+1:e.length,A=e[t],j=e[t+1],T=t?t/6*w:0,M=e.samples,F=e.lookup,S=(t?e.minLength:g)||g,P=M[T+r*w-1],k=t?M[T-1]:0;for(M.length=F.length=0,s=t+2;s<C;s+=6){if(i=e[s+4]-A,o=e[s+2]-A,a=e[s]-A,c=e[s+5]-j,h=e[s+3]-j,f=e[s+1]-j,l=u=m=v=0,d(i)<.01&&d(c)<.01&&d(a)+d(f)<.01)e.length>8&&(e.splice(s,6),s-=6,C-=6);else for(n=1;n<=w;n++)l=u-(u=((_=E*n)*_*i+3*(y=1-_)*(_*o+y*a))*_),m=v-(v=(_*_*c+3*y*(_*h+y*f))*_),(x=p(m*m+l*l))<S&&(S=x),k+=x,M[T++]=k;A+=i,j+=c}if(P)for(P-=k;T<M.length;T++)M[T]+=P;if(M.length&&S){if(e.totalLength=D=M[M.length-1]||0,e.minLength=S,D/S<9999)for(x=b=0,n=0;n<D;n+=S)F[x++]=M[b]<n?++b:b}else e.totalLength=M[0]=0;return t?k-M[t/2-1]:k}function q(e,t){var r,n,s;for(s=r=n=0;s<e.length;s++)e[s].resolution=~~t||12,n+=e[s].length,r+=R(e[s]);return e.totalPoints=n,e.totalLength=r,e}function B(e,t,r){if(r<=0||r>=1)return 0;var n=e[t],s=e[t+1],i=e[t+2],o=e[t+3],a=e[t+4],l=e[t+5],u=n+(i-n)*r,c=i+(a-i)*r,h=s+(o-s)*r,d=o+(l-o)*r,p=u+(c-u)*r,f=h+(d-h)*r,g=a+(e[t+6]-a)*r,m=l+(e[t+7]-l)*r;return c+=(g-c)*r,d+=(m-d)*r,e.splice(t+2,4,D(u),D(h),D(p),D(f),D(p+(c-p)*r),D(f+(d-f)*r),D(c),D(d),D(g),D(m)),e.samples&&e.samples.splice(t/6*e.resolution|0,0,0,0,0,0,0,0),6}function I(e,t,r,n){r=r||{},e.totalLength||q(e),(t<0||t>1)&&(t=x(t));var s,i,o,a,l,u,c,h=0,d=e[0];if(t)if(1===t)c=1,u=(d=e[h=e.length-1]).length-8;else{if(e.length>1){for(o=e.totalLength*t,l=u=0;(l+=e[u++].totalLength)<o;)h=u;t=(o-(a=l-(d=e[h]).totalLength))/(l-a)||0}s=d.samples,i=d.resolution,o=d.totalLength*t,a=(u=d.lookup.length?d.lookup[~~(o/d.minLength)]||0:C(s,o,t))?s[u-1]:0,(l=s[u])<o&&(a=l,l=s[++u]),c=1/i*((o-a)/(l-a)+u%i),u=6*~~(u/i),n&&1===c&&(u+6<d.length?(u+=6,c=0):h+1<e.length&&(u=c=0,d=e[++h]))}else c=u=h=0,d=e[0];return r.t=c,r.i=u,r.path=e,r.segment=d,r.segIndex=h,r}function z(e,t,r,n){var s,i,o,a,l,u,c,h,d,p=e[0],f=n||{};if((t<0||t>1)&&(t=x(t)),e.length>1){for(o=e.totalLength*t,l=u=0;(l+=e[u++].totalLength)<o;)p=e[u];t=(o-(a=l-p.totalLength))/(l-a)||0}return s=p.samples,i=p.resolution,o=p.totalLength*t,a=(u=p.lookup.length?p.lookup[t<1?~~(o/p.minLength):p.lookup.length-1]||0:C(s,o,t))?s[u-1]:0,(l=s[u])<o&&(a=l,l=s[++u]),d=1-(c=1/i*((o-a)/(l-a)+u%i)||0),h=p[u=6*~~(u/i)],f.x=D((c*c*(p[u+6]-h)+3*d*(c*(p[u+4]-h)+d*(p[u+2]-h)))*c+h),f.y=D((c*c*(p[u+7]-(h=p[u+1]))+3*d*(c*(p[u+5]-h)+d*(p[u+3]-h)))*c+h),r&&(f.angle=p.totalLength?L(p,u,c>=1?1-1e-9:c||1e-9):p.angle||0),f}function N(e,t,r,n,s,i,o){for(var a,l,u,c,h,d=e.length;--d>-1;)for(l=(a=e[d]).length,u=0;u<l;u+=2)c=a[u],h=a[u+1],a[u]=c*t+h*n+i,a[u+1]=c*r+h*s+o;return e._dirty=1,e}function U(e,t,r,n,s,i,o,a,u){if(e!==a||t!==u){r=d(r),n=d(n);var f=s%360*l,g=h(f),m=c(f),v=Math.PI,y=2*v,_=(e-a)/2,b=(t-u)/2,x=g*_+m*b,D=-m*_+g*b,w=x*x,E=D*D,C=w/(r*r)+E/(n*n);C>1&&(r=p(C)*r,n=p(C)*n);var A=r*r,j=n*n,T=(A*j-A*E-j*w)/(A*E+j*w);T<0&&(T=0);var M=(i===o?-1:1)*p(T),F=M*(r*D/n),S=M*(-n*x/r),P=(e+a)/2+(g*F-m*S),k=(t+u)/2+(m*F+g*S),L=(x-F)/r,O=(D-S)/n,R=(-x-F)/r,q=(-D-S)/n,B=L*L+O*O,I=(O<0?-1:1)*Math.acos(L/p(B)),z=(L*q-O*R<0?-1:1)*Math.acos((L*R+O*q)/p(B*(R*R+q*q)));isNaN(z)&&(z=v),!o&&z>0?z-=y:o&&z<0&&(z+=y),I%=y,z%=y;var N,U=Math.ceil(d(z)/(y/4)),H=[],V=z/U,X=4/3*c(V/2)/(1+h(V/2)),Y=g*r,G=m*r,W=m*-n,K=g*n;for(N=0;N<U;N++)x=h(s=I+N*V),D=c(s),L=h(s+=V),O=c(s),H.push(x-X*D,D+X*x,L+X*O,O-X*L,L,O);for(N=0;N<H.length;N+=2)x=H[N],D=H[N+1],H[N]=x*Y+D*W+P,H[N+1]=x*G+D*K+k;return H[N-2]=a,H[N-1]=u,H}}function H(e){var t,r,n,i,a,l,u,c,h,p,f,g,m,v,y,_=(e+"").replace(o,(function(e){var t=+e;return t<1e-4&&t>-1e-4?0:t})).match(s)||[],b=[],x=0,D=0,w=2/3,E=_.length,C=0,A="ERROR: malformed path: "+e,j=function(e,t,r,n){p=(r-e)/3,f=(n-t)/3,u.push(e+p,t+f,r-p,n-f,r,n)};if(!e||!isNaN(_[0])||isNaN(_[1]))return console.log(A),b;for(t=0;t<E;t++)if(m=a,isNaN(_[t])?l=(a=_[t].toUpperCase())!==_[t]:t--,n=+_[t+1],i=+_[t+2],l&&(n+=x,i+=D),t||(c=n,h=i),"M"===a)u&&(u.length<8?b.length-=1:C+=u.length),x=c=n,D=h=i,u=[n,i],b.push(u),t+=2,a="L";else if("C"===a)u||(u=[0,0]),l||(x=D=0),u.push(n,i,x+1*_[t+3],D+1*_[t+4],x+=1*_[t+5],D+=1*_[t+6]),t+=6;else if("S"===a)p=x,f=D,"C"!==m&&"S"!==m||(p+=x-u[u.length-4],f+=D-u[u.length-3]),l||(x=D=0),u.push(p,f,n,i,x+=1*_[t+3],D+=1*_[t+4]),t+=4;else if("Q"===a)p=x+(n-x)*w,f=D+(i-D)*w,l||(x=D=0),x+=1*_[t+3],D+=1*_[t+4],u.push(p,f,x+(n-x)*w,D+(i-D)*w,x,D),t+=4;else if("T"===a)p=x-u[u.length-4],f=D-u[u.length-3],u.push(x+p,D+f,n+(x+1.5*p-n)*w,i+(D+1.5*f-i)*w,x=n,D=i),t+=2;else if("H"===a)j(x,D,x=n,D),t+=1;else if("V"===a)j(x,D,x,D=n+(l?D-x:0)),t+=1;else if("L"===a||"Z"===a)"Z"===a&&(n=c,i=h,u.closed=!0),("L"===a||d(x-n)>.5||d(D-i)>.5)&&(j(x,D,n,i),"L"===a&&(t+=2)),x=n,D=i;else if("A"===a){if(v=_[t+4],y=_[t+5],p=_[t+6],f=_[t+7],r=7,v.length>1&&(v.length<3?(f=p,p=y,r--):(f=y,p=v.substr(2),r-=2),y=v.charAt(1),v=v.charAt(0)),g=U(x,D,+_[t+1],+_[t+2],+_[t+3],+v,+y,(l?x:0)+1*p,(l?D:0)+1*f),t+=r,g)for(r=0;r<g.length;r++)u.push(g[r]);x=u[u.length-2],D=u[u.length-1]}else console.log(A);return(t=u.length)<6?(b.pop(),t=0):u[0]===u[t-2]&&u[1]===u[t-1]&&(u.closed=!0),b.totalPoints=C+t,b}function V(e,t,r,n,s,i,o,a,l,u,c){var h,p=(e+r)/2,f=(t+n)/2,g=(r+s)/2,m=(n+i)/2,v=(s+o)/2,y=(i+a)/2,_=(p+g)/2,b=(f+m)/2,x=(g+v)/2,D=(m+y)/2,w=(_+x)/2,E=(b+D)/2,C=o-e,A=a-t,j=d((r-o)*A-(n-a)*C),T=d((s-o)*A-(i-a)*C);return u||(u=[e,t,o,a],c=2),u.splice(c||u.length-2,0,w,E),(j+T)*(j+T)>l*(C*C+A*A)&&(h=u.length,V(e,t,p,f,_,b,w,E,l,u,c),V(w,E,x,D,v,y,o,a,l,u,c+2+(u.length-h))),u}function X(e,t){void 0===t&&(t=1);for(var r=e[0],n=0,s=[r,n],i=2;i<e.length;i+=2)s.push(r,n,e[i],n=(e[i]-r)*t/2,r=e[i],-n);return s}function Y(e,t,r){d(e[0]-e[2])<1e-4&&d(e[1]-e[3])<1e-4&&(e=e.slice(2));var n,s,i,o,a,l,u,g,m,v,y,_,b,x,w=e.length-2,E=+e[0],C=+e[1],A=+e[2],j=+e[3],T=[E,C,E,C],M=A-E,F=j-C,S=Math.abs(e[w]-E)<.001&&Math.abs(e[w+1]-C)<.001;for(isNaN(r)&&(r=Math.PI/10),S&&(e.push(A,j),A=E,j=C,E=e[w-2],C=e[w-1],e.unshift(E,C),w+=4),t=t||0===t?+t:1,a=2;a<w;a+=2)n=E,s=C,E=A,C=j,A=+e[a+2],j=+e[a+3],E===A&&C===j||(_=(l=M)*l+(g=F)*g,b=(M=A-E)*M+(F=j-C)*F,x=(u=A-n)*u+(m=j-s)*m,y=(i=Math.acos((_+b-x)/p(4*_*b)))/Math.PI*t,v=p(_)*y,y*=p(b),E===n&&C===s||(i>r?(o=f(m,u),T.push(D(E-h(o)*v),D(C-c(o)*v),D(E),D(C),D(E+h(o)*y),D(C+c(o)*y))):(o=f(g,l),T.push(D(E-h(o)*v),D(C-c(o)*v)),o=f(F,M),T.push(D(E),D(C),D(E+h(o)*y),D(C+c(o)*y)))));return E!==A||C!==j||T.length<4?T.push(D(A),D(j),D(A),D(j)):T.length-=2,S&&(T.splice(0,6),T.length=T.length-6),T}function G(e,t,r,n,s){var i,o,a,l,u,c,h,d,p,f,g,m,v=n,y=e[t],_=e[t+1],b=e[r],x=e[r+1];for(o=t+2;o<r;o+=2)l=e[o],u=e[o+1],f=void 0,g=void 0,m=void 0,m=(p=x)-(h=_),((g=(d=b)-(c=y))||m)&&((f=((l-c)*g+(u-h)*m)/(g*g+m*m))>1?(c=d,h=p):f>0&&(c+=g*f,h+=m*f)),(a=Math.pow(l-c,2)+Math.pow(u-h,2))>v&&(i=o,v=a);v>n&&(i-t>2&&G(e,t,i,n,s),s.push(e[i],e[i+1]),r-i>2&&G(e,i,r,n,s))}function W(e,t){var r,n,s,i,o,a,l,u=parseFloat(e[0]),c=parseFloat(e[1]),h=[u,c],d=e.length-2;for(t=Math.pow(t||1,2),r=2;r<d;r+=2)(i=u-(n=parseFloat(e[r])))*i+(o=c-(s=parseFloat(e[r+1])))*o>t&&(h.push(n,s),u=n,c=s);return h.push(parseFloat(e[d]),parseFloat(e[d+1])),G(h,0,l=h.length-2,t,a=[h[0],h[1]]),a.push(h[l],h[l+1]),a}function K(e,t,r,s,i,o,a,l,u,c,h,d,p,f){var m,v,y,_,b=(i-s)/o,x=0,D=s;for(n=g;D<=i;)(m=(v=(_=1-D)*_*_*a+3*_*_*D*u+3*_*D*D*h+D*D*D*p-t)*v+(y=_*_*_*l+3*_*_*D*c+3*_*D*D*d+D*D*D*f-r)*y)<n&&(n=m,x=D),D+=b;return e>1?K(e-1,t,r,Math.max(x-b,0),Math.min(x+b,1),o,a,l,u,c,h,d,p,f):x}function Z(e,t,r,s){var i,o,a,l,u={j:0,i:0,t:0},c=g;for(o=0;o<e.length;o++)for(l=e[o],i=0;i<l.length;i+=6)a=K(1,t,r,0,1,s||20,l[i],l[i+1],l[i+2],l[i+3],l[i+4],l[i+5],l[i+6],l[i+7]),c>n&&(c=n,u.j=o,u.i=i,u.t=a);return u}function $(e,t,r,s,i){var o,a,l=r.length,u=g,c=0,h=0;for(s=s||20,i=i||3,a=0;a<l;a+=6)o=K(1,e,t,0,1,s,r[a],r[a+1],r[a+2],r[a+3],r[a+4],r[a+5],r[a+6],r[a+7]),u>n&&(u=n,c=o,h=a);return B(r,h,o=K(i,e,t,c-.05,c+.05,s,r[h],r[h+1],r[h+2],r[h+3],r[h+4],r[h+5],r[h+6],r[h+7])),h+6}function Q(e){v(e[0])&&(e=[e]);var t,r,n,s,i="",o=e.length;for(r=0;r<o;r++){for(s=e[r],i+="M"+D(s[0])+","+D(s[1])+" C",t=s.length,n=2;n<t;n++)i+=D(s[n++])+","+D(s[n++])+" "+D(s[n++])+","+D(s[n++])+" "+D(s[n++])+","+D(s[n])+" ";s.closed&&(i+="z")}return i}},"./node_modules/gsap/utils/strings.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{emojiExp:()=>s,getText:()=>i,splitInnerHTML:()=>o,emojiSafeSplit:()=>a});var n=/(^\s+|\s+$)/g,s=/([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;function i(e){var t=e.nodeType,r="";if(1===t||9===t||11===t){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)r+=i(e)}else if(3===t||4===t)return e.nodeValue;return r}function o(e,t,r){for(var n=e.firstChild,s=[];n;)3===n.nodeType?s.push.apply(s,a((n.nodeValue+"").replace(/^\n+/g,"").replace(/\s+/g," "),t,r)):"br"===(n.nodeName+"").toLowerCase()?s[s.length-1]+="<br>":s.push(n.outerHTML),n=n.nextSibling;return s}function a(e,t,r){if(e+="",r&&(e=e.replace(n,"")),t&&""!==t)return e.replace(/>/g,"&gt;").replace(/</g,"&lt;").split(t);for(var i,o,a=[],l=e.length,u=0;u<l;u++)((o=e.charAt(u)).charCodeAt(0)>=55296&&o.charCodeAt(0)<=56319||e.charCodeAt(u+1)>=65024&&e.charCodeAt(u+1)<=65039)&&(i=((e.substr(u,12).split(s)||[])[1]||"").length||2,o=e.substr(u,i),a.emoji=1,u+=i-1),a.push(">"===o?"&gt;":"<"===o?"&lt;":o);return a}},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var s in t=arguments[r])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var s=r("./node_modules/html-entities/lib/named-references.js"),i=r("./node_modules/html-entities/lib/numeric-unicode-map.js"),o=r("./node_modules/html-entities/lib/surrogate-pairs.js"),a=n(n({},s.namedReferences),{all:s.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},u={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var r=void 0===(c=(i=void 0===t?u:t).mode)?"specialChars":c,n=void 0===(f=i.numeric)?"decimal":f,s=i.level;if(!e)return"";var i,c,h=l[r],d=a[void 0===s?"all":s].characters,p="hexadecimal"===n;if(h.lastIndex=0,i=h.exec(e)){c="";var f=0;do{f!==i.index&&(c+=e.substring(f,i.index));var g=d[s=i[0]];if(!g){var m=s.length>1?o.getCodePoint(s,0):s.charCodeAt(0);g=(p?"&#x"+m.toString(16):"&#"+m)+";"}c+=g,f=i.index+s.length}while(i=h.exec(e));f!==e.length&&(c+=e.substring(f))}else c=e;return c};var c={scope:"body",level:"all"},h=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,p={xml:{strict:h,attribute:d,body:s.bodyRegExps.xml},html4:{strict:h,attribute:d,body:s.bodyRegExps.html4},html5:{strict:h,attribute:d,body:s.bodyRegExps.html5}},f=n(n({},p),{all:p.html5}),g=String.fromCharCode,m=g(65533),v={level:"all"};t.decodeEntity=function(e,t){var r=void 0===(n=(void 0===t?v:t).level)?"all":n;if(!e)return"";var n=e,s=(e[e.length-1],a[r].entities[e]);if(s)n=s;else if("&"===e[0]&&"#"===e[1]){var l=e[2],u="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));n=u>=1114111?m:u>65535?o.fromCodePoint(u):g(i.numericUnicodeMap[u]||u)}return n},t.decode=function(e,t){var r=void 0===t?c:t,n=r.level,s=void 0===n?"all":n,l=r.scope,u=void 0===l?"xml"===s?"strict":"body":l;if(!e)return"";var h=f[s][u],d=a[s].entities,p="attribute"===u,v="strict"===u;h.lastIndex=0;var y,_=h.exec(e);if(_){y="";var b=0;do{b!==_.index&&(y+=e.substring(b,_.index));var x=_[0],D=x,w=x[x.length-1];if(p&&"="===w)D=x;else if(v&&";"!==w)D=x;else{var E=d[x];if(E)D=E;else if("&"===x[0]&&"#"===x[1]){var C=x[2],A="x"==C||"X"==C?parseInt(x.substr(3),16):parseInt(x.substr(2));D=A>=1114111?m:A>65535?o.fromCodePoint(A):g(i.numericUnicodeMap[A]||A)}}y+=D,b=_.index+x.length}while(_=h.exec(e));b!==e.length&&(y+=e.substring(b))}else y=e;return y}},"./node_modules/html-entities/lib/named-references.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=n},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var n=r("./node_modules/lodash/_hashClear.js"),s=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),o=r("./node_modules/lodash/_hashHas.js"),a=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_listCacheClear.js"),s=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),o=r("./node_modules/lodash/_listCacheHas.js"),a=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=n},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_mapCacheClear.js"),s=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),o=r("./node_modules/lodash/_mapCacheHas.js"),a=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=n},"./node_modules/lodash/_Set.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=n},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js"),s=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function o(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new n;++t<r;)this.add(e[t])}o.prototype.add=o.prototype.push=s,o.prototype.has=i,e.exports=o},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),o=r("./node_modules/lodash/_stackGet.js"),a=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(e){var t=this.__data__=new n(e);this.size=t.size}u.prototype.clear=s,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=a,u.prototype.set=l,e.exports=u},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Symbol;e.exports=n},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=n},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=n},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=0,i=[];++r<n;){var o=e[r];t(o,r,e)&&(i[s++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseTimes.js"),s=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isBuffer.js"),a=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=i(e),c=!r&&s(e),h=!r&&!c&&o(e),d=!r&&!c&&!h&&l(e),p=r||c||h||d,f=p?n(e.length,String):[],g=f.length;for(var m in e)!t&&!u.call(e,m)||p&&("length"==m||h&&("offset"==m||"parent"==m)||d&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||a(m,g))||f.push(m);return f}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=Array(n);++r<n;)s[r]=t(e[r],r,e);return s}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,n=t.length,s=e.length;++r<n;)e[s+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var n=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(n(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseForOwn.js"),s=r("./node_modules/lodash/_createBaseEach.js")(n);e.exports=s},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var n=r("./node_modules/lodash/_createBaseFor.js")();e.exports=n},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseFor.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&n(e,t,s)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,i=(t=n(t,e)).length;null!=e&&r<i;)e=e[s(t[r++])];return r&&r==i?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayPush.js"),s=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var i=t(e);return s(e)?i:n(i,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),o=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?s(e):i(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return s(e)&&"[object Arguments]"==n(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqualDeep.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,i,o,a){return t===r||(null==t||null==r||!s(t)&&!s(r)?t!=t&&r!=r:n(t,r,i,o,e,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),o=r("./node_modules/lodash/_equalObjects.js"),a=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),c=r("./node_modules/lodash/isTypedArray.js"),h="[object Arguments]",d="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,g,m,v){var y=l(e),_=l(t),b=y?d:a(e),x=_?d:a(t),D=(b=b==h?p:b)==p,w=(x=x==h?p:x)==p,E=b==x;if(E&&u(e)){if(!u(t))return!1;y=!0,D=!1}if(E&&!D)return v||(v=new n),y||c(e)?s(e,t,r,g,m,v):i(e,t,b,r,g,m,v);if(!(1&r)){var C=D&&f.call(e,"__wrapped__"),A=w&&f.call(t,"__wrapped__");if(C||A){var j=C?e.value():e,T=A?t.value():t;return v||(v=new n),m(j,T,r,g,v)}}return!!E&&(v||(v=new n),o(e,t,r,g,m,v))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,i){var o=r.length,a=o,l=!i;if(null==e)return!a;for(e=Object(e);o--;){var u=r[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var c=(u=r[o])[0],h=e[c],d=u[1];if(l&&u[2]){if(void 0===h&&!(c in e))return!1}else{var p=new n;if(i)var f=i(h,d,c,e,t,p);if(!(void 0===f?s(d,h,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),o=r("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,c=l.toString,h=u.hasOwnProperty,d=RegExp("^"+c.call(h).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||s(e))&&(n(e)?d:a).test(o(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&s(e.length)&&!!o[n(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseMatches.js"),s=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?o(e)?s(e[0],e[1]):n(e):a(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isPrototype.js"),s=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return s(e);var t=[];for(var r in Object(e))i.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseEach.js"),s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,i=s(e)?Array(e.length):[];return n(e,(function(e,n,s){i[++r]=t(e,n,s)})),i}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsMatch.js"),s=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=s(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(r){return r===e||n(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqual.js"),s=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return o(e)&&a(t)?l(u(e),t):function(r){var o=s(r,e);return void 0===o&&o===t?i(r,e):n(t,o,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return n(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isSymbol.js"),a=n?n.prototype:void 0,l=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return s(t,e)+"";if(o(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:n}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),o=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return n(e)?e:s(e,t)?[e]:i(o(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=n},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,s){if(null==r)return r;if(!n(r))return e(r,s);for(var i=r.length,o=t?i:-1,a=Object(r);(t?o--:++o<i)&&!1!==s(a[o],o,a););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,n){for(var s=-1,i=Object(t),o=n(t),a=o.length;a--;){var l=o[e?a:++s];if(!1===r(i[l],l,i))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var n=r("./node_modules/lodash/_SetCache.js"),s=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,o,a,l){var u=1&r,c=e.length,h=t.length;if(c!=h&&!(u&&h>c))return!1;var d=l.get(e),p=l.get(t);if(d&&p)return d==t&&p==e;var f=-1,g=!0,m=2&r?new n:void 0;for(l.set(e,t),l.set(t,e);++f<c;){var v=e[f],y=t[f];if(o)var _=u?o(y,v,f,t,e,l):o(v,y,f,e,t,l);if(void 0!==_){if(_)continue;g=!1;break}if(m){if(!s(t,(function(e,t){if(!i(m,t)&&(v===e||a(v,e,r,o,l)))return m.push(t)}))){g=!1;break}}else if(v!==y&&!a(v,y,r,o,l)){g=!1;break}}return l.delete(e),l.delete(t),g}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),o=r("./node_modules/lodash/_equalArrays.js"),a=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=n?n.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,r,n,u,h,d){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!h(new s(e),new s(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=a;case"[object Set]":var f=1&n;if(p||(p=l),e.size!=t.size&&!f)return!1;var g=d.get(e);if(g)return g==t;n|=2,d.set(e,t);var m=o(p(e),p(t),n,u,h,d);return d.delete(e),m;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getAllKeys.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,o,a){var l=1&r,u=n(e),c=u.length;if(c!=n(t).length&&!l)return!1;for(var h=c;h--;){var d=u[h];if(!(l?d in t:s.call(t,d)))return!1}var p=a.get(e),f=a.get(t);if(p&&f)return p==t&&f==e;var g=!0;a.set(e,t),a.set(t,e);for(var m=l;++h<c;){var v=e[d=u[h]],y=t[d];if(i)var _=l?i(y,v,d,t,e,a):i(v,y,d,e,t,a);if(!(void 0===_?v===y||o(v,y,r,i,a):_)){g=!1;break}m||(m="constructor"==d)}if(g&&!m){var b=e.constructor,x=t.constructor;b==x||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(g=!1)}return a.delete(e),a.delete(t),g}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=n},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetAllKeys.js"),s=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");e.exports=function(e){return n(e,i,s)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return n(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isStrictComparable.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=s(e),r=t.length;r--;){var i=t[r],o=e[i];t[r]=[i,o,n(o)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsNative.js"),s=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=s(e,t);return n(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=Object.prototype,i=s.hasOwnProperty,o=s.toString,a=n?n.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),r=e[a];try{e[a]=void 0;var n=!0}catch(e){}var s=o.call(e);return n&&(t?e[a]=r:delete e[a]),s}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayFilter.js"),s=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(e){return null==e?[]:(e=Object(e),n(o(e),(function(t){return i.call(e,t)})))}:s;e.exports=a},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_DataView.js"),s=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),o=r("./node_modules/lodash/_Set.js"),a=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),c="[object Map]",h="[object Promise]",d="[object Set]",p="[object WeakMap]",f="[object DataView]",g=u(n),m=u(s),v=u(i),y=u(o),_=u(a),b=l;(n&&b(new n(new ArrayBuffer(1)))!=f||s&&b(new s)!=c||i&&b(i.resolve())!=h||o&&b(new o)!=d||a&&b(new a)!=p)&&(b=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,n=r?u(r):"";if(n)switch(n){case g:return f;case m:return c;case v:return h;case y:return d;case _:return p}return t}),e.exports=b},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/_isIndex.js"),a=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var u=-1,c=(t=n(t,e)).length,h=!1;++u<c;){var d=l(t[u]);if(!(h=null!=e&&r(e,d)))break;e=e[d]}return h||++u!=c?h:!!(c=null==e?0:e.length)&&a(c)&&o(d,c)&&(i(e)||s(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=n?n(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(n){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return s.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return n?void 0!==t[e]:s.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=n&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var n=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==n||"symbol"!=n&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;e.exports=function(e,t){if(n(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!s(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var n,s=r("./node_modules/lodash/_coreJsData.js"),i=(n=/[^.]+$/.exec(s&&s.keys&&s.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!i&&i in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var n=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!n(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js"),s=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=n(t,e);return!(r<0)&&(r==t.length-1?t.pop():s.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=n(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return n(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,s=n(r,e);return s<0?(++this.size,r.push([e,t])):r[s][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Hash.js"),s=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new n,map:new(i||s),string:new n}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=n(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=n(this,e),s=r.size;return r.set(e,t),this.size+=r.size==s?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var n=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=n(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=n},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=n},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_freeGlobal.js"),s=t&&!t.nodeType&&t,i=s&&e&&!e.nodeType&&e,o=i&&i.exports===s&&n.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=a},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var n=r("./node_modules/lodash/_freeGlobal.js"),s="object"==typeof self&&self&&self.Object===Object&&self,i=n||s||Function("return this")();e.exports=i},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new n,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof n){var o=r.__data__;if(!s||o.length<199)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new i(o)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_memoizeCapped.js"),s=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=n((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(s,(function(e,r,n,s){t.push(n?s.replace(i,"$1"):r||e)})),t}));e.exports=o},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||n(e))return e;var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayEach.js"),s=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?n:s)(e,i(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var s=null==e?void 0:n(e,t);return void 0===s?r:s}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseHasIn.js"),s=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&s(e,t,n)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsArguments.js"),s=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=n(function(){return arguments}())?n:function(e){return s(e)&&o.call(e,"callee")&&!a.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&s(e.length)&&!n(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_root.js"),s=r("./node_modules/lodash/stubFalse.js"),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i?n.Buffer:void 0,l=(a?a.isBuffer:void 0)||s;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!s(e))return!1;var t=n(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||s(e)&&"[object Symbol]"==n(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsTypedArray.js"),s=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?s(o):n;e.exports=a},"./node_modules/lodash/keys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayLikeKeys.js"),s=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return i(e)?n(e):s(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayMap.js"),s=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?n:i)(e,s(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js");function s(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,s=t?t.apply(this,n):n[0],i=r.cache;if(i.has(s))return i.get(s);var o=e.apply(this,n);return r.cache=i.set(s,o)||i,o};return r.cache=new(s.Cache||n),r}s.Cache=n,e.exports=s},"./node_modules/lodash/property.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseProperty.js"),s=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return i(e)?n(o(e)):s(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":n(e)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),s=Object.create(null),i="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(h(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return o.call(t,(function(t){if(t.href){var s=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);h(s)&&!0!==t.visited&&s&&(l(t,s),r=!0)}})),r}function c(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&l(e)}))}function h(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,o,l,h=function(e){var t=s[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}s[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),s=r&&r[1];return s&&e?e.split(",").map((function(e){var r=new RegExp("".concat(s,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,s),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},o=50,l=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(l),l=setTimeout(n,o)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,n,s,i,o,a,l,u,c,h,d,p,f,g,m=!1;function v(){if(!m){m=!0;var e=navigator.userAgent,v=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),y=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(d=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),c=/Android/i.exec(e),f=/FBAN\/\w+;/i.exec(e),g=/Mobile/i.exec(e),h=!!/Win64/.exec(e),v){(t=v[1]?parseFloat(v[1]):v[5]?parseFloat(v[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var _=/(?:Trident\/(\d+.\d+))/.exec(e);o=_?parseFloat(_[1])+4:t,r=v[2]?parseFloat(v[2]):NaN,n=v[3]?parseFloat(v[3]):NaN,(s=v[4]?parseFloat(v[4]):NaN)?(v=/(?:Chrome\/(\d+\.\d+))/.exec(e),i=v&&v[1]?parseFloat(v[1]):NaN):i=NaN}else t=r=n=i=s=NaN;if(y){if(y[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!y[2],u=!!y[3]}else a=l=u=!1}}var y={ie:function(){return v()||t},ieCompatibilityMode:function(){return v()||o>t},ie64:function(){return y.ie()&&h},firefox:function(){return v()||r},opera:function(){return v()||n},webkit:function(){return v()||s},safari:function(){return y.webkit()},chrome:function(){return v()||i},windows:function(){return v()||l},osx:function(){return v()||a},linux:function(){return v()||u},iphone:function(){return v()||d},mobile:function(){return v()||d||p||c||g},nativeApp:function(){return v()||f},android:function(){return v()||c},ipad:function(){return v()||p}};e.exports=y},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var n,s=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");s.canUseDOM&&(n=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!s.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,i=r in document;if(!i){var o=document.createElement("div");o.setAttribute(r,"return;"),i="function"==typeof o[r]}return!i&&n&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var n=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),s=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(e){var t=0,r=0,n=0,s=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),n=10*t,s=10*r,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||s)&&e.deltaMode&&(1==e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!r&&(r=s<1?-1:1),{spinX:t,spinY:r,pixelX:n,pixelY:s}}i.getEventType=function(){return n.firefox()?"DOMMouseScroll":s("wheel")?"wheel":"mousewheel"},e.exports=i},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>u});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const o=new s.Mat4,a=new i.Vec3,l=new i.Vec3;class u extends n.Transform{constructor(e,{near:t=.1,far:r=100,fov:n=45,aspect:o=1,left:a,right:l,bottom:u,top:c,zoom:h=1}={}){super(),Object.assign(this,{near:t,far:r,fov:n,aspect:o,left:a,right:l,bottom:u,top:c,zoom:h}),this.projectionMatrix=new s.Mat4,this.viewMatrix=new s.Mat4,this.projectionViewMatrix=new s.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:n=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:n}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:n,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left,right:n=this.right,bottom:s=this.bottom,top:i=this.top,zoom:o=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:n,bottom:s,top:i,zoom:o}),r/=o,n/=o,s/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:r,right:n,bottom:s,top:i,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(o.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const t=a;t.copy(e.geometry.bounds.center),t.applyMatrix4(e.worldMatrix);const r=e.geometry.bounds.radius*e.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(t,r)}frustumIntersectsSphere(e,t){const r=l;for(let n=0;n<6;n++){const s=this.frustum[n];if(r.copy(s).dot(e)+s.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var n=r("./node_modules/ogl/src/math/Vec3.js");const s=new n.Vec3;let i=1,o=1,a=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=o++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.buffer||(t.buffer=this.gl.createBuffer(),this.updateAttribute(t)),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),this.gl.bufferData(e.target,e.data,this.gl.STATIC_DRAW),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const n=this.attributes[t];this.gl.bindBuffer(n.target,n.buffer),this.glState.boundBuffer=n.buffer;let s=1;35674===r&&(s=2),35675===r&&(s=3),35676===r&&(s=4);const i=n.size/s,o=1===s?0:s*s*s,a=1===s?0:s*s;for(let t=0;t<s;t++)this.gl.vertexAttribPointer(e+t,i,n.type,n.normalized,n.stride+o,n.offset+t*a),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,n.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.offset||0,s=e.stride||e.size;this.bounds||(this.bounds={min:new n.Vec3,max:new n.Vec3,center:new n.Vec3,scale:new n.Vec3,radius:1/0});const i=this.bounds.min,o=this.bounds.max,a=this.bounds.center,l=this.bounds.scale;i.set(1/0),o.set(-1/0);for(let e=r,n=t.length;e<n;e+=s){const r=t[e],n=t[e+1],s=t[e+2];i.x=Math.min(r,i.x),i.y=Math.min(n,i.y),i.z=Math.min(s,i.z),o.x=Math.max(r,o.x),o.y=Math.max(n,o.y),o.z=Math.max(s,o.z)}l.sub(o,i),a.add(i,o).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.offset||0,n=e.stride||e.size;this.bounds||this.computeBoundingBox(e);let i=0;for(let e=r,o=t.length;e<o;e+=n)s.fromArray(t,e),i=Math.max(i,this.bounds.center.squaredDistance(s));this.bounds.radius=Math.sqrt(i)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>a});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends n.Transform{constructor(e,{geometry:t,program:r,mode:n=e.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=o++,this.geometry=t,this.program=r,this.mode=n,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e}))),e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>i});let n=1;const s={};class i{constructor(e,{vertex:t,fragment:r,uniforms:s={},transparent:i=!1,cullFace:o=e.BACK,frontFace:l=e.CCW,depthTest:u=!0,depthWrite:c=!0,depthFunc:h=e.LESS}={}){e.canvas||console.error("gl not passed as fist argument to Program"),this.gl=e,this.uniforms=s,this.id=n++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=l,this.depthTest=u,this.depthWrite=c,this.depthFunc=h,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=e.createShader(e.VERTEX_SHADER);e.shaderSource(d,t),e.compileShader(d),""!==e.getShaderInfoLog(d)&&console.warn(`${e.getShaderInfoLog(d)}\nVertex Shader\n${a(t)}`);const p=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(p,r),e.compileShader(p),""!==e.getShaderInfoLog(p)&&console.warn(`${e.getShaderInfoLog(p)}\nFragment Shader\n${a(r)}`),this.program=e.createProgram(),e.attachShader(this.program,d),e.attachShader(this.program,p),e.linkProgram(this.program),!e.getProgramParameter(this.program,e.LINK_STATUS))return console.warn(e.getProgramInfoLog(this.program));e.deleteShader(d),e.deleteShader(p),this.uniformLocations=new Map;let f=e.getProgramParameter(this.program,e.ACTIVE_UNIFORMS);for(let t=0;t<f;t++){let r=e.getActiveUniform(this.program,t);this.uniformLocations.set(r,e.getUniformLocation(this.program,r.name));const n=r.name.match(/(\w+)/g);r.uniformName=n[0],3===n.length?(r.isStructArray=!0,r.structIndex=Number(n[1]),r.structProperty=n[2]):2===n.length&&isNaN(Number(n[1]))&&(r.isStruct=!0,r.structProperty=n[1])}this.attributeLocations=new Map;const g=[],m=e.getProgramParameter(this.program,e.ACTIVE_ATTRIBUTES);for(let t=0;t<m;t++){const r=e.getActiveAttrib(this.program,t),n=e.getAttribLocation(this.program,r.name);g[n]=r.name,this.attributeLocations.set(r,n)}this.attributeOrder=g.join("")}setBlendFunc(e,t,r,n){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=n,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let n=r.uniformName,s=this.uniforms[n];if(r.isStruct&&(s=s[r.structProperty],n+=`.${r.structProperty}`),r.isStructArray&&(s=s[r.structIndex][r.structProperty],n+=`[${r.structIndex}].${r.structProperty}`),!s)return u(`Active uniform ${n} has not been supplied`);if(s&&void 0===s.value)return u(`${n} uniform is missing a value parameter`);if(s.value.texture)return t+=1,s.value.update(t),o(this.gl,r.type,e,t);if(s.value.length&&s.value[0].texture){const n=[];return s.value.forEach((e=>{t+=1,e.update(t),n.push(t)})),o(this.gl,r.type,e,n)}o(this.gl,r.type,e,s.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(e,t,r,n){n=n.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const n=t*r;let i=s[n];i||(s[n]=i=new Float32Array(n));for(let n=0;n<t;n++)i.set(e[n],n*r);return i}(n):n;const i=e.renderer.state.uniformLocations.get(r);if(n.length)if(void 0===i||i.length!==n.length)e.renderer.state.uniformLocations.set(r,n.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}(i,n))return;i.set?i.set(n):function(e,t){for(let r=0,n=e.length;r<n;r++)e[r]=t[r]}(i,n),e.renderer.state.uniformLocations.set(r,i)}else{if(i===n)return;e.renderer.state.uniformLocations.set(r,n)}switch(t){case 5126:return n.length?e.uniform1fv(r,n):e.uniform1f(r,n);case 35664:return e.uniform2fv(r,n);case 35665:return e.uniform3fv(r,n);case 35666:return e.uniform4fv(r,n);case 35670:case 5124:case 35678:case 35680:return n.length?e.uniform1iv(r,n):e.uniform1i(r,n);case 35671:case 35667:return e.uniform2iv(r,n);case 35672:case 35668:return e.uniform3iv(r,n);case 35673:case 35669:return e.uniform4iv(r,n);case 35674:return e.uniformMatrix2fv(r,!1,n);case 35675:return e.uniformMatrix3fv(r,!1,n);case 35676:return e.uniformMatrix4fv(r,!1,n)}}function a(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function u(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>i});const n=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let s=1;class i{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:n=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:c=!1,powerPreference:h="default",autoClear:d=!0,webgl:p=2}={}){const f={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:c,powerPreference:h};this.dpr=n,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=u,this.autoClear=d,this.id=s++,2===p&&(this.gl=e.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.gl.viewport(0,0,e,t))}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,n){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===n||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=n,void 0!==r?this.gl.blendFuncSeparate(e,t,r,n):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:s}){let i=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||i.push(e))})),s){const e=[],r=[],s=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):s.push(i):e.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&t&&(i.worldMatrix.getTranslation(n),n.applyMatrix4(t.projectionViewMatrix),i.zDepth=n.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),s.sort(this.sortUI),i=e.concat(r,s)}return i}render({scene:e,camera:t,target:r=null,update:n=!0,sort:s=!0,frustumCull:i=!0,clear:o}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),n&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:i,sort:s}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>o});const n=new Uint8Array(4);function s(e){return 0==(e&e-1)}let i=1;class o{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:n=e.UNSIGNED_BYTE,format:s=e.RGBA,internalFormat:o=s,wrapS:a=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,generateMipmaps:u=!0,minFilter:c=(u?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:h=e.LINEAR,premultiplyAlpha:d=!1,unpackAlignment:p=4,flipY:f=r==e.TEXTURE_2D,anisotropy:g=0,level:m=0,width:v,height:y=v}={}){this.gl=e,this.id=i++,this.image=t,this.target=r,this.type=n,this.format=s,this.internalFormat=o,this.minFilter=c,this.magFilter=h,this.wrapS=a,this.wrapT=l,this.generateMipmaps=u,this.premultiplyAlpha=d,this.unpackAlignment=p,this.flipY=f,this.anisotropy=Math.min(g,this.gl.renderer.parameters.maxAnisotropy),this.level=m,this.width=v,this.height=y,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>a});var n=r("./node_modules/ogl/src/math/Vec3.js"),s=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.position=new n.Vec3,this.quaternion=new s.Quat,this.scale=new n.Vec3(1),this.rotation=new o.Euler,this.up=new n.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>s});var n=r("./node_modules/ogl/src/core/Geometry.js");class s extends n.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:n=1,heightSegments:i=1,attributes:o={}}={}){const a=n,l=i,u=(a+1)*(l+1),c=a*l*6,h=new Float32Array(3*u),d=new Float32Array(3*u),p=new Float32Array(2*u),f=c>65536?new Uint32Array(c):new Uint16Array(c);s.buildPlane(h,d,p,f,t,r,0,a,l),Object.assign(o,{position:{size:3,data:h},normal:{size:3,data:d},uv:{size:2,data:p},index:{data:f}}),super(e,o)}static buildPlane(e,t,r,n,s,i,o,a,l,u=0,c=1,h=2,d=1,p=-1,f=0,g=0){const m=f,v=s/a,y=i/l;for(let _=0;_<=l;_++){let b=_*y-i/2;for(let i=0;i<=a;i++,f++){let y=i*v-s/2;if(e[3*f+u]=y*d,e[3*f+c]=b*p,e[3*f+h]=o/2,t[3*f+u]=0,t[3*f+c]=0,t[3*f+h]=o>=0?1:-1,r[2*f]=i/a,r[2*f+1]=1-_/l,_===l||i===a)continue;let x=m+i+_*(a+1),D=m+i+(_+1)*(a+1),w=m+i+(_+1)*(a+1)+1,E=m+i+_*(a+1)+1;n[6*g]=x,n[6*g+1]=D,n[6*g+2]=E,n[6*g+3]=D,n[6*g+4]=w,n[6*g+5]=E,g++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>i});var n=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const s=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(e=0,t=e,r=e,n="YXZ"){return super(e,t,r),this.order=n,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this[0]=e,this[1]=t,this[2]=r,this.onChange(),this)}copy(e){return this[0]=e[0],this[1]=e[1],this[2]=e[2],this.onChange(),this}reorder(e){return this.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return n.fromRotationMatrix(this,e,t),this}fromQuaternion(e,t=this.order){return s.fromQuaternion(e),this.fromRotationMatrix(s,t)}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=1,i=0,o=0,a=0,l=1){return super(e,t,r,n,s,i,o,a,l),this}set(e,t,r,s,i,o,a,l,u){return e.length?this.copy(e):(n.set(this,e,t,r,s,i,o,a,l,u),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t=this){return n.rotate(this,t,e),this}scale(e,t=this){return n.scale(this,t,e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromMatrix4(e){return n.fromMat4(this,e),this}fromQuaternion(e){return n.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return n.invert(this,e),this}getNormalMatrix(e){return n.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=0,i=1,o=0,a=0,l=0,u=0,c=1,h=0,d=0,p=0,f=0,g=1){return super(e,t,r,n,s,i,o,a,l,u,c,h,d,p,f,g),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,s,i,o,a,l,u,c,h,d,p,f,g,m){return e.length?this.copy(e):(n.set(this,e,t,r,s,i,o,a,l,u,c,h,d,p,f,g,m),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t,r=this){return n.rotate(this,r,e,t),this}scale(e,t=this){return n.scale(this,t,"number"==typeof e?[e,e,e]:e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:s}={}){return n.perspective(this,e,t,r,s),this}fromOrthogonal({left:e,right:t,bottom:r,top:s,near:i,far:o}){return n.ortho(this,e,t,r,s,i,o),this}fromQuaternion(e){return n.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return n.invert(this,e),this}compose(e,t,r){return n.fromRotationTranslationScale(this,e,t,r),this}getRotation(e){return n.getRotation(e,this),this}getTranslation(e){return n.getTranslation(e,this),this}getScaling(e){return n.getScaling(e,this),this}getMaxScaleOnAxis(){return n.getMaxScaleOnAxis(this)}lookAt(e,t,r){return n.targetTo(this,e,t,r),this}determinant(){return n.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>s});var n=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class s extends Array{constructor(e=0,t=0,r=0,n=1){return super(e,t,r,n),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set w(e){this[3]=e,this.onChange()}identity(){return n.identity(this),this.onChange(),this}set(e,t,r,s){return e.length?this.copy(e):(n.set(this,e,t,r,s),this.onChange(),this)}rotateX(e){return n.rotateX(this,this,e),this.onChange(),this}rotateY(e){return n.rotateY(this,this,e),this.onChange(),this}rotateZ(e){return n.rotateZ(this,this,e),this.onChange(),this}inverse(e=this){return n.invert(this,e),this.onChange(),this}conjugate(e=this){return n.conjugate(this,e),this.onChange(),this}copy(e){return n.copy(this,e),this.onChange(),this}normalize(e=this){return n.normalize(this,e),this.onChange(),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this.onChange(),this}dot(e){return n.dot(this,e)}fromMatrix3(e){return n.fromMat3(this,e),this.onChange(),this}fromEuler(e){return n.fromEuler(this,e,e.order),this}fromAxisAngle(e,t){return n.setAxisAngle(this,e,t),this}slerp(e,t){return n.slerp(this,this,e,t),this}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class s extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(n.set(this,e,t,r),this)}copy(e){return n.copy(this,e),this}add(e,t){return t?n.add(this,e,t):n.add(this,this,e),this}sub(e,t){return t?n.subtract(this,e,t):n.subtract(this,this,e),this}multiply(e){return e.length?n.multiply(this,this,e):n.scale(this,this,e),this}divide(e){return e.length?n.divide(this,this,e):n.scale(this,this,1/e),this}inverse(e=this){return n.inverse(this,e),this}len(){return n.length(this)}distance(e){return e?n.distance(this,e):n.length(this)}squaredLen(){return n.squaredLength(this)}squaredDistance(e){return e?n.squaredDistance(this,e):n.squaredLength(this)}negate(e=this){return n.negate(this,e),this}cross(e,t){return t?n.cross(this,e,t):n.cross(this,this,e),this}scale(e){return n.scale(this,this,e),this}normalize(){return n.normalize(this,this),this}dot(e){return n.dot(this,e)}equals(e){return n.exactEquals(this,e)}applyMatrix4(e){return n.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return n.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return n.transformQuat(this,this,e),this}angle(e){return n.angle(this,e)}lerp(e,t){return n.lerp(this,this,e,t),this}clone(){return new s(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],n=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*n,this[1]=e[1]*t+e[5]*r+e[9]*n,this[2]=e[2]*t+e[6]*r+e[10]*n,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function n(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>n})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{fromMat4:()=>n,fromQuat:()=>s,copy:()=>i,set:()=>o,identity:()=>a,transpose:()=>l,invert:()=>u,determinant:()=>c,multiply:()=>h,translate:()=>d,rotate:()=>p,scale:()=>f,normalFromMat4:()=>g,projection:()=>m,add:()=>v,subtract:()=>y,multiplyScalar:()=>_});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function s(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r+r,a=n+n,l=s+s,u=r*o,c=n*o,h=n*a,d=s*o,p=s*a,f=s*l,g=i*o,m=i*a,v=i*l;return e[0]=1-h-f,e[3]=c-v,e[6]=d+m,e[1]=c+v,e[4]=1-u-f,e[7]=p-g,e[2]=d-m,e[5]=p+g,e[8]=1-u-h,e}function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function o(e,t,r,n,s,i,o,a,l,u){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],n=t[2],s=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=n,e[7]=s}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function u(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=c*o-a*u,d=-c*i+a*l,p=u*i-o*l,f=r*h+n*d+s*p;return f?(f=1/f,e[0]=h*f,e[1]=(-c*n+s*u)*f,e[2]=(a*n-s*o)*f,e[3]=d*f,e[4]=(c*r-s*l)*f,e[5]=(-a*r+s*i)*f,e[6]=p*f,e[7]=(-u*r+n*l)*f,e[8]=(o*r-n*i)*f,e):null}function c(e){let t=e[0],r=e[1],n=e[2],s=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8];return t*(u*i-o*l)+r*(-u*s+o*a)+n*(l*s-i*a)}function h(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=r[0],p=r[1],f=r[2],g=r[3],m=r[4],v=r[5],y=r[6],_=r[7],b=r[8];return e[0]=d*n+p*o+f*u,e[1]=d*s+p*a+f*c,e[2]=d*i+p*l+f*h,e[3]=g*n+m*o+v*u,e[4]=g*s+m*a+v*c,e[5]=g*i+m*l+v*h,e[6]=y*n+_*o+b*u,e[7]=y*s+_*a+b*c,e[8]=y*i+_*l+b*h,e}function d(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=r[0],p=r[1];return e[0]=n,e[1]=s,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=d*n+p*o+u,e[7]=d*s+p*a+c,e[8]=d*i+p*l+h,e}function p(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=Math.sin(r),p=Math.cos(r);return e[0]=p*n+d*o,e[1]=p*s+d*a,e[2]=p*i+d*l,e[3]=p*o-d*n,e[4]=p*a-d*s,e[5]=p*l-d*i,e[6]=u,e[7]=c,e[8]=h,e}function f(e,t,r){let n=r[0],s=r[1];return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=s*t[3],e[4]=s*t[4],e[5]=s*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function g(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=t[9],d=t[10],p=t[11],f=t[12],g=t[13],m=t[14],v=t[15],y=r*a-n*o,_=r*l-s*o,b=r*u-i*o,x=n*l-s*a,D=n*u-i*a,w=s*u-i*l,E=c*g-h*f,C=c*m-d*f,A=c*v-p*f,j=h*m-d*g,T=h*v-p*g,M=d*v-p*m,F=y*M-_*T+b*j+x*A-D*C+w*E;return F?(F=1/F,e[0]=(a*M-l*T+u*j)*F,e[1]=(l*A-o*M-u*C)*F,e[2]=(o*T-a*A+u*E)*F,e[3]=(s*T-n*M-i*j)*F,e[4]=(r*M-s*A+i*C)*F,e[5]=(n*A-r*T-i*E)*F,e[6]=(g*w-m*D+v*x)*F,e[7]=(m*b-f*w-v*_)*F,e[8]=(f*D-g*b+v*y)*F,e):null}function m(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function v(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function y(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function _(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{copy:()=>n,set:()=>s,identity:()=>i,transpose:()=>o,invert:()=>a,determinant:()=>l,multiply:()=>u,translate:()=>c,scale:()=>h,rotate:()=>d,getTranslation:()=>p,getScaling:()=>f,getMaxScaleOnAxis:()=>g,getRotation:()=>m,fromRotationTranslationScale:()=>v,fromQuat:()=>y,perspective:()=>_,ortho:()=>b,targetTo:()=>x,add:()=>D,subtract:()=>w,multiplyScalar:()=>E});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function s(e,t,r,n,s,i,o,a,l,u,c,h,d,p,f,g,m){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e[9]=c,e[10]=h,e[11]=d,e[12]=p,e[13]=f,e[14]=g,e[15]=m,e}function i(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function o(e,t){if(e===t){let r=t[1],n=t[2],s=t[3],i=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=n,e[9]=i,e[11]=t[14],e[12]=s,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function a(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=t[9],d=t[10],p=t[11],f=t[12],g=t[13],m=t[14],v=t[15],y=r*a-n*o,_=r*l-s*o,b=r*u-i*o,x=n*l-s*a,D=n*u-i*a,w=s*u-i*l,E=c*g-h*f,C=c*m-d*f,A=c*v-p*f,j=h*m-d*g,T=h*v-p*g,M=d*v-p*m,F=y*M-_*T+b*j+x*A-D*C+w*E;return F?(F=1/F,e[0]=(a*M-l*T+u*j)*F,e[1]=(s*T-n*M-i*j)*F,e[2]=(g*w-m*D+v*x)*F,e[3]=(d*D-h*w-p*x)*F,e[4]=(l*A-o*M-u*C)*F,e[5]=(r*M-s*A+i*C)*F,e[6]=(m*b-f*w-v*_)*F,e[7]=(c*w-d*b+p*_)*F,e[8]=(o*T-a*A+u*E)*F,e[9]=(n*A-r*T-i*E)*F,e[10]=(f*D-g*b+v*y)*F,e[11]=(h*b-c*D-p*y)*F,e[12]=(a*C-o*j-l*E)*F,e[13]=(r*j-n*C+s*E)*F,e[14]=(g*_-f*x-m*y)*F,e[15]=(c*x-h*_+d*y)*F,e):null}function l(e){let t=e[0],r=e[1],n=e[2],s=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8],c=e[9],h=e[10],d=e[11],p=e[12],f=e[13],g=e[14],m=e[15];return(t*o-r*i)*(h*m-d*g)-(t*a-n*i)*(c*m-d*f)+(t*l-s*i)*(c*g-h*f)+(r*a-n*o)*(u*m-d*p)-(r*l-s*o)*(u*g-h*p)+(n*l-s*a)*(u*f-c*p)}function u(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=t[9],p=t[10],f=t[11],g=t[12],m=t[13],v=t[14],y=t[15],_=r[0],b=r[1],x=r[2],D=r[3];return e[0]=_*n+b*a+x*h+D*g,e[1]=_*s+b*l+x*d+D*m,e[2]=_*i+b*u+x*p+D*v,e[3]=_*o+b*c+x*f+D*y,_=r[4],b=r[5],x=r[6],D=r[7],e[4]=_*n+b*a+x*h+D*g,e[5]=_*s+b*l+x*d+D*m,e[6]=_*i+b*u+x*p+D*v,e[7]=_*o+b*c+x*f+D*y,_=r[8],b=r[9],x=r[10],D=r[11],e[8]=_*n+b*a+x*h+D*g,e[9]=_*s+b*l+x*d+D*m,e[10]=_*i+b*u+x*p+D*v,e[11]=_*o+b*c+x*f+D*y,_=r[12],b=r[13],x=r[14],D=r[15],e[12]=_*n+b*a+x*h+D*g,e[13]=_*s+b*l+x*d+D*m,e[14]=_*i+b*u+x*p+D*v,e[15]=_*o+b*c+x*f+D*y,e}function c(e,t,r){let n,s,i,o,a,l,u,c,h,d,p,f,g=r[0],m=r[1],v=r[2];return t===e?(e[12]=t[0]*g+t[4]*m+t[8]*v+t[12],e[13]=t[1]*g+t[5]*m+t[9]*v+t[13],e[14]=t[2]*g+t[6]*m+t[10]*v+t[14],e[15]=t[3]*g+t[7]*m+t[11]*v+t[15]):(n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=t[9],p=t[10],f=t[11],e[0]=n,e[1]=s,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=u,e[7]=c,e[8]=h,e[9]=d,e[10]=p,e[11]=f,e[12]=n*g+a*m+h*v+t[12],e[13]=s*g+l*m+d*v+t[13],e[14]=i*g+u*m+p*v+t[14],e[15]=o*g+c*m+f*v+t[15]),e}function h(e,t,r){let n=r[0],s=r[1],i=r[2];return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*s,e[5]=t[5]*s,e[6]=t[6]*s,e[7]=t[7]*s,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function d(e,t,r,n){let s,i,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C,A,j,T=n[0],M=n[1],F=n[2],S=Math.hypot(T,M,F);return Math.abs(S)<1e-6?null:(S=1/S,T*=S,M*=S,F*=S,s=Math.sin(r),i=Math.cos(r),o=1-i,a=t[0],l=t[1],u=t[2],c=t[3],h=t[4],d=t[5],p=t[6],f=t[7],g=t[8],m=t[9],v=t[10],y=t[11],_=T*T*o+i,b=M*T*o+F*s,x=F*T*o-M*s,D=T*M*o-F*s,w=M*M*o+i,E=F*M*o+T*s,C=T*F*o+M*s,A=M*F*o-T*s,j=F*F*o+i,e[0]=a*_+h*b+g*x,e[1]=l*_+d*b+m*x,e[2]=u*_+p*b+v*x,e[3]=c*_+f*b+y*x,e[4]=a*D+h*w+g*E,e[5]=l*D+d*w+m*E,e[6]=u*D+p*w+v*E,e[7]=c*D+f*w+y*E,e[8]=a*C+h*A+g*j,e[9]=l*C+d*A+m*j,e[10]=u*C+p*A+v*j,e[11]=c*C+f*A+y*j,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function p(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function f(e,t){let r=t[0],n=t[1],s=t[2],i=t[4],o=t[5],a=t[6],l=t[8],u=t[9],c=t[10];return e[0]=Math.hypot(r,n,s),e[1]=Math.hypot(i,o,a),e[2]=Math.hypot(l,u,c),e}function g(e){let t=e[0],r=e[1],n=e[2],s=e[4],i=e[5],o=e[6],a=e[8],l=e[9],u=e[10];const c=t*t+r*r+n*n,h=s*s+i*i+o*o,d=a*a+l*l+u*u;return Math.sqrt(Math.max(c,h,d))}const m=function(){const e=[0,0,0];return function(t,r){let n=e;f(n,r);let s=1/n[0],i=1/n[1],o=1/n[2],a=r[0]*s,l=r[1]*i,u=r[2]*o,c=r[4]*s,h=r[5]*i,d=r[6]*o,p=r[8]*s,g=r[9]*i,m=r[10]*o,v=a+h+m,y=0;return v>0?(y=2*Math.sqrt(v+1),t[3]=.25*y,t[0]=(d-g)/y,t[1]=(p-u)/y,t[2]=(l-c)/y):a>h&&a>m?(y=2*Math.sqrt(1+a-h-m),t[3]=(d-g)/y,t[0]=.25*y,t[1]=(l+c)/y,t[2]=(p+u)/y):h>m?(y=2*Math.sqrt(1+h-a-m),t[3]=(p-u)/y,t[0]=(l+c)/y,t[1]=.25*y,t[2]=(d+g)/y):(y=2*Math.sqrt(1+m-a-h),t[3]=(l-c)/y,t[0]=(p+u)/y,t[1]=(d+g)/y,t[2]=.25*y),t}}();function v(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=t[3],l=s+s,u=i+i,c=o+o,h=s*l,d=s*u,p=s*c,f=i*u,g=i*c,m=o*c,v=a*l,y=a*u,_=a*c,b=n[0],x=n[1],D=n[2];return e[0]=(1-(f+m))*b,e[1]=(d+_)*b,e[2]=(p-y)*b,e[3]=0,e[4]=(d-_)*x,e[5]=(1-(h+m))*x,e[6]=(g+v)*x,e[7]=0,e[8]=(p+y)*D,e[9]=(g-v)*D,e[10]=(1-(h+f))*D,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function y(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r+r,a=n+n,l=s+s,u=r*o,c=n*o,h=n*a,d=s*o,p=s*a,f=s*l,g=i*o,m=i*a,v=i*l;return e[0]=1-h-f,e[1]=c+v,e[2]=d-m,e[3]=0,e[4]=c-v,e[5]=1-u-f,e[6]=p+g,e[7]=0,e[8]=d+m,e[9]=p-g,e[10]=1-u-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function _(e,t,r,n,s){let i=1/Math.tan(t/2),o=1/(n-s);return e[0]=i/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(s+n)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*s*n*o,e[15]=0,e}function b(e,t,r,n,s,i,o){let a=1/(t-r),l=1/(n-s),u=1/(i-o);return e[0]=-2*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*a,e[13]=(s+n)*l,e[14]=(o+i)*u,e[15]=1,e}function x(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=n[0],l=n[1],u=n[2],c=s-r[0],h=i-r[1],d=o-r[2],p=c*c+h*h+d*d;0===p?d=1:(p=1/Math.sqrt(p),c*=p,h*=p,d*=p);let f=l*d-u*h,g=u*c-a*d,m=a*h-l*c;return p=f*f+g*g+m*m,0===p&&(u?a+=1e-6:l?u+=1e-6:l+=1e-6,f=l*d-u*h,g=u*c-a*d,m=a*h-l*c,p=f*f+g*g+m*m),p=1/Math.sqrt(p),f*=p,g*=p,m*=p,e[0]=f,e[1]=g,e[2]=m,e[3]=0,e[4]=h*m-d*g,e[5]=d*f-c*m,e[6]=c*g-h*f,e[7]=0,e[8]=c,e[9]=h,e[10]=d,e[11]=0,e[12]=s,e[13]=i,e[14]=o,e[15]=1,e}function D(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function w(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function E(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{identity:()=>s,setAxisAngle:()=>i,multiply:()=>o,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>u,slerp:()=>c,invert:()=>h,conjugate:()=>d,fromMat3:()=>p,fromEuler:()=>f,copy:()=>g,set:()=>m,add:()=>v,scale:()=>y,dot:()=>_,lerp:()=>b,length:()=>x,normalize:()=>D});var n=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function s(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function i(e,t,r){r*=.5;let n=Math.sin(r);return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=Math.cos(r),e}function o(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=r[0],l=r[1],u=r[2],c=r[3];return e[0]=n*c+o*a+s*u-i*l,e[1]=s*c+o*l+i*a-n*u,e[2]=i*c+o*u+n*l-s*a,e[3]=o*c-n*a-s*l-i*u,e}function a(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l+o*a,e[1]=s*l+i*a,e[2]=i*l-s*a,e[3]=o*l-n*a,e}function l(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l-i*a,e[1]=s*l+o*a,e[2]=i*l+n*a,e[3]=o*l-s*a,e}function u(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l+s*a,e[1]=s*l-n*a,e[2]=i*l+o*a,e[3]=o*l-i*a,e}function c(e,t,r,n){let s,i,o,a,l,u=t[0],c=t[1],h=t[2],d=t[3],p=r[0],f=r[1],g=r[2],m=r[3];return i=u*p+c*f+h*g+d*m,i<0&&(i=-i,p=-p,f=-f,g=-g,m=-m),1-i>1e-6?(s=Math.acos(i),o=Math.sin(s),a=Math.sin((1-n)*s)/o,l=Math.sin(n*s)/o):(a=1-n,l=n),e[0]=a*u+l*p,e[1]=a*c+l*f,e[2]=a*h+l*g,e[3]=a*d+l*m,e}function h(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r*r+n*n+s*s+i*i,a=o?1/o:0;return e[0]=-r*a,e[1]=-n*a,e[2]=-s*a,e[3]=i*a,e}function d(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,n=t[0]+t[4]+t[8];if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let n=0;t[4]>t[0]&&(n=1),t[8]>t[3*n+n]&&(n=2);let s=(n+1)%3,i=(n+2)%3;r=Math.sqrt(t[3*n+n]-t[3*s+s]-t[3*i+i]+1),e[n]=.5*r,r=.5/r,e[3]=(t[3*s+i]-t[3*i+s])*r,e[s]=(t[3*s+n]+t[3*n+s])*r,e[i]=(t[3*i+n]+t[3*n+i])*r}return e}function f(e,t,r="YXZ"){let n=Math.sin(.5*t[0]),s=Math.cos(.5*t[0]),i=Math.sin(.5*t[1]),o=Math.cos(.5*t[1]),a=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l-n*i*a):"YXZ"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l+n*i*a):"ZXY"===r?(e[0]=n*o*l-s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l-n*i*a):"ZYX"===r?(e[0]=n*o*l-s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l+n*i*a):"YZX"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l-n*i*a):"XZY"===r&&(e[0]=n*o*l-s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l+n*i*a),e}const g=n.copy,m=n.set,v=n.add,y=n.scale,_=n.dot,b=n.lerp,x=n.length,D=n.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{length:()=>n,copy:()=>s,set:()=>i,add:()=>o,subtract:()=>a,multiply:()=>l,divide:()=>u,scale:()=>c,distance:()=>h,squaredDistance:()=>d,squaredLength:()=>p,negate:()=>f,inverse:()=>g,normalize:()=>m,dot:()=>v,cross:()=>y,lerp:()=>_,transformMat4:()=>b,scaleRotateMat4:()=>x,transformMat3:()=>D,transformQuat:()=>w,angle:()=>E,exactEquals:()=>C});function n(e){let t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function i(e,t,r,n){return e[0]=t,e[1]=r,e[2]=n,e}function o(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function a(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function u(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function c(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function h(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}function d(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}function p(e){let t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}function f(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function g(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function m(e,t){let r=t[0],n=t[1],s=t[2],i=r*r+n*n+s*s;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}function v(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function y(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[0],a=r[1],l=r[2];return e[0]=s*l-i*a,e[1]=i*o-n*l,e[2]=n*a-s*o,e}function _(e,t,r,n){let s=t[0],i=t[1],o=t[2];return e[0]=s+n*(r[0]-s),e[1]=i+n*(r[1]-i),e[2]=o+n*(r[2]-o),e}function b(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[3]*n+r[7]*s+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*n+r[4]*s+r[8]*i+r[12])/o,e[1]=(r[1]*n+r[5]*s+r[9]*i+r[13])/o,e[2]=(r[2]*n+r[6]*s+r[10]*i+r[14])/o,e}function x(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[3]*n+r[7]*s+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*n+r[4]*s+r[8]*i)/o,e[1]=(r[1]*n+r[5]*s+r[9]*i)/o,e[2]=(r[2]*n+r[6]*s+r[10]*i)/o,e}function D(e,t,r){let n=t[0],s=t[1],i=t[2];return e[0]=n*r[0]+s*r[3]+i*r[6],e[1]=n*r[1]+s*r[4]+i*r[7],e[2]=n*r[2]+s*r[5]+i*r[8],e}function w(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[0],a=r[1],l=r[2],u=a*i-l*s,c=l*n-o*i,h=o*s-a*n,d=a*h-l*c,p=l*u-o*h,f=o*c-a*u,g=2*r[3];return u*=g,c*=g,h*=g,d*=2,p*=2,f*=2,e[0]=n+u+d,e[1]=s+c+p,e[2]=i+h+f,e}const E=function(){const e=[0,0,0],t=[0,0,0];return function(r,n){s(e,r),s(t,n),m(e,e),m(t,t);let i=v(e,t);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function C(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{copy:()=>n,set:()=>s,add:()=>i,scale:()=>o,length:()=>a,normalize:()=>l,dot:()=>u,lerp:()=>c});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function s(e,t,r,n,s){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e}function i(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function o(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function a(e){let t=e[0],r=e[1],n=e[2],s=e[3];return Math.sqrt(t*t+r*r+n*n+s*s)}function l(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r*r+n*n+s*s+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=r*o,e[1]=n*o,e[2]=s*o,e[3]=i*o,e}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function c(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=t[3];return e[0]=s+n*(r[0]-s),e[1]=i+n*(r[1]-i),e[2]=o+n*(r[2]-o),e[3]=a+n*(r[3]-a),e}},"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],n=/([A-Z])/g,s={};function i(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),s=r.length;s--;){var i=r[s]+n;if(void 0!==t[i])return i}return e}e.exports=function(e){return e in s?s[e]:s[e]=i(e)},e.exports.dash=function(e){return e=i(e),n.test(e)&&(e="-"+e.replace(n,"-$1"),n.lastIndex=0),e.toLowerCase()}},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,r,n,s){r=r||"&",n=n||"=";var i={};if("string"!=typeof e||0===e.length)return i;var o=/\+/g;e=e.split(r);var a=1e3;s&&"number"==typeof s.maxKeys&&(a=s.maxKeys);var l=e.length;a>0&&l>a&&(l=a);for(var u=0;u<l;++u){var c,h,d,p,f=e[u].replace(o,"%20"),g=f.indexOf(n);g>=0?(c=f.substr(0,g),h=f.substr(g+1)):(c=f,h=""),d=decodeURIComponent(c),p=decodeURIComponent(h),t(i,d)?Array.isArray(i[d])?i[d].push(p):i[d]=[i[d],p]:i[d]=p}return i}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,r,n,s){return r=r||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(s){var i=encodeURIComponent(t(s))+n;return Array.isArray(e[s])?e[s].map((function(e){return i+encodeURIComponent(t(e))})).join(r):i+encodeURIComponent(t(e[s]))})).join(r):s?encodeURIComponent(t(s))+n+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,r)=>{"use strict";t.decode=t.parse=r("./node_modules/querystring/decode.js"),t.encode=t.stringify=r("./node_modules/querystring/encode.js")},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,r){var n;e=r.nmd(e),function(s){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof r.g&&r.g;i.global!==i&&i.window!==i&&i.self;var o,a=2147483647,l=36,u=/^xn--/,c=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function g(e){throw RangeError(d[e])}function m(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function v(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+m((e=e.replace(h,".")).split("."),t).join(".")}function y(e){for(var t,r,n=[],s=0,i=e.length;s<i;)(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<i?56320==(64512&(r=e.charCodeAt(s++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),s--):n.push(t);return n}function _(e){return m(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function b(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function x(e,t,r){var n=0;for(e=r?p(e/700):e>>1,e+=p(e/t);e>455;n+=l)e=p(e/35);return p(n+36*e/(e+38))}function D(e){var t,r,n,s,i,o,u,c,h,d,f,m=[],v=e.length,y=0,b=128,D=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&g("not-basic"),m.push(e.charCodeAt(n));for(s=r>0?r+1:0;s<v;){for(i=y,o=1,u=l;s>=v&&g("invalid-input"),((c=(f=e.charCodeAt(s++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:l)>=l||c>p((a-y)/o))&&g("overflow"),y+=c*o,!(c<(h=u<=D?1:u>=D+26?26:u-D));u+=l)o>p(a/(d=l-h))&&g("overflow"),o*=d;D=x(y-i,t=m.length+1,0==i),p(y/t)>a-b&&g("overflow"),b+=p(y/t),y%=t,m.splice(y++,0,b)}return _(m)}function w(e){var t,r,n,s,i,o,u,c,h,d,m,v,_,D,w,E=[];for(v=(e=y(e)).length,t=128,r=0,i=72,o=0;o<v;++o)(m=e[o])<128&&E.push(f(m));for(n=s=E.length,s&&E.push("-");n<v;){for(u=a,o=0;o<v;++o)(m=e[o])>=t&&m<u&&(u=m);for(u-t>p((a-r)/(_=n+1))&&g("overflow"),r+=(u-t)*_,t=u,o=0;o<v;++o)if((m=e[o])<t&&++r>a&&g("overflow"),m==t){for(c=r,h=l;!(c<(d=h<=i?1:h>=i+26?26:h-i));h+=l)w=c-d,D=l-d,E.push(f(b(d+w%D,0))),c=p(w/D);E.push(f(b(c,0))),i=x(r,_,n==s),r=0,++n}++r,++t}return E.join("")}o={version:"1.3.2",ucs2:{decode:y,encode:_},decode:D,encode:w,toASCII:function(e){return v(e,(function(e){return c.test(e)?"xn--"+w(e):e}))},toUnicode:function(e){return v(e,(function(e){return u.test(e)?D(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return o}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/url/url.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/node_modules/punycode/punycode.js"),s=r("./node_modules/url/util.js");function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=_,t.resolve=function(e,t){return _(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?_(e,!1,!0).resolveObject(t):t},t.format=function(e){s.isString(e)&&(e=_(e));return e instanceof i?e.format():i.prototype.format.call(e)},t.Url=i;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(u),h=["%","/","?",";","#"].concat(c),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,g={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=r("./node_modules/querystring/index.js");function _(e,t,r){if(e&&s.isObject(e)&&e instanceof i)return e;var n=new i;return n.parse(e,t,r),n}i.prototype.parse=function(e,t,r){if(!s.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),a=-1!==i&&i<e.indexOf("#")?"?":"#",u=e.split(a);u[0]=u[0].replace(/\\/g,"/");var _=e=u.join(a);if(_=_.trim(),!r&&1===e.split("#").length){var b=l.exec(_);if(b)return this.path=_,this.href=_,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=o.exec(_);if(x){var D=(x=x[0]).toLowerCase();this.protocol=D,_=_.substr(x.length)}if(r||x||_.match(/^\/\/[^@\/]+@[^@\/]+/)){var w="//"===_.substr(0,2);!w||x&&m[x]||(_=_.substr(2),this.slashes=!0)}if(!m[x]&&(w||x&&!v[x])){for(var E,C,A=-1,j=0;j<d.length;j++){-1!==(T=_.indexOf(d[j]))&&(-1===A||T<A)&&(A=T)}-1!==(C=-1===A?_.lastIndexOf("@"):_.lastIndexOf("@",A))&&(E=_.slice(0,C),_=_.slice(C+1),this.auth=decodeURIComponent(E)),A=-1;for(j=0;j<h.length;j++){var T;-1!==(T=_.indexOf(h[j]))&&(-1===A||T<A)&&(A=T)}-1===A&&(A=_.length),this.host=_.slice(0,A),_=_.slice(A),this.parseHost(),this.hostname=this.hostname||"";var M="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!M)for(var F=this.hostname.split(/\./),S=(j=0,F.length);j<S;j++){var P=F[j];if(P&&!P.match(p)){for(var k="",L=0,O=P.length;L<O;L++)P.charCodeAt(L)>127?k+="x":k+=P[L];if(!k.match(p)){var R=F.slice(0,j),q=F.slice(j+1),B=P.match(f);B&&(R.push(B[1]),q.unshift(B[2])),q.length&&(_="/"+q.join(".")+_),this.hostname=R.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),M||(this.hostname=n.toASCII(this.hostname));var I=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+I,this.href+=this.host,M&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==_[0]&&(_="/"+_))}if(!g[D])for(j=0,S=c.length;j<S;j++){var N=c[j];if(-1!==_.indexOf(N)){var U=encodeURIComponent(N);U===N&&(U=escape(N)),_=_.split(N).join(U)}}var H=_.indexOf("#");-1!==H&&(this.hash=_.substr(H),_=_.slice(0,H));var V=_.indexOf("?");if(-1!==V?(this.search=_.substr(V),this.query=_.substr(V+1),t&&(this.query=y.parse(this.query)),_=_.slice(0,V)):t&&(this.search="",this.query={}),_&&(this.pathname=_),v[D]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){I=this.pathname||"";var X=this.search||"";this.path=I+X}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&s.isObject(this.query)&&Object.keys(this.query).length&&(o=y.stringify(this.query));var a=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==i?(i="//"+(i||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):i||(i=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+i+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+n},i.prototype.resolve=function(e){return this.resolveObject(_(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if(s.isString(e)){var t=new i;t.parse(e,!1,!0),e=t}for(var r=new i,n=Object.keys(this),o=0;o<n.length;o++){var a=n[o];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),u=0;u<l.length;u++){var c=l[u];"protocol"!==c&&(r[c]=e[c])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!v[e.protocol]){for(var h=Object.keys(e),d=0;d<h.length;d++){var p=h[d];r[p]=e[p]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||m[e.protocol])r.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),r.pathname=f.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var g=r.pathname||"",y=r.search||"";r.path=g+y}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var _=r.pathname&&"/"===r.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=b||_||r.host&&e.pathname,D=x,w=r.pathname&&r.pathname.split("/")||[],E=(f=e.pathname&&e.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(E&&(r.hostname="",r.port=null,r.host&&(""===w[0]?w[0]=r.host:w.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),x=x&&(""===f[0]||""===w[0])),b)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,w=f;else if(f.length)w||(w=[]),w.pop(),w=w.concat(f),r.search=e.search,r.query=e.query;else if(!s.isNullOrUndefined(e.search)){if(E)r.hostname=r.host=w.shift(),(M=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=M.shift(),r.host=r.hostname=M.shift());return r.search=e.search,r.query=e.query,s.isNull(r.pathname)&&s.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!w.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var C=w.slice(-1)[0],A=(r.host||e.host||w.length>1)&&("."===C||".."===C)||""===C,j=0,T=w.length;T>=0;T--)"."===(C=w[T])?w.splice(T,1):".."===C?(w.splice(T,1),j++):j&&(w.splice(T,1),j--);if(!x&&!D)for(;j--;j)w.unshift("..");!x||""===w[0]||w[0]&&"/"===w[0].charAt(0)||w.unshift(""),A&&"/"!==w.join("/").substr(-1)&&w.push("");var M,F=""===w[0]||w[0]&&"/"===w[0].charAt(0);E&&(r.hostname=r.host=F?"":w.length?w.shift():"",(M=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=M.shift(),r.host=r.hostname=M.shift()));return(x=x||r.host&&w.length)&&!F&&w.unshift(""),w.length?r.pathname=w.join("/"):(r.pathname=null,r.path=null),s.isNull(r.pathname)&&s.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},i.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/webpack-dev-server/client/utils/log.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){n.log.error(e)}}var t,r,i;return t=e,(r=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/webpack/hot/log.js"),s=r.n(n),i=r("./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js"),o=r.n(i),a=r("./node_modules/webpack-dev-server/client/utils/parseURL.js"),l=r("./node_modules/webpack-dev-server/client/socket.js"),u=r("./node_modules/webpack-dev-server/client/overlay.js"),c=r("./node_modules/webpack-dev-server/client/utils/log.js"),h=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),d=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),p=r("./node_modules/webpack-dev-server/client/utils/createSocketURL.js"),f={isUnloading:!1,currentHash:r.h()},g={hot:!1,liveReload:!1,progress:!1,overlay:!1},m=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info");function v(e){s().setLogLevel("verbose"===e||"log"===e?"info":e),(0,c.setLogLevel)(e)}"true"===m.hot&&(g.hot=!0,c.log.info("Hot Module Replacement enabled.")),"true"===m["live-reload"]&&(g.liveReload=!0,c.log.info("Live Reloading enabled.")),m.logging&&(g.logging=m.logging),g.logging&&v(g.logging),self.addEventListener("beforeunload",(function(){f.isUnloading=!0}));var y={hot:function(){"false"!==m.hot&&(g.hot=!0,c.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==m["live-reload"]&&(g.liveReload=!0,c.log.info("Live Reloading enabled."))},invalid:function(){c.log.info("App updated. Recompiling..."),g.overlay&&(0,u.hide)(),(0,h.default)("Invalid")},hash:function(e){f.previousHash=f.currentHash,f.currentHash=e},logging:v,overlay:function(e){"undefined"!=typeof document&&(g.overlay=e)},progress:function(e){g.progress=e},"progress-update":function(e){g.progress&&c.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,h.default)("Progress",e)},"still-ok":function(){c.log.info("Nothing changed."),g.overlay&&(0,u.hide)(),(0,h.default)("StillOk")},ok:function(){(0,h.default)("Ok"),g.overlay&&(0,u.hide)(),(0,d.default)(g,f)},"content-changed":function(e){c.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){c.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e){c.log.warn("Warnings while compiling.");var t=e.map((function(e){return o()(e.message?e.message:e)}));(0,h.default)("Warnings",t);for(var r=0;r<t.length;r++)c.log.warn(t[r]);("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.warnings)&&(0,u.show)(e,"warnings"),(0,d.default)(g,f)},errors:function(e){c.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){return o()(e.message?e.message:e)}));(0,h.default)("Errors",t);for(var r=0;r<t.length;r++)c.log.error(t[r]);("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.errors)&&(0,u.show)(e,"errors")},error:function(e){c.log.error(e)},close:function(){c.log.info("Disconnected!"),g.overlay&&(0,u.hide)(),(0,h.default)("Close")}},_=(0,p.default)(m);(0,l.default)(_,y)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function r(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=i;var o=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[o]=t,this.getChildLogger=r}var t,n,u;return t=e,n=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this[o](i.error,r)}}},{key:"trace",value:function(){this[o](i.trace,["Trace"])}},{key:"clear",value:function(){this[o](i.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupEnd,t)}},{key:"profile",value:function(e){this[o](i.profile,[e])}},{key:"profileEnd",value:function(e){this[o](i.profileEnd,[e])}},{key:"time",value:function(e){this[a]=this[a]||new Map,this[a].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var n=process.hrtime(t);this[o](i.time,[e].concat(r(n)))}},{key:"timeEnd",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var n=process.hrtime(t);this[a].delete(e),this[o](i.time,[e].concat(r(n)))}},{key:"timeAggregate",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[a].delete(e),this[l]=this[l]||new Map;var n=this[l].get(e);void 0!==n&&(r[1]+n[1]>1e9?(r[0]+=n[0]+1,r[1]=r[1]-1e9+n[1]):(r[0]+=n[0],r[1]+=n[1])),this[l].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&this[o](i.time,[e].concat(r(t)))}}}],n&&s(t.prototype,n),u&&s(t,u),e}();t.Logger=u},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function n(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=r("./node_modules/webpack/lib/logging/Logger.js").LogType,o=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},a={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,s=e.debug,l=void 0!==s&&s,u=e.console,c="boolean"==typeof l?[function(){return l}]:[].concat(l).map(o),h=a["".concat(r)]||0;return function(e,t,r){var s=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(n(r.slice(1))):["[".concat(e,"]")].concat(n(r)):[]},o=c.some((function(t){return t(e)}));switch(t){case i.debug:if(!o)return;"function"==typeof u.debug?u.debug.apply(u,n(s())):u.log.apply(u,n(s()));break;case i.log:if(!o&&h>a.log)return;u.log.apply(u,n(s()));break;case i.info:if(!o&&h>a.info)return;u.info.apply(u,n(s()));break;case i.warn:if(!o&&h>a.warn)return;u.warn.apply(u,n(s()));break;case i.error:if(!o&&h>a.error)return;u.error.apply(u,n(s()));break;case i.trace:if(!o)return;u.trace();break;case i.groupCollapsed:if(!o&&h>a.log)return;if(!o&&h>a.verbose){"function"==typeof u.groupCollapsed?u.groupCollapsed.apply(u,n(s())):u.log.apply(u,n(s()));break}case i.group:if(!o&&h>a.log)return;"function"==typeof u.group?u.group.apply(u,n(s())):u.log.apply(u,n(s()));break;case i.groupEnd:if(!o&&h>a.log)return;"function"==typeof u.groupEnd&&u.groupEnd();break;case i.time:if(!o&&h>a.log)return;var l=1e3*r[1]+r[2]/1e6,d="[".concat(e,"] ").concat(r[0],": ").concat(l," ms");"function"==typeof u.logTime?u.logTime(d):u.log(d);break;case i.profile:"function"==typeof u.profile&&u.profile.apply(u,n(s()));break;case i.profileEnd:"function"==typeof u.profileEnd&&u.profileEnd.apply(u,n(s()));break;case i.clear:if(!o&&h>a.log)return;"function"==typeof u.clear&&u.clear();break;case i.status:if(!o&&h>a.info)return;"function"==typeof u.status?0===r.length?u.status():u.status.apply(u,n(s())):0!==r.length&&u.info.apply(u,n(s()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(this,arguments)}var s=r("./client-src/modules/logger/SyncBailHookFake.js"),i=r("./node_modules/webpack/lib/logging/Logger.js").Logger,o=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),a={level:"info",debug:!1,console},l=o(a);t.getLogger=function(e){return new i((function(r,n){void 0===t.hooks.log.call(e,r,n)&&l(e,r,n)}),(function(r){return t.getLogger("".concat(e,"/").concat(r))}))},t.configureDefaultLogger=function(e){n(a,e),l=o(a)},t.hooks={log:new s(["origin","type","args"])}}},r={};function n(t){var s=r[t];if(void 0!==s)return s.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};!function(){n.r(s),n.d(s,{default:function(){return e}});var e=n("./node_modules/webpack/lib/logging/runtime.js")}();var i=t;for(var o in s)i[o]=s[o];s.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":(e,t)=>{!function(){"use strict";var e={"./node_modules/strip-ansi/index.js":function(e,t,r){r.r(t),r.d(t,{default:function(){return s}});var n=r("./node_modules/strip-ansi/node_modules/ansi-regex/index.js");function s(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace((0,n.default)(),"")}},"./node_modules/strip-ansi/node_modules/ansi-regex/index.js":function(e,t,r){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.onlyFirst,r=void 0!==t&&t,n=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(n,r?void 0:"g")}r.r(t),r.d(t,{default:function(){return n}})}},r={};function n(t){var s=r[t];if(void 0!==s)return s.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};!function(){n.r(s);var e=n("./node_modules/strip-ansi/index.js");s.default=e.default}();var i=t;for(var o in s)i[o]=s[o];s.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{show:()=>d,hide:()=>h});var n,s,i=r("./node_modules/ansi-html-community/index.js"),o=r.n(i),a=r("./node_modules/html-entities/lib/index.js"),l={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},u=[];function c(e){s?e(s):(u.push(e),n||((n=document.createElement("iframe")).id="webpack-dev-server-client-overlay",n.src="about:blank",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.width="100vw",n.style.height="100vh",n.style.border="none",n.style.zIndex=9999999999,n.onload=function(){(s=n.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",s.style.position="fixed",s.style.boxSizing="border-box",s.style.left=0,s.style.top=0,s.style.right=0,s.style.bottom=0,s.style.width="100vw",s.style.height="100vh",s.style.backgroundColor="rgba(0, 0, 0, 0.85)",s.style.color="#E8E8E8",s.style.fontFamily="Menlo, Consolas, monospace",s.style.fontSize="large",s.style.padding="2rem",s.style.lineHeight="1.2",s.style.whiteSpace="pre-wrap",s.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var t=document.createElement("button");t.innerText="X",t.style.background="transparent",t.style.border="none",t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="white",t.style.cursor="pointer",t.style.cssFloat="right",t.style.styleFloat="right",t.addEventListener("click",(function(){h()})),s.appendChild(e),s.appendChild(t),s.appendChild(document.createElement("br")),s.appendChild(document.createElement("br")),n.contentDocument.body.appendChild(s),u.forEach((function(e){e(s)})),u=[],n.onload=null},document.body.appendChild(n)))}function h(){n&&(document.body.removeChild(n),n=null,s=null)}function d(e,t){c((function(){e.forEach((function(r){var n=document.createElement("div"),i=document.createElement("span");i.innerText="warnings"===t?"Warning:":"Error:",i.style.color="#".concat(l.red);var u=r.message||e[0],c=o()((0,a.encode)(u)),h=document.createElement("div");h.innerHTML=c,n.appendChild(i),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),n.appendChild(h),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),s.appendChild(n)}))}))}o().setColors(l)},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),s=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),i=void 0!==s?void 0!==s.default?s.default:s:n.default,o=0,a=null,l=function(e,t){(a=new i(e)).onOpen((function(){o=0})),a.onClose((function(){if(0===o&&t.close(),a=null,o<=10){var r=1e3*Math.pow(2,o)+100*Math.random();o+=1,setTimeout((function(){l(e,t)}),r)}})),a.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data)}))};const u=l},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/url/url.js");const s=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var s=e.protocol||self.location.protocol;("auto:"===s||t&&r&&"https:"===self.location.protocol)&&(s=self.location.protocol),s=s.replace(/^(?:http|.+-extension|file)/i,"ws");var i="";e.username&&(i=e.username,e.password&&(i=i.concat(":",e.password)));var o=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),a=e.port;a&&"0"!==a||(a=self.location.port);var l="/ws";return e.pathname&&!e.fromCurrentScript&&(l=e.pathname),n.format({protocol:s,auth:i,hostname:o,port:a,pathname:l,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>o,setLogLevel:()=>i});var n=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),s=r.n(n);function i(e){s().configureDefaultLogger({level:e})}i("info");var o=s().getLogger("webpack-dev-server")},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/url/url.js"),s=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const i=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.substr(1).split("&"),i=0;i<r.length;i++){var o=r[i].split("=");t[o[0]]=decodeURIComponent(o[1])}else{var a=(0,s.default)();if(a){var l;try{l=new URL(a,self.location.href)}catch(e){}l&&((t=l).fromCurrentScript=!0)}else(t=n.parse(self.location.href,!0,!0)).fromCurrentScript=!0}return t}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/webpack/hot/emitter.js"),s=r.n(n),i=r("./node_modules/webpack-dev-server/client/utils/log.js");const o=function(e,t){var r=e.hot,n=e.liveReload;if(!t.isUnloading){var o=t.currentHash,a=t.previousHash;if(!(o.indexOf(a)>=0)){var l=self.location.search.toLowerCase(),u=-1===l.indexOf("webpack-dev-server-hot=false"),c=-1===l.indexOf("webpack-dev-server-live-reload=false");if(r&&u)i.log.info("App hot update..."),s().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(n&&c)var h=self,d=self.setInterval((function(){("about:"!==h.location.protocol||(h=h.parent).parent===h)&&p(h,d)}))}}function p(e,t){clearInterval(t),i.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var n,s=function(){return n.indexOf(r.h())>=0},i=r("./node_modules/webpack/hot/log.js"),o=function t(){e.hot.check(!0).then((function(e){if(!e)return i("warning","[HMR] Cannot find update. Need to do a full reload!"),i("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void window.location.reload();s()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),s()&&i("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(i("warning","[HMR] Cannot apply update. Need to do a full reload!"),i("warning","[HMR] "+i.formatError(t)),window.location.reload()):i("warning","[HMR] Update failed: "+i.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){n=t,s()||"idle"!==e.hot.status()||(i("info","[HMR] Checking for updates on the server..."),o())})),i("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var n=r("./node_modules/events/events.js");e.exports=new n},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var n=e.filter((function(e){return t&&t.indexOf(e)<0})),s=r("./node_modules/webpack/hot/log.js");(n.length>0&&(s("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),n.forEach((function(e){s("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(s("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");s.groupCollapsed("info","[HMR]  - "+t.pop()),s("info","[HMR]  - "+e),s.groupEnd("info")}else s("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&s("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):s("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function n(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function s(e){return function(t,r){n(t)&&e(r)}}e.exports=function(e,t){n(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,o=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=s(i),e.exports.groupCollapsed=s(o),e.exports.groupEnd=s(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./styles/index.scss":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},"./app/shaders/plane-fragment.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="#define GLSLIFY 1\nattribute vec2 uv;\n\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"}},l={};function u(e){var t=l[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=l[e]={id:e,loaded:!1,exports:{}};try{var n={id:e,module:r,factory:a[e],require:u};u.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require)}catch(e){throw r.error=e,e}return r.loaded=!0,r.exports}u.m=a,u.c=l,u.i=[],u.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return u.d(t,{a:t}),t},u.d=(e,t)=>{for(var r in t)u.o(t,r)&&!u.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},u.hu=e=>e+"."+u.h()+".hot-update.js",u.miniCssF=e=>e+".css",u.hmrF=()=>"main."+u.h()+".hot-update.json",u.h=()=>"38e71681e12d28aaf2b0",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="floema:",u.l=(r,n,s,i)=>{if(e[r])e[r].push(n);else{var o,a;if(void 0!==s)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var h=l[c];if(h.getAttribute("src")==r||h.getAttribute("data-webpack")==t+s){o=h;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,u.nc&&o.setAttribute("nonce",u.nc),o.setAttribute("data-webpack",t+s),o.src=r),e[r]=[n];var d=(t,n)=>{o.onerror=o.onload=null,clearTimeout(p);var s=e[r];if(delete e[r],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((e=>e(n))),t)return t(n)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=d.bind(null,o.onerror),o.onload=d.bind(null,o.onload),a&&document.head.appendChild(o)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,n,s={},i=u.c,o=[],a=[],l="idle";function c(e){l=e;for(var t=[],r=0;r<a.length;r++)t[r]=a[r].call(null,e);return Promise.all(t)}function h(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return h(e)}))}function d(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return c("check").then(u.hmrM).then((function(n){return n?c("prepare").then((function(){var s=[];return t=[],r=[],Promise.all(Object.keys(u.hmrC).reduce((function(e,t){return u.hmrC[t](n.c,n.r,n.m,e,r,s),e}),[])).then((function(){return h((function(){return e?f(e):c("ready").then((function(){return s}))}))}))})):c(g()?"ready":"idle").then((function(){return null}))}))}function p(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):f(e)}function f(e){e=e||{},g();var t=r.map((function(t){return t(e)}));r=void 0;var s=t.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return c("abort").then((function(){throw s[0]}));var i=c("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var o,a=c("apply"),l=function(e){o||(o=e)},u=[];return t.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)u.push(t[r])}})),Promise.all([i,a]).then((function(){return o?c("fail").then((function(){throw o})):n?f(e).then((function(e){return u.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):c("idle").then((function(){return u}))}))}function g(){if(n)return r||(r=[]),Object.keys(u.hmrI).forEach((function(e){n.forEach((function(t){u.hmrI[e](t,r)}))})),n=void 0,!0}u.hmrD=s,u.i.push((function(f){var g,m,v,y,_=f.module,b=function(r,n){var s=i[n];if(!s)return r;var a=function(t){if(s.hot.active){if(i[t]){var a=i[t].parents;-1===a.indexOf(n)&&a.push(n)}else o=[n],e=t;-1===s.children.indexOf(t)&&s.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),o=[];return r(t)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var d in r)Object.prototype.hasOwnProperty.call(r,d)&&"e"!==d&&Object.defineProperty(a,d,u(d));return a.e=function(e){return function(e){switch(l){case"ready":return c("prepare"),t.push(e),h((function(){return c("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},a}(f.require,f.id);_.hot=(g=f.id,m=_,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==g,_requireSelf:function(){o=m.parents.slice(),e=v?void 0:g,u(g)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":r=[],Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](g,r)})),c("ready");break;case"ready":Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](g,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(g)}},check:d,apply:p,status:function(e){if(!e)return l;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:s[g]},e=void 0,y),_.parents=o,_.children=[],o=[],f.require=b})),u.hmrC={},u.hmrI={}})(),(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var t=u.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e})(),r=(e,t,r,n)=>{var s=document.createElement("link");return s.rel="stylesheet",s.type="text/css",s.onerror=s.onload=i=>{if(s.onerror=s.onload=null,"load"===i.type)r();else{var o=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=o,l.request=a,s.parentNode.removeChild(s),n(l)}},s.href=t,document.head.appendChild(s),s},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var s=(o=r[n]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(s===e||s===t))return o}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var o;if((s=(o=i[n]).getAttribute("data-href"))===e||s===t)return o}},s=[],i=[],o=e=>({dispose:()=>{for(var e=0;e<s.length;e++){var t=s[e];t.parentNode&&t.parentNode.removeChild(t)}s.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),u.hmrC.miniCss=(e,t,a,l,c,h)=>{c.push(o),e.forEach((e=>{var t=u.miniCssF(e),o=u.p+t,a=n(t,o);a&&l.push(new Promise(((t,n)=>{var l=r(e,o,(()=>{l.as="style",l.rel="preload",t()}),n);s.push(a),i.push(l)})))}))},(()=>{var e,t,r,n,s=u.hmrS_jsonp=u.hmrS_jsonp||{main:0},i={};function o(e){return new Promise(((t,r)=>{i[e]=t;var n=u.p+u.hu(e),s=new Error;u.l(n,(t=>{if(i[e]){i[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;s.message="Loading hot update chunk "+e+" failed.\n("+n+": "+o+")",s.name="ChunkLoadError",s.type=n,s.request=o,r(s)}}))}))}function a(i){function o(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var s=n.pop(),i=s.id,o=s.chain,l=u.c[i];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:i};if(l.hot._main)return{type:"unaccepted",chain:o,moduleId:i};for(var c=0;c<l.parents.length;c++){var h=l.parents[c],d=u.c[h];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:o.concat([h]),moduleId:i,parentId:h};-1===t.indexOf(h)&&(d.hot._acceptedDependencies[i]?(r[h]||(r[h]=[]),a(r[h],[i])):(delete r[h],t.push(h),n.push({chain:o.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}u.f&&delete u.f.jsonpHmr,e=void 0;var l={},c=[],h={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(u.o(t,p)){var f,g=t[p],m=!1,v=!1,y=!1,_="";switch((f=g?o(p):{type:"disposed",moduleId:p}).chain&&(_="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":i.onDeclined&&i.onDeclined(f),i.ignoreDeclined||(m=new Error("Aborted because of self decline: "+f.moduleId+_));break;case"declined":i.onDeclined&&i.onDeclined(f),i.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+_));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(f),i.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+_));break;case"accepted":i.onAccepted&&i.onAccepted(f),v=!0;break;case"disposed":i.onDisposed&&i.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(m)return{error:m};if(v)for(p in h[p]=g,a(c,f.outdatedModules),f.outdatedDependencies)u.o(f.outdatedDependencies,p)&&(l[p]||(l[p]=[]),a(l[p],f.outdatedDependencies[p]));y&&(a(c,[f.moduleId]),h[p]=d)}t=void 0;for(var b,x=[],D=0;D<c.length;D++){var w=c[D],E=u.c[w];E&&(E.hot._selfAccepted||E.hot._main)&&h[w]!==d&&!E.hot._selfInvalidated&&x.push({module:w,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete s[e]})),r=void 0;for(var t,n=c.slice();n.length>0;){var i=n.pop(),o=u.c[i];if(o){var a={},h=o.hot._disposeHandlers;for(D=0;D<h.length;D++)h[D].call(null,a);for(u.hmrD[i]=a,o.hot.active=!1,delete u.c[i],delete l[i],D=0;D<o.children.length;D++){var d=u.c[o.children[D]];d&&((e=d.parents.indexOf(i))>=0&&d.parents.splice(e,1))}}}for(var p in l)if(u.o(l,p)&&(o=u.c[p]))for(b=l[p],D=0;D<b.length;D++)t=b[D],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(e){for(var t in h)u.o(h,t)&&(u.m[t]=h[t]);for(var r=0;r<n.length;r++)n[r](u);for(var s in l)if(u.o(l,s)){var o=u.c[s];if(o){b=l[s];for(var a=[],d=[],p=[],f=0;f<b.length;f++){var g=b[f],m=o.hot._acceptedDependencies[g],v=o.hot._acceptedErrorHandlers[g];if(m){if(-1!==a.indexOf(m))continue;a.push(m),d.push(v),p.push(g)}}for(var y=0;y<a.length;y++)try{a[y].call(null,b)}catch(t){if("function"==typeof d[y])try{d[y](t,{moduleId:s,dependencyId:p[y]})}catch(r){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:s,dependencyId:p[y],error:r,originalError:t}),i.ignoreErrored||(e(r),e(t))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:s,dependencyId:p[y],error:t}),i.ignoreErrored||e(t)}}}for(var _=0;_<x.length;_++){var D=x[_],w=D.module;try{D.require(w)}catch(t){if("function"==typeof D.errorHandler)try{D.errorHandler(t,{moduleId:w,module:u.c[w]})}catch(r){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:w,error:r,originalError:t}),i.ignoreErrored||(e(r),e(t))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:w,error:t}),i.ignoreErrored||e(t)}}return c}}}self.webpackHotUpdatefloema=(e,r,s)=>{for(var o in r)u.o(r,o)&&(t[o]=r[o]);s&&n.push(s),i[e]&&(i[e](),i[e]=void 0)},u.hmrI.jsonp=function(e,s){t||(t={},n=[],r=[],s.push(a)),u.o(t,e)||(t[e]=u.m[e])},u.hmrC.jsonp=function(i,l,c,h,d,p){d.push(a),e={},r=l,t=c.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],i.forEach((function(t){u.o(s,t)&&void 0!==s[t]&&(h.push(o(t)),e[t]=!0)})),u.f&&(u.f.jsonpHmr=function(t,r){e&&!u.o(e,t)&&u.o(s,t)&&void 0!==s[t]&&(r.push(o(t)),e[t]=!0)})},u.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(u.p+u.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),u("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info"),u("./node_modules/webpack/hot/dev-server.js"),u("./app/index.js");u("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,