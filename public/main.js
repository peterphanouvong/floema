/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r,n,s,i,o,a={"./app/animations/Highlight.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js");r("./app/utils/text.js");class i extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.elementLabel=this.element.querySelector(".about__highlight__label")}animateIn(){this.elementLabel&&(this.animateInTimeline=n.default.timeline(),this.animateInTimeline.set(this.element,{autoAlpha:1}),this.animateInTimeline.fromTo(this.elementLabel,{autoAlpha:0,y:"5rem"},{autoAlpha:1,duration:1.2,delay:1,ease:"expo.out",y:"0%"}))}animateOut(){this.elementLabel&&n.default.set(this.element,{autoAlpha:0})}onResize(){}}const o=i},"./app/animations/Paragraph.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js");class o extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t});e.querySelectorAll("p").forEach((e=>{(0,i.split)({element:e,append:!1}),(0,i.split)({element:e,append:!1})})),this.elementWordSpans=this.element.querySelectorAll("span span")}animateIn(){n.default.set(this.element,{autoAlpha:1}),n.default.fromTo(this.elementWords,{y:"100%"},{delay:.5,duration:1.5,ease:"expo.out",stagger:{amount:1},y:"0%"})}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementWords=(0,i.calculate)(this.elementWordSpans)}}const a=o},"./app/animations/Title.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js");class o extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t});const{lines:r}=(0,i.splitChars)({element:e});this.lines=r}animateIn(){this.animateInTimeline=n.default.timeline({delay:.5}),this.animateInTimeline.set(this.element,{autoAlpha:1}),this.lines.forEach(((e,t)=>{this.animateInTimeline.fromTo(e.querySelectorAll("span"),{y:"100%"},{delay:.2*t,duration:1.2,ease:"elastic.out(0.3, 0.6)",stagger:{amount:.1,from:"random"},y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){}}const a=o},"./app/classes/Animation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.element=e,this.createObserver()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateIn(){}animateOut(){}}const i=s},"./app/classes/AsyncLoad.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e}){super({element:e}),this.element=e,this.createObserver()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(this.element.src?this.element.classList.add("loaded"):(this.element.src=this.element.getAttribute("data-src"),this.element.onload=()=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ColorsManager:()=>s});var n=r("./node_modules/gsap/index.js");const s=new class{change({backgroundColor:e,color:t}){n.default.to(document.documentElement,{backgroundColor:e,color:t,duration:1.5})}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/lodash/each.js"),s=r.n(n),i=r("./node_modules/events/events.js"),o=r.n(i);class a extends(o()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},s()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}const l=a},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>g});var n=r("./node_modules/gsap/index.js"),s=r("./node_modules/lodash/each.js"),i=r.n(s),o=r("./node_modules/lodash/map.js"),a=r.n(o),l=r("./node_modules/prefix/index.js"),u=r.n(l),c=r("./app/animations/Highlight.js"),h=r("./app/animations/Paragraph.js"),d=r("./app/animations/Title.js"),p=r("./app/classes/AsyncLoad.js"),f=r("./app/classes/Colors.js");const g=class{constructor({element:e,elements:t,id:r}){this.selector=e,this.selectorChildren={...t,animationsTitles:'[data-animation="title"]',animationsParagraphs:'[data-animation="paragraph"]',animationsHighlights:'[data-animation="highlight"]',preloaders:"[data-src]"},this.id=r,this.transformPrefix=u()("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},i()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))})),this.scroll={current:0,target:0,last:0,limit:0},this.onResize(),this.createAnimations(),this.createPreloader()}createPreloader(){this.preloaders=a()(this.elements.preloaders,(e=>new p.default({element:e})))}createAnimations(){this.animations=[],this.animationsTitles=a()(this.elements.animationsTitles,(e=>new d.default({element:e}))),this.animations.push(...this.animationsTitles),this.animationsParagraphs=a()(this.elements.animationsParagraphs,(e=>new h.default({element:e}))),this.animations.push(...this.animationsParagraphs),this.animationsHighlights=a()(this.elements.animationsHighlights,(e=>new c.default({element:e}))),this.animations.push(...this.animationsHighlights)}show(e){return new Promise((t=>{f.ColorsManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),e?this.animateIn=e:(this.animateIn=n.default.timeline(),this.animateIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1})),this.animateIn.call((e=>{this.addEventListeners(),this.onResize(),t()}))}))}hide(){return new Promise((e=>{this.destroy(),this.animateOut=n.default.timeline(),this.animateOut.to(this.element,{autoAlpha:0,onComplete:e})}))}update(){this.scroll.target=n.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}destroy(){this.removeEventListeners()}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),i()(this.animations,(e=>e.onResize()))}onWheel({pixelY:e}){this.scroll.target+=e}addEventListeners(){window.addEventListener("resize",this.onResize.bind(this))}removeEventListeners(){window.removeEventListener("resize",this.onResize.bind(this))}}},"./app/components/Button.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/gsap/all.js"),s=r("./app/classes/Component.js");class i extends s.default{constructor(e){super({element:e}),this.path=e.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.timeline=n.default.timeline({paused:!0}),this.timeline.fromTo(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`},{strokeDashoffset:0,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/components/Canvas/About/Gallery.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/lodash/map.js"),s=r.n(n),i=r("./app/components/Canvas/About/Media.js"),o=r("./node_modules/gsap/index.js"),a=r("./node_modules/ogl/src/core/Transform.js");class l{constructor({element:e,gl:t,geometry:r,scene:n,index:s,sizes:i}){this.element=e,this.geometry=r,this.gl=t,this.index=s,this.scene=n,this.sizes=i,this.group=new a.Transform,this.createMedias(),this.group.setParent(this.scene)}show(){s()(this.medias,(e=>e.show()))}hide(){s()(this.medias,(e=>e.hide()))}createMedias(){this.mediaElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=s()(this.mediaElements,((e,t)=>new i.default({element:e,gl:this.gl,geometry:this.geometry,scene:this.group,index:t,sizes:this.sizes}))),this.scroll={current:0,target:0,last:0,lerp:.1,y:0},this.y={current:0,target:0,lerp:.1,limit:0}}onResize(e){this.bounds=this.element.getBoundingClientRect(),this.sizes=e.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.y.limit=this.bounds.height-window.innerHeight,s()(this.medias,(t=>t.onResize(e)))}onTouchDown({x:e,y:t}){}onTouchMove({x:e,y:t}){const r=(e.start-e.end)/20;console.log(r),this.scroll.target+=r}onTouchUp({x:e,y:t}){}onWheel({pixelY:e}){this.y.target+=e}update(e){if(!this.bounds)return;const t=e.current-e.target;this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.scroll.current<this.scroll.target?this.direction="left":this.scroll.current>this.scroll.target&&(this.direction="right"),this.scroll.target-=1,this.scroll.target-=t/10,s()(this.medias,((e,t)=>{"left"===this.direction&&e.mesh.position.x+e.mesh.scale.x+.125<-this.sizes.width/2?e.extra.x+=this.width:"right"===this.direction&&e.mesh.position.x-e.mesh.scale.x-.125>this.sizes.width/2&&(e.extra.x-=this.width),e.update(this.scroll)})),this.group.position.y=e.current/window.innerHeight*this.sizes.height}destroy(){console.log("destroy gallery  "),this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Program.js"),s=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./app/shaders/plane-vertex.glsl"),o=r("./app/shaders/plane-fragment.glsl"),a=r("./node_modules/gsap/index.js");const l=class{constructor({element:e,gl:t,geometry:r,scene:n,index:s,sizes:i}){this.element=e,this.gl=t,this.geometry=r,this.scene=n,this.index=s,this.sizes=i,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){console.log("about",this.element.childNodes[0].getAttribute("data-src")),this.texture=window.TEXTURES[this.element.childNodes[0].getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{vertex:i.default,fragment:o.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:1}}})}createMesh(){this.mesh=new s.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.position.x+=this.index*this.mesh.scale.x}createBounds({sizes:e}){this.bounds=this.element.getBoundingClientRect(),this.sizes=e,this.updateScale(e),this.updateX(),this.updateY()}onResize(e){this.createBounds(e)}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}updateRotation(){this.mesh.rotation.z=a.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+(this.bounds.left-e)/window.innerWidth*this.sizes.width+this.extra.x}updateY(e=0){this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-(this.bounds.top-e)/window.innerHeight*this.sizes.height-this.extra.y,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(e){this.updateX(e.current),this.updateY(e.y),this.updateRotation()}}},"./app/components/Canvas/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/lodash/map.js"),s=r.n(n),i=r("./node_modules/ogl/src/extras/Plane.js"),o=r("./app/components/Canvas/About/Gallery.js");const a=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.sizes=r,this.scene=t,this.createGeometry(),this.createGalleries(),this.show()}show(){s()(this.galleries,(e=>e.show()))}hide(){s()(this.galleries,(e=>e.hide()))}createGeometry(){this.geometry=new i.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=s()(this.galleriesElements,((e,t)=>new o.default({element:e,index:t,gl:this.gl,geometry:this.geometry,scene:this.scene,sizes:this.sizes}))),console.log(this.galleries)}onWheel(e){s()(this.galleries,(t=>t.onWheel(e)))}onResize(e){s()(this.galleries,(t=>t.onResize(e)))}onTouchDown(e){s()(this.galleries,(t=>t.onTouchDown(e)))}onTouchMove(e){s()(this.galleries,(t=>t.onTouchMove(e)))}onTouchUp(e){s()(this.galleries,(t=>t.onTouchUp(e)))}update(e){s()(this.galleries,(t=>t.update(e)))}destroy(){s()(this.galleries,(e=>e.destroy()))}}},"./app/components/Canvas/Collections/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Program.js"),s=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./app/shaders/plane-vertex.glsl"),o=r("./app/shaders/plane-fragment.glsl"),a=r("./node_modules/gsap/index.js");const l=class{constructor({element:e,gl:t,geometry:r,scene:n,index:s,sizes:i}){this.element=e,this.gl=t,this.geometry=r,this.scene=n,this.index=s,this.sizes=i,this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes}),this.opacity={current:0,target:0,lerp:.1,multiplier:0}}createTexture(){this.texture=window.TEXTURES[this.element.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{vertex:i.default,fragment:o.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:1}}})}createMesh(){this.mesh=new s.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.position.x+=this.index*this.mesh.scale.x}createBounds({sizes:e}){this.bounds=this.element.getBoundingClientRect(),this.sizes=e,this.updateScale(e),this.updateX(),this.updateY()}onResize(e){this.createBounds(e)}show(){a.default.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){a.default.to(this.opacity,{multiplier:0})}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+(this.bounds.left-e)/window.innerWidth*this.sizes.width}updateY(e=0){this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-(this.bounds.top-e)/window.innerHeight*this.sizes.height,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(e,t){this.updateX(e.x),this.updateY(e.y),this.opacity.target=this.index===t?1:.4,this.opacity.current=a.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.program.uniforms.uAlpha.value=this.opacity.current*this.opacity.multiplier}}},"./app/components/Canvas/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var n=r("./app/components/Canvas/Collections/Media.js"),s=r("./node_modules/lodash/map.js"),i=r.n(s),o=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Plane.js"),l=r("./node_modules/gsap/index.js"),u=r("./node_modules/prefix/index.js"),c=r.n(u);const h=class{constructor({gl:e,scene:t,sizes:r,transition:n}){this.id="collections",this.gl=e,this.sizes=r,this.group=new o.Transform,this.scene=t,this.transition=n,this.transformPrefix=c()("transform"),this.galleryElement=document.querySelector(".collections__gallery"),this.galleryWrapperElement=document.querySelector(".collections__gallery__wrapper"),this.mediasElements=document.querySelectorAll(".collections__gallery__media__image"),this.descriptionElements=document.querySelectorAll(".collections__content__article"),this.titleElements=document.querySelector(".collections__titles"),this.createGeometry(),this.createGallery(),this.show(),this.group.setParent(t),this.x={current:0,target:0,lerp:.1,limit:0},this.scroll={x:0,y:0}}show(){this.transition&&this.transition.animate(this.medias[0].mesh,(()=>{})),i()(this.medias,(e=>e.show()))}hide(){i()(this.medias,(e=>e.hide()))}createGeometry(){this.geometry=new a.Plane(this.gl)}createGallery(){this.medias=i()(this.mediasElements,((e,t)=>new n.default({element:e,index:t,gl:this.gl,geometry:this.geometry,scene:this.group,sizes:this.sizes})))}onChangeIndex(e){const t=parseInt(this.medias[e].element.getAttribute("data-collection"));i()(this.descriptionElements,((e,r)=>{r===t?e.classList.add("collections__content__article--active"):e.classList.remove("collections__content__article--active")})),this.titleElements.style[this.transformPrefix]=`\n      translateY(-${250*t}%)\n      translate(-50%, -50%) rotate(-90deg)\n    `,console.log(t)}onWheel({pixelX:e,pixelY:t}){this.x.target+=e,this.x.target+=t}onResize(e){this.galleryBounds=this.galleryWrapperElement.getBoundingClientRect(),this.sizes=e.sizes,i()(this.medias,(t=>t.onResize(e))),this.x.limit=this.galleryBounds.width-this.medias[0].element.clientWidth}onTouchDown({x:e,y:t}){}onTouchMove({x:e,y:t}){this.x.target+=(e.start-e.end)/20}onTouchUp({x:e,y:t}){}update(){if(!this.galleryBounds)return;this.x.target=l.default.utils.clamp(0,this.x.limit,this.x.target),this.x.current=l.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.scroll.x=this.x.current,this.galleryElement.style[this.transformPrefix]=`translateX(-${this.x.current}px)`;const e=Math.round(this.x.current/(this.x.limit+this.medias[0].element.clientWidth)*this.medias.length);this.index!==e&&(this.onChangeIndex(e),this.index=e),i()(this.medias,(e=>{e.update(this.scroll,this.index)}))}destroy(){console.log("destrpy home"),this.scene.removeChild(this.group)}}},"./app/components/Canvas/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/ogl/src/extras/Plane.js"),s=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./app/shaders/plane-vertex.glsl"),a=r("./app/shaders/plane-fragment.glsl"),l=r("./node_modules/gsap/index.js");const u=class{constructor({gl:e,scene:t,sizes:r,transition:s}){this.id="detail",this.element=document.querySelector(".detail__media__image"),this.gl=e,this.scene=t,this.sizes=r,this.transition=s,this.geometry=new n.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes}),this.show()}createTexture(){this.texture=window.TEXTURES[this.element.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{vertex:o.default,fragment:a.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:0}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.bounds=this.element.getBoundingClientRect(),this.sizes=e,this.updateScale(e),this.updateX(),this.updateY()}onResize(e){this.createBounds({sizes:this.sizes}),this.updateX(),this.updateY()}show(){this.transition?this.transition.animate(this.mesh,(()=>{this.program.uniforms.uAlpha.value=1})):l.default.to(this.program.uniforms.uAlpha,{value:1,duration:1})}hide(){}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height,console.log(this.sizes.width,this.width)}updateX(){this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.bounds.left/window.innerWidth*this.sizes.width}updateY(){this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.bounds.top/window.innerHeight*this.sizes.height,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(){this.bounds||this.updateX(),this.updateY()}destroy(){this.scene.removeChild(this.mesh)}}},"./app/components/Canvas/Home/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Program.js"),s=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./app/shaders/home-vertex.glsl"),o=r("./app/shaders/home-fragment.glsl"),a=r("./node_modules/gsap/index.js");const l=class{constructor({element:e,gl:t,geometry:r,scene:n,index:s,sizes:i}){this.element=e,this.gl=t,this.geometry=r,this.scene=n,this.index=s,this.sizes=i,this.speed=0,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=window.TEXTURES[this.element.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{vertex:i.default,fragment:o.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},uSpeed:{value:0}}})}createMesh(){this.mesh=new s.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.position.x+=this.index*this.mesh.scale.x}createBounds({sizes:e}){this.bounds=this.element.getBoundingClientRect(),this.sizes=e,this.updateScale(e),this.updateX(),this.updateY()}onResize(e){this.createBounds(e)}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:.4})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+(this.bounds.left-e)/window.innerWidth*this.sizes.width+this.extra.x}updateY(e=0){this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-(this.bounds.top-e)/window.innerHeight*this.sizes.height-this.extra.y}update(e,t){this.updateX(e.x),this.updateY(e.y),this.program.uniforms.uSpeed.value=t/500}}},"./app/components/Canvas/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./app/components/Canvas/Home/Media.js"),s=r("./node_modules/lodash/map.js"),i=r.n(s),o=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Plane.js"),l=r("./node_modules/gsap/index.js");const u=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.sizes=r,this.group=new o.Transform,this.scene=t,this.galleryElement=document.querySelector(".home_gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image "),this.createGeometry(),this.createGallery(),this.show(),this.group.setParent(t),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scroll={x:0,y:0}}show(){i()(this.medias,(e=>e.show()))}hide(){i()(this.medias,(e=>e.hide()))}createGeometry(){this.geometry=new a.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=i()(this.mediasElements,((e,t)=>new n.default({element:e,index:t,gl:this.gl,geometry:this.geometry,scene:this.group,sizes:this.sizes})))}onWheel({pixelX:e,pixelY:t}){this.x.target+=e,this.y.target+=t}onResize(e){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=e.sizes,i()(this.medias,(t=>t.onResize(e)))}onTouchDown({x:e,y:t}){}onTouchMove({x:e,y:t}){this.x.target+=(e.start-e.end)/20,this.y.target+=(t.start-t.end)/20}onTouchUp({x:e,y:t}){}update(){this.galleryBounds&&(this.x.current=l.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=l.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="left":this.scroll.x>this.x.current&&(this.x.direction="right"),this.scroll.y<this.y.current?this.y.direction="down":this.scroll.y>this.y.current&&(this.y.direction="up"),this.galleryWidth=this.galleryBounds.width/window.innerWidth*this.sizes.width,this.galleryHeight=this.galleryBounds.height/window.innerHeight*this.sizes.height,this.scroll.x=this.x.current,this.scroll.y=this.y.current,this.y.target+=1,i()(this.medias,((e,t)=>{"left"===this.x.direction&&e.mesh.position.x+e.mesh.scale.x/2<-this.sizes.width/2?e.extra.x+=this.galleryWidth:"right"===this.x.direction&&e.mesh.position.x-e.mesh.scale.x/2>this.sizes.width/2&&(e.extra.x-=this.galleryWidth),"up"===this.y.direction&&e.mesh.position.y+e.mesh.scale.y/2<-this.sizes.height/2?e.extra.y-=this.galleryHeight:"down"===this.y.direction&&e.mesh.position.y-e.mesh.scale.y/2>this.sizes.height/2&&(e.extra.y+=this.galleryHeight);const r=this.y.target-this.y.current;e.update(this.scroll,r)})))}destroy(){console.log("destrpy home"),this.scene.removeChild(this.group)}}},"./app/components/Canvas/Transition.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/ogl/src/extras/Plane.js"),s=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./app/shaders/plane-vertex.glsl"),a=r("./app/shaders/plane-fragment.glsl"),l=r("./node_modules/gsap/index.js");class u{constructor({details:e,gl:t,scene:r,url:s}){this.details=e,this.gl=t,this.scene=r,this.url=s,this.geometry=new n.Plane(this.gl)}createProgram(e){this.program=new s.Program(this.gl,{vertex:o.default,fragment:a.default,uniforms:{tMap:{value:e},uAlpha:{value:1}}})}createMesh(e){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.setParent(this.scene)}setElement(e){if("collections"===e.id){const{index:t,medias:r}=e,n=r[t];console.log("Media",n),this.createProgram(n.texture),this.createMesh(n.mesh),this.mesh.position.z=n.mesh.position.z+.01,this.transition="detail"}else this.createProgram(e.texture),this.createMesh(e.mesh),this.mesh.position.z=.01,this.transition="collections"}animate(e,t){const r=l.default.timeline({delay:.5,onComplete:t});r.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:e.scale.x,y:e.scale.y,z:e.scale.z},0),r.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",x:e.position.x,y:e.position.y},0),r.call((()=>{this.scene.removeChild(this.mesh)}))}}},"./app/components/Canvas/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var n=r("./node_modules/ogl/src/core/Renderer.js"),s=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),o=r("./app/components/Canvas/About/index.js"),a=r("./app/components/Canvas/Collections/index.js"),l=r("./app/components/Canvas/Detail/index.js"),u=r("./app/components/Canvas/Home/index.js"),c=r("./app/components/Canvas/Transition.js");class h{constructor({template:e}){this.template=e,this.x={start:0,end:0},this.y={start:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.isDown=!1}createRenderer(){this.renderer=new n.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new s.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new u.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createAbout(){this.about=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}createCollections(){this.collections=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createDetail(){this.detail=new l.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChange(this.template),this.onResize()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:this.gl.canvas.width/this.gl.canvas.height});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,r=t*this.camera.aspect;this.sizes={height:t,width:r},this.home&&this.home.onResize({sizes:this.sizes}),this.about&&this.about.onResize({sizes:this.sizes}),this.collections&&this.collections.onResize({sizes:this.sizes}),this.detail&&this.detail.onResize({sizes:this.sizes})}onChangeStart(e){this.home&&this.home.hide(),this.about&&this.about.hide(),this.collections&&this.collections.hide(),this.isFromCollectionsToDetails="collections"===this.template&&e.indexOf("detail")>-1,this.isFromDetailsToCollections="detail"===this.template&&e.indexOf("collections")>-1,(this.isFromCollectionsToDetails||this.isFromDetailsToCollections)&&(this.transition=new c.default({gl:this.gl,scene:this.scene,url:e}),this.transition&&this.transition.setElement(this.collections||this.detail))}onChange(e){console.log("template:",e),"home"===e?this.createHome():this.destroyHome(),"about"===e?this.createAbout():this.destroyAbout(),"collections"===e?this.createCollections():this.destroyCollections(),"detail"===e?this.createDetail():this.destroyDetail(),this.template=e}onWheel(e){this.home&&this.home.onWheel(e),this.about&&this.about.onWheel(e),this.collections&&this.collections.onWheel(e)}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY,this.home&&this.home.onTouchDown({x:this.x,y:this.y}),this.about&&this.about.onTouchDown({x:this.x,y:this.y}),this.collections&&this.collections.onTouchDown({x:this.x,y:this.y})}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,r=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=r,this.home&&this.home.onTouchMove({x:this.x,y:this.y}),this.about&&this.about.onTouchMove({x:this.x,y:this.y}),this.collections&&this.collections.onTouchMove({x:this.x,y:this.y})}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,r=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=r}update(e){this.home&&this.home.update(),this.about&&this.about.update(e),this.collections&&this.collections.update(),this.detail&&this.detail.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./app/classes/Component.js"),s=r("./node_modules/gsap/index.js"),i=r("./app/utils/color.js");class o extends n.default{constructor({template:e}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.onChange(e)}onChange(e){"about"===e?(s.default.to(this.element,{color:i.COLOR_BRIGHT_GRAY,duration:1.5}),s.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75})):(s.default.to(this.element,{color:i.COLOR_QUARTER_SPANISH_WHITE,duration:1.5}),s.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:0,duration:.75}))}}},"./app/components/Preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./app/classes/Component.js"),s=r("./node_modules/gsap/index.js"),i=r("./node_modules/ogl/src/core/Texture.js"),o=r("./app/utils/text.js");class a extends n.default{constructor({canvas:e}){super({element:".preloader",elements:{text:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),(0,o.split)({element:this.elements.text,expression:"<br>"}),(0,o.split)({element:this.elements.text,expression:"<br>"}),this.elements.titleSpans=this.elements.text.querySelectorAll("span span"),this.canvas=e,window.TEXTURES={},this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((e=>{const t=new i.Texture(this.canvas.gl,{generateMipmaps:!1}),r=new window.Image;r.crossOrigin="anonymouse",r.src=e,r.onload=()=>{t.image=r,this.onAssetLoaded()},window.TEXTURES[e]=t}))}onAssetLoaded(){this.length+=1;const e=Math.round(this.length/window.ASSETS.length*100);this.elements.numberText.innerText=e+"%",100===e&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.animateOut=s.default.timeline({delay:2}),this.animateOut.to(this.elements.titleSpans,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:1.5,ease:"expo.out",y:"100%"},"-=1.4"),this.animateOut.to(this.element,{duration:1.5,ease:"expo.out",scaleY:0,transformOrigin:"100% 100%"},"-=1"),this.animateOut.call((e=>this.emit("completed")))}))}destroy(){this.element.parentNode.removeChild(this.element)}}const l=a},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/lodash/each.js"),s=r.n(n),i=r("./app/pages/About/index.js"),o=r("./app/pages/Collections/index.js"),a=r("./app/pages/Detail/index.js"),l=r("./app/pages/Home/index.js"),u=r("./app/components/Canvas/index.js"),c=r("./app/components/Navigation.js"),h=r("./app/components/Preloader.js"),d=r("./node_modules/normalize-wheel/index.js"),p=r.n(d);new class{constructor(){this.createContent(),this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPages(),this.addLinkListeners(),this.addEventListeners(),this.onResize(),this.update()}createNavigation(){this.navigation=new c.default({template:this.template})}createPreloader(){this.preloader=new h.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new u.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new i.default,collections:new o.default,detail:new a.default,home:new l.default},this.page=this.pages[this.template],this.page.create()}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}onPreloaded(){this.preloader.destroy(),this.canvas.onPreloaded(),this.page.show()}async onChange({url:e,push:t=!0}){this.canvas.onChangeStart(e),this.page.hide();const r=await window.fetch(e);if(200===r.status){const n=await r.text(),s=document.createElement("div");t&&window.history.pushState({},"",e),s.innerHTML=n;const i=s.querySelector(".content");this.template=i.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=i.innerHTML,this.canvas.onChange(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("error")}onResize(){this.canvas&&this.canvas.onResize&&this.canvas.onResize(),this.page&&this.page.onResize&&this.page.onResize()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const t=p()(e);this.page&&this.page.onWheel&&this.page.onWheel(t),this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t)}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");s()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:r}=e;this.onChange({url:r})}}))}}},"./app/pages/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Page.js");class s extends n.default{constructor(){super({elements:{wrapper:".about__wrapper"},element:".about",id:"about"})}}const i=s},"./app/pages/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Page.js");class s extends n.default{constructor(){super({element:".collections",id:"collections"})}}const i=s},"./app/pages/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./app/classes/Page.js"),s=r("./node_modules/gsap/index.js"),i=r("./app/components/Button.js");class o extends n.default{constructor(){super({element:".detail",id:"detail",elements:{button:".detail__button"}})}create(){super.create(),this.link=new i.default(this.elements.button)}destroy(){super.destroy(),this.link.removeEventListeners()}show(){const e=s.default.timeline({delay:2});e.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),super.show(e)}}const a=o},"./app/pages/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./app/classes/Page.js"),s=r("./app/components/Button.js");class i extends n.default{constructor(){super({element:".home",elements:{button:".home__link",titles:".home__titles",gallery:".home_gallery",navigation:".navigation"},id:"home"})}create(){super.create(),this.link=new s.default(this.elements.button)}destroy(){super.destroy(),this.link.removeEventListeners()}}const o=i},"./app/utils/color.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{COLOR_BRIGHT_GRAY:()=>n,COLOR_QUARTER_SPANISH_WHITE:()=>s});const n="#37384c",s="#f9f1e7"},"./app/utils/text.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{splitChars:()=>i,split:()=>o,calculate:()=>a});var n=r("./node_modules/lodash/each.js"),s=r.n(n);function i({element:e}){const t=e.innerHTML.toString().trim().split("<br>");let r="";t.forEach((e=>{const t=e.split("").map((e=>" "===e?e:`<span>${e}</span>`)).join("");r+=`<span data-class="line">${t}</span><br>`})),e.innerHTML=r;return{chars:e.querySelectorAll("span span"),lines:e.querySelectorAll('[data-class="line"]')}}function o({element:e,expression:t=" ",append:r=!0}){const n=function(e,t){const r=e.split("<br>");let n=[];return s()(r,((e,r)=>{r>0&&n.push("<br>"),n=n.concat(e.split(t));let i=!1,o="";const a=[];s()(n,(e=>{i||!e.includes("<a")&&!e.includes("<strong")||(o="",i=!0),i&&(o+=` ${e}`),i&&(e.includes("/a>")||e.includes("/strong>"))&&(a.push(o),o=""),i||""!==o||a.push(e),i&&(e.includes("/a>")||e.includes("/strong>"))&&(i=!1)})),n=a})),n}(e.innerHTML.toString().trim(),t);let i="";s()(n,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");s()(t,((e,t)=>{i+=t>0?"<br>"+l(e):l(e)}))}else i+=l(e)})),e.innerHTML=i;const o=e.querySelectorAll("span");return r&&s()(o,(e=>{const t=1===e.textContent.length,r=""!==e.innerHTML.trim(),n="&"!==e.textContent,s="-"!==e.textContent;t&&r&&n&&s&&(e.innerHTML=`${e.textContent}&nbsp;`)})),o}function a(e){const t=[];let r=[],n=e[0].offsetTop;return s()(e,((s,i)=>{s.offsetTop===n&&r.push(s),s.offsetTop!==n&&(t.push(r),r=[],r.push(s),n=s.offsetTop),i+1===e.length&&t.push(r)})),t}function l(e){return""===(e=e.trim())||" "===e?e:"<br>"===e?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},n={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},s={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var r=[],n=e.replace(/\033\[(\d+)m/g,(function(e,t){var n=s[t];if(n)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===n[0]?n:'<span style="'+n+';">');var o=i[t];return o?(r.pop(),o):""})),o=r.length;return o>0&&(n+=Array(o+1).join("</span>")),n}function a(e){for(var t in s[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],s[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],s[90]="color:#"+e.darkgrey,n){var r=e[n[t]]||"000";s[t]="color:#"+r,t=parseInt(t),s[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var n in r){var s=e.hasOwnProperty(n)?e[n]:null;if(s){if("reset"===n){if("string"==typeof s&&(s=[s]),!Array.isArray(s)||0===s.length||s.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+n+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[n];s[0]||(s[0]=i[0]),1!==s.length&&s[1]||(s=[s[0]]).push(i[1]),s=s.slice(0,2)}else if("string"!=typeof s)throw new Error("The value of `"+n+"` property must be a hex string, e.g.: FF0000");t[n]=s}else t[n]=r[n]}a(t)},o.reset=function(){a(r)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return s}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=s,o.tags.close=i),o.reset()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,n){function s(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",s),r([].slice.call(arguments))}g(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&g(e,"error",t,r)}(e,s,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var s,i,o,u;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(s=l(e))>0&&o.length>s&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},s=c.bind(n);return s.listener=r,n.wrapFn=s,s}function d(e,t,r){var n=e._events;if(void 0===n)return[];var s=n[t];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(s):f(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function g(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(i){n.once&&e.removeEventListener(t,s),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var s="error"===e,i=this._events;if(void 0!==i)s=s&&void 0===i.error;else if(!s)return!1;if(s){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var u=l.length,c=f(l,u);for(r=0;r<u;++r)n(c[r],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,n,s,i,o;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,s=i;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var s,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(s=i[n])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>ye,default:()=>ye,_getBBox:()=>I,_createElement:()=>k,checkPrefix:()=>R});var n,s,i,o,a,l,u,c=r("./node_modules/gsap/gsap-core.js"),h={},d=180/Math.PI,p=Math.PI/180,f=Math.atan2,g=/([A-Z])/g,m=/(?:left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},_=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},b=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},x=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},D=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},w=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},E=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},C=function(e,t,r){return e.style[t]=r},A=function(e,t,r){return e.style.setProperty(t,r)},j=function(e,t,r){return e._gsap[t]=r},T=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},M=function(e,t,r,n,s){var i=e._gsap;i.scaleX=i.scaleY=r,i.renderTransform(s,i)},F=function(e,t,r,n,s){var i=e._gsap;i[t]=r,i.renderTransform(s,i)},S="transform",P=S+"Origin",k=function(e,t){var r=s.createElementNS?s.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):s.createElement(e);return r.style?r:s.createElement(e)},L=function e(t,r,n){var s=getComputedStyle(t);return s[r]||s.getPropertyValue(r.replace(g,"-$1").toLowerCase())||s.getPropertyValue(r)||!n&&e(t,R(r)||r,1)||""},O="O,Moz,ms,Ms,Webkit".split(","),R=function(e,t,r){var n=(t||a).style,s=5;if(e in n&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);s--&&!(O[s]+e in n););return s<0?null:(3===s?"ms":s>=0?O[s]:"")+e},q=function(){"undefined"!=typeof window&&window.document&&(n=window,s=n.document,i=s.documentElement,a=k("div")||{style:{}},k("div"),S=R(S),P=S+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!R("perspective"),o=1)},B=function e(t){var r,n=k("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(n),n.appendChild(this),this.style.display="block",t)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(r=this._gsapBBox());return s&&(o?s.insertBefore(this,o):s.appendChild(this)),i.removeChild(n),this.style.cssText=a,r},z=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},I=function(e){var t;try{t=e.getBBox()}catch(r){t=B.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===B||(t=B.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+z(e,["x","cx","x1"])||0,y:+z(e,["y","cy","y1"])||0,width:0,height:0}},N=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!I(e))},U=function(e,t){if(t){var r=e.style;t in h&&t!==P&&(t=S),r.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty(t.replace(g,"-$1").toLowerCase())):r.removeAttribute(t)}},H=function(e,t,r,n,s,i){var o=new c.PropTween(e._pt,t,r,0,1,i?E:w);return e._pt=o,o.b=n,o.e=s,e._props.push(r),o},V={deg:1,rad:1,turn:1},X=function e(t,r,n,i){var o,l,u,d,p=parseFloat(n)||0,f=(n+"").trim().substr((p+"").length)||"px",g=a.style,v=m.test(r),y="svg"===t.tagName.toLowerCase(),_=(y?"client":"offset")+(v?"Width":"Height"),b=100,x="px"===i,D="%"===i;return i===f||!p||V[i]||V[f]?p:("px"!==f&&!x&&(p=e(t,r,n,"px")),d=t.getCTM&&N(t),!D&&"%"!==f||!h[r]&&!~r.indexOf("adius")?(g[v?"width":"height"]=b+(x?f:i),l=~r.indexOf("adius")||"em"===i&&t.appendChild&&!y?t:t.parentNode,d&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==s&&l.appendChild||(l=s.body),(u=l._gsap)&&D&&u.width&&v&&u.time===c._ticker.time?(0,c._round)(p/u.width*b):((D||"%"===f)&&(g.position=L(t,"position")),l===t&&(g.position="static"),l.appendChild(a),o=a[_],l.removeChild(a),g.position="absolute",v&&D&&((u=(0,c._getCache)(l)).time=c._ticker.time,u.width=l[_]),(0,c._round)(x?o*p/b:o&&p?b/o*p:0))):(o=d?t.getBBox()[v?"width":"height"]:t[_],(0,c._round)(D?p/o*b:p/100*o)))},Y=function(e,t,r,n){var s;return o||q(),t in y&&"transform"!==t&&~(t=y[t]).indexOf(",")&&(t=t.split(",")[0]),h[t]&&"transform"!==t?(s=ne(e,n),s="transformOrigin"!==t?s[t]:s.svg?s.origin:se(L(e,P))+" "+s.zOrigin+"px"):(!(s=e.style[t])||"auto"===s||n||~(s+"").indexOf("calc("))&&(s=Z[t]&&Z[t](e,t,r)||L(e,t)||(0,c._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(s+"").trim().indexOf(" ")?X(e,t,s,r)+r:s},G=function(e,t,r,n){if(!r||"none"===r){var s=R(t,e,1),i=s&&L(e,s,1);i&&i!==r?(t=s,r=i):"borderColor"===t&&(r=L(e,"borderTopColor"))}var o,a,l,u,h,d,p,f,g,m,v,y,_=new c.PropTween(this._pt,e.style,t,0,1,c._renderComplexString),b=0,x=0;if(_.b=r,_.e=n,r+="","auto"===(n+="")&&(e.style[t]=n,n=L(e,t)||n,e.style[t]=r),o=[r,n],(0,c._colorStringFilter)(o),n=o[1],l=(r=o[0]).match(c._numWithUnitExp)||[],(n.match(c._numWithUnitExp)||[]).length){for(;a=c._numWithUnitExp.exec(n);)p=a[0],g=n.substring(b,a.index),h?h=(h+1)%5:"rgba("!==g.substr(-5)&&"hsla("!==g.substr(-5)||(h=1),p!==(d=l[x++]||"")&&(u=parseFloat(d)||0,v=d.substr((u+"").length),(y="="===p.charAt(1)?+(p.charAt(0)+"1"):0)&&(p=p.substr(2)),f=parseFloat(p),m=p.substr((f+"").length),b=c._numWithUnitExp.lastIndex-m.length,m||(m=m||c._config.units[t]||v,b===n.length&&(n+=m,_.e+=m)),v!==m&&(u=X(e,t,d,m)||0),_._pt={_next:_._pt,p:g||1===x?g:",",s:u,c:y?y*f:f-u,m:h&&h<4||"zIndex"===t?Math.round:0});_.c=b<n.length?n.substring(b,n.length):""}else _.r="display"===t&&"none"===n?E:w;return c._relExp.test(n)&&(_.e=0),this._pt=_,_},W={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},K=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,n,s,i=t.t,o=i.style,a=t.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(s=(a=a.split(",")).length;--s>-1;)r=a[s],h[r]&&(n=1,r="transformOrigin"===r?P:S),U(i,r);n&&(U(i,S),l&&(l.svg&&i.removeAttribute("transform"),ne(i,1),l.uncache=1))}},Z={clearProps:function(e,t,r,n,s){if("isFromStart"!==s.data){var i=e._pt=new c.PropTween(e._pt,t,r,0,0,K);return i.u=n,i.pr=-10,i.tween=s,e._props.push(r),1}}},$=[1,0,0,1,0,0],Q={},J=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},ee=function(e){var t=L(e,S);return J(t)?$:t.substr(7).match(c._numExp).map(c._round)},te=function(e,t){var r,n,s,o,a=e._gsap||(0,c._getCache)(e),l=e.style,u=ee(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(s=e.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?$:u:(u!==$||e.offsetParent||e===i||a.svg||(s=l.display,l.display="block",(r=e.parentNode)&&e.offsetParent||(o=1,n=e.nextSibling,i.appendChild(e)),u=ee(e),s?l.display=s:U(e,"display"),o&&(n?r.insertBefore(e,n):r?r.appendChild(e):i.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},re=function(e,t,r,n,s,i){var o,a,l,u=e._gsap,c=s||te(e,!0),h=u.xOrigin||0,d=u.yOrigin||0,p=u.xOffset||0,f=u.yOffset||0,g=c[0],m=c[1],v=c[2],y=c[3],_=c[4],b=c[5],x=t.split(" "),D=parseFloat(x[0])||0,w=parseFloat(x[1])||0;r?c!==$&&(a=g*y-m*v)&&(l=D*(-m/a)+w*(g/a)-(g*b-m*_)/a,D=D*(y/a)+w*(-v/a)+(v*b-y*_)/a,w=l):(D=(o=I(e)).x+(~x[0].indexOf("%")?D/100*o.width:D),w=o.y+(~(x[1]||x[0]).indexOf("%")?w/100*o.height:w)),n||!1!==n&&u.smooth?(_=D-h,b=w-d,u.xOffset=p+(_*g+b*v)-_,u.yOffset=f+(_*m+b*y)-b):u.xOffset=u.yOffset=0,u.xOrigin=D,u.yOrigin=w,u.smooth=!!n,u.origin=t,u.originIsAbsolute=!!r,e.style[P]="0px 0px",i&&(H(i,u,"xOrigin",h,D),H(i,u,"yOrigin",d,w),H(i,u,"xOffset",p,u.xOffset),H(i,u,"yOffset",f,u.yOffset)),e.setAttribute("data-svg-origin",D+" "+w)},ne=function(e,t){var r=e._gsap||new c.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var n,s,i,o,a,l,h,g,m,v,y,_,b,x,D,w,E,C,A,j,T,M,F,k,O,R,q,B,z,I,U,H,V=e.style,X=r.scaleX<0,Y="px",G="deg",W=L(e,P)||"0";return n=s=i=l=h=g=m=v=y=0,o=a=1,r.svg=!(!e.getCTM||!N(e)),x=te(e,r.svg),r.svg&&(k=(!r.uncache||"0px 0px"===W)&&!t&&e.getAttribute("data-svg-origin"),re(e,k||W,!!k||r.originIsAbsolute,!1!==r.smooth,x)),_=r.xOrigin||0,b=r.yOrigin||0,x!==$&&(C=x[0],A=x[1],j=x[2],T=x[3],n=M=x[4],s=F=x[5],6===x.length?(o=Math.sqrt(C*C+A*A),a=Math.sqrt(T*T+j*j),l=C||A?f(A,C)*d:0,(m=j||T?f(j,T)*d+l:0)&&(a*=Math.abs(Math.cos(m*p))),r.svg&&(n-=_-(_*C+b*j),s-=b-(_*A+b*T))):(H=x[6],I=x[7],q=x[8],B=x[9],z=x[10],U=x[11],n=x[12],s=x[13],i=x[14],h=(D=f(H,z))*d,D&&(k=M*(w=Math.cos(-D))+q*(E=Math.sin(-D)),O=F*w+B*E,R=H*w+z*E,q=M*-E+q*w,B=F*-E+B*w,z=H*-E+z*w,U=I*-E+U*w,M=k,F=O,H=R),g=(D=f(-j,z))*d,D&&(w=Math.cos(-D),U=T*(E=Math.sin(-D))+U*w,C=k=C*w-q*E,A=O=A*w-B*E,j=R=j*w-z*E),l=(D=f(A,C))*d,D&&(k=C*(w=Math.cos(D))+A*(E=Math.sin(D)),O=M*w+F*E,A=A*w-C*E,F=F*w-M*E,C=k,M=O),h&&Math.abs(h)+Math.abs(l)>359.9&&(h=l=0,g=180-g),o=(0,c._round)(Math.sqrt(C*C+A*A+j*j)),a=(0,c._round)(Math.sqrt(F*F+H*H)),D=f(M,F),m=Math.abs(D)>2e-4?D*d:0,y=U?1/(U<0?-U:U):0),r.svg&&(k=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!J(L(e,S)),k&&e.setAttribute("transform",k))),Math.abs(m)>90&&Math.abs(m)<270&&(X?(o*=-1,m+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,m+=m<=0?180:-180)),r.x=n-((r.xPercent=n&&(r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-n)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+Y,r.y=s-((r.yPercent=s&&(r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-s)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+Y,r.z=i+Y,r.scaleX=(0,c._round)(o),r.scaleY=(0,c._round)(a),r.rotation=(0,c._round)(l)+G,r.rotationX=(0,c._round)(h)+G,r.rotationY=(0,c._round)(g)+G,r.skewX=m+G,r.skewY=v+G,r.transformPerspective=y+Y,(r.zOrigin=parseFloat(W.split(" ")[2])||0)&&(V[P]=se(W)),r.xOffset=r.yOffset=0,r.force3D=c._config.force3D,r.renderTransform=r.svg?he:u?ce:oe,r.uncache=0,r},se=function(e){return(e=e.split(" "))[0]+" "+e[1]},ie=function(e,t,r){var n=(0,c.getUnit)(t);return(0,c._round)(parseFloat(t)+parseFloat(X(e,"x",r+"px",n)))+n},oe=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ce(e,t)},ae="0deg",le="0px",ue=") ",ce=function(e,t){var r=t||this,n=r.xPercent,s=r.yPercent,i=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,c=r.rotationX,h=r.skewX,d=r.skewY,f=r.scaleX,g=r.scaleY,m=r.transformPerspective,v=r.force3D,y=r.target,_=r.zOrigin,b="",x="auto"===v&&e&&1!==e||!0===v;if(_&&(c!==ae||u!==ae)){var D,w=parseFloat(u)*p,E=Math.sin(w),C=Math.cos(w);w=parseFloat(c)*p,D=Math.cos(w),i=ie(y,i,E*D*-_),o=ie(y,o,-Math.sin(w)*-_),a=ie(y,a,C*D*-_+_)}m!==le&&(b+="perspective("+m+ue),(n||s)&&(b+="translate("+n+"%, "+s+"%) "),(x||i!==le||o!==le||a!==le)&&(b+=a!==le||x?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+ue),l!==ae&&(b+="rotate("+l+ue),u!==ae&&(b+="rotateY("+u+ue),c!==ae&&(b+="rotateX("+c+ue),h===ae&&d===ae||(b+="skew("+h+", "+d+ue),1===f&&1===g||(b+="scale("+f+", "+g+ue),y.style[S]=b||"translate(0, 0)"},he=function(e,t){var r,n,s,i,o,a=t||this,l=a.xPercent,u=a.yPercent,h=a.x,d=a.y,f=a.rotation,g=a.skewX,m=a.skewY,v=a.scaleX,y=a.scaleY,_=a.target,b=a.xOrigin,x=a.yOrigin,D=a.xOffset,w=a.yOffset,E=a.forceCSS,C=parseFloat(h),A=parseFloat(d);f=parseFloat(f),g=parseFloat(g),(m=parseFloat(m))&&(g+=m=parseFloat(m),f+=m),f||g?(f*=p,g*=p,r=Math.cos(f)*v,n=Math.sin(f)*v,s=Math.sin(f-g)*-y,i=Math.cos(f-g)*y,g&&(m*=p,o=Math.tan(g-m),s*=o=Math.sqrt(1+o*o),i*=o,m&&(o=Math.tan(m),r*=o=Math.sqrt(1+o*o),n*=o)),r=(0,c._round)(r),n=(0,c._round)(n),s=(0,c._round)(s),i=(0,c._round)(i)):(r=v,i=y,n=s=0),(C&&!~(h+"").indexOf("px")||A&&!~(d+"").indexOf("px"))&&(C=X(_,"x",h,"px"),A=X(_,"y",d,"px")),(b||x||D||w)&&(C=(0,c._round)(C+b-(b*r+x*s)+D),A=(0,c._round)(A+x-(b*n+x*i)+w)),(l||u)&&(o=_.getBBox(),C=(0,c._round)(C+l/100*o.width),A=(0,c._round)(A+u/100*o.height)),o="matrix("+r+","+n+","+s+","+i+","+C+","+A+")",_.setAttribute("transform",o),E&&(_.style[S]=o)},de=function(e,t,r,n,s,i){var o,a,l=360,u=(0,c._isString)(s),h=parseFloat(s)*(u&&~s.indexOf("rad")?d:1),p=i?h*i:h-n,f=n+p+"deg";return u&&("short"===(o=s.split("_")[1])&&(p%=l)!==p%180&&(p+=p<0?l:-360),"cw"===o&&p<0?p=(p+36e9)%l-~~(p/l)*l:"ccw"===o&&p>0&&(p=(p-36e9)%l-~~(p/l)*l)),e._pt=a=new c.PropTween(e._pt,t,r,n,p,b),a.e=f,a.u="deg",e._props.push(r),a},pe=function(e,t){for(var r in t)e[r]=t[r];return e},fe=function(e,t,r){var n,s,i,o,a,l,u,d=pe({},r._gsap),p=r.style;for(s in d.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[S]=t,n=ne(r,1),U(r,S),r.setAttribute("transform",i)):(i=getComputedStyle(r)[S],p[S]=t,n=ne(r,1),p[S]=i),h)(i=d[s])!==(o=n[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(a=(0,c.getUnit)(i)!==(u=(0,c.getUnit)(o))?X(r,s,i,u):parseFloat(i),l=parseFloat(o),e._pt=new c.PropTween(e._pt,n,s,a,l-a,_),e._pt.u=u||0,e._props.push(s));pe(n,d)};(0,c._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",n="Right",s="Bottom",i="Left",o=(t<3?[r,n,s,i]:[r+i,r+n,s+n,s+i]).map((function(r){return t<2?e+r:"border"+r+e}));Z[t>1?"border"+e:e]=function(e,t,r,n,s){var i,a;if(arguments.length<4)return i=o.map((function(t){return Y(e,t,r)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(n+"").split(" "),a={},o.forEach((function(e,t){return a[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,a,s)}}));var ge,me,ve,ye={name:"css",register:q,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,n,s){var i,a,l,u,d,p,f,g,m,b,w,E,C,A,j,T,M,F,P,k=this._props,L=e.style,O=r.vars.startAt;for(f in o||q(),t)if("autoRound"!==f&&(a=t[f],!c._plugins[f]||!(0,c._checkPlugin)(f,t,r,n,e,s)))if(d=typeof a,p=Z[f],"function"===d&&(d=typeof(a=a.call(r,n,e,s))),"string"===d&&~a.indexOf("random(")&&(a=(0,c._replaceRandom)(a)),p)p(this,e,f,a,r)&&(j=1);else if("--"===f.substr(0,2))i=(getComputedStyle(e).getPropertyValue(f)+"").trim(),a+="",c._colorExp.lastIndex=0,c._colorExp.test(i)||(g=(0,c.getUnit)(i),m=(0,c.getUnit)(a)),m?g!==m&&(i=X(e,f,i,m)+m):g&&(a+=g),this.add(L,"setProperty",i,a,n,s,0,0,f),k.push(f);else if("undefined"!==d){if(O&&f in O?(i="function"==typeof O[f]?O[f].call(r,n,e,s):O[f],f in c._config.units&&!(0,c.getUnit)(i)&&(i+=c._config.units[f]),"="===(i+"").charAt(1)&&(i=Y(e,f))):i=Y(e,f),u=parseFloat(i),(b="string"===d&&"="===a.charAt(1)?+(a.charAt(0)+"1"):0)&&(a=a.substr(2)),l=parseFloat(a),f in y&&("autoAlpha"===f&&(1===u&&"hidden"===Y(e,"visibility")&&l&&(u=0),H(this,L,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=y[f]).indexOf(",")&&(f=f.split(",")[0])),w=f in h)if(E||((C=e._gsap).renderTransform&&!t.parseTransform||ne(e,t.parseTransform),A=!1!==t.smoothOrigin&&C.smooth,(E=this._pt=new c.PropTween(this._pt,L,S,0,1,C.renderTransform,C,0,-1)).dep=1),"scale"===f)this._pt=new c.PropTween(this._pt,C,"scaleY",C.scaleY,(b?b*l:l-C.scaleY)||0),k.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M=void 0,F=void 0,P=void 0,M=(T=a).split(" "),F=M[0],P=M[1]||"50%","top"!==F&&"bottom"!==F&&"left"!==P&&"right"!==P||(T=F,F=P,P=T),M[0]=W[F]||F,M[1]=W[P]||P,a=M.join(" "),C.svg?re(e,a,0,A,0,this):((m=parseFloat(a.split(" ")[2])||0)!==C.zOrigin&&H(this,C,"zOrigin",C.zOrigin,m),H(this,L,f,se(i),se(a)));continue}if("svgOrigin"===f){re(e,a,1,A,0,this);continue}if(f in Q){de(this,C,f,u,a,b);continue}if("smoothOrigin"===f){H(this,C,"smooth",C.smooth,a);continue}if("force3D"===f){C[f]=a;continue}if("transform"===f){fe(this,a,e);continue}}else f in L||(f=R(f)||f);if(w||(l||0===l)&&(u||0===u)&&!v.test(a)&&f in L)l||(l=0),(g=(i+"").substr((u+"").length))!==(m=(0,c.getUnit)(a)||(f in c._config.units?c._config.units[f]:g))&&(u=X(e,f,i,m)),this._pt=new c.PropTween(this._pt,w?C:L,f,u,b?b*l:l-u,w||"px"!==m&&"zIndex"!==f||!1===t.autoRound?_:D),this._pt.u=m||0,g!==m&&(this._pt.b=i,this._pt.r=x);else if(f in L)G.call(this,e,f,i,a);else{if(!(f in e)){(0,c._missingPlugin)(f,a);continue}this.add(e,f,i||e[f],a,n,s)}k.push(f)}j&&(0,c._sortPropTweensByPriority)(this)},get:Y,aliases:y,getSetter:function(e,t,r){var n=y[t];return n&&n.indexOf(",")<0&&(t=n),t in h&&t!==P&&(e._gsap.x||Y(e,"x"))?r&&l===r?"scale"===t?T:j:(l=r||{})&&("scale"===t?M:F):e.style&&!(0,c._isUndefined)(e.style[t])?C:~t.indexOf("-")?A:(0,c._getSetter)(e,t)},core:{_removeProperty:U,_getMatrix:te}};c.gsap.utils.checkPrefix=R,ge="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",me="rotation,rotationX,rotationY,skewX,skewY",ve=(0,c._forEachName)(ge+","+me+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){h[e]=1})),(0,c._forEachName)(me,(function(e){c._config.units[e]="deg",Q[e]=1})),y[ve[13]]=ge+","+me,(0,c._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");y[t[1]]=ve[t[0]]})),(0,c._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){c._config.units[e]="px"})),c.gsap.registerPlugin(ye)},"./node_modules/gsap/CSSRulePlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSRulePlugin:()=>h,default:()=>h});var n,s,i,o,a=function(){return"undefined"!=typeof window},l=function(){return n||a()&&(n=window.gsap)&&n.registerPlugin&&n},u=function(){return s||(c(),o||console.warn("Please gsap.registerPlugin(CSSPlugin, CSSRulePlugin)")),s},c=function(e){n=e||l(),a()&&(window,i=document),n&&(o=n.plugins.css)&&(s=1)},h={version:"3.7.1",name:"cssRule",init:function(e,t,r,n,s){if(!u()||void 0===e.cssText)return!1;var a=e._gsProxy=e._gsProxy||i.createElement("div");this.ss=e,this.style=a.style,a.style.cssText=e.cssText,o.prototype.init.call(this,a,t,r,n,s)},render:function(e,t){for(var r,n=t._pt,s=t.style,i=t.ss;n;)n.r(e,n.d),n=n._next;for(r=s.length;--r>-1;)i[s[r]]=s[s[r]]},getRule:function(e){u();var t,r,n,s,o=i.all?"rules":"cssRules",a=i.styleSheets,l=a.length,c=":"===e.charAt(0);for(e=(c?"":",")+e.split("::").join(":").toLowerCase()+",",c&&(s=[]);l--;){try{if(!(r=a[l][o]))continue;t=r.length}catch(e){console.warn(e);continue}for(;--t>-1;)if((n=r[t]).selectorText&&-1!==(","+n.selectorText.split("::").join(":").toLowerCase()+",").indexOf(e)){if(!c)return n.style;s.push(n.style)}}return s},register:c};l()&&n.registerPlugin(h)},"./node_modules/gsap/Draggable.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Draggable:()=>Ee,default:()=>Ee});var n=r("./node_modules/gsap/utils/matrix.js");var s,i,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C=function(){return"undefined"!=typeof window},A=function(){return s||C()&&(s=window.gsap)&&s.registerPlugin&&s},j=function(e){return"function"==typeof e},T=function(e){return"object"==typeof e},M=function(e){return void 0===e},F=function(){return!1},S="transform",P="transformOrigin",k=function(e){return Math.round(1e4*e)/1e4},L=Array.isArray,O=function(e,t){var r=o.createElementNS?o.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):o.createElement(e);return r.style?r:o.createElement(e)},R=180/Math.PI,q=1e20,B=new n.Matrix2D,z=Date.now||function(){return(new Date).getTime()},I=[],N={},U=0,H=/^(?:a|input|textarea|button|select)$/i,V=0,X={},Y={},G=function(e,t){var r,n={};for(r in e)n[r]=t?e[r]*t:e[r];return n},W=function e(t,r){for(var n,s=t.length;s--;)r?t[s].style.touchAction=r:t[s].style.removeProperty("touch-action"),(n=t[s].children)&&n.length&&e(n,r)},K=function(){return I.forEach((function(e){return e()}))},Z=function(){return!I.length&&s.ticker.remove(K)},$=function(e){for(var t=I.length;t--;)I[t]===e&&I.splice(t,1);s.to(Z,{overwrite:!0,delay:15,duration:0,onComplete:Z,data:"_draggable"})},Q=function(e,t,r,n){if(e.addEventListener){var s=m[t];n=n||(f?{passive:!1}:null),e.addEventListener(s||t,r,n),s&&t!==s&&e.addEventListener(t,r,n)}},J=function(e,t,r){if(e.removeEventListener){var n=m[t];e.removeEventListener(n||t,r),n&&t!==n&&e.removeEventListener(t,r)}},ee=function(e){e.preventDefault&&e.preventDefault(),e.preventManipulation&&e.preventManipulation()},te=function e(t){y=t.touches&&v<t.touches.length,J(t.target,"touchend",e)},re=function(e){y=e.touches&&v<e.touches.length,Q(e.target,"touchend",te)},ne=function(e){return i.pageYOffset||e.scrollTop||e.documentElement.scrollTop||e.body.scrollTop||0},se=function(e){return i.pageXOffset||e.scrollLeft||e.documentElement.scrollLeft||e.body.scrollLeft||0},ie=function e(t,r){Q(t,"scroll",r),ae(t.parentNode)||e(t.parentNode,r)},oe=function e(t,r){J(t,"scroll",r),ae(t.parentNode)||e(t.parentNode,r)},ae=function(e){return!(e&&e!==a&&9!==e.nodeType&&e!==o.body&&e!==i&&e.nodeType&&e.parentNode)},le=function(e,t){var r="x"===t?"Width":"Height",n="scroll"+r,s="client"+r;return Math.max(0,ae(e)?Math.max(a[n],l[n])-(i["inner"+r]||a[s]||l[s]):e[n]-e[s])},ue=function e(t,r){var n=le(t,"x"),s=le(t,"y");ae(t)?t=Y:e(t.parentNode,r),t._gsMaxScrollX=n,t._gsMaxScrollY=s,r||(t._gsScrollX=t.scrollLeft||0,t._gsScrollY=t.scrollTop||0)},ce=function(e,t,r){var n=e.style;n&&(M(n[t])&&(t=d(t,e)||t),null==r?n.removeProperty&&n.removeProperty(t.replace(/([A-Z])/g,"-$1").toLowerCase()):n[t]=r)},he=function(e){return i.getComputedStyle(e instanceof Element?e:e.host||(e.parentNode||{}).host||e)},de={},pe=function(e){if(e===i)return de.left=de.top=0,de.width=de.right=a.clientWidth||e.innerWidth||l.clientWidth||0,de.height=de.bottom=(e.innerHeight||0)-20<a.clientHeight?a.clientHeight:e.innerHeight||l.clientHeight||0,de;var t=e.ownerDocument||o,r=M(e.pageX)?e.nodeType||M(e.left)||M(e.top)?p(e)[0].getBoundingClientRect():e:{left:e.pageX-se(t),top:e.pageY-ne(t),right:e.pageX-se(t)+1,bottom:e.pageY-ne(t)+1};return M(r.right)&&!M(r.width)?(r.right=r.left+r.width,r.bottom=r.top+r.height):M(r.width)&&(r={width:r.right-r.left,height:r.bottom-r.top,right:r.right,left:r.left,bottom:r.bottom,top:r.top}),r},fe=function(e,t,r){var n,s=e.vars,i=s[r],o=e._listeners[t];return j(i)&&(n=i.apply(s.callbackScope||e,s[r+"Params"]||[e.pointerEvent])),o&&!1===e.dispatchEvent(t)&&(n=!1),n},ge=function(e,t){var r,n,s,o=p(e)[0];return o.nodeType||o===i?ve(o,t):M(e.left)?{left:n=e.min||e.minX||e.minRotation||0,top:r=e.min||e.minY||0,width:(e.max||e.maxX||e.maxRotation||0)-n,height:(e.max||e.maxY||0)-r}:(s={x:0,y:0},{left:e.left-s.x,top:e.top-s.y,width:e.width,height:e.height})},me={},ve=function(e,t){t=p(t)[0];var r,s,a,l,u,c,h,d,f,g,m,v,y,_,b=e.getBBox&&e.ownerSVGElement,x=e.ownerDocument||o;if(e===i)a=ne(x),s=(r=se(x))+(x.documentElement.clientWidth||e.innerWidth||x.body.clientWidth||0),l=a+((e.innerHeight||0)-20<x.documentElement.clientHeight?x.documentElement.clientHeight:e.innerHeight||x.body.clientHeight||0);else{if(t===i||M(t))return e.getBoundingClientRect();r=a=0,b?(m=(g=e.getBBox()).width,v=g.height):(e.viewBox&&(g=e.viewBox.baseVal)&&(r=g.x||0,a=g.y||0,m=g.width,v=g.height),m||(g="border-box"===(y=he(e)).boxSizing,m=(parseFloat(y.width)||e.clientWidth||0)+(g?0:parseFloat(y.borderLeftWidth)+parseFloat(y.borderRightWidth)),v=(parseFloat(y.height)||e.clientHeight||0)+(g?0:parseFloat(y.borderTopWidth)+parseFloat(y.borderBottomWidth)))),s=m,l=v}return e===t?{left:r,top:a,width:s-r,height:l-a}:(c=(u=(0,n.getGlobalMatrix)(t,!0).multiply((0,n.getGlobalMatrix)(e))).apply({x:r,y:a}),h=u.apply({x:s,y:a}),d=u.apply({x:s,y:l}),f=u.apply({x:r,y:l}),r=Math.min(c.x,h.x,d.x,f.x),a=Math.min(c.y,h.y,d.y,f.y),{left:r+((_=t.parentNode||{}).scrollLeft||0),top:a+(_.scrollTop||0),width:Math.max(c.x,h.x,d.x,f.x)-r,height:Math.max(c.y,h.y,d.y,f.y)-a})},ye=function(e,t,r,n,s,i){var o,a,l,u={};if(t)if(1!==s&&t instanceof Array){if(u.end=o=[],l=t.length,T(t[0]))for(a=0;a<l;a++)o[a]=G(t[a],s);else for(a=0;a<l;a++)o[a]=t[a]*s;r+=1.1,n-=1.1}else j(t)?u.end=function(r){var n,i,o=t.call(e,r);if(1!==s)if(T(o)){for(i in n={},o)n[i]=o[i]*s;o=n}else o*=s;return o}:u.end=t;return(r||0===r)&&(u.max=r),(n||0===n)&&(u.min=n),i&&(u.velocity=0),u},_e=function e(t){var r;return!(!t||!t.getAttribute||t===l)&&(!("true"!==(r=t.getAttribute("data-clickable"))&&("false"===r||!t.onclick&&!H.test(t.nodeName+"")&&"true"!==t.getAttribute("contentEditable")))||e(t.parentNode))},be=function(e,t){for(var r,n=e.length;n--;)(r=e[n]).ondragstart=r.onselectstart=t?null:F,s.set(r,{lazy:!0,userSelect:t?"text":"none"})},xe=function e(t){return"fixed"===he(t).position||((t=t.parentNode)&&1===t.nodeType?e(t):void 0)},De=function(e,t){e=s.utils.toArray(e)[0],t=t||{};var r,n,i,o,a,l,u=document.createElement("div"),c=u.style,h=e.firstChild,d=0,p=0,f=e.scrollTop,g=e.scrollLeft,m=e.scrollWidth,v=e.scrollHeight,y=0,_=0,b=0;w&&!1!==t.force3D?(a="translate3d(",l="px,0px)"):S&&(a="translate(",l="px)"),this.scrollTop=function(e,t){if(!arguments.length)return-this.top();this.top(-e,t)},this.scrollLeft=function(e,t){if(!arguments.length)return-this.left();this.left(-e,t)},this.left=function(r,n){if(!arguments.length)return-(e.scrollLeft+p);var i=e.scrollLeft-g,o=p;if((i>2||i<-2)&&!n)return g=e.scrollLeft,s.killTweensOf(this,{left:1,scrollLeft:1}),this.left(-g),void(t.onKill&&t.onKill());(r=-r)<0?(p=r-.5|0,r=0):r>_?(p=r-_|0,r=_):p=0,(p||o)&&(this._skip||(c[S]=a+-p+"px,"+-d+l),p+y>=0&&(c.paddingRight=p+y+"px")),e.scrollLeft=0|r,g=e.scrollLeft},this.top=function(r,n){if(!arguments.length)return-(e.scrollTop+d);var i=e.scrollTop-f,o=d;if((i>2||i<-2)&&!n)return f=e.scrollTop,s.killTweensOf(this,{top:1,scrollTop:1}),this.top(-f),void(t.onKill&&t.onKill());(r=-r)<0?(d=r-.5|0,r=0):r>b?(d=r-b|0,r=b):d=0,(d||o)&&(this._skip||(c[S]=a+-p+"px,"+-d+l)),e.scrollTop=0|r,f=e.scrollTop},this.maxScrollTop=function(){return b},this.maxScrollLeft=function(){return _},this.disable=function(){for(h=u.firstChild;h;)o=h.nextSibling,e.appendChild(h),h=o;e===u.parentNode&&e.removeChild(u)},this.enable=function(){if((h=e.firstChild)!==u){for(;h;)o=h.nextSibling,u.appendChild(h),h=o;e.appendChild(u),this.calibrate()}},this.calibrate=function(t){var s,o,a,l=e.clientWidth===r;f=e.scrollTop,g=e.scrollLeft,l&&e.clientHeight===n&&u.offsetHeight===i&&m===e.scrollWidth&&v===e.scrollHeight&&!t||((d||p)&&(o=this.left(),a=this.top(),this.left(-e.scrollLeft),this.top(-e.scrollTop)),s=he(e),l&&!t||(c.display="block",c.width="auto",c.paddingRight="0px",(y=Math.max(0,e.scrollWidth-e.clientWidth))&&(y+=parseFloat(s.paddingLeft)+(E?parseFloat(s.paddingRight):0))),c.display="inline-block",c.position="relative",c.overflow="visible",c.verticalAlign="top",c.boxSizing="content-box",c.width="100%",c.paddingRight=y+"px",E&&(c.paddingBottom=s.paddingBottom),r=e.clientWidth,n=e.clientHeight,m=e.scrollWidth,v=e.scrollHeight,_=e.scrollWidth-r,b=e.scrollHeight-n,i=u.offsetHeight,c.display="block",(o||a)&&(this.left(o),this.top(a)))},this.content=u,this.element=e,this._skip=!1,this.enable()},we=function(e){if(C()&&document.body){var t=window&&window.navigator;i=window,o=document,a=o.documentElement,l=o.body,u=O("div"),D=!!window.PointerEvent,(c=O("div")).style.cssText="visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab",x="grab"===c.style.cursor?"grab":"move",_=t&&-1!==t.userAgent.toLowerCase().indexOf("android"),g="ontouchstart"in a&&"orientation"in i||t&&(t.MaxTouchPoints>0||t.msMaxTouchPoints>0),n=O("div"),v=O("div"),y=v.style,j=l,y.display="inline-block",y.position="relative",n.style.cssText=v.innerHTML="width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden",n.appendChild(v),j.appendChild(n),r=v.offsetHeight+18>n.scrollHeight,j.removeChild(n),E=r,m=function(e){for(var t=e.split(","),r=(("onpointerdown"in u?"pointerdown,pointermove,pointerup,pointercancel":"onmspointerdown"in u?"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel":e).split(",")),n={},s=4;--s>-1;)n[t[s]]=r[s],n[r[s]]=t[s];try{a.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){f=1}}))}catch(e){}return n}("touchstart,touchmove,touchend,touchcancel"),Q(o,"touchcancel",F),Q(i,"touchmove",F),l&&l.addEventListener("touchstart",F),Q(o,"contextmenu",(function(){for(var e in N)N[e].isPressed&&N[e].endDrag()})),s=h=A()}var r,n,v,y,j;s?(b=s.plugins.inertia,d=s.utils.checkPrefix,S=d(S),P=d(P),p=s.utils.toArray,w=!!d("perspective")):e&&console.warn("Please gsap.registerPlugin(Draggable)")},Ee=function(e){var t,r;function l(t,r){var u;u=e.call(this)||this,h||we(1),t=p(t)[0],b||(b=s.plugins.inertia),u.vars=r=G(r||{}),u.target=t,u.x=u.y=u.rotation=0,u.dragResistance=parseFloat(r.dragResistance)||0,u.edgeResistance=isNaN(r.edgeResistance)?1:parseFloat(r.edgeResistance)||0,u.lockAxis=r.lockAxis,u.autoScroll=r.autoScroll||0,u.lockedAxis=null,u.allowEventDefault=!!r.allowEventDefault,s.getProperty(t,"x");var d,f,w,E,C,A,F,S,O,H,Z,te,le,de,ve,Ee,Ce,Ae,je,Te,Me,Fe,Se,Pe,ke,Le,Oe,Re,qe,Be,ze,Ie,Ne=(r.type||"x,y").toLowerCase(),Ue=~Ne.indexOf("x")||~Ne.indexOf("y"),He=-1!==Ne.indexOf("rotation"),Ve=He?"rotation":Ue?"x":"left",Xe=Ue?"y":"top",Ye=!(!~Ne.indexOf("x")&&!~Ne.indexOf("left")&&"scroll"!==Ne),Ge=!(!~Ne.indexOf("y")&&!~Ne.indexOf("top")&&"scroll"!==Ne),We=r.minimumMovement||2,Ke=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(u),Ze=p(r.trigger||r.handle||t),$e={},Qe=0,Je=!1,et=r.autoScrollMarginTop||40,tt=r.autoScrollMarginRight||40,rt=r.autoScrollMarginBottom||40,nt=r.autoScrollMarginLeft||40,st=r.clickableTest||_e,it=0,ot=t._gsap||s.core.getCache(t),at=xe(t),lt=function(e,r){return parseFloat(ot.get(t,e,r))},ut=t.ownerDocument||o,ct=function(e){return ee(e),e.stopImmediatePropagation&&e.stopImmediatePropagation(),!1},ht=function e(r){if(Ke.autoScroll&&Ke.isDragging&&(Je||Ce)){var n,s,o,l,u,c,h,d,p=t,g=15*Ke.autoScroll;for(Je=!1,Y.scrollTop=null!=i.pageYOffset?i.pageYOffset:null!=ut.documentElement.scrollTop?ut.documentElement.scrollTop:ut.body.scrollTop,Y.scrollLeft=null!=i.pageXOffset?i.pageXOffset:null!=ut.documentElement.scrollLeft?ut.documentElement.scrollLeft:ut.body.scrollLeft,l=Ke.pointerX-Y.scrollLeft,u=Ke.pointerY-Y.scrollTop;p&&!s;)n=(s=ae(p.parentNode))?Y:p.parentNode,o=s?{bottom:Math.max(a.clientHeight,i.innerHeight||0),right:Math.max(a.clientWidth,i.innerWidth||0),left:0,top:0}:n.getBoundingClientRect(),c=h=0,Ge&&((d=n._gsMaxScrollY-n.scrollTop)<0?h=d:u>o.bottom-rt&&d?(Je=!0,h=Math.min(d,g*(1-Math.max(0,o.bottom-u)/rt)|0)):u<o.top+et&&n.scrollTop&&(Je=!0,h=-Math.min(n.scrollTop,g*(1-Math.max(0,u-o.top)/et)|0)),h&&(n.scrollTop+=h)),Ye&&((d=n._gsMaxScrollX-n.scrollLeft)<0?c=d:l>o.right-tt&&d?(Je=!0,c=Math.min(d,g*(1-Math.max(0,o.right-l)/tt)|0)):l<o.left+nt&&n.scrollLeft&&(Je=!0,c=-Math.min(n.scrollLeft,g*(1-Math.max(0,l-o.left)/nt)|0)),c&&(n.scrollLeft+=c)),s&&(c||h)&&(i.scrollTo(n.scrollLeft,n.scrollTop),Et(Ke.pointerX+c,Ke.pointerY+h)),p=n}if(Ce){var m=Ke.x,v=Ke.y;He?(Ke.deltaX=m-parseFloat(ot.rotation),Ke.rotation=m,ot.rotation=m+"deg",ot.renderTransform(1,ot)):f?(Ge&&(Ke.deltaY=v-f.top(),f.top(v)),Ye&&(Ke.deltaX=m-f.left(),f.left(m))):Ue?(Ge&&(Ke.deltaY=v-parseFloat(ot.y),ot.y=v+"px"),Ye&&(Ke.deltaX=m-parseFloat(ot.x),ot.x=m+"px"),ot.renderTransform(1,ot)):(Ge&&(Ke.deltaY=v-parseFloat(t.style.top||0),t.style.top=v+"px"),Ye&&(Ke.deltaX=m-parseFloat(t.style.left||0),t.style.left=m+"px")),!S||r||Re||(Re=!0,!1===fe(Ke,"drag","onDrag")&&(Ye&&(Ke.x-=Ke.deltaX),Ge&&(Ke.y-=Ke.deltaY),e(!0)),Re=!1)}Ce=!1},dt=function(e,r){var n,i,o=Ke.x,a=Ke.y;t._gsap||(ot=s.core.getCache(t)),ot.uncache&&s.getProperty(t,"x"),Ue?(Ke.x=parseFloat(ot.x),Ke.y=parseFloat(ot.y)):He?Ke.x=Ke.rotation=parseFloat(ot.rotation):f?(Ke.y=f.top(),Ke.x=f.left()):(Ke.y=parseFloat(t.style.top||(i=he(t))&&i.top)||0,Ke.x=parseFloat(t.style.left||(i||{}).left)||0),(je||Te||Me)&&!r&&(Ke.isDragging||Ke.isThrowing)&&(Me&&(X.x=Ke.x,X.y=Ke.y,(n=Me(X)).x!==Ke.x&&(Ke.x=n.x,Ce=!0),n.y!==Ke.y&&(Ke.y=n.y,Ce=!0)),je&&(n=je(Ke.x))!==Ke.x&&(Ke.x=n,He&&(Ke.rotation=n),Ce=!0),Te&&((n=Te(Ke.y))!==Ke.y&&(Ke.y=n),Ce=!0)),Ce&&ht(!0),e||(Ke.deltaX=Ke.x-o,Ke.deltaY=Ke.y-a,fe(Ke,"throwupdate","onThrowUpdate"))},pt=function(e,t,r,n){return null==t&&(t=-q),null==r&&(r=q),j(e)?function(s){var i=Ke.isPressed?1-Ke.edgeResistance:1;return e.call(Ke,s>r?r+(s-r)*i:s<t?t+(s-t)*i:s)*n}:L(e)?function(n){for(var s,i,o=e.length,a=0,l=q;--o>-1;)(i=(s=e[o])-n)<0&&(i=-i),i<l&&s>=t&&s<=r&&(a=o,l=i);return e[a]}:isNaN(e)?function(e){return e}:function(){return e*n}},ft=function(){var e,n,s,i;F=!1,f?(f.calibrate(),Ke.minX=Z=-f.maxScrollLeft(),Ke.minY=le=-f.maxScrollTop(),Ke.maxX=H=Ke.maxY=te=0,F=!0):r.bounds&&(e=ge(r.bounds,t.parentNode),He?(Ke.minX=Z=e.left,Ke.maxX=H=e.left+e.width,Ke.minY=le=Ke.maxY=te=0):M(r.bounds.maxX)&&M(r.bounds.maxY)?(n=ge(t,t.parentNode),Ke.minX=Z=Math.round(lt(Ve,"px")+e.left-n.left-.5),Ke.minY=le=Math.round(lt(Xe,"px")+e.top-n.top-.5),Ke.maxX=H=Math.round(Z+(e.width-n.width)),Ke.maxY=te=Math.round(le+(e.height-n.height))):(e=r.bounds,Ke.minX=Z=e.minX,Ke.minY=le=e.minY,Ke.maxX=H=e.maxX,Ke.maxY=te=e.maxY),Z>H&&(Ke.minX=H,Ke.maxX=H=Z,Z=Ke.minX),le>te&&(Ke.minY=te,Ke.maxY=te=le,le=Ke.minY),He&&(Ke.minRotation=Z,Ke.maxRotation=H),F=!0),r.liveSnap&&(s=!0===r.liveSnap?r.snap||{}:r.liveSnap,i=L(s)||j(s),He?(je=pt(i?s:s.rotation,Z,H,1),Te=null):s.points?Me=function(e,t,r,n,s,i,o){return i=i&&i<q?i*i:q,j(e)?function(a){var l,u,c,h=Ke.isPressed?1-Ke.edgeResistance:1,d=a.x,p=a.y;return a.x=d=d>r?r+(d-r)*h:d<t?t+(d-t)*h:d,a.y=p=p>s?s+(p-s)*h:p<n?n+(p-n)*h:p,(l=e.call(Ke,a))!==a&&(a.x=l.x,a.y=l.y),1!==o&&(a.x*=o,a.y*=o),i<q&&(u=a.x-d)*u+(c=a.y-p)*c>i&&(a.x=d,a.y=p),a}:L(e)?function(t){for(var r,n,s,o,a=e.length,l=0,u=q;--a>-1;)(o=(r=(s=e[a]).x-t.x)*r+(n=s.y-t.y)*n)<u&&(l=a,u=o);return u<=i?e[l]:t}:function(e){return e}}(i?s:s.points,Z,H,le,te,s.radius,f?-1:1):(Ye&&(je=pt(i?s:s.x||s.left||s.scrollLeft,Z,H,f?-1:1)),Ge&&(Te=pt(i?s:s.y||s.top||s.scrollTop,le,te,f?-1:1))))},gt=function(){Ke.isThrowing=!1,fe(Ke,"throwcomplete","onThrowComplete")},mt=function(){Ke.isThrowing=!1},vt=function(e,n){var i,o,a,l;e&&b?(!0===e&&(i=r.snap||r.liveSnap||{},o=L(i)||j(i),e={resistance:(r.throwResistance||r.resistance||1e3)/(He?10:1)},He?e.rotation=ye(Ke,o?i:i.rotation,H,Z,1,n):(Ye&&(e[Ve]=ye(Ke,o?i:i.points||i.x||i.left,H,Z,f?-1:1,n||"x"===Ke.lockedAxis)),Ge&&(e[Xe]=ye(Ke,o?i:i.points||i.y||i.top,te,le,f?-1:1,n||"y"===Ke.lockedAxis)),(i.points||L(i)&&T(i[0]))&&(e.linkedProps=Ve+","+Xe,e.radius=i.radius))),Ke.isThrowing=!0,l=isNaN(r.overshootTolerance)?1===r.edgeResistance?0:1-Ke.edgeResistance+.2:r.overshootTolerance,e.duration||(e.duration={max:Math.max(r.minDuration||0,"maxDuration"in r?r.maxDuration:2),min:isNaN(r.minDuration)?0===l||T(e)&&e.resistance>1e3?0:.5:r.minDuration,overshoot:l}),Ke.tween=a=s.to(f||t,{inertia:e,data:"_draggable",onComplete:gt,onInterrupt:mt,onUpdate:r.fastMode?fe:dt,onUpdateParams:r.fastMode?[Ke,"onthrowupdate","onThrowUpdate"]:i&&i.radius?[!1,!0]:[]}),r.fastMode||(f&&(f._skip=!0),a.render(1e9,!0,!0),dt(!0,!0),Ke.endX=Ke.x,Ke.endY=Ke.y,He&&(Ke.endRotation=Ke.x),a.play(0),dt(!0,!0),f&&(f._skip=!1))):F&&Ke.applyBounds()},yt=function(e){var r,s=Pe;Pe=(0,n.getGlobalMatrix)(t.parentNode,!0),e&&Ke.isPressed&&!Pe.equals(s||new n.Matrix2D)&&(r=s.inverse().apply({x:w,y:E}),Pe.apply(r,r),w=r.x,E=r.y),Pe.equals(B)&&(Pe=null)},_t=function(){var e,r,s,i=1-Ke.edgeResistance,o=at?se(ut):0,a=at?ne(ut):0;yt(!1),me.x=Ke.pointerX-o,me.y=Ke.pointerY-a,Pe&&Pe.apply(me,me),w=me.x,E=me.y,Ce&&(Et(Ke.pointerX,Ke.pointerY),ht(!0)),Ie=(0,n.getGlobalMatrix)(t),f?(ft(),A=f.top(),C=f.left()):(bt()?(dt(!0,!0),ft()):Ke.applyBounds(),He?(e=t.ownerSVGElement?[ot.xOrigin-t.getBBox().x,ot.yOrigin-t.getBBox().y]:(he(t)[P]||"0 0").split(" "),Ee=Ke.rotationOrigin=(0,n.getGlobalMatrix)(t).apply({x:parseFloat(e[0])||0,y:parseFloat(e[1])||0}),dt(!0,!0),r=Ke.pointerX-Ee.x-o,s=Ee.y-Ke.pointerY+a,C=Ke.x,A=Ke.y=Math.atan2(s,r)*R):(A=lt(Xe,"px"),C=lt(Ve,"px"))),F&&i&&(C>H?C=H+(C-H)/i:C<Z&&(C=Z-(Z-C)/i),He||(A>te?A=te+(A-te)/i:A<le&&(A=le-(le-A)/i))),Ke.startX=C=k(C),Ke.startY=A=k(A)},bt=function(){return Ke.tween&&Ke.tween.isActive()},xt=function(){!c.parentNode||bt()||Ke.isDragging||c.parentNode.removeChild(c)},Dt=function(e,n){var o;if(!d||Ke.isPressed||!e||!("mousedown"!==e.type&&"pointerdown"!==e.type||n)&&z()-it<30&&m[Ke.pointerEvent.type])ze&&e&&d&&ee(e);else{if(ke=bt(),Ke.pointerEvent=e,m[e.type]?(Se=~e.type.indexOf("touch")?e.currentTarget||e.target:ut,Q(Se,"touchend",Ct),Q(Se,"touchmove",wt),Q(Se,"touchcancel",Ct),Q(ut,"touchstart",re)):(Se=null,Q(ut,"mousemove",wt)),Oe=null,D&&Se||(Q(ut,"mouseup",Ct),e&&e.target&&Q(e.target,"mouseup",Ct)),Fe=st.call(Ke,e.target)&&!1===r.dragClickables&&!n)return Q(e.target,"change",Ct),fe(Ke,"pressInit","onPressInit"),fe(Ke,"press","onPress"),be(Ze,!0),void(ze=!1);var a;if(Le=!(!Se||Ye===Ge||!1===Ke.vars.allowNativeTouchScrolling||Ke.vars.allowContextMenu&&e&&(e.ctrlKey||e.which>2))&&(Ye?"y":"x"),(ze=!Le&&!Ke.allowEventDefault)&&(ee(e),Q(i,"touchforcechange",ee)),e.changedTouches?(e=de=e.changedTouches[0],ve=e.identifier):e.pointerId?ve=e.pointerId:de=ve=null,v++,a=ht,I.push(a),1===I.length&&s.ticker.add(K),E=Ke.pointerY=e.pageY,w=Ke.pointerX=e.pageX,fe(Ke,"pressInit","onPressInit"),(Le||Ke.autoScroll)&&ue(t.parentNode),!t.parentNode||!Ke.autoScroll||f||He||!t.parentNode._gsMaxScrollX||c.parentNode||t.getBBox||(c.style.width=t.parentNode.scrollWidth+"px",t.parentNode.appendChild(c)),_t(),Ke.tween&&Ke.tween.kill(),Ke.isThrowing=!1,s.killTweensOf(f||t,$e,!0),f&&s.killTweensOf(t,{scrollTo:1},!0),Ke.tween=Ke.lockedAxis=null,(r.zIndexBoost||!He&&!f&&!1!==r.zIndexBoost)&&(t.style.zIndex=l.zIndex++),Ke.isPressed=!0,S=!(!r.onDrag&&!Ke._listeners.drag),O=!(!r.onMove&&!Ke._listeners.move),!1!==r.cursor||r.activeCursor)for(o=Ze.length;--o>-1;)s.set(Ze[o],{cursor:r.activeCursor||r.cursor||("grab"===x?"grabbing":x)});fe(Ke,"press","onPress")}},wt=function(e){var r,n,s,o,a,l,u=e;if(d&&!y&&Ke.isPressed&&e){if(Ke.pointerEvent=e,r=e.changedTouches){if((e=r[0])!==de&&e.identifier!==ve){for(o=r.length;--o>-1&&(e=r[o]).identifier!==ve&&e.target!==t;);if(o<0)return}}else if(e.pointerId&&ve&&e.pointerId!==ve)return;Se&&Le&&!Oe&&(me.x=e.pageX-(at?se(ut):0),me.y=e.pageY-(at?ne(ut):0),Pe&&Pe.apply(me,me),n=me.x,s=me.y,((a=Math.abs(n-w))!==(l=Math.abs(s-E))&&(a>We||l>We)||_&&Le===Oe)&&(Oe=a>l&&Ye?"x":"y",Le&&Oe!==Le&&Q(i,"touchforcechange",ee),!1!==Ke.vars.lockAxisOnTouchScroll&&Ye&&Ge&&(Ke.lockedAxis="x"===Oe?"y":"x",j(Ke.vars.onLockAxis)&&Ke.vars.onLockAxis.call(Ke,u)),_&&Le===Oe))?Ct(u):(Ke.allowEventDefault||Le&&(!Oe||Le===Oe)||!1===u.cancelable?ze&&(ze=!1):(ee(u),ze=!0),Ke.autoScroll&&(Je=!0),Et(e.pageX,e.pageY,O))}else ze&&e&&d&&ee(e)},Et=function(e,t,r){var n,s,i,o,a,l,u=1-Ke.dragResistance,c=1-Ke.edgeResistance,h=Ke.pointerX,d=Ke.pointerY,p=A,f=Ke.x,g=Ke.y,m=Ke.endX,v=Ke.endY,y=Ke.endRotation,_=Ce;Ke.pointerX=e,Ke.pointerY=t,at&&(e-=se(ut),t-=ne(ut)),He?(o=Math.atan2(Ee.y-t,e-Ee.x)*R,(a=Ke.y-o)>180?(A-=360,Ke.y=o):a<-180&&(A+=360,Ke.y=o),Ke.x!==C||Math.abs(A-o)>We?(Ke.y=o,i=C+(A-o)*u):i=C):(Pe&&(l=e*Pe.a+t*Pe.c+Pe.e,t=e*Pe.b+t*Pe.d+Pe.f,e=l),(s=t-E)<We&&s>-We&&(s=0),(n=e-w)<We&&n>-We&&(n=0),(Ke.lockAxis||Ke.lockedAxis)&&(n||s)&&((l=Ke.lockedAxis)||(Ke.lockedAxis=l=Ye&&Math.abs(n)>Math.abs(s)?"y":Ge?"x":null,l&&j(Ke.vars.onLockAxis)&&Ke.vars.onLockAxis.call(Ke,Ke.pointerEvent)),"y"===l?s=0:"x"===l&&(n=0)),i=k(C+n*u),o=k(A+s*u)),(je||Te||Me)&&(Ke.x!==i||Ke.y!==o&&!He)?(Me&&(X.x=i,X.y=o,l=Me(X),i=k(l.x),o=k(l.y)),je&&(i=k(je(i))),Te&&(o=k(Te(o)))):F&&(i>H?i=H+Math.round((i-H)*c):i<Z&&(i=Z+Math.round((i-Z)*c)),He||(o>te?o=Math.round(te+(o-te)*c):o<le&&(o=Math.round(le+(o-le)*c)))),(Ke.x!==i||Ke.y!==o&&!He)&&(He?(Ke.endRotation=Ke.x=Ke.endX=i,Ce=!0):(Ge&&(Ke.y=Ke.endY=o,Ce=!0),Ye&&(Ke.x=Ke.endX=i,Ce=!0)),r&&!1===fe(Ke,"move","onMove")?(Ke.pointerX=h,Ke.pointerY=d,A=p,Ke.x=f,Ke.y=g,Ke.endX=m,Ke.endY=v,Ke.endRotation=y,Ce=_):!Ke.isDragging&&Ke.isPressed&&(Ke.isDragging=!0,fe(Ke,"dragstart","onDragStart")))},Ct=function e(n,o){if(d&&Ke.isPressed&&(!n||null==ve||o||!(n.pointerId&&n.pointerId!==ve&&n.target!==t||n.changedTouches&&!function(e,t){for(var r=e.length;r--;)if(e[r].identifier===t)return!0}(n.changedTouches,ve)))){Ke.isPressed=!1;var a,l,u,c,h,p=n,f=Ke.isDragging,g=Ke.vars.allowContextMenu&&n&&(n.ctrlKey||n.which>2),m=s.delayedCall(.001,xt);if(Se?(J(Se,"touchend",e),J(Se,"touchmove",wt),J(Se,"touchcancel",e),J(ut,"touchstart",re)):J(ut,"mousemove",wt),J(i,"touchforcechange",ee),D&&Se||(J(ut,"mouseup",e),n&&n.target&&J(n.target,"mouseup",e)),Ce=!1,f&&(Qe=V=z(),Ke.isDragging=!1),Fe&&!g)return n&&(J(n.target,"change",e),Ke.pointerEvent=p),be(Ze,!1),fe(Ke,"release","onRelease"),fe(Ke,"click","onClick"),void(Fe=!1);for($(ht),l=Ze.length;--l>-1;)ce(Ze[l],"cursor",r.cursor||(!1!==r.cursor?x:null));if(v--,n){if((a=n.changedTouches)&&(n=a[0])!==de&&n.identifier!==ve){for(l=a.length;--l>-1&&(n=a[l]).identifier!==ve&&n.target!==t;);if(l<0)return}Ke.pointerEvent=p,Ke.pointerX=n.pageX,Ke.pointerY=n.pageY}return g&&p?(ee(p),ze=!0,fe(Ke,"release","onRelease")):p&&!f?(ze=!1,ke&&(r.snap||r.bounds)&&vt(r.inertia||r.throwProps),fe(Ke,"release","onRelease"),_&&"touchmove"===p.type||-1!==p.type.indexOf("cancel")||(fe(Ke,"click","onClick"),z()-it<300&&fe(Ke,"doubleclick","onDoubleClick"),c=p.target||t,it=z(),h=function(){it===qe||!Ke.enabled()||Ke.isPressed||p.defaultPrevented||(c.click?c.click():ut.createEvent&&((u=ut.createEvent("MouseEvents")).initMouseEvent("click",!0,!0,i,1,Ke.pointerEvent.screenX,Ke.pointerEvent.screenY,Ke.pointerX,Ke.pointerY,!1,!1,!1,!1,0,null),c.dispatchEvent(u)))},_||p.defaultPrevented||s.delayedCall(.05,h))):(vt(r.inertia||r.throwProps),Ke.allowEventDefault||!p||!1===r.dragClickables&&st.call(Ke,p.target)||!f||Le&&(!Oe||Le!==Oe)||!1===p.cancelable?ze=!1:(ze=!0,ee(p)),fe(Ke,"release","onRelease")),bt()&&m.duration(Ke.tween.duration()),f&&fe(Ke,"dragend","onDragEnd"),!0}ze&&n&&d&&ee(n)},At=function(e){if(e&&Ke.isDragging&&!f){var r=e.target||t.parentNode,n=r.scrollLeft-r._gsScrollX,s=r.scrollTop-r._gsScrollY;(n||s)&&(Pe?(w-=n*Pe.a+s*Pe.c,E-=s*Pe.d+n*Pe.b):(w-=n,E-=s),r._gsScrollX+=n,r._gsScrollY+=s,Et(Ke.pointerX,Ke.pointerY))}},jt=function(e){var t=z(),r=t-it<40,n=t-Qe<40,s=r&&qe===it,i=Ke.pointerEvent&&Ke.pointerEvent.defaultPrevented,o=r&&Be===it,a=e.isTrusted||null==e.isTrusted&&r&&s;if((s||n&&!1!==Ke.vars.suppressClickOnDrag)&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),r&&(!Ke.pointerEvent||!Ke.pointerEvent.defaultPrevented)&&(!s||a&&!o))return a&&s&&(Be=it),void(qe=it);(Ke.isPressed||n||r)&&(a&&e.detail&&r&&!i||ee(e)),r||n||(e&&e.target&&(Ke.pointerEvent=e),fe(Ke,"click","onClick"))},Tt=function(e){return Pe?{x:e.x*Pe.a+e.y*Pe.c+Pe.e,y:e.x*Pe.b+e.y*Pe.d+Pe.f}:{x:e.x,y:e.y}};return(Ae=l.get(t))&&Ae.kill(),u.startDrag=function(e,r){var n,s,i,o;Dt(e||Ke.pointerEvent,!0),r&&!Ke.hitTest(e||Ke.pointerEvent)&&(n=pe(e||Ke.pointerEvent),s=pe(t),i=Tt({x:n.left+n.width/2,y:n.top+n.height/2}),o=Tt({x:s.left+s.width/2,y:s.top+s.height/2}),w-=i.x-o.x,E-=i.y-o.y),Ke.isDragging||(Ke.isDragging=!0,fe(Ke,"dragstart","onDragStart"))},u.drag=wt,u.endDrag=function(e){return Ct(e||Ke.pointerEvent,!0)},u.timeSinceDrag=function(){return Ke.isDragging?0:(z()-Qe)/1e3},u.timeSinceClick=function(){return(z()-it)/1e3},u.hitTest=function(e,t){return l.hitTest(Ke.target,e,t)},u.getDirection=function(e,r){var n,s,i,o,a,l,u="velocity"===e&&b?e:T(e)&&!He?"element":"start";return"element"===u&&(a=pe(Ke.target),l=pe(e)),n="start"===u?Ke.x-C:"velocity"===u?b.getVelocity(t,Ve):a.left+a.width/2-(l.left+l.width/2),He?n<0?"counter-clockwise":"clockwise":(r=r||2,s="start"===u?Ke.y-A:"velocity"===u?b.getVelocity(t,Xe):a.top+a.height/2-(l.top+l.height/2),o=(i=Math.abs(n/s))<1/r?"":n<0?"left":"right",i<r&&(""!==o&&(o+="-"),o+=s<0?"up":"down"),o)},u.applyBounds=function(e,n){var s,o,a,l,u,c;if(e&&r.bounds!==e)return r.bounds=e,Ke.update(!0,n);if(dt(!0),ft(),F&&!bt()){if(s=Ke.x,o=Ke.y,s>H?s=H:s<Z&&(s=Z),o>te?o=te:o<le&&(o=le),(Ke.x!==s||Ke.y!==o)&&(a=!0,Ke.x=Ke.endX=s,He?Ke.endRotation=s:Ke.y=Ke.endY=o,Ce=!0,ht(!0),Ke.autoScroll&&!Ke.isDragging))for(ue(t.parentNode),l=t,Y.scrollTop=null!=i.pageYOffset?i.pageYOffset:null!=ut.documentElement.scrollTop?ut.documentElement.scrollTop:ut.body.scrollTop,Y.scrollLeft=null!=i.pageXOffset?i.pageXOffset:null!=ut.documentElement.scrollLeft?ut.documentElement.scrollLeft:ut.body.scrollLeft;l&&!c;)u=(c=ae(l.parentNode))?Y:l.parentNode,Ge&&u.scrollTop>u._gsMaxScrollY&&(u.scrollTop=u._gsMaxScrollY),Ye&&u.scrollLeft>u._gsMaxScrollX&&(u.scrollLeft=u._gsMaxScrollX),l=u;Ke.isThrowing&&(a||Ke.endX>H||Ke.endX<Z||Ke.endY>te||Ke.endY<le)&&vt(r.inertia||r.throwProps,a)}return Ke},u.update=function(e,r,s){if(r&&Ke.isPressed){var i=(0,n.getGlobalMatrix)(t),o=Ie.apply({x:Ke.x-C,y:Ke.y-A}),a=(0,n.getGlobalMatrix)(t.parentNode,!0);a.apply({x:i.e-o.x,y:i.f-o.y},o),Ke.x-=o.x-a.e,Ke.y-=o.y-a.f,ht(!0),_t()}var l=Ke.x,u=Ke.y;return yt(!r),e?Ke.applyBounds():(Ce&&s&&ht(!0),dt(!0)),r&&(Et(Ke.pointerX,Ke.pointerY),Ce&&ht(!0)),Ke.isPressed&&!r&&(Ye&&Math.abs(l-Ke.x)>.01||Ge&&Math.abs(u-Ke.y)>.01&&!He)&&_t(),Ke.autoScroll&&(ue(t.parentNode,Ke.isDragging),Je=Ke.isDragging,ht(!0),oe(t,At),ie(t,At)),Ke},u.enable=function(e){var n,i,o,a={lazy:!0};if(!1!==r.cursor&&(a.cursor=r.cursor||x),s.utils.checkPrefix("touchCallout")&&(a.touchCallout="none"),"soft"!==e){for(W(Ze,Ye===Ge?"none":r.allowNativeTouchScrolling&&t.scrollHeight===t.clientHeight==(t.scrollWidth===t.clientHeight)||r.allowEventDefault?"manipulation":Ye?"pan-y":"pan-x"),i=Ze.length;--i>-1;)o=Ze[i],D||Q(o,"mousedown",Dt),Q(o,"touchstart",Dt),Q(o,"click",jt,!0),s.set(o,a),o.getBBox&&o.ownerSVGElement&&s.set(o.ownerSVGElement,{touchAction:Ye===Ge?"none":r.allowNativeTouchScrolling||r.allowEventDefault?"manipulation":Ye?"pan-y":"pan-x"}),r.allowContextMenu||Q(o,"contextmenu",ct);be(Ze,!1)}return ie(t,At),d=!0,b&&"soft"!==e&&b.track(f||t,Ue?"x,y":He?"rotation":"top,left"),t._gsDragID=n="d"+U++,N[n]=Ke,f&&(f.enable(),f.element._gsDragID=n),(r.bounds||He)&&_t(),r.bounds&&Ke.applyBounds(),Ke},u.disable=function(e){for(var r,n=Ke.isDragging,s=Ze.length;--s>-1;)ce(Ze[s],"cursor",null);if("soft"!==e){for(W(Ze,null),s=Ze.length;--s>-1;)r=Ze[s],ce(r,"touchCallout",null),J(r,"mousedown",Dt),J(r,"touchstart",Dt),J(r,"click",jt),J(r,"contextmenu",ct);be(Ze,!0),Se&&(J(Se,"touchcancel",Ct),J(Se,"touchend",Ct),J(Se,"touchmove",wt)),J(ut,"mouseup",Ct),J(ut,"mousemove",wt)}return oe(t,At),d=!1,b&&"soft"!==e&&b.untrack(f||t,Ue?"x,y":He?"rotation":"top,left"),f&&f.disable(),$(ht),Ke.isDragging=Ke.isPressed=Fe=!1,n&&fe(Ke,"dragend","onDragEnd"),Ke},u.enabled=function(e,t){return arguments.length?e?Ke.enable(t):Ke.disable(t):d},u.kill=function(){return Ke.isThrowing=!1,Ke.tween&&Ke.tween.kill(),Ke.disable(),s.set(Ze,{clearProps:"userSelect"}),delete N[t._gsDragID],Ke},~Ne.indexOf("scroll")&&(f=u.scrollProxy=new De(t,function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e}({onKill:function(){Ke.isPressed&&Ct(null)}},r)),t.style.overflowY=Ge&&!g?"auto":"hidden",t.style.overflowX=Ye&&!g?"auto":"hidden",t=f.content),He?$e.rotation=1:(Ye&&($e[Ve]=1),Ge&&($e[Xe]=1)),ot.force3D=!("force3D"in r)||r.force3D,u.enable(),u}return r=e,(t=l).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,l.register=function(e){s=e,we()},l.create=function(e,t){return h||we(!0),p(e).map((function(e){return new l(e,t)}))},l.get=function(e){return N[(p(e)[0]||{})._gsDragID]},l.timeSinceDrag=function(){return(z()-V)/1e3},l.hitTest=function(e,t,r){if(e===t)return!1;var n,s,i,o=pe(e),a=pe(t),l=o.top,u=o.left,c=o.right,h=o.bottom,d=o.width,p=o.height,f=a.left>c||a.right<u||a.top>h||a.bottom<l;return f||!r?!f:(i=-1!==(r+"").indexOf("%"),r=parseFloat(r)||0,(n={left:Math.max(u,a.left),top:Math.max(l,a.top)}).width=Math.min(c,a.right)-n.left,n.height=Math.min(h,a.bottom)-n.top,!(n.width<0||n.height<0)&&(i?(r*=.01,(s=n.width*n.height)>=d*p*r||s>=a.width*a.height*r):n.width>r&&n.height>r))},l}(function(){function e(e){this._listeners={},this.target=e||this}var t=e.prototype;return t.addEventListener=function(e,t){var r=this._listeners[e]||(this._listeners[e]=[]);~r.indexOf(t)||r.push(t)},t.removeEventListener=function(e,t){var r=this._listeners[e],n=r&&r.indexOf(t)||-1;n>-1&&r.splice(n,1)},t.dispatchEvent=function(e){var t,r=this;return(this._listeners[e]||[]).forEach((function(n){return!1===n.call(r,{type:e,target:r.target})&&(t=!1)})),t},e}());!function(e,t){for(var r in t)r in e||(e[r]=t[r])}(Ee.prototype,{pointerX:0,pointerY:0,startX:0,startY:0,deltaX:0,deltaY:0,isDragging:!1,isPressed:!1}),Ee.zIndex=1e3,Ee.version="3.7.1",A()&&s.registerPlugin(Ee)},"./node_modules/gsap/EasePack.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{SlowMo:()=>d,ExpoScaleEase:()=>p,RoughEase:()=>f,EasePack:()=>g,default:()=>g});var n,s,i=function(){return n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n},o=function(e,t){return!!(void 0===e?t:e&&!~(e+"").indexOf("false"))},a=function(e){if(n=e||i()){s=n.registerEase;var t,r=n.parseEase(),o=function(e){return function(t){var r=.5+t/2;e.config=function(t){return e(2*(1-t)*t*r+t*t)}}};for(t in r)r[t].config||o(r[t]);for(t in s("slow",d),s("expoScale",p),s("rough",f),g)"version"!==t&&n.core.globals(t,g[t]);1}},l=function(e,t,r){var n=(e=Math.min(1,e||.7))<1?t||0===t?t:.7:0,s=(1-e)/2,i=s+e,a=o(r);return function(e){var t=e+(.5-e)*n;return e<s?a?1-(e=1-e/s)*e:t-(e=1-e/s)*e*e*e*t:e>i?a?1===e?0:1-(e=(e-i)/s)*e:t+(e-t)*(e=(e-i)/s)*e*e*e:a?1:t}},u=function(e,t,r){var s=Math.log(t/e),i=t-e;return r&&(r=n.parseEase(r)),function(t){return(e*Math.exp(s*(r?r(t):t))-e)/i}},c=function(e,t,r){this.t=e,this.v=t,r&&(this.next=r,r.prev=this,this.c=r.v-t,this.gap=r.t-e)},h=function(e){"object"!=typeof e&&(e={points:+e||20});for(var t,r,s,i,a,l,u,h=e.taper||"none",d=[],p=0,f=0|(+e.points||20),g=f,m=o(e.randomize,!0),v=o(e.clamp),y=n?n.parseEase(e.template):0,_=.4*(+e.strength||1);--g>-1;)t=m?Math.random():1/f*g,r=y?y(t):t,s="none"===h?_:"out"===h?(i=1-t)*i*_:"in"===h?t*t*_:t<.5?(i=2*t)*i*.5*_:(i=2*(1-t))*i*.5*_,m?r+=Math.random()*s-.5*s:g%2?r+=.5*s:r-=.5*s,v&&(r>1?r=1:r<0&&(r=0)),d[p++]={x:t,y:r};for(d.sort((function(e,t){return e.x-t.x})),l=new c(1,1,null),g=f;g--;)a=d[g],l=new c(a.x,a.y,l);return u=new c(0,0,l.t?l:l.next),function(e){var t=u;if(e>t.t){for(;t.next&&e>=t.t;)t=t.next;t=t.prev}else for(;t.prev&&e<=t.t;)t=t.prev;return u=t,t.v+(e-t.t)/t.gap*t.c}},d=l(.7);d.ease=d,d.config=l;var p=u(1,2);p.config=u;var f=h();f.ease=f,f.config=h;var g={SlowMo:d,RoughEase:f,ExpoScaleEase:p};for(var m in g)g[m].register=a,g[m].version="3.7.1";i()&&n.registerPlugin(d)},"./node_modules/gsap/EaselPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{EaselPlugin:()=>w,default:()=>w});var n,s,i,o,a,l,u="redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset".split(","),c=function(){return"undefined"!=typeof window},h=function(){return n||c()&&(n=window.gsap)&&n.registerPlugin&&n},d=function(){return o||i&&i.createjs||i||{}},p=function(e){return console.warn(e)},f=function(e){var t=e.getBounds&&e.getBounds();t||(t=e.nominalBounds||{x:0,y:0,width:100,height:100},e.setBounds&&e.setBounds(t.x,t.y,t.width,t.height)),e.cache&&e.cache(t.x,t.y,t.width,t.height),p("EaselPlugin: for filters to display in EaselJS, you must call the object's cache() method first. GSAP attempted to use the target's getBounds() for the cache but that may not be completely accurate. "+e)},g=function(e,t,r){a||(a=d().ColorFilter)||p("EaselPlugin error: The EaselJS ColorFilter JavaScript file wasn't loaded.");for(var s,i,o,l,c,h,g=e.filters||[],m=g.length;m--;)if(g[m]instanceof a){i=g[m];break}if(i||(i=new a,g.push(i),e.filters=g),o=i.clone(),null!=t.tint)s=n.utils.splitColor(t.tint),l=null!=t.tintAmount?+t.tintAmount:1,o.redOffset=+s[0]*l,o.greenOffset=+s[1]*l,o.blueOffset=+s[2]*l,o.redMultiplier=o.greenMultiplier=o.blueMultiplier=1-l;else for(c in t)"exposure"!==c&&"brightness"!==c&&(o[c]=+t[c]);for(null!=t.exposure?(o.redOffset=o.greenOffset=o.blueOffset=255*(+t.exposure-1),o.redMultiplier=o.greenMultiplier=o.blueMultiplier=1):null!=t.brightness&&(l=+t.brightness-1,o.redOffset=o.greenOffset=o.blueOffset=l>0?255*l:0,o.redMultiplier=o.greenMultiplier=o.blueMultiplier=1-Math.abs(l)),m=8;m--;)i[c=u[m]]!==o[c]&&(h=r.add(i,c,i[c],o[c]))&&(h.op="easel_colorFilter");r._props.push("easel_colorFilter"),e.cacheID||f(e)},m=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],v=.212671,y=.71516,_=.072169,b=function(e,t){if(!(e instanceof Array&&t instanceof Array))return t;var r,n,s=[],i=0,o=0;for(r=0;r<4;r++){for(n=0;n<5;n++)o=4===n?e[i+4]:0,s[i+n]=e[i]*t[n]+e[i+1]*t[n+5]+e[i+2]*t[n+10]+e[i+3]*t[n+15]+o;i+=5}return s},x=function(e,t,r){l||(l=d().ColorMatrixFilter)||p("EaselPlugin: The EaselJS ColorMatrixFilter JavaScript file wasn't loaded.");for(var s,i,o,a,u,c,h=e.filters||[],g=h.length;--g>-1;)if(h[g]instanceof l){o=h[g];break}for(o||(o=new l(m.slice()),h.push(o),e.filters=h),i=o.matrix,s=m.slice(),null!=t.colorize&&(s=function(e,t,r){isNaN(r)&&(r=1);var s=n.utils.splitColor(t),i=s[0]/255,o=s[1]/255,a=s[2]/255,l=1-r;return b([l+r*i*v,r*i*y,r*i*_,0,0,r*o*v,l+r*o*y,r*o*_,0,0,r*a*v,r*a*y,l+r*a*_,0,0,0,0,0,1,0],e)}(s,t.colorize,Number(t.colorizeAmount))),null!=t.contrast&&(u=s,c=Number(t.contrast),s=isNaN(c)?u:b([c+=.01,0,0,0,128*(1-c),0,c,0,0,128*(1-c),0,0,c,0,128*(1-c),0,0,0,1,0],u)),null!=t.hue&&(s=function(e,t){if(isNaN(t))return e;t*=Math.PI/180;var r=Math.cos(t),n=Math.sin(t);return b([v+r*(1-v)+n*-v,y+r*-y+n*-y,_+r*-_+n*(1-_),0,0,v+r*-v+.143*n,y+.28484*r+.14*n,_+r*-_+-.283*n,0,0,v+r*-v+-.787329*n,y+r*-y+n*y,_+r*(1-_)+n*_,0,0,0,0,0,1,0,0,0,0,0,1],e)}(s,Number(t.hue))),null!=t.saturation&&(s=function(e,t){if(isNaN(t))return e;var r=1-t,n=r*v,s=r*y,i=r*_;return b([n+t,s,i,0,0,n,s+t,i,0,0,n,s,i+t,0,0,0,0,0,1,0],e)}(s,Number(t.saturation))),g=s.length;--g>-1;)s[g]!==i[g]&&(a=r.add(i,g,i[g],s[g]))&&(a.op="easel_colorMatrixFilter");r._props.push("easel_colorMatrixFilter"),e.cacheID||f(),r._matrix=i},D=function(e){n=e||h(),c()&&(i=window),n&&(s=1)},w={version:"3.7.1",name:"easel",init:function(e,t,r,i,o){var a,l,u,c,h,d,f;for(a in s||(D(),n||p("Please gsap.registerPlugin(EaselPlugin)")),this.target=e,t)if(h=t[a],"colorFilter"===a||"tint"===a||"tintAmount"===a||"exposure"===a||"brightness"===a)u||(g(e,t.colorFilter||t,this),u=!0);else if("saturation"===a||"contrast"===a||"hue"===a||"colorize"===a||"colorizeAmount"===a)c||(x(e,t.colorMatrixFilter||t,this),c=!0);else if("frame"===a){if("string"==typeof h&&"="!==h.charAt(1)&&(d=e.labels))for(f=0;f<d.length;f++)d[f].label===h&&(h=d[f].position);(l=this.add(e,"gotoAndStop",e.currentFrame,h,i,o,Math.round))&&(l.op=a)}else null!=e[a]&&this.add(e,a,"get",h)},render:function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next;t.target.cacheID&&t.target.updateCache()},register:D,registerCreateJS:function(e){o=e}};h()&&n.registerPlugin(w)},"./node_modules/gsap/MotionPathPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{MotionPathPlugin:()=>D,default:()=>D});var n,s,i,o,a=r("./node_modules/gsap/utils/paths.js"),l=r("./node_modules/gsap/utils/matrix.js"),u="x,translateX,left,marginLeft,xPercent".split(","),c="y,translateY,top,marginTop,yPercent".split(","),h=Math.PI/180,d=function(e,t,r,n){for(var s=t.length,i=2===n?0:n,o=0;o<s;o++)e[i]=parseFloat(t[o][r]),2===n&&(e[i+1]=0),i+=2;return e},p=function(e,t,r){return parseFloat(e._gsap.get(e,t,r||"px"))||0},f=function(e){var t,r=e[0],n=e[1];for(t=2;t<e.length;t+=2)r=e[t]+=r,n=e[t+1]+=n},g=function(e,t,r,n,s,i,o,l,u){"cubic"===o.type?t=[t]:(!1!==o.fromCurrent&&t.unshift(p(r,n,l),s?p(r,s,u):0),o.relative&&f(t),t=[(s?a.pointsToSegment:a.flatPointsToSegment)(t,o.curviness)]);return t=i(b(t,r,o)),x(e,r,n,t,"x",l),s&&x(e,r,s,t,"y",u),(0,a.cacheRawPathMeasurements)(t,o.resolution||(0===o.curviness?20:12))},m=function(e){return e},v=/[-+\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/g,y=function(e,t,r){var n,s,i,o=(0,l.getGlobalMatrix)(e);return"svg"===(e.tagName+"").toLowerCase()?(s=(n=e.viewBox.baseVal).x,i=n.y,n.width||(n={width:+e.getAttribute("width"),height:+e.getAttribute("height")})):(n=t&&e.getBBox&&e.getBBox(),s=i=0),t&&"auto"!==t&&(s+=t.push?t[0]*(n?n.width:e.offsetWidth||0):t.x,i+=t.push?t[1]*(n?n.height:e.offsetHeight||0):t.y),r.apply(s||i?o.apply({x:s,y:i}):{x:o.e,y:o.f})},_=function(e,t,r,n){var s,i=(0,l.getGlobalMatrix)(e.parentNode,!0,!0),o=i.clone().multiply((0,l.getGlobalMatrix)(t)),a=y(e,r,i),u=y(t,n,i),c=u.x,h=u.y;return o.e=o.f=0,"auto"===n&&t.getTotalLength&&"path"===t.tagName.toLowerCase()&&(s=t.getAttribute("d").match(v)||[],c+=(s=o.apply({x:+s[0],y:+s[1]})).x,h+=s.y),(s||t.getBBox&&e.getBBox&&t.ownerSVGElement===e.ownerSVGElement)&&(c-=(s=o.apply(t.getBBox())).x,h-=s.y),o.e=c-a.x,o.f=h-a.y,o},b=function(e,t,r){var s,i,l,u=r.align,c=r.matrix,h=r.offsetX,d=r.offsetY,f=r.alignOrigin,g=e[0][0],m=e[0][1],v=p(t,"x"),y=p(t,"y");return e&&e.length?(u&&("self"===u||(s=o(u)[0]||t)===t?(0,a.transformRawPath)(e,1,0,0,1,v-g,y-m):(f&&!1!==f[2]?n.set(t,{transformOrigin:100*f[0]+"% "+100*f[1]+"%"}):f=[p(t,"xPercent")/-100,p(t,"yPercent")/-100],l=(i=_(t,s,f,"auto")).apply({x:g,y:m}),(0,a.transformRawPath)(e,i.a,i.b,i.c,i.d,v+i.e-(l.x-i.e),y+i.f-(l.y-i.f)))),c?(0,a.transformRawPath)(e,c.a,c.b,c.c,c.d,c.e,c.f):(h||d)&&(0,a.transformRawPath)(e,1,0,0,1,h||0,d||0),e):(0,a.getRawPath)("M0,0L0,0")},x=function(e,t,r,n,o,a){var l=t._gsap,u=l.harness,c=u&&u.aliases&&u.aliases[r],h=c&&c.indexOf(",")<0?c:r,d=e._pt=new s(e._pt,t,h,0,0,m,0,l.set(t,h,e));d.u=i(l.get(t,h,a))||0,d.path=n,d.pp=o,e._props.push(h)},D={version:"3.7.1",name:"motionPath",register:function(e,t,r){i=(n=e).utils.getUnit,o=n.utils.toArray,s=r},init:function(e,t){if(!n)return console.warn("Please gsap.registerPlugin(MotionPathPlugin)"),!1;"object"==typeof t&&!t.style&&t.path||(t={path:t});var r,s,o,l,h=[],p=t,f=p.path,m=p.autoRotate,v=p.unitX,y=p.unitY,_=p.x,D=p.y,w=f[0],E=(o=t.start,l="end"in t?t.end:1,function(e){return o||1!==l?(0,a.sliceRawPath)(e,o,l):e});if(this.rawPaths=h,this.target=e,(this.rotate=m||0===m)&&(this.rOffset=parseFloat(m)||0,this.radians=!!t.useRadians,this.rProp=t.rotation||"rotation",this.rSet=e._gsap.set(e,this.rProp,this),this.ru=i(e._gsap.get(e,this.rProp))||0),Array.isArray(f)&&!("closed"in f)&&"number"!=typeof w){for(s in w)!_&&~u.indexOf(s)?_=s:!D&&~c.indexOf(s)&&(D=s);for(s in _&&D?h.push(g(this,d(d([],f,_,0),f,D,1),e,_,D,E,t,v||i(f[0][_]),y||i(f[0][D]))):_=D=0,w)s!==_&&s!==D&&h.push(g(this,d([],f,s,2),e,s,0,E,t,i(f[0][s])))}else r=E(b((0,a.getRawPath)(t.path),e,t)),(0,a.cacheRawPathMeasurements)(r,t.resolution),h.push(r),x(this,e,t.x||"x",r,"x",t.unitX||"px"),x(this,e,t.y||"y",r,"y",t.unitY||"px")},render:function(e,t){var r=t.rawPaths,n=r.length,s=t._pt;for(e>1?e=1:e<0&&(e=0);n--;)(0,a.getPositionOnPath)(r[n],e,!n&&t.rotate,r[n]);for(;s;)s.set(s.t,s.p,s.path[s.pp]+s.u,s.d,e),s=s._next;t.rotate&&t.rSet(t.target,t.rProp,r[0].angle*(t.radians?h:1)+t.rOffset+t.ru,t,e)},getLength:function(e){return(0,a.cacheRawPathMeasurements)((0,a.getRawPath)(e)).totalLength},sliceRawPath:a.sliceRawPath,getRawPath:a.getRawPath,pointsToSegment:a.pointsToSegment,stringToRawPath:a.stringToRawPath,rawPathToString:a.rawPathToString,transformRawPath:a.transformRawPath,getGlobalMatrix:l.getGlobalMatrix,getPositionOnPath:a.getPositionOnPath,cacheRawPathMeasurements:a.cacheRawPathMeasurements,convertToPath:function(e,t){return o(e).map((function(e){return(0,a.convertToPath)(e,!1!==t)}))},convertCoordinates:function(e,t,r){var n=(0,l.getGlobalMatrix)(t,!0,!0).multiply((0,l.getGlobalMatrix)(e));return r?n.apply(r):n},getAlignMatrix:_,getRelativePosition:function(e,t,r,n){var s=_(e,t,r,n);return{x:s.e,y:s.f}},arrayToRawPath:function(e,t){var r=d(d([],e,(t=t||{}).x||"x",0),e,t.y||"y",1);return t.relative&&f(r),["cubic"===t.type?r:(0,a.pointsToSegment)(r,t.curviness)]}};(n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n)&&n.registerPlugin(D)},"./node_modules/gsap/PixiPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{PixiPlugin:()=>U,default:()=>U});var n,s,i,o,a,l,u,c,h=function(){return"undefined"!=typeof window},d=function(){return n||h()&&(n=window.gsap)&&n.registerPlugin&&n},p=function(e){return"function"==typeof e},f=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],g=.212671,m=.71516,v=.072169,y=function(e,t){var r,n,s=[],i=0,o=0;for(r=0;r<4;r++){for(n=0;n<5;n++)o=4===n?e[i+4]:0,s[i+n]=e[i]*t[n]+e[i+1]*t[n+5]+e[i+2]*t[n+10]+e[i+3]*t[n+15]+o;i+=5}return s},_=function(e,t){var r=1-t,n=r*g,s=r*m,i=r*v;return y([n+t,s,i,0,0,n,s+t,i,0,0,n,s,i+t,0,0,0,0,0,1,0],e)},b=function(e,t,r){var n=i(t),s=n[0]/255,o=n[1]/255,a=n[2]/255,l=1-r;return y([l+r*s*g,r*s*m,r*s*v,0,0,r*o*g,l+r*o*m,r*o*v,0,0,r*a*g,r*a*m,l+r*a*v,0,0,0,0,0,1,0],e)},x=function(e,t){t*=Math.PI/180;var r=Math.cos(t),n=Math.sin(t);return y([g+r*(1-g)+n*-g,m+r*-m+n*-m,v+r*-v+n*(1-v),0,0,g+r*-g+.143*n,m+.28484*r+.14*n,v+r*-v+-.283*n,0,0,g+r*-g+-.787329*n,m+r*-m+n*m,v+r*(1-v)+n*v,0,0,0,0,0,1,0,0,0,0,0,1],e)},D=function(e,t){return y([t,0,0,0,.5*(1-t),0,t,0,0,.5*(1-t),0,0,t,0,.5*(1-t),0,0,0,1,0],e)},w=function(e,t){var r,n,s=o.filters[t],i=e.filters||[],a=i.length;for(s||(n=t+" not found. PixiPlugin.registerPIXI(PIXI)",console.warn(n));--a>-1;)if(i[a]instanceof s)return i[a];return r=new s,"BlurFilter"===t&&(r.blur=0),i.push(r),e.filters=i,r},E=function(e,t,r,n){t.add(r,e,r[e],n[e]),t._props.push(e)},C=function(e,t){var r=new o.filters.ColorMatrixFilter;return r.matrix=t,r.brightness(e,!0),r.matrix},A={contrast:1,saturation:1,colorizeAmount:0,colorize:"rgb(255,255,255)",hue:0,brightness:1},j=function(e,t,r){var n,s,i,o=w(e,"ColorMatrixFilter"),a=e._gsColorMatrixFilter=e._gsColorMatrixFilter||function(e){var t,r={};for(t in e)r[t]=e[t];return r}(A),l=t.combineCMF&&!("colorMatrixFilter"in t&&!t.colorMatrixFilter);i=o.matrix,t.resolution&&(o.resolution=t.resolution),t.matrix&&t.matrix.length===i.length?(s=t.matrix,1!==a.contrast&&E("contrast",r,a,A),a.hue&&E("hue",r,a,A),1!==a.brightness&&E("brightness",r,a,A),a.colorizeAmount&&(E("colorize",r,a,A),E("colorizeAmount",r,a,A)),1!==a.saturation&&E("saturation",r,a,A)):(s=f.slice(),null!=t.contrast?(s=D(s,+t.contrast),E("contrast",r,a,t)):1!==a.contrast&&(l?s=D(s,a.contrast):E("contrast",r,a,A)),null!=t.hue?(s=x(s,+t.hue),E("hue",r,a,t)):a.hue&&(l?s=x(s,a.hue):E("hue",r,a,A)),null!=t.brightness?(s=C(+t.brightness,s),E("brightness",r,a,t)):1!==a.brightness&&(l?s=C(a.brightness,s):E("brightness",r,a,A)),null!=t.colorize?(t.colorizeAmount="colorizeAmount"in t?+t.colorizeAmount:1,s=b(s,t.colorize,t.colorizeAmount),E("colorize",r,a,t),E("colorizeAmount",r,a,t)):a.colorizeAmount&&(l?s=b(s,a.colorize,a.colorizeAmount):(E("colorize",r,a,A),E("colorizeAmount",r,a,A))),null!=t.saturation?(s=_(s,+t.saturation),E("saturation",r,a,t)):1!==a.saturation&&(l?s=_(s,a.saturation):E("saturation",r,a,A))),n=s.length;for(;--n>-1;)s[n]!==i[n]&&r.add(i,n,i[n],s[n],"colorMatrixFilter");r._props.push("colorMatrixFilter")},T=function(e,t){var r=t.t,n=t.p,s=t.color;(0,t.set)(r,n,s[0]<<16|s[1]<<8|s[2])},M=function(e,t){var r=t.g;r&&(r.dirty++,r.clearDirty++)},F=function(e,t){t.t.visible=!!t.t.alpha},S=function(e,t,r,n){var s=e[t],o=i(p(s)?e[t.indexOf("set")||!p(e["get"+t.substr(3)])?t:"get"+t.substr(3)]():s),u=i(r);n._pt=new a(n._pt,e,t,0,0,T,{t:e,p:t,color:o,set:l(e,t)}),n.add(o,0,o[0],u[0]),n.add(o,1,o[1],u[1]),n.add(o,2,o[2],u[2])},P={tint:1,lineColor:1,fillColor:1},k="position,scale,skew,pivot,anchor,tilePosition,tileScale".split(","),L={x:"position",y:"position",tileX:"tilePosition",tileY:"tilePosition"},O={colorMatrixFilter:1,saturation:1,contrast:1,hue:1,colorize:1,colorizeAmount:1,brightness:1,combineCMF:1},R=Math.PI/180,q=function(e){return"string"==typeof e},B=function(e){return q(e)&&"="===e.charAt(1)?e.substr(0,2)+parseFloat(e.substr(2))*R:e*R},z=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e5*(t.s+t.c*e))/1e5,t)},I=function(e,t,r,n,s,i){var o,l,u=360*(i?R:1),c=q(s),h=c&&"="===s.charAt(1)?+(s.charAt(0)+"1"):0,d=parseFloat(h?s.substr(2):s)*(i?R:1),p=h?d*h:d-n,f=n+p;return c&&("short"===(o=s.split("_")[1])&&(p%=u)!==p%(u/2)&&(p+=p<0?u:-u),"cw"===o&&p<0?p=(p+1e10*u)%u-~~(p/u)*u:"ccw"===o&&p>0&&(p=(p-1e10*u)%u-~~(p/u)*u)),e._pt=l=new a(e._pt,t,r,n,p,z),l.e=f,l},N=function(){h()&&(s=window,n=d(),o=o||s.PIXI,i=function(e){return n.utils.splitColor("0x"===(e+"").substr(0,2)?"#"+e.substr(2):e)})};for(u=0;u<k.length;u++)c=k[u],L[c+"X"]=c,L[c+"Y"]=c;var U={version:"3.7.1",name:"pixi",register:function(e,t,r){n=e,a=r,l=t.getSetter,N()},registerPIXI:function(e){o=e},init:function(e,t,r,n,s){if(o||N(),!e instanceof o.DisplayObject)return!1;var i,l,u,c,h,d,p,f,g,m="4"===o.VERSION.charAt(0);for(d in t){if(i=L[d],u=t[d],i)l=~d.charAt(d.length-1).toLowerCase().indexOf("x")?"x":"y",this.add(e[i],l,e[i][l],"skew"===i?B(u):u);else if("scale"===d||"anchor"===d||"pivot"===d||"tileScale"===d)this.add(e[d],"x",e[d].x,u),this.add(e[d],"y",e[d].y,u);else if("rotation"===d||"angle"===d)I(this,e,d,e[d],u,"rotation"===d);else if(O[d])c||(j(e,t.colorMatrixFilter||t,this),c=!0);else if("blur"===d||"blurX"===d||"blurY"===d||"blurPadding"===d){if(h=w(e,"BlurFilter"),this.add(h,d,h[d],u),0!==t.blurPadding)for(p=t.blurPadding||2*Math.max(h[d],u),f=e.filters.length;--f>-1;)e.filters[f].padding=Math.max(e.filters[f].padding,p)}else if(P[d])if(("lineColor"===d||"fillColor"===d)&&e instanceof o.Graphics)for(g=(e.geometry||e).graphicsData,this._pt=new a(this._pt,e,d,0,0,M,{g:e.geometry||e}),f=g.length;--f>-1;)S(m?g[f]:g[f][d.substr(0,4)+"Style"],m?d:"color",u,this);else S(e,d,u,this);else"autoAlpha"===d?(this._pt=new a(this._pt,e,"visible",0,0,F),this.add(e,"alpha",e.alpha,u),this._props.push("alpha","visible")):"resolution"!==d&&this.add(e,d,"get",u);this._props.push(d)}}};d()&&n.registerPlugin(U)},"./node_modules/gsap/ScrollToPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ScrollToPlugin:()=>_,default:()=>_});var n,s,i,o,a,l,u,c=function(){return"undefined"!=typeof window},h=function(){return n||c()&&(n=window.gsap)&&n.registerPlugin&&n},d=function(e){return"string"==typeof e},p=function(e){return"function"==typeof e},f=function(e,t){var r="x"===t?"Width":"Height",n="scroll"+r,s="client"+r;return e===i||e===o||e===a?Math.max(o[n],a[n])-(i["inner"+r]||o[s]||a[s]):e[n]-e["offset"+r]},g=function(e,t){var r="scroll"+("x"===t?"Left":"Top");return e===i&&(null!=e.pageXOffset?r="page"+t.toUpperCase()+"Offset":e=null!=o[r]?o:a),function(){return e[r]}},m=function(e,t){if(!(e=l(e)[0])||!e.getBoundingClientRect)return console.warn("scrollTo target doesn't exist. Using 0")||{x:0,y:0};var r=e.getBoundingClientRect(),n=!t||t===i||t===a,s=n?{top:o.clientTop-(i.pageYOffset||o.scrollTop||a.scrollTop||0),left:o.clientLeft-(i.pageXOffset||o.scrollLeft||a.scrollLeft||0)}:t.getBoundingClientRect(),u={x:r.left-s.left,y:r.top-s.top};return!n&&t&&(u.x+=g(t,"x")(),u.y+=g(t,"y")()),u},v=function(e,t,r,n,s){return isNaN(e)||"object"==typeof e?d(e)&&"="===e.charAt(1)?parseFloat(e.substr(2))*("-"===e.charAt(0)?-1:1)+n-s:"max"===e?f(t,r)-s:Math.min(f(t,r),m(e,t)[r]-s):parseFloat(e)-s},y=function(){n=h(),c()&&n&&document.body&&(i=window,a=document.body,o=document.documentElement,l=n.utils.toArray,n.config({autoKillThreshold:7}),u=n.config(),s=1)},_={version:"3.7.1",name:"scrollTo",rawVars:1,register:function(e){n=e,y()},init:function(e,t,r,o,a){s||y();var l=this,u=n.getProperty(e,"scrollSnapType");l.isWin=e===i,l.target=e,l.tween=r,t=function(e,t,r,n){if(p(e)&&(e=e(t,r,n)),"object"!=typeof e)return d(e)&&"max"!==e&&"="!==e.charAt(1)?{x:e,y:e}:{y:e};if(e.nodeType)return{y:e,x:e};var s,i={};for(s in e)i[s]="onAutoKill"!==s&&p(e[s])?e[s](t,r,n):e[s];return i}(t,o,e,a),l.vars=t,l.autoKill=!!t.autoKill,l.getX=g(e,"x"),l.getY=g(e,"y"),l.x=l.xPrev=l.getX(),l.y=l.yPrev=l.getY(),u&&"none"!==u&&(l.snap=1,l.snapInline=e.style.scrollSnapType,e.style.scrollSnapType="none"),null!=t.x?(l.add(l,"x",l.x,v(t.x,e,"x",l.x,t.offsetX||0),o,a),l._props.push("scrollTo_x")):l.skipX=1,null!=t.y?(l.add(l,"y",l.y,v(t.y,e,"y",l.y,t.offsetY||0),o,a),l._props.push("scrollTo_y")):l.skipY=1},render:function(e,t){for(var r,n,s,o,a,l=t._pt,c=t.target,h=t.tween,d=t.autoKill,p=t.xPrev,g=t.yPrev,m=t.isWin,v=t.snap,y=t.snapInline;l;)l.r(e,l.d),l=l._next;r=m||!t.skipX?t.getX():p,s=(n=m||!t.skipY?t.getY():g)-g,o=r-p,a=u.autoKillThreshold,t.x<0&&(t.x=0),t.y<0&&(t.y=0),d&&(!t.skipX&&(o>a||o<-a)&&r<f(c,"x")&&(t.skipX=1),!t.skipY&&(s>a||s<-a)&&n<f(c,"y")&&(t.skipY=1),t.skipX&&t.skipY&&(h.kill(),t.vars.onAutoKill&&t.vars.onAutoKill.apply(h,t.vars.onAutoKillParams||[]))),m?i.scrollTo(t.skipX?r:t.x,t.skipY?n:t.y):(t.skipY||(c.scrollTop=t.y),t.skipX||(c.scrollLeft=t.x)),!v||1!==e&&0!==e||(n=c.scrollTop,r=c.scrollLeft,y?c.style.scrollSnapType=y:c.style.removeProperty("scroll-snap-type"),c.scrollTop=n+1,c.scrollLeft=r+1,c.scrollTop=n,c.scrollLeft=r),t.xPrev=t.x,t.yPrev=t.y},kill:function(e){var t="scrollTo"===e;(t||"scrollTo_x"===e)&&(this.skipX=1),(t||"scrollTo_y"===e)&&(this.skipY=1)}};_.max=f,_.getOffset=m,_.buildGetter=g,h()&&n.registerPlugin(_)},"./node_modules/gsap/ScrollTrigger.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ScrollTrigger:()=>ut,default:()=>ut});var n,s,i,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C,A,j,T,M,F,S=1,P=[],k=[],L=Date.now,O=L(),R=0,q=1,B=function(e){return e},z=function(e){return Math.round(1e5*e)/1e5||0},I=function(){return"undefined"!=typeof window},N=function(){return n||I()&&(n=window.gsap)&&n.registerPlugin&&n},U=function(e){return!!~u.indexOf(e)},H=function(e,t){return~P.indexOf(e)&&P[P.indexOf(e)+1][t]},V=function(e,t){var r=t.s,n=t.sc,s=k.indexOf(e),i=n===_e.sc?1:2;return!~s&&(s=k.push(e)-1),k[s+i]||(k[s+i]=H(e,r)||(U(e)?n:function(t){return arguments.length?e[r]=t:e[r]}))},X=function(e){return H(e,"getBoundingClientRect")||(U(e)?function(){return st.width=i.innerWidth,st.height=i.innerHeight,st}:function(){return De(e)})},Y=function(e,t){var r=t.s,n=t.d2,s=t.d,o=t.a;return(r="scroll"+n)&&(o=H(e,r))?o()-X(e)()[s]:U(e)?Math.max(a[r],l[r])-(i["inner"+n]||a["client"+n]||l["client"+n]):e[r]-e["offset"+n]},G=function(e,t){for(var r=0;r<w.length;r+=3)(!t||~t.indexOf(w[r+1]))&&e(w[r],w[r+1],w[r+2])},W=function(e){return"string"==typeof e},K=function(e){return"function"==typeof e},Z=function(e){return"number"==typeof e},$=function(e){return"object"==typeof e},Q=function(e){return K(e)&&e()},J=function(e,t){return function(){var r=Q(e),n=Q(t);return function(){Q(r),Q(n)}}},ee=Math.abs,te="scrollLeft",re="scrollTop",ne="left",se="top",ie="right",oe="bottom",ae="width",le="height",ue="Right",ce="Left",he="Top",de="Bottom",pe="padding",fe="margin",ge="Width",me="Height",ve="px",ye={s:te,p:ne,p2:ce,os:ie,os2:ue,d:ae,d2:ge,a:"x",sc:function(e){return arguments.length?i.scrollTo(e,_e.sc()):i.pageXOffset||o.scrollLeft||a.scrollLeft||l.scrollLeft||0}},_e={s:re,p:se,p2:he,os:oe,os2:de,d:le,d2:me,a:"y",op:ye,sc:function(e){return arguments.length?i.scrollTo(ye.sc(),e):i.pageYOffset||o.scrollTop||a.scrollTop||l.scrollTop||0}},be=function(e){return i.getComputedStyle(e)},xe=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},De=function(e,t){var r=t&&"matrix(1, 0, 0, 1, 0, 0)"!==be(e)[_]&&n.to(e,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),s=e.getBoundingClientRect();return r&&r.progress(0).kill(),s},we=function(e,t){var r=t.d2;return e["offset"+r]||e["client"+r]||0},Ee=function(e){var t,r=[],n=e.labels,s=e.duration();for(t in n)r.push(n[t]/s);return r},Ce=function(e,t,r,n){return r.split(",").forEach((function(r){return e(t,r,n)}))},Ae=function(e,t,r){return e.addEventListener(t,r,{passive:!0})},je=function(e,t,r){return e.removeEventListener(t,r)},Te={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Me={toggleActions:"play",anticipatePin:0},Fe={top:0,left:0,center:.5,bottom:1,right:1},Se=function(e,t){if(W(e)){var r=e.indexOf("="),n=~r?+(e.charAt(r-1)+1)*parseFloat(e.substr(r+1)):0;~r&&(e.indexOf("%")>r&&(n*=t/100),e=e.substr(0,r-1)),e=n+(e in Fe?Fe[e]*t:~e.indexOf("%")?parseFloat(e)*t/100:parseFloat(e)||0)}return e},Pe=function(e,t,r,n,s,i,a){var u=s.startColor,c=s.endColor,h=s.fontSize,d=s.indent,p=s.fontWeight,f=o.createElement("div"),g=U(r)||"fixed"===H(r,"pinType"),m=-1!==e.indexOf("scroller"),v=g?l:r,y=-1!==e.indexOf("start"),_=y?u:c,b="border-color:"+_+";font-size:"+h+";color:"+_+";font-weight:"+p+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return b+="position:"+(m&&g?"fixed;":"absolute;"),(m||!g)&&(b+=(n===_e?ie:oe)+":"+(i+parseFloat(d))+"px;"),a&&(b+="box-sizing:border-box;text-align:left;width:"+a.offsetWidth+"px;"),f._isStart=y,f.setAttribute("class","gsap-marker-"+e),f.style.cssText=b,f.innerText=t||0===t?e+"-"+t:e,v.children[0]?v.insertBefore(f,v.children[0]):v.appendChild(f),f._offset=f["offset"+n.op.d2],ke(f,0,n,y),f},ke=function(e,t,r,s){var i={display:"block"},o=r[s?"os2":"p2"],a=r[s?"p2":"os2"];e._isFlipped=s,i[r.a+"Percent"]=s?-100:0,i[r.a]=s?"1px":0,i["border"+o+ge]=1,i["border"+a+ge]=0,i[r.p]=t+"px",n.set(e,i)},Le=[],Oe={},Re=function(){return d||(d=h($e))},qe=function(){d||(d=h($e),R||Ve("scrollStart"),R=L())},Be=function(){return!v&&!A&&!o.fullscreenElement&&c.restart(!0)},ze={},Ie=[],Ne=[],Ue=function(e){var t,r=n.ticker.frame,o=[],a=0;if(M!==r||S){for(Ge();a<Ne.length;a+=4)(t=i.matchMedia(Ne[a]).matches)!==Ne[a+3]&&(Ne[a+3]=t,t?o.push(a):Ge(1,Ne[a])||K(Ne[a+2])&&Ne[a+2]());for(Ye(),a=0;a<o.length;a++)t=o[a],T=Ne[t],Ne[t+2]=Ne[t+1](e);T=0,s&&We(0,1),M=r,Ve("matchMedia")}},He=function e(){return je(ut,"scrollEnd",e)||We(!0)},Ve=function(e){return ze[e]&&ze[e].map((function(e){return e()}))||Ie},Xe=[],Ye=function(e){for(var t=0;t<Xe.length;t+=5)e&&Xe[t+4]!==e||(Xe[t].style.cssText=Xe[t+1],Xe[t].getBBox&&Xe[t].setAttribute("transform",Xe[t+2]||""),Xe[t+3].uncache=1)},Ge=function(e,t){var r;for(b=0;b<Le.length;b++)r=Le[b],t&&r.media!==t||(e?r.kill(1):r.revert());t&&Ye(t),t||Ve("revert")},We=function(e,t){if(!R||e){F=!0;var r=Ve("refreshInit");E&&ut.sort(),t||Ge(),Le.forEach((function(e){return e.refresh()})),r.forEach((function(e){return e&&e.render&&e.render(-1)})),k.forEach((function(e){return"function"==typeof e&&(e.rec=0)})),c.pause(),F=!1,Ve("refresh")}else Ae(ut,"scrollEnd",He)},Ke=0,Ze=1,$e=function(){if(!F){var e=Le.length,t=L(),r=t-O>=50,n=e&&Le[0].scroll();if(Ze=Ke>n?-1:1,Ke=n,r&&(R&&!y&&t-R>200&&(R=0,Ve("scrollEnd")),g=O,O=t),Ze<0){for(b=e;b-- >0;)Le[b]&&Le[b].update(0,r);Ze=1}else for(b=0;b<e;b++)Le[b]&&Le[b].update(0,r);d=0}},Qe=[ne,se,oe,ie,"marginBottom","marginRight","marginTop","marginLeft","display","flexShrink","float","zIndex","grid-column-start","grid-column-end","grid-row-start","grid-row-end","grid-area","justify-self","align-self","place-self"],Je=Qe.concat([ae,le,"boxSizing","maxWidth","maxHeight","position",fe,pe,"paddingTop","paddingRight","paddingBottom","paddingLeft"]),et=function(e,t,r,n){if(e.parentNode!==t){for(var s,i=Qe.length,o=t.style,a=e.style;i--;)o[s=Qe[i]]=r[s];o.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(o.display="inline-block"),a.bottom=a.right="auto",o.overflow="visible",o.boxSizing="border-box",o.width=we(e,ye)+ve,o.height=we(e,_e)+ve,o.padding=a.margin=a.top=a.left="0",rt(n),a.width=a.maxWidth=r.width,a.height=a.maxHeight=r.height,a.padding=r.padding,e.parentNode.insertBefore(t,e),t.appendChild(e)}},tt=/([A-Z])/g,rt=function(e){if(e){var t,r,s=e.t.style,i=e.length,o=0;for((e.t._gsap||n.core.getCache(e.t)).uncache=1;o<i;o+=2)r=e[o+1],t=e[o],r?s[t]=r:s[t]&&s.removeProperty(t.replace(tt,"-$1").toLowerCase())}},nt=function(e){for(var t=Je.length,r=e.style,n=[],s=0;s<t;s++)n.push(Je[s],r[Je[s]]);return n.t=e,n},st={left:0,top:0},it=function(e,t,r,n,s,i,o,u,c,h,d,f){if(K(e)&&(e=e(u)),W(e)&&"max"===e.substr(0,3)&&(e=f+("="===e.charAt(4)?Se("0"+e.substr(3),r):0)),Z(e))o&&ke(o,r,n,!0);else{K(t)&&(t=t(u));var g,m,v,y=p(t)[0]||l,_=De(y)||{},b=e.split(" ");_&&(_.left||_.top)||"none"!==be(y).display||(v=y.style.display,y.style.display="block",_=De(y),v?y.style.display=v:y.style.removeProperty("display")),g=Se(b[0],_[n.d]),m=Se(b[1]||"0",r),e=_[n.p]-c[n.p]-h+g+s-m,o&&ke(o,m,n,r-m<20||o._isStart&&m>20),r-=r-m}if(i){var x=e+r,D=i._isStart;f="scroll"+n.d2,ke(i,x,n,D&&x>20||!D&&(d?Math.max(l[f],a[f]):i.parentNode[f])<=x+1),d&&(c=De(o),d&&(i.style[n.op.p]=c[n.op.p]-n.op.m-i._offset+ve))}return Math.round(e)},ot=/(?:webkit|moz|length|cssText|inset)/i,at=function(e,t,r,s){if(e.parentNode!==t){var i,o,a=e.style;if(t===l){for(i in e._stOrig=a.cssText,o=be(e))+i||ot.test(i)||!o[i]||"string"!=typeof a[i]||"0"===i||(a[i]=o[i]);a.top=r,a.left=s}else a.cssText=e._stOrig;n.core.getCache(e).uncache=1,t.appendChild(e)}},lt=function(e,t){var r,s,i=V(e,t),o="_scroll"+t.p2,a=function t(a,l,u,c,h){var d=t.tween,p=l.onComplete,f={};return d&&d.kill(),r=Math.round(u),l[o]=a,l.modifiers=f,f[o]=function(e){return(e=z(i()))!==r&&e!==s&&Math.abs(e-r)>2?(d.kill(),t.tween=0):e=u+c*d.ratio+h*d.ratio*d.ratio,s=r,r=z(e)},l.onComplete=function(){t.tween=0,p&&p.call(d)},d=t.tween=n.to(e,l)};return e[o]=i,e.addEventListener("wheel",(function(){return a.tween&&a.tween.kill()&&(a.tween=0)}),{passive:!0}),a};ye.op=_e;var ut=function(){function e(t,r){s||e.register(n)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(t,r)}return e.prototype.init=function(t,r){if(this.progress=this.start=0,this.vars&&this.kill(1),q){var s,u,c,h,d,m,_,x,D,w,A,M,F,k,O,z,I,N,G,Q,J,te,re,ne,se,ie,oe,ae,le,ue,ce,he,de,me,Ce,Fe,ke,Re,ze,Ie=(t=xe(W(t)||Z(t)||t.nodeType?{trigger:t}:t,Me)).horizontal?ye:_e,Ne=t,Ue=Ne.onUpdate,Ve=Ne.toggleClass,Xe=Ne.id,Ye=Ne.onToggle,Ge=Ne.onRefresh,We=Ne.scrub,Ke=Ne.trigger,$e=Ne.pin,Qe=Ne.pinSpacing,Je=Ne.invalidateOnRefresh,tt=Ne.anticipatePin,ot=Ne.onScrubComplete,ut=Ne.onSnapComplete,ct=Ne.once,ht=Ne.snap,dt=Ne.pinReparent,pt=!We&&0!==We,ft=p(t.scroller||i)[0],gt=n.core.getCache(ft),mt=U(ft),vt="pinType"in t?"fixed"===t.pinType:mt||"fixed"===H(ft,"pinType"),yt=[t.onEnter,t.onLeave,t.onEnterBack,t.onLeaveBack],_t=pt&&t.toggleActions.split(" "),bt="markers"in t?t.markers:Me.markers,xt=mt?0:parseFloat(be(ft)["border"+Ie.p2+ge])||0,Dt=this,wt=t.onRefreshInit&&function(){return t.onRefreshInit(Dt)},Et=function(e,t,r){var n=r.d,s=r.d2,o=r.a;return(o=H(e,"getBoundingClientRect"))?function(){return o()[n]}:function(){return(t?i["inner"+s]:e["client"+s])||0}}(ft,mt,Ie),Ct=function(e,t){return!t||~P.indexOf(e)?X(e):function(){return st}}(ft,mt),At=0;Dt.media=T,tt*=45,Dt.scroller=ft,Dt.scroll=V(ft,Ie),h=Dt.scroll(),Dt.vars=t,r=r||t.animation,"refreshPriority"in t&&(E=1),gt.tweenScroll=gt.tweenScroll||{top:lt(ft,_e),left:lt(ft,ye)},Dt.tweenTo=s=gt.tweenScroll[Ie.p],r&&(r.vars.lazy=!1,r._initted||!1!==r.vars.immediateRender&&!1!==t.immediateRender&&r.render(0,!0,!0),Dt.animation=r.pause(),r.scrollTrigger=Dt,(ce=Z(We)&&We)&&(ue=n.to(r,{ease:"power3",duration:ce,onComplete:function(){return ot&&ot(Dt)}})),ae=0,Xe||(Xe=r.vars.id)),Le.push(Dt),ht&&($(ht)&&!ht.push||(ht={snapTo:ht}),"scrollBehavior"in l.style&&n.set(mt?[l,a]:ft,{scrollBehavior:"auto"}),c=K(ht.snapTo)?ht.snapTo:"labels"===ht.snapTo?function(e){return function(t){return n.utils.snap(Ee(e),t)}}(r):"labelsDirectional"===ht.snapTo?(ke=r,function(e,t){var r,n=Ee(ke);if(n.sort((function(e,t){return e-t})),t.direction>0){for(e-=1e-4,r=0;r<n.length;r++)if(n[r]>=e)return n[r];return n.pop()}for(r=n.length,e+=1e-4;r--;)if(n[r]<=e)return n[r];return n[0]}):n.utils.snap(ht.snapTo),he=ht.duration||{min:.1,max:2},he=$(he)?f(he.min,he.max):f(he,he),de=n.delayedCall(ht.delay||ce/2||.1,(function(){if(Math.abs(Dt.getVelocity())<10&&!y&&At!==Dt.scroll()){var e=r&&!pt?r.totalProgress():Dt.progress,t=(e-le)/(L()-g)*1e3||0,i=n.utils.clamp(-Dt.progress,1-Dt.progress,ee(t/2)*t/.185),o=Dt.progress+(!1===ht.inertia?0:i),a=f(0,1,c(o,Dt)),l=Dt.scroll(),u=Math.round(m+a*F),h=ht,d=h.onStart,p=h.onInterrupt,v=h.onComplete,b=s.tween;if(l<=_&&l>=m&&u!==l){if(b&&!b._initted&&b.data<=Math.abs(u-l))return;!1===ht.inertia&&(i=a-Dt.progress),s(u,{duration:he(ee(.185*Math.max(ee(o-e),ee(a-e))/t/.05||0)),ease:ht.ease||"power3",data:Math.abs(u-l),onInterrupt:function(){return de.restart(!0)&&p&&p(Dt)},onComplete:function(){At=Dt.scroll(),ae=le=r&&!pt?r.totalProgress():Dt.progress,ut&&ut(Dt),v&&v(Dt)}},l,i*F,u-l-i*F),d&&d(Dt,s.tween)}}else Dt.isActive&&de.restart(!0)})).pause()),Xe&&(Oe[Xe]=Dt),Ke=Dt.trigger=p(Ke||$e)[0],$e=!0===$e?Ke:p($e)[0],W(Ve)&&(Ve={targets:Ke,className:Ve}),$e&&(!1===Qe||Qe===fe||(Qe=!(!Qe&&"flex"===be($e.parentNode).display)&&pe),Dt.pin=$e,!1!==t.force3D&&n.set($e,{force3D:!0}),(u=n.core.getCache($e)).spacer?k=u.pinState:(u.spacer=I=o.createElement("div"),I.setAttribute("class","pin-spacer"+(Xe?" pin-spacer-"+Xe:"")),u.pinState=k=nt($e)),Dt.spacer=I=u.spacer,oe=be($e),re=oe[Qe+Ie.os2],G=n.getProperty($e),Q=n.quickSetter($e,Ie.a,ve),et($e,I,oe),z=nt($e)),bt&&(M=$(bt)?xe(bt,Te):Te,w=Pe("scroller-start",Xe,ft,Ie,M,0),A=Pe("scroller-end",Xe,ft,Ie,M,0,w),N=w["offset"+Ie.op.d2],x=Pe("start",Xe,ft,Ie,M,N),D=Pe("end",Xe,ft,Ie,M,N),vt||P.length&&!0===H(ft,"fixedMarkers")||(ze=be(Re=mt?l:ft).position,Re.style.position="absolute"===ze||"fixed"===ze?ze:"relative",n.set([w,A],{force3D:!0}),se=n.quickSetter(w,Ie.a,ve),ie=n.quickSetter(A,Ie.a,ve))),Dt.revert=function(e){var t=!1!==e||!Dt.enabled,n=v;t!==Dt.isReverted&&(t&&(Dt.scroll.rec||(Dt.scroll.rec=Dt.scroll()),Ce=Math.max(Dt.scroll(),Dt.scroll.rec||0),me=Dt.progress,Fe=r&&r.progress()),x&&[x,D,w,A].forEach((function(e){return e.style.display=t?"none":"block"})),t&&(v=1),Dt.update(t),v=n,$e&&(t?function(e,t,r){if(rt(r),e.parentNode===t){var n=t.parentNode;n&&(n.insertBefore(e,t),n.removeChild(t))}}($e,I,k):(!dt||!Dt.isActive)&&et($e,I,be($e),ne)),Dt.isReverted=t)},Dt.refresh=function(s,i){if(!v&&Dt.enabled||i)if($e&&s&&R)Ae(e,"scrollEnd",He);else{v=1,ue&&ue.pause(),Je&&r&&r.progress(0).invalidate(),Dt.isReverted||Dt.revert();for(var o,a,u,c,f,g,y,b,E,j,T=Et(),M=Ct(),S=Y(ft,Ie),P=0,L=0,q=t.end,B=t.endTrigger||Ke,N=t.start||(0!==t.start&&Ke?$e?"0 0":"0 100%":0),U=t.pinnedContainer&&p(t.pinnedContainer)[0],H=Ke&&Math.max(0,Le.indexOf(Dt))||0,X=H;X--;)(g=Le[X]).end||g.refresh(0,1)||(v=1),!(y=g.pin)||y!==Ke&&y!==$e||g.isReverted||(j||(j=[]),j.unshift(g),g.revert());for(m=it(N,Ke,T,Ie,Dt.scroll(),x,w,Dt,M,xt,vt,S)||($e?-.001:0),K(q)&&(q=q(Dt)),W(q)&&!q.indexOf("+=")&&(~q.indexOf(" ")?q=(W(N)?N.split(" ")[0]:"")+q:(P=Se(q.substr(2),T),q=W(N)?N:m+P,B=Ke)),_=Math.max(m,it(q||(B?"100% 0":S),B,T,Ie,Dt.scroll()+P,D,A,Dt,M,xt,vt,S))||-.001,F=_-m||(m-=.01)&&.001,P=0,X=H;X--;)(y=(g=Le[X]).pin)&&g.start-g._pinPush<m&&(o=g.end-g.start,(y===Ke||y===U)&&(P+=o),y===$e&&(L+=o));if(m+=P,_+=P,Dt._pinPush=L,x&&P&&((o={})[Ie.a]="+="+P,U&&(o[Ie.p]="-="+Dt.scroll()),n.set([x,D],o)),$e)o=be($e),c=Ie===_e,u=Dt.scroll(),J=parseFloat(G(Ie.a))+L,!S&&_>1&&((mt?l:ft).style["overflow-"+Ie.a]="scroll"),et($e,I,o),z=nt($e),a=De($e,!0),b=vt&&V(ft,c?ye:_e)(),Qe&&((ne=[Qe+Ie.os2,F+L+ve]).t=I,(X=Qe===pe?we($e,Ie)+F+L:0)&&ne.push(Ie.d,X+ve),rt(ne),vt&&Dt.scroll(Ce)),vt&&((f={top:a.top+(c?u-m:b)+ve,left:a.left+(c?b:u-m)+ve,boxSizing:"border-box",position:"fixed"}).width=f.maxWidth=Math.ceil(a.width)+ve,f.height=f.maxHeight=Math.ceil(a.height)+ve,f.margin=f.marginTop=f.marginRight=f.marginBottom=f.marginLeft="0",f.padding=o.padding,f.paddingTop=o.paddingTop,f.paddingRight=o.paddingRight,f.paddingBottom=o.paddingBottom,f.paddingLeft=o.paddingLeft,O=function(e,t,r){for(var n,s=[],i=e.length,o=r?8:0;o<i;o+=2)n=e[o],s.push(n,n in t?t[n]:e[o+1]);return s.t=e.t,s}(k,f,dt)),r?(E=r._initted,C(1),r.render(r.duration(),!0,!0),te=G(Ie.a)-J+F+L,F!==te&&O.splice(O.length-2,2),r.render(0,!0,!0),E||r.invalidate(),C(0)):te=F;else if(Ke&&Dt.scroll())for(a=Ke.parentNode;a&&a!==l;)a._pinOffset&&(m-=a._pinOffset,_-=a._pinOffset),a=a.parentNode;j&&j.forEach((function(e){return e.revert(!1)})),Dt.start=m,Dt.end=_,(h=d=Dt.scroll())<Ce&&Dt.scroll(Ce),Dt.revert(!1),v=0,r&&pt&&r._initted&&r.progress()!==Fe&&r.progress(Fe,!0).render(r.time(),!0,!0),me!==Dt.progress&&(ue&&r.totalProgress(me,!0),Dt.progress=me,Dt.update()),$e&&Qe&&(I._pinOffset=Math.round(Dt.progress*te)),Ge&&Ge(Dt)}},Dt.getVelocity=function(){return(Dt.scroll()-d)/(L()-g)*1e3||0},Dt.update=function(e,t){var n,i,o,a,u,c=Dt.scroll(),f=e?0:(c-m)/F,y=f<0?0:f>1?1:f||0,b=Dt.progress;if(t&&(d=h,h=c,ht&&(le=ae,ae=r&&!pt?r.totalProgress():y)),tt&&!y&&$e&&!v&&!S&&R&&m<c+(c-d)/(L()-g)*tt&&(y=1e-4),y!==b&&Dt.enabled){if(a=(u=(n=Dt.isActive=!!y&&y<1)!==(!!b&&b<1))||!!y!=!!b,Dt.direction=y>b?1:-1,Dt.progress=y,pt||(!ue||v||S?r&&r.totalProgress(y,!!v):(ue.vars.totalProgress=y,ue.invalidate().restart())),$e)if(e&&Qe&&(I.style[Qe+Ie.os2]=re),vt){if(a){if(o=!e&&y>b&&_+1>c&&c+1>=Y(ft,Ie),dt)if(e||!n&&!o)at($e,I);else{var x=De($e,!0),D=c-m;at($e,l,x.top+(Ie===_e?D:0)+ve,x.left+(Ie===_e?0:D)+ve)}rt(n||o?O:z),te!==F&&y<1&&n||Q(J+(1!==y||o?0:te))}}else Q(J+te*y);ht&&!s.tween&&!v&&!S&&de.restart(!0),Ve&&(u||ct&&y&&(y<1||!j))&&p(Ve.targets).forEach((function(e){return e.classList[n||ct?"add":"remove"](Ve.className)})),Ue&&!pt&&!e&&Ue(Dt),a&&!v?(i=y&&!b?0:1===y?1:1===b?2:3,pt&&(o=!u&&"none"!==_t[i+1]&&_t[i+1]||_t[i],r&&("complete"===o||"reset"===o||o in r)&&("complete"===o?r.pause().totalProgress(1):"reset"===o?r.restart(!0).pause():"restart"===o?r.restart(!0):r[o]()),Ue&&Ue(Dt)),!u&&j||(Ye&&u&&Ye(Dt),yt[i]&&yt[i](Dt),ct&&(1===y?Dt.kill(!1,1):yt[i]=0),u||yt[i=1===y?1:3]&&yt[i](Dt))):pt&&Ue&&!v&&Ue(Dt)}ie&&(se(c+(w._isFlipped?1:0)),ie(c))},Dt.enable=function(t,r){Dt.enabled||(Dt.enabled=!0,Ae(ft,"resize",Be),Ae(ft,"scroll",qe),wt&&Ae(e,"refreshInit",wt),!1!==t&&(Dt.progress=me=0,h=d=At=Dt.scroll()),!1!==r&&Dt.refresh())},Dt.getTween=function(e){return e&&s?s.tween:ue},Dt.disable=function(t,r){if(Dt.enabled&&(!1!==t&&Dt.revert(),Dt.enabled=Dt.isActive=!1,r||ue&&ue.pause(),Ce=0,u&&(u.uncache=1),wt&&je(e,"refreshInit",wt),de&&(de.pause(),s.tween&&s.tween.kill()&&(s.tween=0)),!mt)){for(var n=Le.length;n--;)if(Le[n].scroller===ft&&Le[n]!==Dt)return;je(ft,"resize",Be),je(ft,"scroll",qe)}},Dt.kill=function(e,t){Dt.disable(e,t),Xe&&delete Oe[Xe];var n=Le.indexOf(Dt);Le.splice(n,1),n===b&&Ze>0&&b--,n=0,Le.forEach((function(e){return e.scroller===Dt.scroller&&(n=1)})),n||(Dt.scroll.rec=0),r&&(r.scrollTrigger=null,e&&r.render(-1),t||r.kill()),x&&[x,D,w,A].forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),$e&&(u&&(u.uncache=1),n=0,Le.forEach((function(e){return e.pin===$e&&n++})),n||(u.spacer=0))},Dt.enable(!1,!1),r&&r.add&&!F?n.delayedCall(.01,(function(){return m||_||Dt.refresh()}))&&(F=.01)&&(m=_=0):Dt.refresh()}else this.update=this.refresh=this.kill=B},e.register=function(t){if(!s&&(n=t||N(),I()&&window.document&&(i=window,o=document,a=o.documentElement,l=o.body),n&&(p=n.utils.toArray,f=n.utils.clamp,C=n.core.suppressOverwrites||B,n.core.globals("ScrollTrigger",e),l))){h=i.requestAnimationFrame||function(e){return setTimeout(e,16)},Ae(i,"wheel",qe),u=[i,o,a,l],Ae(o,"scroll",qe);var r,d=l.style,g=d.borderTop;d.borderTop="1px solid #000",r=De(l),_e.m=Math.round(r.top+_e.sc())||0,ye.m=Math.round(r.left+ye.sc())||0,g?d.borderTop=g:d.removeProperty("border-top"),m=setInterval(Re,200),n.delayedCall(.5,(function(){return S=0})),Ae(o,"touchcancel",B),Ae(l,"touchstart",B),Ce(Ae,o,"pointerdown,touchstart,mousedown",(function(){return y=1})),Ce(Ae,o,"pointerup,touchend,mouseup",(function(){return y=0})),_=n.utils.checkPrefix("transform"),Je.push(_),s=L(),c=n.delayedCall(.2,We).pause(),w=[o,"visibilitychange",function(){var e=i.innerWidth,t=i.innerHeight;o.hidden?(x=e,D=t):x===e&&D===t||Be()},o,"DOMContentLoaded",We,i,"load",function(){return R||We()},i,"resize",Be],G(Ae)}return s},e.defaults=function(e){for(var t in e)Me[t]=e[t]},e.kill=function(){q=0,Le.slice(0).forEach((function(e){return e.kill(1)}))},e.config=function(e){"limitCallbacks"in e&&(j=!!e.limitCallbacks);var t=e.syncInterval;t&&clearInterval(m)||(m=t)&&setInterval(Re,t),"autoRefreshEvents"in e&&(G(je)||G(Ae,e.autoRefreshEvents||"none"),A=-1===(e.autoRefreshEvents+"").indexOf("resize"))},e.scrollerProxy=function(e,t){var r=p(e)[0],n=k.indexOf(r),s=U(r);~n&&k.splice(n,s?6:2),s?P.unshift(i,t,l,t,a,t):P.unshift(r,t)},e.matchMedia=function(e){var t,r,n,s,o;for(r in e)n=Ne.indexOf(r),s=e[r],T=r,"all"===r?s():(t=i.matchMedia(r))&&(t.matches&&(o=s()),~n?(Ne[n+1]=J(Ne[n+1],s),Ne[n+2]=J(Ne[n+2],o)):(n=Ne.length,Ne.push(r,s,o),t.addListener?t.addListener(Ue):t.addEventListener("change",Ue)),Ne[n+3]=t.matches),T=0;return Ne},e.clearMatchMedia=function(e){e||(Ne.length=0),(e=Ne.indexOf(e))>=0&&Ne.splice(e,4)},e}();ut.version="3.7.1",ut.saveStyles=function(e){return e?p(e).forEach((function(e){if(e&&e.style){var t=Xe.indexOf(e);t>=0&&Xe.splice(t,5),Xe.push(e,e.style.cssText,e.getBBox&&e.getAttribute("transform"),n.core.getCache(e),T)}})):Xe},ut.revert=function(e,t){return Ge(!e,t)},ut.create=function(e,t){return new ut(e,t)},ut.refresh=function(e){return e?Be():We(!0)},ut.update=$e,ut.maxScroll=function(e,t){return Y(e,t?ye:_e)},ut.getScrollFunc=function(e,t){return V(p(e)[0],t?ye:_e)},ut.getById=function(e){return Oe[e]},ut.getAll=function(){return Le.slice(0)},ut.isScrolling=function(){return!!R},ut.addEventListener=function(e,t){var r=ze[e]||(ze[e]=[]);~r.indexOf(t)||r.push(t)},ut.removeEventListener=function(e,t){var r=ze[e],n=r&&r.indexOf(t);n>=0&&r.splice(n,1)},ut.batch=function(e,t){var r,s=[],i={},o=t.interval||.016,a=t.batchMax||1e9,l=function(e,t){var r=[],s=[],i=n.delayedCall(o,(function(){t(r,s),r=[],s=[]})).pause();return function(e){r.length||i.restart(!0),r.push(e.trigger),s.push(e),a<=r.length&&i.progress(1)}};for(r in t)i[r]="on"===r.substr(0,2)&&K(t[r])&&"onRefreshInit"!==r?l(0,t[r]):t[r];return K(a)&&(a=a(),Ae(ut,"refresh",(function(){return a=t.batchMax()}))),p(e).forEach((function(e){var t={};for(r in i)t[r]=i[r];t.trigger=e,s.push(ut.create(t))})),s},ut.sort=function(e){return Le.sort(e||function(e,t){return-1e6*(e.vars.refreshPriority||0)+e.start-(t.start+-1e6*(t.vars.refreshPriority||0))})},N()&&n.registerPlugin(ut)},"./node_modules/gsap/TextPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{TextPlugin:()=>o,default:()=>o});var n,s,i=r("./node_modules/gsap/utils/strings.js"),o={version:"3.7.1",name:"text",init:function(e,t,r){var n,o,a,l,u,c,h,d,p=e.nodeName.toUpperCase(),f=this;if(f.svg=e.getBBox&&("TEXT"===p||"TSPAN"===p),!("innerHTML"in e)&&!f.svg)return!1;if(f.target=e,"object"!=typeof t&&(t={value:t}),"value"in t){for(f.delimiter=t.delimiter||"",a=(0,i.splitInnerHTML)(e,f.delimiter),s||(s=document.createElement("div")),s.innerHTML=t.value,o=(0,i.splitInnerHTML)(s,f.delimiter),f.from=r._from,f.from&&(p=a,a=o,o=p),f.hasClass=!(!t.newClass&&!t.oldClass),f.newClass=t.newClass,f.oldClass=t.oldClass,n=(p=a.length-o.length)<0?a:o,f.fillChar=t.fillChar||(t.padSpace?"&nbsp;":""),p<0&&(p=-p);--p>-1;)n.push(f.fillChar);if("diff"===t.type){for(l=0,u=[],c=[],h="",p=0;p<o.length;p++)(d=o[p])===a[p]?h+=d:(u[l]=h+d,c[l++]=h+a[p],h="");o=u,a=c,h&&(o.push(h),a.push(h))}t.speed&&r.duration(Math.min(.05/t.speed*n.length,t.maxDuration||9999)),this.original=a,this.text=o,this._props.push("text")}else f.text=f.original=[""]},render:function(e,t){e>1?e=1:e<0&&(e=0),t.from&&(e=1-e);var r,n,s,i=t.text,o=t.hasClass,a=t.newClass,l=t.oldClass,u=t.delimiter,c=t.target,h=t.fillChar,d=t.original,p=i.length,f=e*p+.5|0;o?(n=l&&f!==p,s=((r=a&&f)?"<span class='"+a+"'>":"")+i.slice(0,f).join(u)+(r?"</span>":"")+(n?"<span class='"+l+"'>":"")+u+d.slice(f).join(u)+(n?"</span>":"")):s=i.slice(0,f).join(u)+u+d.slice(f).join(u),t.svg?c.textContent=s:c.innerHTML="&nbsp;"===h&&~s.indexOf("  ")?s.split("  ").join("&nbsp;&nbsp;"):s}};o.splitInnerHTML=i.splitInnerHTML,o.emojiSafeSplit=i.emojiSafeSplit,o.getText=i.getText,(n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n)&&n.registerPlugin(o)},"./node_modules/gsap/all.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{gsap:()=>f,default:()=>f,CSSPlugin:()=>s.default,TweenMax:()=>g,TweenLite:()=>n.TweenLite,TimelineMax:()=>n.TimelineMax,TimelineLite:()=>n.TimelineLite,Power0:()=>n.Power0,Power1:()=>n.Power1,Power2:()=>n.Power2,Power3:()=>n.Power3,Power4:()=>n.Power4,Linear:()=>n.Linear,Quad:()=>n.Quad,Cubic:()=>n.Cubic,Quart:()=>n.Quart,Quint:()=>n.Quint,Strong:()=>n.Strong,Elastic:()=>n.Elastic,Back:()=>n.Back,SteppedEase:()=>n.SteppedEase,Bounce:()=>n.Bounce,Sine:()=>n.Sine,Expo:()=>n.Expo,Circ:()=>n.Circ,wrap:()=>n.wrap,wrapYoyo:()=>n.wrapYoyo,distribute:()=>n.distribute,random:()=>n.random,snap:()=>n.snap,normalize:()=>n.normalize,getUnit:()=>n.getUnit,clamp:()=>n.clamp,splitColor:()=>n.splitColor,toArray:()=>n.toArray,mapRange:()=>n.mapRange,pipe:()=>n.pipe,unitize:()=>n.unitize,interpolate:()=>n.interpolate,shuffle:()=>n.shuffle,selector:()=>n.selector,Draggable:()=>i.Draggable,CSSRulePlugin:()=>o.CSSRulePlugin,EaselPlugin:()=>a.EaselPlugin,EasePack:()=>l.EasePack,ExpoScaleEase:()=>l.ExpoScaleEase,RoughEase:()=>l.RoughEase,SlowMo:()=>l.SlowMo,MotionPathPlugin:()=>u.MotionPathPlugin,PixiPlugin:()=>c.PixiPlugin,ScrollToPlugin:()=>h.ScrollToPlugin,ScrollTrigger:()=>d.ScrollTrigger,TextPlugin:()=>p.TextPlugin});var n=r("./node_modules/gsap/gsap-core.js"),s=r("./node_modules/gsap/CSSPlugin.js"),i=r("./node_modules/gsap/Draggable.js"),o=r("./node_modules/gsap/CSSRulePlugin.js"),a=r("./node_modules/gsap/EaselPlugin.js"),l=r("./node_modules/gsap/EasePack.js"),u=r("./node_modules/gsap/MotionPathPlugin.js"),c=r("./node_modules/gsap/PixiPlugin.js"),h=r("./node_modules/gsap/ScrollToPlugin.js"),d=r("./node_modules/gsap/ScrollTrigger.js"),p=r("./node_modules/gsap/TextPlugin.js"),f=n.default.registerPlugin(s.default)||n.default,g=f.core.Tween},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{GSCache:()=>Jt,Animation:()=>er,Timeline:()=>tr,Tween:()=>cr,PropTween:()=>Er,gsap:()=>Tr,Power0:()=>Mr,Power1:()=>Fr,Power2:()=>Sr,Power3:()=>Pr,Power4:()=>kr,Linear:()=>Lr,Quad:()=>Or,Cubic:()=>Rr,Quart:()=>qr,Quint:()=>Br,Strong:()=>zr,Elastic:()=>Ir,Back:()=>Nr,SteppedEase:()=>Ur,Bounce:()=>Hr,Sine:()=>Vr,Expo:()=>Xr,Circ:()=>Yr,TweenMax:()=>cr,TweenLite:()=>cr,TimelineMax:()=>tr,TimelineLite:()=>tr,default:()=>Tr,wrap:()=>Dt,wrapYoyo:()=>wt,distribute:()=>ft,random:()=>vt,snap:()=>mt,normalize:()=>bt,getUnit:()=>ot,clamp:()=>at,splitColor:()=>Lt,toArray:()=>ht,selector:()=>dt,mapRange:()=>Ct,pipe:()=>yt,unitize:()=>_t,interpolate:()=>At,shuffle:()=>pt,_getProperty:()=>we,_numExp:()=>ee,_numWithUnitExp:()=>te,_isString:()=>H,_isUndefined:()=>Y,_renderComplexString:()=>yr,_relExp:()=>ne,_setDefaults:()=>Se,_removeLinkedListItem:()=>qe,_forEachName:()=>Ee,_sortPropTweensByPriority:()=>wr,_colorStringFilter:()=>zt,_replaceRandom:()=>Et,_checkPlugin:()=>ir,_plugins:()=>me,_ticker:()=>It,_config:()=>k,_roundModifier:()=>gt,_round:()=>Ce,_missingPlugin:()=>ue,_getSetter:()=>gr,_getCache:()=>De,_colorExp:()=>qt});var i,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C,A,j,T,M,F,S,P,k={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},L={duration:.5,overwrite:!1,delay:0},O=1e8,R=1e-8,q=2*Math.PI,B=q/4,z=0,I=Math.sqrt,N=Math.cos,U=Math.sin,H=function(e){return"string"==typeof e},V=function(e){return"function"==typeof e},X=function(e){return"number"==typeof e},Y=function(e){return void 0===e},G=function(e){return"object"==typeof e},W=function(e){return!1!==e},K=function(){return"undefined"!=typeof window},Z=function(e){return V(e)||H(e)},$="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},Q=Array.isArray,J=/(?:-?\.?\d|\.)+/gi,ee=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,te=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,re=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,ne=/[+-]=-?[.\d]+/,se=/[^,'"\[\]\s]+/gi,ie=/[\d.+\-=]+(?:e[-+]\d*)*/i,oe={},ae={},le=function(e){return(ae=ke(e,oe))&&Tr},ue=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},ce=function(e,t){return!t&&console.warn(e)},he=function(e,t){return e&&(oe[e]=t)&&ae&&(ae[e]=t)||oe},de=function(){return 0},pe={},fe=[],ge={},me={},ve={},ye=30,_e=[],be="",xe=function(e){var t,r,n=e[0];if(G(n)||V(n)||(e=[e]),!(t=(n._gsap||{}).harness)){for(r=_e.length;r--&&!_e[r].targetTest(n););t=_e[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new Jt(e[r],t)))||e.splice(r,1);return e},De=function(e){return e._gsap||xe(ht(e))[0]._gsap},we=function(e,t,r){return(r=e[t])&&V(r)?e[t]():Y(r)&&e.getAttribute&&e.getAttribute(t)||r},Ee=function(e,t){return(e=e.split(",")).forEach(t)||e},Ce=function(e){return Math.round(1e5*e)/1e5||0},Ae=function(e,t){for(var r=t.length,n=0;e.indexOf(t[n])<0&&++n<r;);return n<r},je=function(){var e,t,r=fe.length,n=fe.slice(0);for(ge={},fe.length=0,e=0;e<r;e++)(t=n[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},Te=function(e,t,r,n){fe.length&&je(),e.render(t,r,n),fe.length&&je()},Me=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(se).length<2?t:H(e)?e.trim():e},Fe=function(e){return e},Se=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},Pe=function(e,t){for(var r in t)r in e||"duration"===r||"ease"===r||(e[r]=t[r])},ke=function(e,t){for(var r in t)e[r]=t[r];return e},Le=function e(t,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(t[n]=G(r[n])?e(t[n]||(t[n]={}),r[n]):r[n]);return t},Oe=function(e,t){var r,n={};for(r in e)r in t||(n[r]=e[r]);return n},Re=function(e){var t=e.parent||o,r=e.keyframes?Pe:Se;if(W(e.inherit))for(;t;)r(e,t.vars.defaults),t=t.parent||t._dp;return e},qe=function(e,t,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var s=t._prev,i=t._next;s?s._next=i:e[r]===t&&(e[r]=i),i?i._prev=s:e[n]===t&&(e[n]=s),t._next=t._prev=t.parent=null},Be=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},ze=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},Ie=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Ne=function e(t){return!t||t._ts&&e(t.parent)},Ue=function(e){return e._repeat?He(e._tTime,e=e.duration()+e._rDelay)*e:0},He=function(e,t){var r=Math.floor(e/=t);return e&&r===e?r-1:r},Ve=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Xe=function(e){return e._end=Ce(e._start+(e._tDur/Math.abs(e._ts||e._rts||R)||0))},Ye=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=Ce(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Xe(e),r._dirty||ze(r,e)),e},Ge=function(e,t){var r;if((t._time||t._initted&&!t._dur)&&(r=Ve(e.rawTime(),t),(!t._dur||it(0,t.totalDuration(),r)-t._tTime>R)&&t.render(r,!0)),ze(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},We=function(e,t,r,n){return t.parent&&Be(t),t._start=Ce((X(r)?r:r||e!==o?rt(e,r,t):e._time)+t._delay),t._end=Ce(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),function(e,t,r,n,s){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i,o=e[n];if(s)for(i=t[s];o&&o[s]>i;)o=o._prev;o?(t._next=o._next,o._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[n]=t,t._prev=o,t.parent=t._dp=e}(e,t,"_first","_last",e._sort?"_start":0),Qe(t)||(e._recent=t),n||Ge(e,t),e},Ke=function(e,t){return(oe.ScrollTrigger||ue("scrollTrigger",t))&&oe.ScrollTrigger.create(t,e)},Ze=function(e,t,r,n){return or(e,t),e._initted?!r&&e._pt&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&h!==It.frame?(fe.push(e),e._lazy=[t,n],1):void 0:1},$e=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},Qe=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Je=function(e,t,r,n){var s=e._repeat,i=Ce(t)||0,o=e._tTime/e._tDur;return o&&!n&&(e._time*=i/e._dur),e._dur=i,e._tDur=s?s<0?1e10:Ce(i*(s+1)+e._rDelay*s):i,o&&!n?Ye(e,e._tTime=e._tDur*o):e.parent&&Xe(e),r||ze(e.parent,e),e},et=function(e){return e instanceof tr?ze(e):Je(e,e._dur)},tt={_start:0,endTime:de,totalDuration:de},rt=function e(t,r,n){var s,i,o,a=t.labels,l=t._recent||tt,u=t.duration()>=O?l.endTime(!1):t._dur;return H(r)&&(isNaN(r)||r in a)?(i=r.charAt(0),o="%"===r.substr(-1),s=r.indexOf("="),"<"===i||">"===i?(s>=0&&(r=r.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(o?(s<0?l:n).totalDuration()/100:1)):s<0?(r in a||(a[r]=u),a[r]):(i=parseFloat(r.charAt(s-1)+r.substr(s+1)),o&&n&&(i=i/100*(Q(n)?n[0]:n).totalDuration()),s>1?e(t,r.substr(0,s-1),n)+i:u+i)):null==r?u:+r},nt=function(e,t,r){var n,s,i=X(t[1]),o=(i?2:1)+(e<2?0:1),a=t[o];if(i&&(a.duration=t[1]),a.parent=r,e){for(n=a,s=r;s&&!("immediateRender"in n);)n=s.vars.defaults||{},s=W(s.vars.inherit)&&s.parent;a.immediateRender=W(n.immediateRender),e<2?a.runBackwards=1:a.startAt=t[o-1]}return new cr(t[0],a,t[o+1])},st=function(e,t){return e||0===e?t(e):t},it=function(e,t,r){return r<e?e:r>t?t:r},ot=function(e){if("string"!=typeof e)return"";var t=ie.exec(e);return t?e.substr(t.index+t[0].length):""},at=function(e,t,r){return st(r,(function(r){return it(e,t,r)}))},lt=[].slice,ut=function(e,t){return e&&G(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&G(e[0]))&&!e.nodeType&&e!==a},ct=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var n;return H(e)&&!t||ut(e,1)?(n=r).push.apply(n,ht(e)):r.push(e)}))||r},ht=function(e,t,r){return!H(e)||r||!l&&Nt()?Q(e)?ct(e,r):ut(e)?lt.call(e,0):e?[e]:[]:lt.call((t||u).querySelectorAll(e),0)},dt=function(e){return e=ht(e)[0]||ce("Invalid scope")||{},function(t){var r=e.current||e.nativeElement||e;return ht(t,r.querySelectorAll?r:r===e?ce("Invalid scope")||u.createElement("div"):e)}},pt=function(e){return e.sort((function(){return.5-Math.random()}))},ft=function(e){if(V(e))return e;var t=G(e)?e:{each:e},r=Wt(t.ease),n=t.from||0,s=parseFloat(t.base)||0,i={},o=n>0&&n<1,a=isNaN(n)||o,l=t.axis,u=n,c=n;return H(n)?u=c={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(u=n[0],c=n[1]),function(e,o,h){var d,p,f,g,m,v,y,_,b,x=(h||t).length,D=i[x];if(!D){if(!(b="auto"===t.grid?0:(t.grid||[1,O])[1])){for(y=-O;y<(y=h[b++].getBoundingClientRect().left)&&b<x;);b--}for(D=i[x]=[],d=a?Math.min(b,x)*u-.5:n%b,p=a?x*c/b-.5:n/b|0,y=0,_=O,v=0;v<x;v++)f=v%b-d,g=p-(v/b|0),D[v]=m=l?Math.abs("y"===l?g:f):I(f*f+g*g),m>y&&(y=m),m<_&&(_=m);"random"===n&&pt(D),D.max=y-_,D.min=_,D.v=x=(parseFloat(t.amount)||parseFloat(t.each)*(b>x?x-1:l?"y"===l?x/b:b:Math.max(b,x/b))||0)*("edges"===n?-1:1),D.b=x<0?s-x:s,D.u=ot(t.amount||t.each)||0,r=r&&x<0?Yt(r):r}return x=(D[e]-D.min)/D.max||0,Ce(D.b+(r?r(x):x)*D.v)+D.u}},gt=function(e){var t=e<1?Math.pow(10,(e+"").length-2):1;return function(r){var n=Math.round(parseFloat(r)/e)*e*t;return(n-n%1)/t+(X(r)?0:ot(r))}},mt=function(e,t){var r,n,s=Q(e);return!s&&G(e)&&(r=s=e.radius||O,e.values?(e=ht(e.values),(n=!X(e[0]))&&(r*=r)):e=gt(e.increment)),st(t,s?V(e)?function(t){return n=e(t),Math.abs(n-t)<=r?n:t}:function(t){for(var s,i,o=parseFloat(n?t.x:t),a=parseFloat(n?t.y:0),l=O,u=0,c=e.length;c--;)(s=n?(s=e[c].x-o)*s+(i=e[c].y-a)*i:Math.abs(e[c]-o))<l&&(l=s,u=c);return u=!r||l<=r?e[u]:t,n||u===t||X(t)?u:u+ot(t)}:gt(e))},vt=function(e,t,r,n){return st(Q(e)?!t:!0===r?!!(r=0):!n,(function(){return Q(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*n)/n}))},yt=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},_t=function(e,t){return function(r){return e(parseFloat(r))+(t||ot(r))}},bt=function(e,t,r){return Ct(e,t,0,1,r)},xt=function(e,t,r){return st(r,(function(r){return e[~~t(r)]}))},Dt=function e(t,r,n){var s=r-t;return Q(t)?xt(t,e(0,t.length),r):st(n,(function(e){return(s+(e-t)%s)%s+t}))},wt=function e(t,r,n){var s=r-t,i=2*s;return Q(t)?xt(t,e(0,t.length-1),r):st(n,(function(e){return t+((e=(i+(e-t)%i)%i||0)>s?i-e:e)}))},Et=function(e){for(var t,r,n,s,i=0,o="";~(t=e.indexOf("random(",i));)n=e.indexOf(")",t),s="["===e.charAt(t+7),r=e.substr(t+7,n-t-7).match(s?se:J),o+=e.substr(i,t-i)+vt(s?r:+r[0],s?0:+r[1],+r[2]||1e-5),i=n+1;return o+e.substr(i,e.length-i)},Ct=function(e,t,r,n,s){var i=t-e,o=n-r;return st(s,(function(t){return r+((t-e)/i*o||0)}))},At=function e(t,r,n,s){var i=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!i){var o,a,l,u,c,h=H(t),d={};if(!0===n&&(s=1)&&(n=null),h)t={p:t},r={p:r};else if(Q(t)&&!Q(r)){for(l=[],u=t.length,c=u-2,a=1;a<u;a++)l.push(e(t[a-1],t[a]));u--,i=function(e){e*=u;var t=Math.min(c,~~e);return l[t](e-t)},n=r}else s||(t=ke(Q(t)?[]:{},t));if(!l){for(o in r)sr.call(d,t,o,"get",r[o]);i=function(e){return _r(e,d)||(h?t.p:t)}}}return st(n,i)},jt=function(e,t,r){var n,s,i,o=e.labels,a=O;for(n in o)(s=o[n]-t)<0==!!r&&s&&a>(s=Math.abs(s))&&(i=n,a=s);return i},Tt=function(e,t,r){var n,s,i=e.vars,o=i[t];if(o)return n=i[t+"Params"],s=i.callbackScope||e,r&&fe.length&&je(),n?o.apply(s,n):o.call(s)},Mt=function(e){return Be(e),e.scrollTrigger&&e.scrollTrigger.kill(!1),e.progress()<1&&Tt(e,"onInterrupt"),e},Ft=function(e){var t=(e=!e.name&&e.default||e).name,r=V(e),n=t&&!r&&e.init?function(){this._props=[]}:e,s={init:de,render:_r,add:sr,kill:xr,modifier:br,rawVars:0},i={targetTest:0,get:0,getSetter:gr,aliases:{},register:0};if(Nt(),e!==n){if(me[t])return;Se(n,Se(Oe(e,s),i)),ke(n.prototype,ke(s,Oe(e,i))),me[n.prop=t]=n,e.targetTest&&(_e.push(n),pe[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}he(t,n),e.register&&e.register(Tr,n,Er)},St=255,Pt={aqua:[0,St,St],lime:[0,St,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,St],navy:[0,0,128],white:[St,St,St],olive:[128,128,0],yellow:[St,St,0],orange:[St,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[St,0,0],pink:[St,192,203],cyan:[0,St,St],transparent:[St,St,St,0]},kt=function(e,t,r){return(6*(e=e<0?e+1:e>1?e-1:e)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*St+.5|0},Lt=function(e,t,r){var n,s,i,o,a,l,u,c,h,d,p=e?X(e)?[e>>16,e>>8&St,e&St]:0:Pt.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Pt[e])p=Pt[e];else if("#"===e.charAt(0)){if(e.length<6&&(n=e.charAt(1),s=e.charAt(2),i=e.charAt(3),e="#"+n+n+s+s+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&St,p&St,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&St,e&St]}else if("hsl"===e.substr(0,3))if(p=d=e.match(J),t){if(~e.indexOf("="))return p=e.match(ee),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(s=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=kt(o+1/3,n,s),p[1]=kt(o,n,s),p[2]=kt(o-1/3,n,s);else p=e.match(J)||Pt.transparent;p=p.map(Number)}return t&&!d&&(n=p[0]/St,s=p[1]/St,i=p[2]/St,l=((u=Math.max(n,s,i))+(c=Math.min(n,s,i)))/2,u===c?o=a=0:(h=u-c,a=l>.5?h/(2-u-c):h/(u+c),o=u===n?(s-i)/h+(s<i?6:0):u===s?(i-n)/h+2:(n-s)/h+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},Ot=function(e){var t=[],r=[],n=-1;return e.split(qt).forEach((function(e){var s=e.match(te)||[];t.push.apply(t,s),r.push(n+=s.length+1)})),t.c=r,t},Rt=function(e,t,r){var n,s,i,o,a="",l=(e+a).match(qt),u=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=Lt(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(i=Ot(e),(n=r.c).join(a)!==i.c.join(a)))for(o=(s=e.replace(qt,"1").split(te)).length-1;c<o;c++)a+=s[c]+(~n.indexOf(c)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!s)for(o=(s=e.split(qt)).length-1;c<o;c++)a+=s[c]+l[c];return a+s[o]},qt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Pt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Bt=/hsl[a]?\(/,zt=function(e){var t,r=e.join(" ");if(qt.lastIndex=0,qt.test(r))return t=Bt.test(r),e[1]=Rt(e[1],t),e[0]=Rt(e[0],t,Ot(e[1])),!0},It=(b=Date.now,x=500,D=33,w=b(),E=w,A=C=1e3/240,T=function e(t){var r,n,s,i,o=b()-E,a=!0===t;if(o>x&&(w+=o-D),((r=(s=(E+=o)-w)-A)>0||a)&&(i=++v.frame,y=s-1e3*v.time,v.time=s/=1e3,A+=r+(r>=C?4:C-r),n=1),a||(f=g(e)),n)for(_=0;_<j.length;_++)j[_](s,y,i,t)},v={time:0,frame:0,tick:function(){T(!0)},deltaRatio:function(e){return y/(1e3/(e||60))},wake:function(){c&&(!l&&K()&&(a=l=window,u=a.document||{},oe.gsap=Tr,(a.gsapVersions||(a.gsapVersions=[])).push(Tr.version),le(ae||a.GreenSockGlobals||!a.gsap&&a||{}),m=a.requestAnimationFrame),f&&v.sleep(),g=m||function(e){return setTimeout(e,A-1e3*v.time+1|0)},p=1,T(2))},sleep:function(){(m?a.cancelAnimationFrame:clearTimeout)(f),p=0,g=de},lagSmoothing:function(e,t){x=e||1e8,D=Math.min(t,x,0)},fps:function(e){C=1e3/(e||240),A=1e3*v.time+C},add:function(e){j.indexOf(e)<0&&j.push(e),Nt()},remove:function(e){var t;~(t=j.indexOf(e))&&j.splice(t,1)&&_>=t&&_--},_listeners:j=[]}),Nt=function(){return!p&&It.wake()},Ut={},Ht=/^[\d.\-M][\d.\-,\s]/,Vt=/["']/g,Xt=function(e){for(var t,r,n,s={},i=e.substr(1,e.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)r=i[a],t=a!==l-1?r.lastIndexOf(","):r.length,n=r.substr(0,t),s[o]=isNaN(n)?n.replace(Vt,"").trim():+n,o=r.substr(t+1).trim();return s},Yt=function(e){return function(t){return 1-e(1-t)}},Gt=function e(t,r){for(var n,s=t._first;s;)s instanceof tr?e(s,r):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===r||(s.timeline?e(s.timeline,r):(n=s._ease,s._ease=s._yEase,s._yEase=n,s._yoyo=r)),s=s._next},Wt=function(e,t){return e&&(V(e)?e:Ut[e]||function(e){var t,r,n,s,i=(e+"").split("("),o=Ut[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[Xt(i[1])]:(t=e,r=t.indexOf("(")+1,n=t.indexOf(")"),s=t.indexOf("(",r),t.substring(r,~s&&s<n?t.indexOf(")",n+1):n)).split(",").map(Me)):Ut._CE&&Ht.test(e)?Ut._CE("",e):o}(e))||t},Kt=function(e,t,r,n){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===n&&(n=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var s,i={easeIn:t,easeOut:r,easeInOut:n};return Ee(e,(function(e){for(var t in Ut[e]=oe[e]=i,Ut[s=e.toLowerCase()]=r,i)Ut[s+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Ut[e+"."+t]=i[t]})),i},Zt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},$t=function e(t,r,n){var s=r>=1?r:1,i=(n||(t?.3:.45))/(r<1?r:1),o=i/q*(Math.asin(1/s)||0),a=function(e){return 1===e?1:s*Math.pow(2,-10*e)*U((e-o)*i)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Zt(a);return i=q/i,l.config=function(r,n){return e(t,r,n)},l},Qt=function e(t,r){void 0===r&&(r=1.70158);var n=function(e){return e?--e*e*((r+1)*e+r)+1:0},s="out"===t?n:"in"===t?function(e){return 1-n(1-e)}:Zt(n);return s.config=function(r){return e(t,r)},s};Ee("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Kt(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),Ut.Linear.easeNone=Ut.none=Ut.Linear.easeIn,Kt("Elastic",$t("in"),$t("out"),$t()),M=7.5625,S=1/(F=2.75),Kt("Bounce",(function(e){return 1-P(1-e)}),P=function(e){return e<S?M*e*e:e<.7272727272727273?M*Math.pow(e-1.5/F,2)+.75:e<.9090909090909092?M*(e-=2.25/F)*e+.9375:M*Math.pow(e-2.625/F,2)+.984375}),Kt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Kt("Circ",(function(e){return-(I(1-e*e)-1)})),Kt("Sine",(function(e){return 1===e?1:1-N(e*B)})),Kt("Back",Qt("in"),Qt("out"),Qt()),Ut.SteppedEase=Ut.steps=oe.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,n=e+(t?0:1),s=t?1:0;return function(e){return((n*it(0,.99999999,e)|0)+s)*r}}},L.ease=Ut["quad.out"],Ee("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return be+=e+","+e+"Params,"}));var Jt=function(e,t){this.id=z++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:we,this.set=t?t.getSetter:gr},er=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Je(this,+e.duration,1,1),this.data=e.data,p||It.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Je(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Nt(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Ye(this,e),!r._dp||r.parent||Ge(r,this);r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&We(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===R||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),Te(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Ue(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Ue(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?He(this._tTime,r)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?Ve(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,Ie(this.totalTime(it(-this._delay,this._tDur,t),!0))},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Nt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==R&&(this._tTime-=R)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&We(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(W(e)?this.totalDuration():this.duration())/Math.abs(this._ts)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ve(t.rawTime(e),this):this._tTime:this._tTime},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(t._ts||1),t=t._dp;return r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,et(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,et(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(rt(this,e),W(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,W(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-R))},t.eventCallback=function(e,t,r){var n=this.vars;return arguments.length>1?(t?(n[e]=t,r&&(n[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete n[e],this):n[e]},t.then=function(e){var t=this;return new Promise((function(r){var n=V(e)?e:Fe,s=function(){var e=t.then;t.then=null,V(n)&&(n=n(t))&&(n.then||n===t)&&(t.then=e),r(n),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?s():t._prom=s}))},t.kill=function(){Mt(this)},e}();Se(er.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var tr=function(e){function t(t,r){var s;return void 0===t&&(t={}),(s=e.call(this,t)||this).labels={},s.smoothChildTiming=!!t.smoothChildTiming,s.autoRemoveChildren=!!t.autoRemoveChildren,s._sort=W(t.sortChildren),o&&We(t.parent||o,n(s),r),t.reversed&&s.reverse(),t.paused&&s.paused(!0),t.scrollTrigger&&Ke(n(s),t.scrollTrigger),s}s(t,e);var r=t.prototype;return r.to=function(e,t,r){return nt(0,arguments,this),this},r.from=function(e,t,r){return nt(1,arguments,this),this},r.fromTo=function(e,t,r,n){return nt(2,arguments,this),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,Re(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new cr(e,t,rt(this,r),1),this},r.call=function(e,t,r){return We(this,cr.delayedCall(0,e,t),r)},r.staggerTo=function(e,t,r,n,s,i,o){return r.duration=t,r.stagger=r.stagger||n,r.onComplete=i,r.onCompleteParams=o,r.parent=this,new cr(e,r,rt(this,s)),this},r.staggerFrom=function(e,t,r,n,s,i,o){return r.runBackwards=1,Re(r).immediateRender=W(r.immediateRender),this.staggerTo(e,t,r,n,s,i,o)},r.staggerFromTo=function(e,t,r,n,s,i,o,a){return n.startAt=r,Re(n).immediateRender=W(n.immediateRender),this.staggerTo(e,t,n,s,i,o,a)},r.render=function(e,t,r){var n,s,i,a,l,u,c,h,d,p,f,g,m=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,_=this!==o&&e>v-R&&e>=0?v:e<R?0:e,b=this._zTime<0!=e<0&&(this._initted||!y);if(_!==this._tTime||r||b){if(m!==this._time&&y&&(_+=this._time-m,e+=this._time-m),n=_,d=this._start,u=!(h=this._ts),b&&(y||(m=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(f=this._yoyo,l=y+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*l+e,t,r);if(n=Ce(_%l),_===v?(a=this._repeat,n=y):((a=~~(_/l))&&a===_/l&&(n=y,a--),n>y&&(n=y)),p=He(this._tTime,l),!m&&this._tTime&&p!==a&&(p=a),f&&1&a&&(n=y-n,g=1),a!==p&&!this._lock){var x=f&&1&p,D=x===(f&&1&a);if(a<p&&(x=!x),m=x?0:y,this._lock=1,this.render(m||(g?0:Ce(a*l)),t,!y)._lock=0,this._tTime=_,!t&&this.parent&&Tt(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),m&&m!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,D&&(this._lock=2,m=x?y:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Gt(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(c=function(e,t,r){var n;if(r>t)for(n=e._first;n&&n._start<=r;){if(!n._dur&&"isPause"===n.data&&n._start>t)return n;n=n._next}else for(n=e._last;n&&n._start>=r;){if(!n._dur&&"isPause"===n.data&&n._start<t)return n;n=n._prev}}(this,Ce(m),Ce(n)),c&&(_-=n-(n=c._start))),this._tTime=_,this._time=n,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,m=0),!m&&n&&!t&&(Tt(this,"onStart"),this._tTime!==_))return this;if(n>=m&&e>=0)for(s=this._first;s;){if(i=s._next,(s._act||n>=s._start)&&s._ts&&c!==s){if(s.parent!==this)return this.render(e,t,r);if(s.render(s._ts>0?(n-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(n-s._start)*s._ts,t,r),n!==this._time||!this._ts&&!u){c=0,i&&(_+=this._zTime=-1e-8);break}}s=i}else{s=this._last;for(var w=e<0?e:n;s;){if(i=s._prev,(s._act||w<=s._end)&&s._ts&&c!==s){if(s.parent!==this)return this.render(e,t,r);if(s.render(s._ts>0?(w-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(w-s._start)*s._ts,t,r),n!==this._time||!this._ts&&!u){c=0,i&&(_+=this._zTime=w?-1e-8:R);break}}s=i}}if(c&&!t&&(this.pause(),c.render(n>=m?0:-1e-8)._zTime=n>=m?1:-1,this._ts))return this._start=d,Xe(this),this.render(e,t,r);this._onUpdate&&!t&&Tt(this,"onUpdate",!0),(_===v&&v>=this.totalDuration()||!_&&m)&&(d!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((e||!y)&&(_===v&&this._ts>0||!_&&this._ts<0)&&Be(this,1),t||e<0&&!m||!_&&!m&&v||(Tt(this,_===v&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(_<v&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(X(t)||(t=rt(this,t,e)),!(e instanceof er)){if(Q(e))return e.forEach((function(e){return r.add(e,t)})),this;if(H(e))return this.addLabel(e,t);if(!V(e))return this;e=cr.delayedCall(0,e)}return this!==e?We(this,e,t):this},r.getChildren=function(e,t,r,n){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===n&&(n=-O);for(var s=[],i=this._first;i;)i._start>=n&&(i instanceof cr?t&&s.push(i):(r&&s.push(i),e&&s.push.apply(s,i.getChildren(!0,t,r)))),i=i._next;return s},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return H(e)?this.removeLabel(e):V(e)?this.killTweensOf(e):(qe(this,e),e===this._recent&&(this._recent=this._last),ze(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Ce(It.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=rt(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var n=cr.delayedCall(0,t||de,r);return n.data="isPause",this._hasPause=1,We(this,n,rt(this,e))},r.removePause=function(e){var t=this._first;for(e=rt(this,e);t;)t._start===e&&"isPause"===t.data&&Be(t),t=t._next},r.killTweensOf=function(e,t,r){for(var n=this.getTweensOf(e,r),s=n.length;s--;)rr!==n[s]&&n[s].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,n=[],s=ht(e),i=this._first,o=X(t);i;)i instanceof cr?Ae(i._targets,s)&&(o?(!rr||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&n.push(i):(r=i.getTweensOf(s,t)).length&&n.push.apply(n,r),i=i._next;return n},r.tweenTo=function(e,t){t=t||{};var r,n=this,s=rt(n,e),i=t,o=i.startAt,a=i.onStart,l=i.onStartParams,u=i.immediateRender,c=cr.to(n,Se({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:t.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale())||R,onStart:function(){if(n.pause(),!r){var e=t.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale());c._dur!==e&&Je(c,e,0,1).render(c._time,!0,!0),r=1}a&&a.apply(c,l||[])}},t));return u?c.render(0):c},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,Se({startAt:{time:rt(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),jt(this,rt(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),jt(this,rt(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+R)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var n,s=this._first,i=this.labels;s;)s._start>=r&&(s._start+=e,s._end+=e),s=s._next;if(t)for(n in i)i[n]>=r&&(i[n]+=e);return ze(this)},r.invalidate=function(){var t=this._first;for(this._lock=0;t;)t.invalidate(),t=t._next;return e.prototype.invalidate.call(this)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),ze(this)},r.totalDuration=function(e){var t,r,n,s=0,i=this,a=i._last,l=O;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(n=i.parent;a;)t=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>l&&i._sort&&a._ts&&!i._lock?(i._lock=1,We(i,a,r-a._delay,1)._lock=0):l=r,r<0&&a._ts&&(s-=r,(!n&&!i._dp||n&&n.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),l=0),a._end>s&&a._ts&&(s=a._end),a=t;Je(i,i===o&&i._time>s?i._time:s,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(o._ts&&(Te(o,Ve(e,o)),h=It.frame),It.frame>=ye){ye+=k.autoSleep||120;var t=o._first;if((!t||!t._ts)&&k.autoSleep&&It._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||It.sleep()}}},t}(er);Se(tr.prototype,{_lock:0,_hasPause:0,_forcing:0});var rr,nr=function(e,t,r,n,s,i,o){var a,l,u,c,h,d,p,f,g=new Er(this._pt,e,t,0,1,yr,null,s),m=0,v=0;for(g.b=r,g.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=Et(n)),i&&(i(f=[r,n],e,t),r=f[0],n=f[1]),l=r.match(re)||[];a=re.exec(n);)c=a[0],h=n.substring(m,a.index),u?u=(u+1)%5:"rgba("===h.substr(-5)&&(u=1),c!==l[v++]&&(d=parseFloat(l[v-1])||0,g._pt={_next:g._pt,p:h||1===v?h:",",s:d,c:"="===c.charAt(1)?parseFloat(c.substr(2))*("-"===c.charAt(0)?-1:1):parseFloat(c)-d,m:u&&u<4?Math.round:0},m=re.lastIndex);return g.c=m<n.length?n.substring(m,n.length):"",g.fp=o,(ne.test(n)||p)&&(g.e=0),this._pt=g,g},sr=function(e,t,r,n,s,i,o,a,l){V(n)&&(n=n(s||0,e,i));var u,c=e[t],h="get"!==r?r:V(c)?l?e[t.indexOf("set")||!V(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():c,d=V(c)?l?pr:dr:hr;if(H(n)&&(~n.indexOf("random(")&&(n=Et(n)),"="===n.charAt(1)&&((u=parseFloat(h)+parseFloat(n.substr(2))*("-"===n.charAt(0)?-1:1)+(ot(h)||0))||0===u)&&(n=u)),h!==n)return isNaN(h*n)||""===n?(!c&&!(t in e)&&ue(t,n),nr.call(this,e,t,h,n,d,a||k.stringFilter,l)):(u=new Er(this._pt,e,t,+h||0,n-(h||0),"boolean"==typeof c?vr:mr,0,d),l&&(u.fp=l),o&&u.modifier(o,this,e),this._pt=u)},ir=function(e,t,r,n,s,i){var o,a,l,u;if(me[e]&&!1!==(o=new me[e]).init(s,o.rawVars?t[e]:function(e,t,r,n,s){if(V(e)&&(e=ar(e,s,t,r,n)),!G(e)||e.style&&e.nodeType||Q(e)||$(e))return H(e)?ar(e,s,t,r,n):e;var i,o={};for(i in e)o[i]=ar(e[i],s,t,r,n);return o}(t[e],n,s,i,r),r,n,i)&&(r._pt=a=new Er(r._pt,s,e,0,1,o.render,o,0,o.priority),r!==d))for(l=r._ptLookup[r._targets.indexOf(s)],u=o._props.length;u--;)l[o._props[u]]=a;return o},or=function e(t,r){var n,s,a,l,u,c,h,d,p,f,g,m,v,y=t.vars,_=y.ease,b=y.startAt,x=y.immediateRender,D=y.lazy,w=y.onUpdate,E=y.onUpdateParams,C=y.callbackScope,A=y.runBackwards,j=y.yoyoEase,T=y.keyframes,M=y.autoRevert,F=t._dur,S=t._startAt,P=t._targets,k=t.parent,O=k&&"nested"===k.data?k.parent._targets:P,q="auto"===t._overwrite&&!i,B=t.timeline;if(B&&(!T||!_)&&(_="none"),t._ease=Wt(_,L.ease),t._yEase=j?Yt(Wt(!0===j?_:j,L.ease)):0,j&&t._yoyo&&!t._repeat&&(j=t._yEase,t._yEase=t._ease,t._ease=j),t._from=!B&&!!y.runBackwards,!B){if(m=(d=P[0]?De(P[0]).harness:0)&&y[d.prop],n=Oe(y,pe),S&&S.render(-1,!0).kill(),b)if(Be(t._startAt=cr.set(P,Se({data:"isStart",overwrite:!1,parent:k,immediateRender:!0,lazy:W(D),startAt:null,delay:0,onUpdate:w,onUpdateParams:E,callbackScope:C,stagger:0},b))),r<0&&!x&&!M&&t._startAt.render(-1,!0),x){if(r>0&&!M&&(t._startAt=0),F&&r<=0)return void(r&&(t._zTime=r))}else!1===M&&(t._startAt=0);else if(A&&F)if(S)!M&&(t._startAt=0);else if(r&&(x=!1),a=Se({overwrite:!1,data:"isFromStart",lazy:x&&W(D),immediateRender:x,stagger:0,parent:k},n),m&&(a[d.prop]=m),Be(t._startAt=cr.set(P,a)),r<0&&t._startAt.render(-1,!0),x){if(!r)return}else e(t._startAt,R);for(t._pt=0,D=F&&W(D)||D&&!F,s=0;s<P.length;s++){if(h=(u=P[s])._gsap||xe(P)[s]._gsap,t._ptLookup[s]=f={},ge[h.id]&&fe.length&&je(),g=O===P?s:O.indexOf(u),d&&!1!==(p=new d).init(u,m||n,t,g,O)&&(t._pt=l=new Er(t._pt,u,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(e){f[e]=l})),p.priority&&(c=1)),!d||m)for(a in n)me[a]&&(p=ir(a,n,t,g,u,O))?p.priority&&(c=1):f[a]=l=sr.call(t,u,a,"get",n[a],g,O,0,y.stringFilter);t._op&&t._op[s]&&t.kill(u,t._op[s]),q&&t._pt&&(rr=t,o.killTweensOf(u,f,t.globalTime(0)),v=!t.parent,rr=0),t._pt&&D&&(ge[h.id]=1)}c&&wr(t),t._onInit&&t._onInit(t)}t._onUpdate=w,t._initted=(!t._op||t._pt)&&!v},ar=function(e,t,r,n,s){return V(e)?e.call(t,r,n,s):H(e)&&~e.indexOf("random(")?Et(e):e},lr=be+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",ur=(lr+",id,stagger,delay,duration,paused,scrollTrigger").split(","),cr=function(e){function t(t,r,s,a){var l;"number"==typeof r&&(s.duration=r,r=s,s=null);var u,c,h,d,p,f,g,m,v=(l=e.call(this,a?r:Re(r))||this).vars,y=v.duration,_=v.delay,b=v.immediateRender,x=v.stagger,D=v.overwrite,w=v.keyframes,E=v.defaults,C=v.scrollTrigger,A=v.yoyoEase,j=r.parent||o,T=(Q(t)||$(t)?X(t[0]):"length"in r)?[t]:ht(t);if(l._targets=T.length?xe(T):ce("GSAP target "+t+" not found. https://greensock.com",!k.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=D,w||x||Z(y)||Z(_)){if(r=l.vars,(u=l.timeline=new tr({data:"nested",defaults:E||{}})).kill(),u.parent=u._dp=n(l),u._start=0,w)Se(u.vars.defaults,{ease:"none"}),x?T.forEach((function(e,t){return w.forEach((function(r,n){return u.to(e,r,n?">":t*x)}))})):w.forEach((function(e){return u.to(T,e,">")}));else{if(d=T.length,g=x?ft(x):de,G(x))for(p in x)~lr.indexOf(p)&&(m||(m={}),m[p]=x[p]);for(c=0;c<d;c++){for(p in h={},r)ur.indexOf(p)<0&&(h[p]=r[p]);h.stagger=0,A&&(h.yoyoEase=A),m&&ke(h,m),f=T[c],h.duration=+ar(y,n(l),c,f,T),h.delay=(+ar(_,n(l),c,f,T)||0)-l._delay,!x&&1===d&&h.delay&&(l._delay=_=h.delay,l._start+=_,h.delay=0),u.to(f,h,g(c,f,T))}u.duration()?y=_=0:l.timeline=0}y||l.duration(y=u.duration())}else l.timeline=0;return!0!==D||i||(rr=n(l),o.killTweensOf(T),rr=0),We(j,n(l),s),r.reversed&&l.reverse(),r.paused&&l.paused(!0),(b||!y&&!w&&l._start===Ce(j._time)&&W(b)&&Ne(n(l))&&"nested"!==j.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-_))),C&&Ke(n(l),C),l}s(t,e);var r=t.prototype;return r.render=function(e,t,r){var n,s,i,o,a,l,u,c,h,d=this._time,p=this._tDur,f=this._dur,g=e>p-R&&e>=0?p:e<R?0:e;if(f){if(g!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=e<0){if(n=g,c=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*o+e,t,r);if(n=Ce(g%o),g===p?(i=this._repeat,n=f):((i=~~(g/o))&&i===g/o&&(n=f,i--),n>f&&(n=f)),(l=this._yoyo&&1&i)&&(h=this._yEase,n=f-n),a=He(this._tTime,o),n===d&&!r&&this._initted)return this;i!==a&&(c&&this._yEase&&Gt(c,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=r=1,this.render(Ce(o*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ze(this,e<0?e:n,r,t))return this._tTime=0,this;if(f!==this._dur)return this.render(e,t,r)}if(this._tTime=g,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(h||this._ease)(n/f),this._from&&(this.ratio=u=1-u),n&&!d&&!t&&(Tt(this,"onStart"),this._tTime!==g))return this;for(s=this._pt;s;)s.r(u,s.d),s=s._next;c&&c.render(e<0?e:!n&&l?-1e-8:c._dur*u,t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(e<0&&this._startAt&&this._startAt.render(e,!0,r),Tt(this,"onUpdate")),this._repeat&&i!==a&&this.vars.onRepeat&&!t&&this.parent&&Tt(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(e<0&&this._startAt&&!this._onUpdate&&this._startAt.render(e,!0,!0),(e||!f)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&Be(this,1),t||e<0&&!d||!g&&!d||(Tt(this,g===p?"onComplete":"onReverseComplete",!0),this._prom&&!(g<p&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,n){var s,i,o,a=e.ratio,l=t<0||!t&&(!e._start&&$e(e)&&(e._initted||!Qe(e))||(e._ts<0||e._dp._ts<0)&&!Qe(e))?0:1,u=e._rDelay,c=0;if(u&&e._repeat&&(c=it(0,e._tDur,t),i=He(c,u),o=He(e._tTime,u),e._yoyo&&1&i&&(l=1-l),i!==o&&(a=1-l,e.vars.repeatRefresh&&e._initted&&e.invalidate())),l!==a||n||e._zTime===R||!t&&e._zTime){if(!e._initted&&Ze(e,t,n,r))return;for(o=e._zTime,e._zTime=t||(r?R:0),r||(r=t&&!o),e.ratio=l,e._from&&(l=1-l),e._time=0,e._tTime=c,s=e._pt;s;)s.r(l,s.d),s=s._next;e._startAt&&t<0&&e._startAt.render(t,!0,!0),e._onUpdate&&!r&&Tt(e,"onUpdate"),c&&e._repeat&&!r&&e.parent&&Tt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===l&&(l&&Be(e,1),r||(Tt(e,l?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),e.prototype.invalidate.call(this)},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?Mt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,rr&&!0!==rr.vars.overwrite)._first||Mt(this),this.parent&&r!==this.timeline.totalDuration()&&Je(this,this._dur*this.timeline._tDur/r,0,1),this}var n,s,i,o,a,l,u,c=this._targets,h=e?ht(e):c,d=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,n=r===t.length;n&&r--&&e[r]===t[r];);return r<0}(c,h))return"all"===t&&(this._pt=0),Mt(this);for(n=this._op=this._op||[],"all"!==t&&(H(t)&&(a={},Ee(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var r,n,s,i,o=e[0]?De(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(n in r=ke({},t),a)if(n in r)for(s=(i=a[n].split(",")).length;s--;)r[i[s]]=r[n];return r}(c,t)),u=c.length;u--;)if(~h.indexOf(c[u]))for(a in s=d[u],"all"===t?(n[u]=t,o=s,i={}):(i=n[u]=n[u]||{},o=t),o)(l=s&&s[a])&&("kill"in l.d&&!0!==l.d.kill(a)||qe(this,l,"_pt"),delete s[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&p&&Mt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,t){return nt(1,arguments)},t.delayedCall=function(e,r,n,s){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:s})},t.fromTo=function(e,t,r){return nt(2,arguments)},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return o.killTweensOf(e,t,r)},t}(er);Se(cr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Ee("staggerTo,staggerFrom,staggerFromTo",(function(e){cr[e]=function(){var t=new tr,r=lt.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var hr=function(e,t,r){return e[t]=r},dr=function(e,t,r){return e[t](r)},pr=function(e,t,r,n){return e[t](n.fp,r)},fr=function(e,t,r){return e.setAttribute(t,r)},gr=function(e,t){return V(e[t])?dr:Y(e[t])&&e.setAttribute?fr:hr},mr=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},vr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},yr=function(e,t){var r=t._pt,n="";if(!e&&t.b)n=t.b;else if(1===e&&t.e)n=t.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+n,r=r._next;n+=t.c}t.set(t.t,t.p,n,t)},_r=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},br=function(e,t,r,n){for(var s,i=this._pt;i;)s=i._next,i.p===n&&i.modifier(e,t,r),i=s},xr=function(e){for(var t,r,n=this._pt;n;)r=n._next,n.p===e&&!n.op||n.op===e?qe(this,n,"_pt"):n.dep||(t=1),n=r;return!t},Dr=function(e,t,r,n){n.mSet(e,t,n.m.call(n.tween,r,n.mt),n)},wr=function(e){for(var t,r,n,s,i=e._pt;i;){for(t=i._next,r=n;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:s)?i._prev._next=i:n=i,(i._next=r)?r._prev=i:s=i,i=t}e._pt=n},Er=function(){function e(e,t,r,n,s,i,o,a,l){this.t=t,this.s=n,this.c=s,this.p=r,this.r=i||mr,this.d=o||this,this.set=a||hr,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=Dr,this.m=e,this.mt=r,this.tween=t},e}();Ee(be+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return pe[e]=1})),oe.TweenMax=oe.TweenLite=cr,oe.TimelineLite=oe.TimelineMax=tr,o=new tr({sortChildren:!1,defaults:L,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),k.stringFilter=zt;var Cr={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return Ft(e)}))},timeline:function(e){return new tr(e)},getTweensOf:function(e,t){return o.getTweensOf(e,t)},getProperty:function(e,t,r,n){H(e)&&(e=ht(e)[0]);var s=De(e||{}).get,i=r?Fe:Me;return"native"===r&&(r=""),e?t?i((me[t]&&me[t].get||s)(e,t,r,n)):function(t,r,n){return i((me[t]&&me[t].get||s)(e,t,r,n))}:e},quickSetter:function(e,t,r){if((e=ht(e)).length>1){var n=e.map((function(e){return Tr.quickSetter(e,t,r)})),s=n.length;return function(e){for(var t=s;t--;)n[t](e)}}e=e[0]||{};var i=me[t],o=De(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=i?function(t){var n=new i;d._pt=0,n.init(e,r?t+r:t,d,0,[e]),n.render(1,n),d._pt&&_r(1,d)}:o.set(e,a);return i?l:function(t){return l(e,a,r?t+r:t,o,1)}},isTweening:function(e){return o.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Wt(e.ease,L.ease)),Le(L,e||{})},config:function(e){return Le(k,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,n=e.plugins,s=e.defaults,i=e.extendTimeline;(n||"").split(",").forEach((function(e){return e&&!me[e]&&!oe[e]&&ce(t+" effect requires "+e+" plugin.")})),ve[t]=function(e,t,n){return r(ht(e),Se(t||{},s),n)},i&&(tr.prototype[t]=function(e,r,n){return this.add(ve[t](e,G(r)?r:(n=r)&&{},this),n)})},registerEase:function(e,t){Ut[e]=Wt(t)},parseEase:function(e,t){return arguments.length?Wt(e,t):Ut},getById:function(e){return o.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,n,s=new tr(e);for(s.smoothChildTiming=W(e.smoothChildTiming),o.remove(s),s._dp=0,s._time=s._tTime=o._time,r=o._first;r;)n=r._next,!t&&!r._dur&&r instanceof cr&&r.vars.onComplete===r._targets[0]||We(s,r,r._start-r._delay),r=n;return We(o,s,0),s},utils:{wrap:Dt,wrapYoyo:wt,distribute:ft,random:vt,snap:mt,normalize:bt,getUnit:ot,clamp:at,splitColor:Lt,toArray:ht,selector:dt,mapRange:Ct,pipe:yt,unitize:_t,interpolate:At,shuffle:pt},install:le,effects:ve,ticker:It,updateRoot:tr.updateRoot,plugins:me,globalTimeline:o,core:{PropTween:Er,globals:he,Tween:cr,Timeline:tr,Animation:er,getCache:De,_removeLinkedListItem:qe,suppressOverwrites:function(e){return i=e}}};Ee("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Cr[e]=cr[e]})),It.add(tr.updateRoot),d=Cr.to({},{duration:0});var Ar=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},jr=function(e,t){return{name:e,rawVars:1,init:function(e,r,n){n._onInit=function(e){var n,s;if(H(r)&&(n={},Ee(r,(function(e){return n[e]=1})),r=n),t){for(s in n={},r)n[s]=t(r[s]);r=n}!function(e,t){var r,n,s,i=e._targets;for(r in t)for(n=i.length;n--;)(s=e._ptLookup[n][r])&&(s=s.d)&&(s._pt&&(s=Ar(s,r)),s&&s.modifier&&s.modifier(t[r],e,i[n],r))}(e,r)}}}},Tr=Cr.registerPlugin({name:"attr",init:function(e,t,r,n,s){var i,o;for(i in t)(o=this.add(e,"setAttribute",(e.getAttribute(i)||0)+"",t[i],n,s,0,0,i))&&(o.op=i),this._props.push(i)}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r])}},jr("roundProps",gt),jr("modifiers"),jr("snap",mt))||Cr;cr.version=tr.version=Tr.version="3.7.1",c=1,K()&&Nt();var Mr=Ut.Power0,Fr=Ut.Power1,Sr=Ut.Power2,Pr=Ut.Power3,kr=Ut.Power4,Lr=Ut.Linear,Or=Ut.Quad,Rr=Ut.Cubic,qr=Ut.Quart,Br=Ut.Quint,zr=Ut.Strong,Ir=Ut.Elastic,Nr=Ut.Back,Ur=Ut.SteppedEase,Hr=Ut.Bounce,Vr=Ut.Sine,Xr=Ut.Expo,Yr=Ut.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{gsap:()=>i,default:()=>i,CSSPlugin:()=>s.CSSPlugin,TweenMax:()=>o,TweenLite:()=>n.TweenLite,TimelineMax:()=>n.TimelineMax,TimelineLite:()=>n.TimelineLite,Power0:()=>n.Power0,Power1:()=>n.Power1,Power2:()=>n.Power2,Power3:()=>n.Power3,Power4:()=>n.Power4,Linear:()=>n.Linear,Quad:()=>n.Quad,Cubic:()=>n.Cubic,Quart:()=>n.Quart,Quint:()=>n.Quint,Strong:()=>n.Strong,Elastic:()=>n.Elastic,Back:()=>n.Back,SteppedEase:()=>n.SteppedEase,Bounce:()=>n.Bounce,Sine:()=>n.Sine,Expo:()=>n.Expo,Circ:()=>n.Circ});var n=r("./node_modules/gsap/gsap-core.js"),s=r("./node_modules/gsap/CSSPlugin.js"),i=n.gsap.registerPlugin(s.CSSPlugin)||n.gsap,o=i.core.Tween},"./node_modules/gsap/utils/matrix.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Matrix2D:()=>C,getGlobalMatrix:()=>A,_getDocScrollTop:()=>v,_getDocScrollLeft:()=>y,_setDoc:()=>f,_isFixed:()=>b,_getCTM:()=>D});var n,s,i,o,a,l,u,c,h,d="transform",p=d+"Origin",f=function(e){var t=e.ownerDocument||e;!(d in e.style)&&"msTransform"in e.style&&(p=(d="msTransform")+"Origin");for(;t.parentNode&&(t=t.parentNode););if(s=window,u=new C,t){n=t,i=t.documentElement,o=t.body,(c=n.createElementNS("http://www.w3.org/2000/svg","g")).style.transform="none";var r=t.createElement("div"),a=t.createElement("div");o.appendChild(r),r.appendChild(a),r.style.position="static",r.style[d]="translate3d(0,0,1px)",h=a.offsetParent!==r,o.removeChild(r)}return t},g=[],m=[],v=function(){return s.pageYOffset||n.scrollTop||i.scrollTop||o.scrollTop||0},y=function(){return s.pageXOffset||n.scrollLeft||i.scrollLeft||o.scrollLeft||0},_=function(e){return e.ownerSVGElement||("svg"===(e.tagName+"").toLowerCase()?e:null)},b=function e(t){return"fixed"===s.getComputedStyle(t).position||((t=t.parentNode)&&1===t.nodeType?e(t):void 0)},x=function e(t,r){if(t.parentNode&&(n||f(t))){var s=_(t),i=s?s.getAttribute("xmlns")||"http://www.w3.org/2000/svg":"http://www.w3.org/1999/xhtml",o=s?r?"rect":"g":"div",u=2!==r?0:100,c=3===r?100:0,h="position:absolute;display:block;pointer-events:none;margin:0;padding:0;",d=n.createElementNS?n.createElementNS(i.replace(/^https/,"http"),o):n.createElement(o);return r&&(s?(l||(l=e(t)),d.setAttribute("width",.01),d.setAttribute("height",.01),d.setAttribute("transform","translate("+u+","+c+")"),l.appendChild(d)):(a||((a=e(t)).style.cssText=h),d.style.cssText=h+"width:0.1px;height:0.1px;top:"+c+"px;left:"+u+"px",a.appendChild(d))),d}throw"Need document and parent."},D=function(e){var t,r=e.getCTM();return r||(t=e.style[d],e.style[d]="none",e.appendChild(c),r=c.getCTM(),e.removeChild(c),t?e.style[d]=t:e.style.removeProperty(d.replace(/([A-Z])/g,"-$1").toLowerCase())),r},w=function(e,t){var r,n,i,o,c,f,v=_(e),y=e===v,b=v?g:m,w=e.parentNode;if(e===s)return e;if(b.length||b.push(x(e,1),x(e,2),x(e,3)),r=v?l:a,v)y?(o=-(i=D(e)).e/i.a,c=-i.f/i.d,n=u):(i=e.getBBox(),o=(n=(n=e.transform?e.transform.baseVal:{}).numberOfItems?n.numberOfItems>1?function(e){for(var t=new C,r=0;r<e.numberOfItems;r++)t.multiply(e.getItem(r).matrix);return t}(n):n.getItem(0).matrix:u).a*i.x+n.c*i.y,c=n.b*i.x+n.d*i.y),t&&"g"===e.tagName.toLowerCase()&&(o=c=0),(y?v:w).appendChild(r),r.setAttribute("transform","matrix("+n.a+","+n.b+","+n.c+","+n.d+","+(n.e+o)+","+(n.f+c)+")");else{if(o=c=0,h)for(n=e.offsetParent,i=e;i&&(i=i.parentNode)&&i!==n&&i.parentNode;)(s.getComputedStyle(i)[d]+"").length>4&&(o=i.offsetLeft,c=i.offsetTop,i=0);if("absolute"!==(f=s.getComputedStyle(e)).position&&"fixed"!==f.position)for(n=e.offsetParent;w&&w!==n;)o+=w.scrollLeft||0,c+=w.scrollTop||0,w=w.parentNode;(i=r.style).top=e.offsetTop-c+"px",i.left=e.offsetLeft-o+"px",i[d]=f[d],i[p]=f[p],i.position="fixed"===f.position?"fixed":"absolute",e.parentNode.appendChild(r)}return r},E=function(e,t,r,n,s,i,o){return e.a=t,e.b=r,e.c=n,e.d=s,e.e=i,e.f=o,e},C=function(){function e(e,t,r,n,s,i){void 0===e&&(e=1),void 0===t&&(t=0),void 0===r&&(r=0),void 0===n&&(n=1),void 0===s&&(s=0),void 0===i&&(i=0),E(this,e,t,r,n,s,i)}var t=e.prototype;return t.inverse=function(){var e=this.a,t=this.b,r=this.c,n=this.d,s=this.e,i=this.f,o=e*n-t*r||1e-10;return E(this,n/o,-t/o,-r/o,e/o,(r*i-n*s)/o,-(e*i-t*s)/o)},t.multiply=function(e){var t=this.a,r=this.b,n=this.c,s=this.d,i=this.e,o=this.f,a=e.a,l=e.c,u=e.b,c=e.d,h=e.e,d=e.f;return E(this,a*t+u*n,a*r+u*s,l*t+c*n,l*r+c*s,i+h*t+d*n,o+h*r+d*s)},t.clone=function(){return new e(this.a,this.b,this.c,this.d,this.e,this.f)},t.equals=function(e){var t=this.a,r=this.b,n=this.c,s=this.d,i=this.e,o=this.f;return t===e.a&&r===e.b&&n===e.c&&s===e.d&&i===e.e&&o===e.f},t.apply=function(e,t){void 0===t&&(t={});var r=e.x,n=e.y,s=this.a,i=this.b,o=this.c,a=this.d,l=this.e,u=this.f;return t.x=r*s+n*o+l||0,t.y=r*i+n*a+u||0,t},e}();function A(e,t,r,s){if(!e||!e.parentNode||(n||f(e)).documentElement===e)return new C;var i=function(e){for(var t,r;e&&e!==o;)(r=e._gsap)&&r.uncache&&r.get(e,"x"),r&&!r.scaleX&&!r.scaleY&&r.renderTransform&&(r.scaleX=r.scaleY=1e-4,r.renderTransform(1,r),t?t.push(r):t=[r]),e=e.parentNode;return t}(e),a=_(e)?g:m,l=w(e,r),u=a[0].getBoundingClientRect(),c=a[1].getBoundingClientRect(),h=a[2].getBoundingClientRect(),d=l.parentNode,p=!s&&b(e),x=new C((c.left-u.left)/100,(c.top-u.top)/100,(h.left-u.left)/100,(h.top-u.top)/100,u.left+(p?0:y()),u.top+(p?0:v()));if(d.removeChild(l),i)for(u=i.length;u--;)(c=i[u]).scaleX=c.scaleY=0,c.renderTransform(1,c);return t?x.inverse():x}},"./node_modules/gsap/utils/paths.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{getRawPath:()=>T,copyRawPath:()=>M,reverseSegment:()=>F,convertToPath:()=>P,getRotationAtProgress:()=>k,sliceRawPath:()=>O,cacheRawPathMeasurements:()=>q,subdivideSegment:()=>B,getPositionOnPath:()=>I,transformRawPath:()=>N,stringToRawPath:()=>H,bezierToPoints:()=>V,flatPointsToSegment:()=>X,pointsToSegment:()=>Y,simplifyPoints:()=>W,getClosestData:()=>Z,subdivideSegmentNear:()=>$,rawPathToString:()=>Q});var n,s=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,i=/(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,o=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,a=/(^[#\.][a-z]|[a-y][a-z])/i,l=Math.PI/180,u=180/Math.PI,c=Math.sin,h=Math.cos,d=Math.abs,p=Math.sqrt,f=Math.atan2,g=1e8,m=function(e){return"string"==typeof e},v=function(e){return"number"==typeof e},y={},_={},b=1e5,x=function(e){return Math.round((e+g)%1*b)/b||(e<0?0:1)},D=function(e){return Math.round(e*b)/b||0},w=function(e){return Math.round(1e10*e)/1e10||0},E=function(e,t,r,n){var s=e[t],i=1===n?6:B(s,r,n);if(i&&i+r+2<s.length)return e.splice(t,0,s.slice(0,r+i+2)),s.splice(0,r+i),1},C=function(e,t,r){var n=e.length,s=~~(r*n);if(e[s]>t)for(;--s&&e[s]>t;);else for(;e[++s]<t&&s<n;);return s},A=function(e,t){return t.totalLength=e.totalLength,e.samples?(t.samples=e.samples.slice(0),t.lookup=e.lookup.slice(0),t.minLength=e.minLength,t.resolution=e.resolution):e.totalPoints&&(t.totalPoints=e.totalPoints),t},j=function(e,t){var r=e.length,n=e[r-1]||[],s=n.length;r&&t[0]===n[s-2]&&t[1]===n[s-1]&&(t=n.concat(t.slice(2)),r--),e[r]=t};function T(e){var t,r=(e=m(e)&&a.test(e)&&document.querySelector(e)||e).getAttribute?e:0;return r&&(e=e.getAttribute("d"))?(r._gsPath||(r._gsPath={}),(t=r._gsPath[e])&&!t._dirty?t:r._gsPath[e]=H(e)):e?m(e)?H(e):v(e[0])?[e]:e:console.warn("Expecting a <path> element or an SVG path data string")}function M(e){for(var t=[],r=0;r<e.length;r++)t[r]=A(e[r],e[r].slice(0));return A(e,t)}function F(e){var t,r=0;for(e.reverse();r<e.length;r+=2)t=e[r],e[r]=e[r+1],e[r+1]=t;e.reversed=!e.reversed}var S={rect:"rx,ry,x,y,width,height",circle:"r,cx,cy",ellipse:"rx,ry,cx,cy",line:"x1,x2,y1,y2"};function P(e,t){var r,n,s,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C=e.tagName.toLowerCase(),A=.552284749831;return"path"!==C&&e.getBBox?(l=function(e,t){var r,n=document.createElementNS("http://www.w3.org/2000/svg","path"),s=[].slice.call(e.attributes),i=s.length;for(t=","+t+",";--i>-1;)r=s[i].nodeName.toLowerCase(),t.indexOf(","+r+",")<0&&n.setAttributeNS(null,r,s[i].nodeValue);return n}(e,"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"),E=function(e,t){for(var r=t?t.split(","):[],n={},s=r.length;--s>-1;)n[r[s]]=+e.getAttribute(r[s])||0;return n}(e,S[C]),"rect"===C?(o=E.rx,a=E.ry||o,n=E.x,s=E.y,d=E.width-2*o,p=E.height-2*a,r=o||a?"M"+(y=(m=(g=n+o)+d)+o)+","+(b=s+a)+" V"+(x=b+p)+" C"+[y,D=x+a*A,v=m+o*A,w=x+a,m,w,m-(m-g)/3,w,g+(m-g)/3,w,g,w,f=n+o*(1-A),w,n,D,n,x,n,x-(x-b)/3,n,b+(x-b)/3,n,b,n,_=s+a*(1-A),f,s,g,s,g+(m-g)/3,s,m-(m-g)/3,s,m,s,v,s,y,_,y,b].join(",")+"z":"M"+(n+d)+","+s+" v"+p+" h"+-d+" v"+-p+" h"+d+"z"):"circle"===C||"ellipse"===C?("circle"===C?c=(o=a=E.r)*A:(o=E.rx,c=(a=E.ry)*A),r="M"+((n=E.cx)+o)+","+(s=E.cy)+" C"+[n+o,s+c,n+(u=o*A),s+a,n,s+a,n-u,s+a,n-o,s+c,n-o,s,n-o,s-c,n-u,s-a,n,s-a,n+u,s-a,n+o,s-c,n+o,s].join(",")+"z"):"line"===C?r="M"+E.x1+","+E.y1+" L"+E.x2+","+E.y2:"polyline"!==C&&"polygon"!==C||(r="M"+(n=(h=(e.getAttribute("points")+"").match(i)||[]).shift())+","+(s=h.shift())+" L"+h.join(","),"polygon"===C&&(r+=","+n+","+s+"z")),l.setAttribute("d",Q(l._gsRawPath=H(r))),t&&e.parentNode&&(e.parentNode.insertBefore(l,e),e.parentNode.removeChild(e)),l):e}function k(e,t){var r=z(e,t>=1?1-1e-9:t||1e-9);return L(r.segment,r.i,r.t)}function L(e,t,r){var n,s=e[t],i=e[t+2],o=e[t+4];return s+=(i-s)*r,s+=((i+=(o-i)*r)-s)*r,n=i+(o+(e[t+6]-o)*r-i)*r-s,s=e[t+1],s+=((i=e[t+3])-s)*r,s+=((i+=((o=e[t+5])-i)*r)-s)*r,D(f(i+(o+(e[t+7]-o)*r-i)*r-s,n)*u)}function O(e,t,r){r=void 0===r?1:w(r)||0,t=w(t)||0;var n=Math.max(0,~~(d(r-t)-1e-8)),s=M(e);if(t>r&&(t=1-t,r=1-r,function(e,t){var r=e.length;for(t||e.reverse();r--;)e[r].reversed||F(e[r])}(s),s.totalLength=0),t<0||r<0){var i=Math.abs(~~Math.min(t,r))+1;t+=i,r+=i}s.totalLength||q(s);var o,a,l,u,c,h,p,f,g=r>1,m=z(s,t,y,!0),v=z(s,r,_),b=v.segment,x=m.segment,D=v.segIndex,C=m.segIndex,A=v.i,T=m.i,S=C===D,P=A===T&&S;if(g||n){for(o=D<C||S&&A<T||P&&v.t<m.t,E(s,C,T,m.t)&&(C++,o||(D++,P?(v.t=(v.t-m.t)/(1-m.t),A=0):S&&(A-=T))),1-(r-t)<1e-5?D=C-1:!v.t&&D?D--:E(s,D,A,v.t)&&o&&C++,1===m.t&&(C=(C+1)%s.length),c=[],p=1+(h=s.length)*n,f=C,p+=(h-C+D)%h,u=0;u<p;u++)j(c,s[f++%h]);s=c}else if(l=1===v.t?6:B(b,A,v.t),t!==r)for(a=B(x,T,P?m.t/v.t:m.t),S&&(l+=a),b.splice(A+l+2),(a||T)&&x.splice(0,T+a),u=s.length;u--;)(u<C||u>D)&&s.splice(u,1);else b.angle=L(b,A+l,0),m=b[A+=l],v=b[A+1],b.length=b.totalLength=0,b.totalPoints=s.totalPoints=8,b.push(m,v,m,v,m,v,m,v);return s.totalLength=0,s}function R(e,t,r){t=t||0,e.samples||(e.samples=[],e.lookup=[]);var n,s,i,o,a,l,u,c,h,f,m,v,y,_,b,x,D,w=~~e.resolution||12,E=1/w,C=r?t+6*r+1:e.length,A=e[t],j=e[t+1],T=t?t/6*w:0,M=e.samples,F=e.lookup,S=(t?e.minLength:g)||g,P=M[T+r*w-1],k=t?M[T-1]:0;for(M.length=F.length=0,s=t+2;s<C;s+=6){if(i=e[s+4]-A,o=e[s+2]-A,a=e[s]-A,c=e[s+5]-j,h=e[s+3]-j,f=e[s+1]-j,l=u=m=v=0,d(i)<.01&&d(c)<.01&&d(a)+d(f)<.01)e.length>8&&(e.splice(s,6),s-=6,C-=6);else for(n=1;n<=w;n++)l=u-(u=((_=E*n)*_*i+3*(y=1-_)*(_*o+y*a))*_),m=v-(v=(_*_*c+3*y*(_*h+y*f))*_),(x=p(m*m+l*l))<S&&(S=x),k+=x,M[T++]=k;A+=i,j+=c}if(P)for(P-=k;T<M.length;T++)M[T]+=P;if(M.length&&S){if(e.totalLength=D=M[M.length-1]||0,e.minLength=S,D/S<9999)for(x=b=0,n=0;n<D;n+=S)F[x++]=M[b]<n?++b:b}else e.totalLength=M[0]=0;return t?k-M[t/2-1]:k}function q(e,t){var r,n,s;for(s=r=n=0;s<e.length;s++)e[s].resolution=~~t||12,n+=e[s].length,r+=R(e[s]);return e.totalPoints=n,e.totalLength=r,e}function B(e,t,r){if(r<=0||r>=1)return 0;var n=e[t],s=e[t+1],i=e[t+2],o=e[t+3],a=e[t+4],l=e[t+5],u=n+(i-n)*r,c=i+(a-i)*r,h=s+(o-s)*r,d=o+(l-o)*r,p=u+(c-u)*r,f=h+(d-h)*r,g=a+(e[t+6]-a)*r,m=l+(e[t+7]-l)*r;return c+=(g-c)*r,d+=(m-d)*r,e.splice(t+2,4,D(u),D(h),D(p),D(f),D(p+(c-p)*r),D(f+(d-f)*r),D(c),D(d),D(g),D(m)),e.samples&&e.samples.splice(t/6*e.resolution|0,0,0,0,0,0,0,0),6}function z(e,t,r,n){r=r||{},e.totalLength||q(e),(t<0||t>1)&&(t=x(t));var s,i,o,a,l,u,c,h=0,d=e[0];if(t)if(1===t)c=1,u=(d=e[h=e.length-1]).length-8;else{if(e.length>1){for(o=e.totalLength*t,l=u=0;(l+=e[u++].totalLength)<o;)h=u;t=(o-(a=l-(d=e[h]).totalLength))/(l-a)||0}s=d.samples,i=d.resolution,o=d.totalLength*t,a=(u=d.lookup.length?d.lookup[~~(o/d.minLength)]||0:C(s,o,t))?s[u-1]:0,(l=s[u])<o&&(a=l,l=s[++u]),c=1/i*((o-a)/(l-a)+u%i),u=6*~~(u/i),n&&1===c&&(u+6<d.length?(u+=6,c=0):h+1<e.length&&(u=c=0,d=e[++h]))}else c=u=h=0,d=e[0];return r.t=c,r.i=u,r.path=e,r.segment=d,r.segIndex=h,r}function I(e,t,r,n){var s,i,o,a,l,u,c,h,d,p=e[0],f=n||{};if((t<0||t>1)&&(t=x(t)),e.length>1){for(o=e.totalLength*t,l=u=0;(l+=e[u++].totalLength)<o;)p=e[u];t=(o-(a=l-p.totalLength))/(l-a)||0}return s=p.samples,i=p.resolution,o=p.totalLength*t,a=(u=p.lookup.length?p.lookup[t<1?~~(o/p.minLength):p.lookup.length-1]||0:C(s,o,t))?s[u-1]:0,(l=s[u])<o&&(a=l,l=s[++u]),d=1-(c=1/i*((o-a)/(l-a)+u%i)||0),h=p[u=6*~~(u/i)],f.x=D((c*c*(p[u+6]-h)+3*d*(c*(p[u+4]-h)+d*(p[u+2]-h)))*c+h),f.y=D((c*c*(p[u+7]-(h=p[u+1]))+3*d*(c*(p[u+5]-h)+d*(p[u+3]-h)))*c+h),r&&(f.angle=p.totalLength?L(p,u,c>=1?1-1e-9:c||1e-9):p.angle||0),f}function N(e,t,r,n,s,i,o){for(var a,l,u,c,h,d=e.length;--d>-1;)for(l=(a=e[d]).length,u=0;u<l;u+=2)c=a[u],h=a[u+1],a[u]=c*t+h*n+i,a[u+1]=c*r+h*s+o;return e._dirty=1,e}function U(e,t,r,n,s,i,o,a,u){if(e!==a||t!==u){r=d(r),n=d(n);var f=s%360*l,g=h(f),m=c(f),v=Math.PI,y=2*v,_=(e-a)/2,b=(t-u)/2,x=g*_+m*b,D=-m*_+g*b,w=x*x,E=D*D,C=w/(r*r)+E/(n*n);C>1&&(r=p(C)*r,n=p(C)*n);var A=r*r,j=n*n,T=(A*j-A*E-j*w)/(A*E+j*w);T<0&&(T=0);var M=(i===o?-1:1)*p(T),F=M*(r*D/n),S=M*(-n*x/r),P=(e+a)/2+(g*F-m*S),k=(t+u)/2+(m*F+g*S),L=(x-F)/r,O=(D-S)/n,R=(-x-F)/r,q=(-D-S)/n,B=L*L+O*O,z=(O<0?-1:1)*Math.acos(L/p(B)),I=(L*q-O*R<0?-1:1)*Math.acos((L*R+O*q)/p(B*(R*R+q*q)));isNaN(I)&&(I=v),!o&&I>0?I-=y:o&&I<0&&(I+=y),z%=y,I%=y;var N,U=Math.ceil(d(I)/(y/4)),H=[],V=I/U,X=4/3*c(V/2)/(1+h(V/2)),Y=g*r,G=m*r,W=m*-n,K=g*n;for(N=0;N<U;N++)x=h(s=z+N*V),D=c(s),L=h(s+=V),O=c(s),H.push(x-X*D,D+X*x,L+X*O,O-X*L,L,O);for(N=0;N<H.length;N+=2)x=H[N],D=H[N+1],H[N]=x*Y+D*W+P,H[N+1]=x*G+D*K+k;return H[N-2]=a,H[N-1]=u,H}}function H(e){var t,r,n,i,a,l,u,c,h,p,f,g,m,v,y,_=(e+"").replace(o,(function(e){var t=+e;return t<1e-4&&t>-1e-4?0:t})).match(s)||[],b=[],x=0,D=0,w=2/3,E=_.length,C=0,A="ERROR: malformed path: "+e,j=function(e,t,r,n){p=(r-e)/3,f=(n-t)/3,u.push(e+p,t+f,r-p,n-f,r,n)};if(!e||!isNaN(_[0])||isNaN(_[1]))return console.log(A),b;for(t=0;t<E;t++)if(m=a,isNaN(_[t])?l=(a=_[t].toUpperCase())!==_[t]:t--,n=+_[t+1],i=+_[t+2],l&&(n+=x,i+=D),t||(c=n,h=i),"M"===a)u&&(u.length<8?b.length-=1:C+=u.length),x=c=n,D=h=i,u=[n,i],b.push(u),t+=2,a="L";else if("C"===a)u||(u=[0,0]),l||(x=D=0),u.push(n,i,x+1*_[t+3],D+1*_[t+4],x+=1*_[t+5],D+=1*_[t+6]),t+=6;else if("S"===a)p=x,f=D,"C"!==m&&"S"!==m||(p+=x-u[u.length-4],f+=D-u[u.length-3]),l||(x=D=0),u.push(p,f,n,i,x+=1*_[t+3],D+=1*_[t+4]),t+=4;else if("Q"===a)p=x+(n-x)*w,f=D+(i-D)*w,l||(x=D=0),x+=1*_[t+3],D+=1*_[t+4],u.push(p,f,x+(n-x)*w,D+(i-D)*w,x,D),t+=4;else if("T"===a)p=x-u[u.length-4],f=D-u[u.length-3],u.push(x+p,D+f,n+(x+1.5*p-n)*w,i+(D+1.5*f-i)*w,x=n,D=i),t+=2;else if("H"===a)j(x,D,x=n,D),t+=1;else if("V"===a)j(x,D,x,D=n+(l?D-x:0)),t+=1;else if("L"===a||"Z"===a)"Z"===a&&(n=c,i=h,u.closed=!0),("L"===a||d(x-n)>.5||d(D-i)>.5)&&(j(x,D,n,i),"L"===a&&(t+=2)),x=n,D=i;else if("A"===a){if(v=_[t+4],y=_[t+5],p=_[t+6],f=_[t+7],r=7,v.length>1&&(v.length<3?(f=p,p=y,r--):(f=y,p=v.substr(2),r-=2),y=v.charAt(1),v=v.charAt(0)),g=U(x,D,+_[t+1],+_[t+2],+_[t+3],+v,+y,(l?x:0)+1*p,(l?D:0)+1*f),t+=r,g)for(r=0;r<g.length;r++)u.push(g[r]);x=u[u.length-2],D=u[u.length-1]}else console.log(A);return(t=u.length)<6?(b.pop(),t=0):u[0]===u[t-2]&&u[1]===u[t-1]&&(u.closed=!0),b.totalPoints=C+t,b}function V(e,t,r,n,s,i,o,a,l,u,c){var h,p=(e+r)/2,f=(t+n)/2,g=(r+s)/2,m=(n+i)/2,v=(s+o)/2,y=(i+a)/2,_=(p+g)/2,b=(f+m)/2,x=(g+v)/2,D=(m+y)/2,w=(_+x)/2,E=(b+D)/2,C=o-e,A=a-t,j=d((r-o)*A-(n-a)*C),T=d((s-o)*A-(i-a)*C);return u||(u=[e,t,o,a],c=2),u.splice(c||u.length-2,0,w,E),(j+T)*(j+T)>l*(C*C+A*A)&&(h=u.length,V(e,t,p,f,_,b,w,E,l,u,c),V(w,E,x,D,v,y,o,a,l,u,c+2+(u.length-h))),u}function X(e,t){void 0===t&&(t=1);for(var r=e[0],n=0,s=[r,n],i=2;i<e.length;i+=2)s.push(r,n,e[i],n=(e[i]-r)*t/2,r=e[i],-n);return s}function Y(e,t,r){d(e[0]-e[2])<1e-4&&d(e[1]-e[3])<1e-4&&(e=e.slice(2));var n,s,i,o,a,l,u,g,m,v,y,_,b,x,w=e.length-2,E=+e[0],C=+e[1],A=+e[2],j=+e[3],T=[E,C,E,C],M=A-E,F=j-C,S=Math.abs(e[w]-E)<.001&&Math.abs(e[w+1]-C)<.001;for(isNaN(r)&&(r=Math.PI/10),S&&(e.push(A,j),A=E,j=C,E=e[w-2],C=e[w-1],e.unshift(E,C),w+=4),t=t||0===t?+t:1,a=2;a<w;a+=2)n=E,s=C,E=A,C=j,A=+e[a+2],j=+e[a+3],E===A&&C===j||(_=(l=M)*l+(g=F)*g,b=(M=A-E)*M+(F=j-C)*F,x=(u=A-n)*u+(m=j-s)*m,y=(i=Math.acos((_+b-x)/p(4*_*b)))/Math.PI*t,v=p(_)*y,y*=p(b),E===n&&C===s||(i>r?(o=f(m,u),T.push(D(E-h(o)*v),D(C-c(o)*v),D(E),D(C),D(E+h(o)*y),D(C+c(o)*y))):(o=f(g,l),T.push(D(E-h(o)*v),D(C-c(o)*v)),o=f(F,M),T.push(D(E),D(C),D(E+h(o)*y),D(C+c(o)*y)))));return E!==A||C!==j||T.length<4?T.push(D(A),D(j),D(A),D(j)):T.length-=2,S&&(T.splice(0,6),T.length=T.length-6),T}function G(e,t,r,n,s){var i,o,a,l,u,c,h,d,p,f,g,m,v=n,y=e[t],_=e[t+1],b=e[r],x=e[r+1];for(o=t+2;o<r;o+=2)l=e[o],u=e[o+1],f=void 0,g=void 0,m=void 0,m=(p=x)-(h=_),((g=(d=b)-(c=y))||m)&&((f=((l-c)*g+(u-h)*m)/(g*g+m*m))>1?(c=d,h=p):f>0&&(c+=g*f,h+=m*f)),(a=Math.pow(l-c,2)+Math.pow(u-h,2))>v&&(i=o,v=a);v>n&&(i-t>2&&G(e,t,i,n,s),s.push(e[i],e[i+1]),r-i>2&&G(e,i,r,n,s))}function W(e,t){var r,n,s,i,o,a,l,u=parseFloat(e[0]),c=parseFloat(e[1]),h=[u,c],d=e.length-2;for(t=Math.pow(t||1,2),r=2;r<d;r+=2)(i=u-(n=parseFloat(e[r])))*i+(o=c-(s=parseFloat(e[r+1])))*o>t&&(h.push(n,s),u=n,c=s);return h.push(parseFloat(e[d]),parseFloat(e[d+1])),G(h,0,l=h.length-2,t,a=[h[0],h[1]]),a.push(h[l],h[l+1]),a}function K(e,t,r,s,i,o,a,l,u,c,h,d,p,f){var m,v,y,_,b=(i-s)/o,x=0,D=s;for(n=g;D<=i;)(m=(v=(_=1-D)*_*_*a+3*_*_*D*u+3*_*D*D*h+D*D*D*p-t)*v+(y=_*_*_*l+3*_*_*D*c+3*_*D*D*d+D*D*D*f-r)*y)<n&&(n=m,x=D),D+=b;return e>1?K(e-1,t,r,Math.max(x-b,0),Math.min(x+b,1),o,a,l,u,c,h,d,p,f):x}function Z(e,t,r,s){var i,o,a,l,u={j:0,i:0,t:0},c=g;for(o=0;o<e.length;o++)for(l=e[o],i=0;i<l.length;i+=6)a=K(1,t,r,0,1,s||20,l[i],l[i+1],l[i+2],l[i+3],l[i+4],l[i+5],l[i+6],l[i+7]),c>n&&(c=n,u.j=o,u.i=i,u.t=a);return u}function $(e,t,r,s,i){var o,a,l=r.length,u=g,c=0,h=0;for(s=s||20,i=i||3,a=0;a<l;a+=6)o=K(1,e,t,0,1,s,r[a],r[a+1],r[a+2],r[a+3],r[a+4],r[a+5],r[a+6],r[a+7]),u>n&&(u=n,c=o,h=a);return B(r,h,o=K(i,e,t,c-.05,c+.05,s,r[h],r[h+1],r[h+2],r[h+3],r[h+4],r[h+5],r[h+6],r[h+7])),h+6}function Q(e){v(e[0])&&(e=[e]);var t,r,n,s,i="",o=e.length;for(r=0;r<o;r++){for(s=e[r],i+="M"+D(s[0])+","+D(s[1])+" C",t=s.length,n=2;n<t;n++)i+=D(s[n++])+","+D(s[n++])+" "+D(s[n++])+","+D(s[n++])+" "+D(s[n++])+","+D(s[n])+" ";s.closed&&(i+="z")}return i}},"./node_modules/gsap/utils/strings.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{emojiExp:()=>s,getText:()=>i,splitInnerHTML:()=>o,emojiSafeSplit:()=>a});var n=/(^\s+|\s+$)/g,s=/([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;function i(e){var t=e.nodeType,r="";if(1===t||9===t||11===t){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)r+=i(e)}else if(3===t||4===t)return e.nodeValue;return r}function o(e,t,r){for(var n=e.firstChild,s=[];n;)3===n.nodeType?s.push.apply(s,a((n.nodeValue+"").replace(/^\n+/g,"").replace(/\s+/g," "),t,r)):"br"===(n.nodeName+"").toLowerCase()?s[s.length-1]+="<br>":s.push(n.outerHTML),n=n.nextSibling;return s}function a(e,t,r){if(e+="",r&&(e=e.replace(n,"")),t&&""!==t)return e.replace(/>/g,"&gt;").replace(/</g,"&lt;").split(t);for(var i,o,a=[],l=e.length,u=0;u<l;u++)((o=e.charAt(u)).charCodeAt(0)>=55296&&o.charCodeAt(0)<=56319||e.charCodeAt(u+1)>=65024&&e.charCodeAt(u+1)<=65039)&&(i=((e.substr(u,12).split(s)||[])[1]||"").length||2,o=e.substr(u,i),a.emoji=1,u+=i-1),a.push(">"===o?"&gt;":"<"===o?"&lt;":o);return a}},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var s in t=arguments[r])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var s=r("./node_modules/html-entities/lib/named-references.js"),i=r("./node_modules/html-entities/lib/numeric-unicode-map.js"),o=r("./node_modules/html-entities/lib/surrogate-pairs.js"),a=n(n({},s.namedReferences),{all:s.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},u={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var r=void 0===(c=(i=void 0===t?u:t).mode)?"specialChars":c,n=void 0===(f=i.numeric)?"decimal":f,s=i.level;if(!e)return"";var i,c,h=l[r],d=a[void 0===s?"all":s].characters,p="hexadecimal"===n;if(h.lastIndex=0,i=h.exec(e)){c="";var f=0;do{f!==i.index&&(c+=e.substring(f,i.index));var g=d[s=i[0]];if(!g){var m=s.length>1?o.getCodePoint(s,0):s.charCodeAt(0);g=(p?"&#x"+m.toString(16):"&#"+m)+";"}c+=g,f=i.index+s.length}while(i=h.exec(e));f!==e.length&&(c+=e.substring(f))}else c=e;return c};var c={scope:"body",level:"all"},h=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,p={xml:{strict:h,attribute:d,body:s.bodyRegExps.xml},html4:{strict:h,attribute:d,body:s.bodyRegExps.html4},html5:{strict:h,attribute:d,body:s.bodyRegExps.html5}},f=n(n({},p),{all:p.html5}),g=String.fromCharCode,m=g(65533),v={level:"all"};t.decodeEntity=function(e,t){var r=void 0===(n=(void 0===t?v:t).level)?"all":n;if(!e)return"";var n=e,s=(e[e.length-1],a[r].entities[e]);if(s)n=s;else if("&"===e[0]&&"#"===e[1]){var l=e[2],u="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));n=u>=1114111?m:u>65535?o.fromCodePoint(u):g(i.numericUnicodeMap[u]||u)}return n},t.decode=function(e,t){var r=void 0===t?c:t,n=r.level,s=void 0===n?"all":n,l=r.scope,u=void 0===l?"xml"===s?"strict":"body":l;if(!e)return"";var h=f[s][u],d=a[s].entities,p="attribute"===u,v="strict"===u;h.lastIndex=0;var y,_=h.exec(e);if(_){y="";var b=0;do{b!==_.index&&(y+=e.substring(b,_.index));var x=_[0],D=x,w=x[x.length-1];if(p&&"="===w)D=x;else if(v&&";"!==w)D=x;else{var E=d[x];if(E)D=E;else if("&"===x[0]&&"#"===x[1]){var C=x[2],A="x"==C||"X"==C?parseInt(x.substr(3),16):parseInt(x.substr(2));D=A>=1114111?m:A>65535?o.fromCodePoint(A):g(i.numericUnicodeMap[A]||A)}}y+=D,b=_.index+x.length}while(_=h.exec(e));b!==e.length&&(y+=e.substring(b))}else y=e;return y}},"./node_modules/html-entities/lib/named-references.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=n},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var n=r("./node_modules/lodash/_hashClear.js"),s=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),o=r("./node_modules/lodash/_hashHas.js"),a=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_listCacheClear.js"),s=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),o=r("./node_modules/lodash/_listCacheHas.js"),a=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=n},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_mapCacheClear.js"),s=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),o=r("./node_modules/lodash/_mapCacheHas.js"),a=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=n},"./node_modules/lodash/_Set.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=n},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js"),s=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function o(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new n;++t<r;)this.add(e[t])}o.prototype.add=o.prototype.push=s,o.prototype.has=i,e.exports=o},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),o=r("./node_modules/lodash/_stackGet.js"),a=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(e){var t=this.__data__=new n(e);this.size=t.size}u.prototype.clear=s,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=a,u.prototype.set=l,e.exports=u},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Symbol;e.exports=n},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=n},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=n},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=0,i=[];++r<n;){var o=e[r];t(o,r,e)&&(i[s++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseTimes.js"),s=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isBuffer.js"),a=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=i(e),c=!r&&s(e),h=!r&&!c&&o(e),d=!r&&!c&&!h&&l(e),p=r||c||h||d,f=p?n(e.length,String):[],g=f.length;for(var m in e)!t&&!u.call(e,m)||p&&("length"==m||h&&("offset"==m||"parent"==m)||d&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||a(m,g))||f.push(m);return f}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=Array(n);++r<n;)s[r]=t(e[r],r,e);return s}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,n=t.length,s=e.length;++r<n;)e[s+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var n=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(n(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseForOwn.js"),s=r("./node_modules/lodash/_createBaseEach.js")(n);e.exports=s},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var n=r("./node_modules/lodash/_createBaseFor.js")();e.exports=n},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseFor.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&n(e,t,s)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,i=(t=n(t,e)).length;null!=e&&r<i;)e=e[s(t[r++])];return r&&r==i?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayPush.js"),s=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var i=t(e);return s(e)?i:n(i,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),o=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?s(e):i(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return s(e)&&"[object Arguments]"==n(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqualDeep.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,i,o,a){return t===r||(null==t||null==r||!s(t)&&!s(r)?t!=t&&r!=r:n(t,r,i,o,e,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),o=r("./node_modules/lodash/_equalObjects.js"),a=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),c=r("./node_modules/lodash/isTypedArray.js"),h="[object Arguments]",d="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,g,m,v){var y=l(e),_=l(t),b=y?d:a(e),x=_?d:a(t),D=(b=b==h?p:b)==p,w=(x=x==h?p:x)==p,E=b==x;if(E&&u(e)){if(!u(t))return!1;y=!0,D=!1}if(E&&!D)return v||(v=new n),y||c(e)?s(e,t,r,g,m,v):i(e,t,b,r,g,m,v);if(!(1&r)){var C=D&&f.call(e,"__wrapped__"),A=w&&f.call(t,"__wrapped__");if(C||A){var j=C?e.value():e,T=A?t.value():t;return v||(v=new n),m(j,T,r,g,v)}}return!!E&&(v||(v=new n),o(e,t,r,g,m,v))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,i){var o=r.length,a=o,l=!i;if(null==e)return!a;for(e=Object(e);o--;){var u=r[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var c=(u=r[o])[0],h=e[c],d=u[1];if(l&&u[2]){if(void 0===h&&!(c in e))return!1}else{var p=new n;if(i)var f=i(h,d,c,e,t,p);if(!(void 0===f?s(d,h,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),o=r("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,c=l.toString,h=u.hasOwnProperty,d=RegExp("^"+c.call(h).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||s(e))&&(n(e)?d:a).test(o(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&s(e.length)&&!!o[n(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseMatches.js"),s=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?o(e)?s(e[0],e[1]):n(e):a(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isPrototype.js"),s=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return s(e);var t=[];for(var r in Object(e))i.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseEach.js"),s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,i=s(e)?Array(e.length):[];return n(e,(function(e,n,s){i[++r]=t(e,n,s)})),i}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsMatch.js"),s=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=s(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(r){return r===e||n(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqual.js"),s=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return o(e)&&a(t)?l(u(e),t):function(r){var o=s(r,e);return void 0===o&&o===t?i(r,e):n(t,o,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return n(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isSymbol.js"),a=n?n.prototype:void 0,l=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return s(t,e)+"";if(o(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:n}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),o=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return n(e)?e:s(e,t)?[e]:i(o(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=n},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,s){if(null==r)return r;if(!n(r))return e(r,s);for(var i=r.length,o=t?i:-1,a=Object(r);(t?o--:++o<i)&&!1!==s(a[o],o,a););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,n){for(var s=-1,i=Object(t),o=n(t),a=o.length;a--;){var l=o[e?a:++s];if(!1===r(i[l],l,i))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var n=r("./node_modules/lodash/_SetCache.js"),s=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,o,a,l){var u=1&r,c=e.length,h=t.length;if(c!=h&&!(u&&h>c))return!1;var d=l.get(e),p=l.get(t);if(d&&p)return d==t&&p==e;var f=-1,g=!0,m=2&r?new n:void 0;for(l.set(e,t),l.set(t,e);++f<c;){var v=e[f],y=t[f];if(o)var _=u?o(y,v,f,t,e,l):o(v,y,f,e,t,l);if(void 0!==_){if(_)continue;g=!1;break}if(m){if(!s(t,(function(e,t){if(!i(m,t)&&(v===e||a(v,e,r,o,l)))return m.push(t)}))){g=!1;break}}else if(v!==y&&!a(v,y,r,o,l)){g=!1;break}}return l.delete(e),l.delete(t),g}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),o=r("./node_modules/lodash/_equalArrays.js"),a=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=n?n.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,r,n,u,h,d){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!h(new s(e),new s(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=a;case"[object Set]":var f=1&n;if(p||(p=l),e.size!=t.size&&!f)return!1;var g=d.get(e);if(g)return g==t;n|=2,d.set(e,t);var m=o(p(e),p(t),n,u,h,d);return d.delete(e),m;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getAllKeys.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,o,a){var l=1&r,u=n(e),c=u.length;if(c!=n(t).length&&!l)return!1;for(var h=c;h--;){var d=u[h];if(!(l?d in t:s.call(t,d)))return!1}var p=a.get(e),f=a.get(t);if(p&&f)return p==t&&f==e;var g=!0;a.set(e,t),a.set(t,e);for(var m=l;++h<c;){var v=e[d=u[h]],y=t[d];if(i)var _=l?i(y,v,d,t,e,a):i(v,y,d,e,t,a);if(!(void 0===_?v===y||o(v,y,r,i,a):_)){g=!1;break}m||(m="constructor"==d)}if(g&&!m){var b=e.constructor,x=t.constructor;b==x||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(g=!1)}return a.delete(e),a.delete(t),g}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=n},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetAllKeys.js"),s=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");e.exports=function(e){return n(e,i,s)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return n(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isStrictComparable.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=s(e),r=t.length;r--;){var i=t[r],o=e[i];t[r]=[i,o,n(o)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsNative.js"),s=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=s(e,t);return n(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=Object.prototype,i=s.hasOwnProperty,o=s.toString,a=n?n.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),r=e[a];try{e[a]=void 0;var n=!0}catch(e){}var s=o.call(e);return n&&(t?e[a]=r:delete e[a]),s}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayFilter.js"),s=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(e){return null==e?[]:(e=Object(e),n(o(e),(function(t){return i.call(e,t)})))}:s;e.exports=a},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_DataView.js"),s=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),o=r("./node_modules/lodash/_Set.js"),a=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),c="[object Map]",h="[object Promise]",d="[object Set]",p="[object WeakMap]",f="[object DataView]",g=u(n),m=u(s),v=u(i),y=u(o),_=u(a),b=l;(n&&b(new n(new ArrayBuffer(1)))!=f||s&&b(new s)!=c||i&&b(i.resolve())!=h||o&&b(new o)!=d||a&&b(new a)!=p)&&(b=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,n=r?u(r):"";if(n)switch(n){case g:return f;case m:return c;case v:return h;case y:return d;case _:return p}return t}),e.exports=b},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/_isIndex.js"),a=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var u=-1,c=(t=n(t,e)).length,h=!1;++u<c;){var d=l(t[u]);if(!(h=null!=e&&r(e,d)))break;e=e[d]}return h||++u!=c?h:!!(c=null==e?0:e.length)&&a(c)&&o(d,c)&&(i(e)||s(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=n?n(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(n){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return s.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return n?void 0!==t[e]:s.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=n&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var n=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==n||"symbol"!=n&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;e.exports=function(e,t){if(n(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!s(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var n,s=r("./node_modules/lodash/_coreJsData.js"),i=(n=/[^.]+$/.exec(s&&s.keys&&s.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!i&&i in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var n=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!n(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js"),s=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=n(t,e);return!(r<0)&&(r==t.length-1?t.pop():s.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=n(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return n(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,s=n(r,e);return s<0?(++this.size,r.push([e,t])):r[s][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Hash.js"),s=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new n,map:new(i||s),string:new n}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=n(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=n(this,e),s=r.size;return r.set(e,t),this.size+=r.size==s?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var n=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=n(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=n},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=n},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_freeGlobal.js"),s=t&&!t.nodeType&&t,i=s&&e&&!e.nodeType&&e,o=i&&i.exports===s&&n.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=a},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var n=r("./node_modules/lodash/_freeGlobal.js"),s="object"==typeof self&&self&&self.Object===Object&&self,i=n||s||Function("return this")();e.exports=i},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new n,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof n){var o=r.__data__;if(!s||o.length<199)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new i(o)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_memoizeCapped.js"),s=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=n((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(s,(function(e,r,n,s){t.push(n?s.replace(i,"$1"):r||e)})),t}));e.exports=o},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||n(e))return e;var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayEach.js"),s=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?n:s)(e,i(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var s=null==e?void 0:n(e,t);return void 0===s?r:s}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseHasIn.js"),s=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&s(e,t,n)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsArguments.js"),s=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=n(function(){return arguments}())?n:function(e){return s(e)&&o.call(e,"callee")&&!a.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&s(e.length)&&!n(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_root.js"),s=r("./node_modules/lodash/stubFalse.js"),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i?n.Buffer:void 0,l=(a?a.isBuffer:void 0)||s;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!s(e))return!1;var t=n(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||s(e)&&"[object Symbol]"==n(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsTypedArray.js"),s=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?s(o):n;e.exports=a},"./node_modules/lodash/keys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayLikeKeys.js"),s=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return i(e)?n(e):s(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayMap.js"),s=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?n:i)(e,s(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js");function s(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,s=t?t.apply(this,n):n[0],i=r.cache;if(i.has(s))return i.get(s);var o=e.apply(this,n);return r.cache=i.set(s,o)||i,o};return r.cache=new(s.Cache||n),r}s.Cache=n,e.exports=s},"./node_modules/lodash/property.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseProperty.js"),s=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return i(e)?n(o(e)):s(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":n(e)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),s=Object.create(null),i="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(h(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return o.call(t,(function(t){if(t.href){var s=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);h(s)&&!0!==t.visited&&s&&(l(t,s),r=!0)}})),r}function c(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&l(e)}))}function h(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,o,l,h=function(e){var t=s[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}s[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),s=r&&r[1];return s&&e?e.split(",").map((function(e){var r=new RegExp("".concat(s,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,s),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},o=50,l=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(l),l=setTimeout(n,o)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,n,s,i,o,a,l,u,c,h,d,p,f,g,m=!1;function v(){if(!m){m=!0;var e=navigator.userAgent,v=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),y=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(d=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),c=/Android/i.exec(e),f=/FBAN\/\w+;/i.exec(e),g=/Mobile/i.exec(e),h=!!/Win64/.exec(e),v){(t=v[1]?parseFloat(v[1]):v[5]?parseFloat(v[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var _=/(?:Trident\/(\d+.\d+))/.exec(e);o=_?parseFloat(_[1])+4:t,r=v[2]?parseFloat(v[2]):NaN,n=v[3]?parseFloat(v[3]):NaN,(s=v[4]?parseFloat(v[4]):NaN)?(v=/(?:Chrome\/(\d+\.\d+))/.exec(e),i=v&&v[1]?parseFloat(v[1]):NaN):i=NaN}else t=r=n=i=s=NaN;if(y){if(y[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!y[2],u=!!y[3]}else a=l=u=!1}}var y={ie:function(){return v()||t},ieCompatibilityMode:function(){return v()||o>t},ie64:function(){return y.ie()&&h},firefox:function(){return v()||r},opera:function(){return v()||n},webkit:function(){return v()||s},safari:function(){return y.webkit()},chrome:function(){return v()||i},windows:function(){return v()||l},osx:function(){return v()||a},linux:function(){return v()||u},iphone:function(){return v()||d},mobile:function(){return v()||d||p||c||g},nativeApp:function(){return v()||f},android:function(){return v()||c},ipad:function(){return v()||p}};e.exports=y},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var n,s=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");s.canUseDOM&&(n=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!s.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,i=r in document;if(!i){var o=document.createElement("div");o.setAttribute(r,"return;"),i="function"==typeof o[r]}return!i&&n&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var n=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),s=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(e){var t=0,r=0,n=0,s=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),n=10*t,s=10*r,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||s)&&e.deltaMode&&(1==e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!r&&(r=s<1?-1:1),{spinX:t,spinY:r,pixelX:n,pixelY:s}}i.getEventType=function(){return n.firefox()?"DOMMouseScroll":s("wheel")?"wheel":"mousewheel"},e.exports=i},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>u});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const o=new s.Mat4,a=new i.Vec3,l=new i.Vec3;class u extends n.Transform{constructor(e,{near:t=.1,far:r=100,fov:n=45,aspect:o=1,left:a,right:l,bottom:u,top:c,zoom:h=1}={}){super(),Object.assign(this,{near:t,far:r,fov:n,aspect:o,left:a,right:l,bottom:u,top:c,zoom:h}),this.projectionMatrix=new s.Mat4,this.viewMatrix=new s.Mat4,this.projectionViewMatrix=new s.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:n=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:n}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:n,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left,right:n=this.right,bottom:s=this.bottom,top:i=this.top,zoom:o=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:n,bottom:s,top:i,zoom:o}),r/=o,n/=o,s/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:r,right:n,bottom:s,top:i,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(o.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const t=a;t.copy(e.geometry.bounds.center),t.applyMatrix4(e.worldMatrix);const r=e.geometry.bounds.radius*e.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(t,r)}frustumIntersectsSphere(e,t){const r=l;for(let n=0;n<6;n++){const s=this.frustum[n];if(r.copy(s).dot(e)+s.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var n=r("./node_modules/ogl/src/math/Vec3.js");const s=new n.Vec3;let i=1,o=1,a=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=o++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.buffer||(t.buffer=this.gl.createBuffer(),this.updateAttribute(t)),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),this.gl.bufferData(e.target,e.data,this.gl.STATIC_DRAW),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const n=this.attributes[t];this.gl.bindBuffer(n.target,n.buffer),this.glState.boundBuffer=n.buffer;let s=1;35674===r&&(s=2),35675===r&&(s=3),35676===r&&(s=4);const i=n.size/s,o=1===s?0:s*s*s,a=1===s?0:s*s;for(let t=0;t<s;t++)this.gl.vertexAttribPointer(e+t,i,n.type,n.normalized,n.stride+o,n.offset+t*a),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,n.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.offset||0,s=e.stride||e.size;this.bounds||(this.bounds={min:new n.Vec3,max:new n.Vec3,center:new n.Vec3,scale:new n.Vec3,radius:1/0});const i=this.bounds.min,o=this.bounds.max,a=this.bounds.center,l=this.bounds.scale;i.set(1/0),o.set(-1/0);for(let e=r,n=t.length;e<n;e+=s){const r=t[e],n=t[e+1],s=t[e+2];i.x=Math.min(r,i.x),i.y=Math.min(n,i.y),i.z=Math.min(s,i.z),o.x=Math.max(r,o.x),o.y=Math.max(n,o.y),o.z=Math.max(s,o.z)}l.sub(o,i),a.add(i,o).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.offset||0,n=e.stride||e.size;this.bounds||this.computeBoundingBox(e);let i=0;for(let e=r,o=t.length;e<o;e+=n)s.fromArray(t,e),i=Math.max(i,this.bounds.center.squaredDistance(s));this.bounds.radius=Math.sqrt(i)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>a});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends n.Transform{constructor(e,{geometry:t,program:r,mode:n=e.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=o++,this.geometry=t,this.program=r,this.mode=n,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e}))),e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>i});let n=1;const s={};class i{constructor(e,{vertex:t,fragment:r,uniforms:s={},transparent:i=!1,cullFace:o=e.BACK,frontFace:l=e.CCW,depthTest:u=!0,depthWrite:c=!0,depthFunc:h=e.LESS}={}){e.canvas||console.error("gl not passed as fist argument to Program"),this.gl=e,this.uniforms=s,this.id=n++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=l,this.depthTest=u,this.depthWrite=c,this.depthFunc=h,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=e.createShader(e.VERTEX_SHADER);e.shaderSource(d,t),e.compileShader(d),""!==e.getShaderInfoLog(d)&&console.warn(`${e.getShaderInfoLog(d)}\nVertex Shader\n${a(t)}`);const p=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(p,r),e.compileShader(p),""!==e.getShaderInfoLog(p)&&console.warn(`${e.getShaderInfoLog(p)}\nFragment Shader\n${a(r)}`),this.program=e.createProgram(),e.attachShader(this.program,d),e.attachShader(this.program,p),e.linkProgram(this.program),!e.getProgramParameter(this.program,e.LINK_STATUS))return console.warn(e.getProgramInfoLog(this.program));e.deleteShader(d),e.deleteShader(p),this.uniformLocations=new Map;let f=e.getProgramParameter(this.program,e.ACTIVE_UNIFORMS);for(let t=0;t<f;t++){let r=e.getActiveUniform(this.program,t);this.uniformLocations.set(r,e.getUniformLocation(this.program,r.name));const n=r.name.match(/(\w+)/g);r.uniformName=n[0],3===n.length?(r.isStructArray=!0,r.structIndex=Number(n[1]),r.structProperty=n[2]):2===n.length&&isNaN(Number(n[1]))&&(r.isStruct=!0,r.structProperty=n[1])}this.attributeLocations=new Map;const g=[],m=e.getProgramParameter(this.program,e.ACTIVE_ATTRIBUTES);for(let t=0;t<m;t++){const r=e.getActiveAttrib(this.program,t),n=e.getAttribLocation(this.program,r.name);g[n]=r.name,this.attributeLocations.set(r,n)}this.attributeOrder=g.join("")}setBlendFunc(e,t,r,n){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=n,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let n=r.uniformName,s=this.uniforms[n];if(r.isStruct&&(s=s[r.structProperty],n+=`.${r.structProperty}`),r.isStructArray&&(s=s[r.structIndex][r.structProperty],n+=`[${r.structIndex}].${r.structProperty}`),!s)return u(`Active uniform ${n} has not been supplied`);if(s&&void 0===s.value)return u(`${n} uniform is missing a value parameter`);if(s.value.texture)return t+=1,s.value.update(t),o(this.gl,r.type,e,t);if(s.value.length&&s.value[0].texture){const n=[];return s.value.forEach((e=>{t+=1,e.update(t),n.push(t)})),o(this.gl,r.type,e,n)}o(this.gl,r.type,e,s.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(e,t,r,n){n=n.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const n=t*r;let i=s[n];i||(s[n]=i=new Float32Array(n));for(let n=0;n<t;n++)i.set(e[n],n*r);return i}(n):n;const i=e.renderer.state.uniformLocations.get(r);if(n.length)if(void 0===i||i.length!==n.length)e.renderer.state.uniformLocations.set(r,n.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}(i,n))return;i.set?i.set(n):function(e,t){for(let r=0,n=e.length;r<n;r++)e[r]=t[r]}(i,n),e.renderer.state.uniformLocations.set(r,i)}else{if(i===n)return;e.renderer.state.uniformLocations.set(r,n)}switch(t){case 5126:return n.length?e.uniform1fv(r,n):e.uniform1f(r,n);case 35664:return e.uniform2fv(r,n);case 35665:return e.uniform3fv(r,n);case 35666:return e.uniform4fv(r,n);case 35670:case 5124:case 35678:case 35680:return n.length?e.uniform1iv(r,n):e.uniform1i(r,n);case 35671:case 35667:return e.uniform2iv(r,n);case 35672:case 35668:return e.uniform3iv(r,n);case 35673:case 35669:return e.uniform4iv(r,n);case 35674:return e.uniformMatrix2fv(r,!1,n);case 35675:return e.uniformMatrix3fv(r,!1,n);case 35676:return e.uniformMatrix4fv(r,!1,n)}}function a(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function u(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>i});const n=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let s=1;class i{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:n=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:c=!1,powerPreference:h="default",autoClear:d=!0,webgl:p=2}={}){const f={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:c,powerPreference:h};this.dpr=n,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=u,this.autoClear=d,this.id=s++,2===p&&(this.gl=e.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.gl.viewport(0,0,e,t))}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,n){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===n||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=n,void 0!==r?this.gl.blendFuncSeparate(e,t,r,n):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:s}){let i=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||i.push(e))})),s){const e=[],r=[],s=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):s.push(i):e.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&t&&(i.worldMatrix.getTranslation(n),n.applyMatrix4(t.projectionViewMatrix),i.zDepth=n.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),s.sort(this.sortUI),i=e.concat(r,s)}return i}render({scene:e,camera:t,target:r=null,update:n=!0,sort:s=!0,frustumCull:i=!0,clear:o}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),n&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:i,sort:s}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>o});const n=new Uint8Array(4);function s(e){return 0==(e&e-1)}let i=1;class o{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:n=e.UNSIGNED_BYTE,format:s=e.RGBA,internalFormat:o=s,wrapS:a=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,generateMipmaps:u=!0,minFilter:c=(u?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:h=e.LINEAR,premultiplyAlpha:d=!1,unpackAlignment:p=4,flipY:f=r==e.TEXTURE_2D,anisotropy:g=0,level:m=0,width:v,height:y=v}={}){this.gl=e,this.id=i++,this.image=t,this.target=r,this.type=n,this.format=s,this.internalFormat=o,this.minFilter=c,this.magFilter=h,this.wrapS=a,this.wrapT=l,this.generateMipmaps=u,this.premultiplyAlpha=d,this.unpackAlignment=p,this.flipY=f,this.anisotropy=Math.min(g,this.gl.renderer.parameters.maxAnisotropy),this.level=m,this.width=v,this.height=y,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>a});var n=r("./node_modules/ogl/src/math/Vec3.js"),s=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.position=new n.Vec3,this.quaternion=new s.Quat,this.scale=new n.Vec3(1),this.rotation=new o.Euler,this.up=new n.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>s});var n=r("./node_modules/ogl/src/core/Geometry.js");class s extends n.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:n=1,heightSegments:i=1,attributes:o={}}={}){const a=n,l=i,u=(a+1)*(l+1),c=a*l*6,h=new Float32Array(3*u),d=new Float32Array(3*u),p=new Float32Array(2*u),f=c>65536?new Uint32Array(c):new Uint16Array(c);s.buildPlane(h,d,p,f,t,r,0,a,l),Object.assign(o,{position:{size:3,data:h},normal:{size:3,data:d},uv:{size:2,data:p},index:{data:f}}),super(e,o)}static buildPlane(e,t,r,n,s,i,o,a,l,u=0,c=1,h=2,d=1,p=-1,f=0,g=0){const m=f,v=s/a,y=i/l;for(let _=0;_<=l;_++){let b=_*y-i/2;for(let i=0;i<=a;i++,f++){let y=i*v-s/2;if(e[3*f+u]=y*d,e[3*f+c]=b*p,e[3*f+h]=o/2,t[3*f+u]=0,t[3*f+c]=0,t[3*f+h]=o>=0?1:-1,r[2*f]=i/a,r[2*f+1]=1-_/l,_===l||i===a)continue;let x=m+i+_*(a+1),D=m+i+(_+1)*(a+1),w=m+i+(_+1)*(a+1)+1,E=m+i+_*(a+1)+1;n[6*g]=x,n[6*g+1]=D,n[6*g+2]=E,n[6*g+3]=D,n[6*g+4]=w,n[6*g+5]=E,g++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>i});var n=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const s=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(e=0,t=e,r=e,n="YXZ"){return super(e,t,r),this.order=n,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this[0]=e,this[1]=t,this[2]=r,this.onChange(),this)}copy(e){return this[0]=e[0],this[1]=e[1],this[2]=e[2],this.onChange(),this}reorder(e){return this.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return n.fromRotationMatrix(this,e,t),this}fromQuaternion(e,t=this.order){return s.fromQuaternion(e),this.fromRotationMatrix(s,t)}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=1,i=0,o=0,a=0,l=1){return super(e,t,r,n,s,i,o,a,l),this}set(e,t,r,s,i,o,a,l,u){return e.length?this.copy(e):(n.set(this,e,t,r,s,i,o,a,l,u),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t=this){return n.rotate(this,t,e),this}scale(e,t=this){return n.scale(this,t,e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromMatrix4(e){return n.fromMat4(this,e),this}fromQuaternion(e){return n.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return n.invert(this,e),this}getNormalMatrix(e){return n.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=0,i=1,o=0,a=0,l=0,u=0,c=1,h=0,d=0,p=0,f=0,g=1){return super(e,t,r,n,s,i,o,a,l,u,c,h,d,p,f,g),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,s,i,o,a,l,u,c,h,d,p,f,g,m){return e.length?this.copy(e):(n.set(this,e,t,r,s,i,o,a,l,u,c,h,d,p,f,g,m),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t,r=this){return n.rotate(this,r,e,t),this}scale(e,t=this){return n.scale(this,t,"number"==typeof e?[e,e,e]:e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:s}={}){return n.perspective(this,e,t,r,s),this}fromOrthogonal({left:e,right:t,bottom:r,top:s,near:i,far:o}){return n.ortho(this,e,t,r,s,i,o),this}fromQuaternion(e){return n.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return n.invert(this,e),this}compose(e,t,r){return n.fromRotationTranslationScale(this,e,t,r),this}getRotation(e){return n.getRotation(e,this),this}getTranslation(e){return n.getTranslation(e,this),this}getScaling(e){return n.getScaling(e,this),this}getMaxScaleOnAxis(){return n.getMaxScaleOnAxis(this)}lookAt(e,t,r){return n.targetTo(this,e,t,r),this}determinant(){return n.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>s});var n=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class s extends Array{constructor(e=0,t=0,r=0,n=1){return super(e,t,r,n),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set w(e){this[3]=e,this.onChange()}identity(){return n.identity(this),this.onChange(),this}set(e,t,r,s){return e.length?this.copy(e):(n.set(this,e,t,r,s),this.onChange(),this)}rotateX(e){return n.rotateX(this,this,e),this.onChange(),this}rotateY(e){return n.rotateY(this,this,e),this.onChange(),this}rotateZ(e){return n.rotateZ(this,this,e),this.onChange(),this}inverse(e=this){return n.invert(this,e),this.onChange(),this}conjugate(e=this){return n.conjugate(this,e),this.onChange(),this}copy(e){return n.copy(this,e),this.onChange(),this}normalize(e=this){return n.normalize(this,e),this.onChange(),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this.onChange(),this}dot(e){return n.dot(this,e)}fromMatrix3(e){return n.fromMat3(this,e),this.onChange(),this}fromEuler(e){return n.fromEuler(this,e,e.order),this}fromAxisAngle(e,t){return n.setAxisAngle(this,e,t),this}slerp(e,t){return n.slerp(this,this,e,t),this}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class s extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(n.set(this,e,t,r),this)}copy(e){return n.copy(this,e),this}add(e,t){return t?n.add(this,e,t):n.add(this,this,e),this}sub(e,t){return t?n.subtract(this,e,t):n.subtract(this,this,e),this}multiply(e){return e.length?n.multiply(this,this,e):n.scale(this,this,e),this}divide(e){return e.length?n.divide(this,this,e):n.scale(this,this,1/e),this}inverse(e=this){return n.inverse(this,e),this}len(){return n.length(this)}distance(e){return e?n.distance(this,e):n.length(this)}squaredLen(){return n.squaredLength(this)}squaredDistance(e){return e?n.squaredDistance(this,e):n.squaredLength(this)}negate(e=this){return n.negate(this,e),this}cross(e,t){return t?n.cross(this,e,t):n.cross(this,this,e),this}scale(e){return n.scale(this,this,e),this}normalize(){return n.normalize(this,this),this}dot(e){return n.dot(this,e)}equals(e){return n.exactEquals(this,e)}applyMatrix4(e){return n.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return n.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return n.transformQuat(this,this,e),this}angle(e){return n.angle(this,e)}lerp(e,t){return n.lerp(this,this,e,t),this}clone(){return new s(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],n=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*n,this[1]=e[1]*t+e[5]*r+e[9]*n,this[2]=e[2]*t+e[6]*r+e[10]*n,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function n(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>n})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{fromMat4:()=>n,fromQuat:()=>s,copy:()=>i,set:()=>o,identity:()=>a,transpose:()=>l,invert:()=>u,determinant:()=>c,multiply:()=>h,translate:()=>d,rotate:()=>p,scale:()=>f,normalFromMat4:()=>g,projection:()=>m,add:()=>v,subtract:()=>y,multiplyScalar:()=>_});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function s(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r+r,a=n+n,l=s+s,u=r*o,c=n*o,h=n*a,d=s*o,p=s*a,f=s*l,g=i*o,m=i*a,v=i*l;return e[0]=1-h-f,e[3]=c-v,e[6]=d+m,e[1]=c+v,e[4]=1-u-f,e[7]=p-g,e[2]=d-m,e[5]=p+g,e[8]=1-u-h,e}function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function o(e,t,r,n,s,i,o,a,l,u){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],n=t[2],s=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=n,e[7]=s}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function u(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=c*o-a*u,d=-c*i+a*l,p=u*i-o*l,f=r*h+n*d+s*p;return f?(f=1/f,e[0]=h*f,e[1]=(-c*n+s*u)*f,e[2]=(a*n-s*o)*f,e[3]=d*f,e[4]=(c*r-s*l)*f,e[5]=(-a*r+s*i)*f,e[6]=p*f,e[7]=(-u*r+n*l)*f,e[8]=(o*r-n*i)*f,e):null}function c(e){let t=e[0],r=e[1],n=e[2],s=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8];return t*(u*i-o*l)+r*(-u*s+o*a)+n*(l*s-i*a)}function h(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=r[0],p=r[1],f=r[2],g=r[3],m=r[4],v=r[5],y=r[6],_=r[7],b=r[8];return e[0]=d*n+p*o+f*u,e[1]=d*s+p*a+f*c,e[2]=d*i+p*l+f*h,e[3]=g*n+m*o+v*u,e[4]=g*s+m*a+v*c,e[5]=g*i+m*l+v*h,e[6]=y*n+_*o+b*u,e[7]=y*s+_*a+b*c,e[8]=y*i+_*l+b*h,e}function d(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=r[0],p=r[1];return e[0]=n,e[1]=s,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=d*n+p*o+u,e[7]=d*s+p*a+c,e[8]=d*i+p*l+h,e}function p(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=Math.sin(r),p=Math.cos(r);return e[0]=p*n+d*o,e[1]=p*s+d*a,e[2]=p*i+d*l,e[3]=p*o-d*n,e[4]=p*a-d*s,e[5]=p*l-d*i,e[6]=u,e[7]=c,e[8]=h,e}function f(e,t,r){let n=r[0],s=r[1];return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=s*t[3],e[4]=s*t[4],e[5]=s*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function g(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=t[9],d=t[10],p=t[11],f=t[12],g=t[13],m=t[14],v=t[15],y=r*a-n*o,_=r*l-s*o,b=r*u-i*o,x=n*l-s*a,D=n*u-i*a,w=s*u-i*l,E=c*g-h*f,C=c*m-d*f,A=c*v-p*f,j=h*m-d*g,T=h*v-p*g,M=d*v-p*m,F=y*M-_*T+b*j+x*A-D*C+w*E;return F?(F=1/F,e[0]=(a*M-l*T+u*j)*F,e[1]=(l*A-o*M-u*C)*F,e[2]=(o*T-a*A+u*E)*F,e[3]=(s*T-n*M-i*j)*F,e[4]=(r*M-s*A+i*C)*F,e[5]=(n*A-r*T-i*E)*F,e[6]=(g*w-m*D+v*x)*F,e[7]=(m*b-f*w-v*_)*F,e[8]=(f*D-g*b+v*y)*F,e):null}function m(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function v(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function y(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function _(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{copy:()=>n,set:()=>s,identity:()=>i,transpose:()=>o,invert:()=>a,determinant:()=>l,multiply:()=>u,translate:()=>c,scale:()=>h,rotate:()=>d,getTranslation:()=>p,getScaling:()=>f,getMaxScaleOnAxis:()=>g,getRotation:()=>m,fromRotationTranslationScale:()=>v,fromQuat:()=>y,perspective:()=>_,ortho:()=>b,targetTo:()=>x,add:()=>D,subtract:()=>w,multiplyScalar:()=>E});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function s(e,t,r,n,s,i,o,a,l,u,c,h,d,p,f,g,m){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e[9]=c,e[10]=h,e[11]=d,e[12]=p,e[13]=f,e[14]=g,e[15]=m,e}function i(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function o(e,t){if(e===t){let r=t[1],n=t[2],s=t[3],i=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=n,e[9]=i,e[11]=t[14],e[12]=s,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function a(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=t[9],d=t[10],p=t[11],f=t[12],g=t[13],m=t[14],v=t[15],y=r*a-n*o,_=r*l-s*o,b=r*u-i*o,x=n*l-s*a,D=n*u-i*a,w=s*u-i*l,E=c*g-h*f,C=c*m-d*f,A=c*v-p*f,j=h*m-d*g,T=h*v-p*g,M=d*v-p*m,F=y*M-_*T+b*j+x*A-D*C+w*E;return F?(F=1/F,e[0]=(a*M-l*T+u*j)*F,e[1]=(s*T-n*M-i*j)*F,e[2]=(g*w-m*D+v*x)*F,e[3]=(d*D-h*w-p*x)*F,e[4]=(l*A-o*M-u*C)*F,e[5]=(r*M-s*A+i*C)*F,e[6]=(m*b-f*w-v*_)*F,e[7]=(c*w-d*b+p*_)*F,e[8]=(o*T-a*A+u*E)*F,e[9]=(n*A-r*T-i*E)*F,e[10]=(f*D-g*b+v*y)*F,e[11]=(h*b-c*D-p*y)*F,e[12]=(a*C-o*j-l*E)*F,e[13]=(r*j-n*C+s*E)*F,e[14]=(g*_-f*x-m*y)*F,e[15]=(c*x-h*_+d*y)*F,e):null}function l(e){let t=e[0],r=e[1],n=e[2],s=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8],c=e[9],h=e[10],d=e[11],p=e[12],f=e[13],g=e[14],m=e[15];return(t*o-r*i)*(h*m-d*g)-(t*a-n*i)*(c*m-d*f)+(t*l-s*i)*(c*g-h*f)+(r*a-n*o)*(u*m-d*p)-(r*l-s*o)*(u*g-h*p)+(n*l-s*a)*(u*f-c*p)}function u(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=t[9],p=t[10],f=t[11],g=t[12],m=t[13],v=t[14],y=t[15],_=r[0],b=r[1],x=r[2],D=r[3];return e[0]=_*n+b*a+x*h+D*g,e[1]=_*s+b*l+x*d+D*m,e[2]=_*i+b*u+x*p+D*v,e[3]=_*o+b*c+x*f+D*y,_=r[4],b=r[5],x=r[6],D=r[7],e[4]=_*n+b*a+x*h+D*g,e[5]=_*s+b*l+x*d+D*m,e[6]=_*i+b*u+x*p+D*v,e[7]=_*o+b*c+x*f+D*y,_=r[8],b=r[9],x=r[10],D=r[11],e[8]=_*n+b*a+x*h+D*g,e[9]=_*s+b*l+x*d+D*m,e[10]=_*i+b*u+x*p+D*v,e[11]=_*o+b*c+x*f+D*y,_=r[12],b=r[13],x=r[14],D=r[15],e[12]=_*n+b*a+x*h+D*g,e[13]=_*s+b*l+x*d+D*m,e[14]=_*i+b*u+x*p+D*v,e[15]=_*o+b*c+x*f+D*y,e}function c(e,t,r){let n,s,i,o,a,l,u,c,h,d,p,f,g=r[0],m=r[1],v=r[2];return t===e?(e[12]=t[0]*g+t[4]*m+t[8]*v+t[12],e[13]=t[1]*g+t[5]*m+t[9]*v+t[13],e[14]=t[2]*g+t[6]*m+t[10]*v+t[14],e[15]=t[3]*g+t[7]*m+t[11]*v+t[15]):(n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=t[9],p=t[10],f=t[11],e[0]=n,e[1]=s,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=u,e[7]=c,e[8]=h,e[9]=d,e[10]=p,e[11]=f,e[12]=n*g+a*m+h*v+t[12],e[13]=s*g+l*m+d*v+t[13],e[14]=i*g+u*m+p*v+t[14],e[15]=o*g+c*m+f*v+t[15]),e}function h(e,t,r){let n=r[0],s=r[1],i=r[2];return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*s,e[5]=t[5]*s,e[6]=t[6]*s,e[7]=t[7]*s,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function d(e,t,r,n){let s,i,o,a,l,u,c,h,d,p,f,g,m,v,y,_,b,x,D,w,E,C,A,j,T=n[0],M=n[1],F=n[2],S=Math.hypot(T,M,F);return Math.abs(S)<1e-6?null:(S=1/S,T*=S,M*=S,F*=S,s=Math.sin(r),i=Math.cos(r),o=1-i,a=t[0],l=t[1],u=t[2],c=t[3],h=t[4],d=t[5],p=t[6],f=t[7],g=t[8],m=t[9],v=t[10],y=t[11],_=T*T*o+i,b=M*T*o+F*s,x=F*T*o-M*s,D=T*M*o-F*s,w=M*M*o+i,E=F*M*o+T*s,C=T*F*o+M*s,A=M*F*o-T*s,j=F*F*o+i,e[0]=a*_+h*b+g*x,e[1]=l*_+d*b+m*x,e[2]=u*_+p*b+v*x,e[3]=c*_+f*b+y*x,e[4]=a*D+h*w+g*E,e[5]=l*D+d*w+m*E,e[6]=u*D+p*w+v*E,e[7]=c*D+f*w+y*E,e[8]=a*C+h*A+g*j,e[9]=l*C+d*A+m*j,e[10]=u*C+p*A+v*j,e[11]=c*C+f*A+y*j,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function p(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function f(e,t){let r=t[0],n=t[1],s=t[2],i=t[4],o=t[5],a=t[6],l=t[8],u=t[9],c=t[10];return e[0]=Math.hypot(r,n,s),e[1]=Math.hypot(i,o,a),e[2]=Math.hypot(l,u,c),e}function g(e){let t=e[0],r=e[1],n=e[2],s=e[4],i=e[5],o=e[6],a=e[8],l=e[9],u=e[10];const c=t*t+r*r+n*n,h=s*s+i*i+o*o,d=a*a+l*l+u*u;return Math.sqrt(Math.max(c,h,d))}const m=function(){const e=[0,0,0];return function(t,r){let n=e;f(n,r);let s=1/n[0],i=1/n[1],o=1/n[2],a=r[0]*s,l=r[1]*i,u=r[2]*o,c=r[4]*s,h=r[5]*i,d=r[6]*o,p=r[8]*s,g=r[9]*i,m=r[10]*o,v=a+h+m,y=0;return v>0?(y=2*Math.sqrt(v+1),t[3]=.25*y,t[0]=(d-g)/y,t[1]=(p-u)/y,t[2]=(l-c)/y):a>h&&a>m?(y=2*Math.sqrt(1+a-h-m),t[3]=(d-g)/y,t[0]=.25*y,t[1]=(l+c)/y,t[2]=(p+u)/y):h>m?(y=2*Math.sqrt(1+h-a-m),t[3]=(p-u)/y,t[0]=(l+c)/y,t[1]=.25*y,t[2]=(d+g)/y):(y=2*Math.sqrt(1+m-a-h),t[3]=(l-c)/y,t[0]=(p+u)/y,t[1]=(d+g)/y,t[2]=.25*y),t}}();function v(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=t[3],l=s+s,u=i+i,c=o+o,h=s*l,d=s*u,p=s*c,f=i*u,g=i*c,m=o*c,v=a*l,y=a*u,_=a*c,b=n[0],x=n[1],D=n[2];return e[0]=(1-(f+m))*b,e[1]=(d+_)*b,e[2]=(p-y)*b,e[3]=0,e[4]=(d-_)*x,e[5]=(1-(h+m))*x,e[6]=(g+v)*x,e[7]=0,e[8]=(p+y)*D,e[9]=(g-v)*D,e[10]=(1-(h+f))*D,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function y(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r+r,a=n+n,l=s+s,u=r*o,c=n*o,h=n*a,d=s*o,p=s*a,f=s*l,g=i*o,m=i*a,v=i*l;return e[0]=1-h-f,e[1]=c+v,e[2]=d-m,e[3]=0,e[4]=c-v,e[5]=1-u-f,e[6]=p+g,e[7]=0,e[8]=d+m,e[9]=p-g,e[10]=1-u-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function _(e,t,r,n,s){let i=1/Math.tan(t/2),o=1/(n-s);return e[0]=i/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(s+n)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*s*n*o,e[15]=0,e}function b(e,t,r,n,s,i,o){let a=1/(t-r),l=1/(n-s),u=1/(i-o);return e[0]=-2*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*a,e[13]=(s+n)*l,e[14]=(o+i)*u,e[15]=1,e}function x(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=n[0],l=n[1],u=n[2],c=s-r[0],h=i-r[1],d=o-r[2],p=c*c+h*h+d*d;0===p?d=1:(p=1/Math.sqrt(p),c*=p,h*=p,d*=p);let f=l*d-u*h,g=u*c-a*d,m=a*h-l*c;return p=f*f+g*g+m*m,0===p&&(u?a+=1e-6:l?u+=1e-6:l+=1e-6,f=l*d-u*h,g=u*c-a*d,m=a*h-l*c,p=f*f+g*g+m*m),p=1/Math.sqrt(p),f*=p,g*=p,m*=p,e[0]=f,e[1]=g,e[2]=m,e[3]=0,e[4]=h*m-d*g,e[5]=d*f-c*m,e[6]=c*g-h*f,e[7]=0,e[8]=c,e[9]=h,e[10]=d,e[11]=0,e[12]=s,e[13]=i,e[14]=o,e[15]=1,e}function D(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function w(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function E(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{identity:()=>s,setAxisAngle:()=>i,multiply:()=>o,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>u,slerp:()=>c,invert:()=>h,conjugate:()=>d,fromMat3:()=>p,fromEuler:()=>f,copy:()=>g,set:()=>m,add:()=>v,scale:()=>y,dot:()=>_,lerp:()=>b,length:()=>x,normalize:()=>D});var n=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function s(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function i(e,t,r){r*=.5;let n=Math.sin(r);return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=Math.cos(r),e}function o(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=r[0],l=r[1],u=r[2],c=r[3];return e[0]=n*c+o*a+s*u-i*l,e[1]=s*c+o*l+i*a-n*u,e[2]=i*c+o*u+n*l-s*a,e[3]=o*c-n*a-s*l-i*u,e}function a(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l+o*a,e[1]=s*l+i*a,e[2]=i*l-s*a,e[3]=o*l-n*a,e}function l(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l-i*a,e[1]=s*l+o*a,e[2]=i*l+n*a,e[3]=o*l-s*a,e}function u(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l+s*a,e[1]=s*l-n*a,e[2]=i*l+o*a,e[3]=o*l-i*a,e}function c(e,t,r,n){let s,i,o,a,l,u=t[0],c=t[1],h=t[2],d=t[3],p=r[0],f=r[1],g=r[2],m=r[3];return i=u*p+c*f+h*g+d*m,i<0&&(i=-i,p=-p,f=-f,g=-g,m=-m),1-i>1e-6?(s=Math.acos(i),o=Math.sin(s),a=Math.sin((1-n)*s)/o,l=Math.sin(n*s)/o):(a=1-n,l=n),e[0]=a*u+l*p,e[1]=a*c+l*f,e[2]=a*h+l*g,e[3]=a*d+l*m,e}function h(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r*r+n*n+s*s+i*i,a=o?1/o:0;return e[0]=-r*a,e[1]=-n*a,e[2]=-s*a,e[3]=i*a,e}function d(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,n=t[0]+t[4]+t[8];if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let n=0;t[4]>t[0]&&(n=1),t[8]>t[3*n+n]&&(n=2);let s=(n+1)%3,i=(n+2)%3;r=Math.sqrt(t[3*n+n]-t[3*s+s]-t[3*i+i]+1),e[n]=.5*r,r=.5/r,e[3]=(t[3*s+i]-t[3*i+s])*r,e[s]=(t[3*s+n]+t[3*n+s])*r,e[i]=(t[3*i+n]+t[3*n+i])*r}return e}function f(e,t,r="YXZ"){let n=Math.sin(.5*t[0]),s=Math.cos(.5*t[0]),i=Math.sin(.5*t[1]),o=Math.cos(.5*t[1]),a=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l-n*i*a):"YXZ"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l+n*i*a):"ZXY"===r?(e[0]=n*o*l-s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l-n*i*a):"ZYX"===r?(e[0]=n*o*l-s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l+n*i*a):"YZX"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l-n*i*a):"XZY"===r&&(e[0]=n*o*l-s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l+n*i*a),e}const g=n.copy,m=n.set,v=n.add,y=n.scale,_=n.dot,b=n.lerp,x=n.length,D=n.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{length:()=>n,copy:()=>s,set:()=>i,add:()=>o,subtract:()=>a,multiply:()=>l,divide:()=>u,scale:()=>c,distance:()=>h,squaredDistance:()=>d,squaredLength:()=>p,negate:()=>f,inverse:()=>g,normalize:()=>m,dot:()=>v,cross:()=>y,lerp:()=>_,transformMat4:()=>b,scaleRotateMat4:()=>x,transformMat3:()=>D,transformQuat:()=>w,angle:()=>E,exactEquals:()=>C});function n(e){let t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function i(e,t,r,n){return e[0]=t,e[1]=r,e[2]=n,e}function o(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function a(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function u(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function c(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function h(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}function d(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}function p(e){let t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}function f(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function g(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function m(e,t){let r=t[0],n=t[1],s=t[2],i=r*r+n*n+s*s;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}function v(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function y(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[0],a=r[1],l=r[2];return e[0]=s*l-i*a,e[1]=i*o-n*l,e[2]=n*a-s*o,e}function _(e,t,r,n){let s=t[0],i=t[1],o=t[2];return e[0]=s+n*(r[0]-s),e[1]=i+n*(r[1]-i),e[2]=o+n*(r[2]-o),e}function b(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[3]*n+r[7]*s+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*n+r[4]*s+r[8]*i+r[12])/o,e[1]=(r[1]*n+r[5]*s+r[9]*i+r[13])/o,e[2]=(r[2]*n+r[6]*s+r[10]*i+r[14])/o,e}function x(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[3]*n+r[7]*s+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*n+r[4]*s+r[8]*i)/o,e[1]=(r[1]*n+r[5]*s+r[9]*i)/o,e[2]=(r[2]*n+r[6]*s+r[10]*i)/o,e}function D(e,t,r){let n=t[0],s=t[1],i=t[2];return e[0]=n*r[0]+s*r[3]+i*r[6],e[1]=n*r[1]+s*r[4]+i*r[7],e[2]=n*r[2]+s*r[5]+i*r[8],e}function w(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[0],a=r[1],l=r[2],u=a*i-l*s,c=l*n-o*i,h=o*s-a*n,d=a*h-l*c,p=l*u-o*h,f=o*c-a*u,g=2*r[3];return u*=g,c*=g,h*=g,d*=2,p*=2,f*=2,e[0]=n+u+d,e[1]=s+c+p,e[2]=i+h+f,e}const E=function(){const e=[0,0,0],t=[0,0,0];return function(r,n){s(e,r),s(t,n),m(e,e),m(t,t);let i=v(e,t);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function C(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{copy:()=>n,set:()=>s,add:()=>i,scale:()=>o,length:()=>a,normalize:()=>l,dot:()=>u,lerp:()=>c});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function s(e,t,r,n,s){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e}function i(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function o(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function a(e){let t=e[0],r=e[1],n=e[2],s=e[3];return Math.sqrt(t*t+r*r+n*n+s*s)}function l(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r*r+n*n+s*s+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=r*o,e[1]=n*o,e[2]=s*o,e[3]=i*o,e}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function c(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=t[3];return e[0]=s+n*(r[0]-s),e[1]=i+n*(r[1]-i),e[2]=o+n*(r[2]-o),e[3]=a+n*(r[3]-a),e}},"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],n=/([A-Z])/g,s={};function i(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),s=r.length;s--;){var i=r[s]+n;if(void 0!==t[i])return i}return e}e.exports=function(e){return e in s?s[e]:s[e]=i(e)},e.exports.dash=function(e){return e=i(e),n.test(e)&&(e="-"+e.replace(n,"-$1"),n.lastIndex=0),e.toLowerCase()}},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,r,n,s){r=r||"&",n=n||"=";var i={};if("string"!=typeof e||0===e.length)return i;var o=/\+/g;e=e.split(r);var a=1e3;s&&"number"==typeof s.maxKeys&&(a=s.maxKeys);var l=e.length;a>0&&l>a&&(l=a);for(var u=0;u<l;++u){var c,h,d,p,f=e[u].replace(o,"%20"),g=f.indexOf(n);g>=0?(c=f.substr(0,g),h=f.substr(g+1)):(c=f,h=""),d=decodeURIComponent(c),p=decodeURIComponent(h),t(i,d)?Array.isArray(i[d])?i[d].push(p):i[d]=[i[d],p]:i[d]=p}return i}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,r,n,s){return r=r||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(s){var i=encodeURIComponent(t(s))+n;return Array.isArray(e[s])?e[s].map((function(e){return i+encodeURIComponent(t(e))})).join(r):i+encodeURIComponent(t(e[s]))})).join(r):s?encodeURIComponent(t(s))+n+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,r)=>{"use strict";t.decode=t.parse=r("./node_modules/querystring/decode.js"),t.encode=t.stringify=r("./node_modules/querystring/encode.js")},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,r){var n;e=r.nmd(e),function(s){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof r.g&&r.g;i.global!==i&&i.window!==i&&i.self;var o,a=2147483647,l=36,u=/^xn--/,c=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function g(e){throw RangeError(d[e])}function m(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function v(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+m((e=e.replace(h,".")).split("."),t).join(".")}function y(e){for(var t,r,n=[],s=0,i=e.length;s<i;)(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<i?56320==(64512&(r=e.charCodeAt(s++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),s--):n.push(t);return n}function _(e){return m(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function b(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function x(e,t,r){var n=0;for(e=r?p(e/700):e>>1,e+=p(e/t);e>455;n+=l)e=p(e/35);return p(n+36*e/(e+38))}function D(e){var t,r,n,s,i,o,u,c,h,d,f,m=[],v=e.length,y=0,b=128,D=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&g("not-basic"),m.push(e.charCodeAt(n));for(s=r>0?r+1:0;s<v;){for(i=y,o=1,u=l;s>=v&&g("invalid-input"),((c=(f=e.charCodeAt(s++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:l)>=l||c>p((a-y)/o))&&g("overflow"),y+=c*o,!(c<(h=u<=D?1:u>=D+26?26:u-D));u+=l)o>p(a/(d=l-h))&&g("overflow"),o*=d;D=x(y-i,t=m.length+1,0==i),p(y/t)>a-b&&g("overflow"),b+=p(y/t),y%=t,m.splice(y++,0,b)}return _(m)}function w(e){var t,r,n,s,i,o,u,c,h,d,m,v,_,D,w,E=[];for(v=(e=y(e)).length,t=128,r=0,i=72,o=0;o<v;++o)(m=e[o])<128&&E.push(f(m));for(n=s=E.length,s&&E.push("-");n<v;){for(u=a,o=0;o<v;++o)(m=e[o])>=t&&m<u&&(u=m);for(u-t>p((a-r)/(_=n+1))&&g("overflow"),r+=(u-t)*_,t=u,o=0;o<v;++o)if((m=e[o])<t&&++r>a&&g("overflow"),m==t){for(c=r,h=l;!(c<(d=h<=i?1:h>=i+26?26:h-i));h+=l)w=c-d,D=l-d,E.push(f(b(d+w%D,0))),c=p(w/D);E.push(f(b(c,0))),i=x(r,_,n==s),r=0,++n}++r,++t}return E.join("")}o={version:"1.3.2",ucs2:{decode:y,encode:_},decode:D,encode:w,toASCII:function(e){return v(e,(function(e){return c.test(e)?"xn--"+w(e):e}))},toUnicode:function(e){return v(e,(function(e){return u.test(e)?D(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return o}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/url/url.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/node_modules/punycode/punycode.js"),s=r("./node_modules/url/util.js");function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=_,t.resolve=function(e,t){return _(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?_(e,!1,!0).resolveObject(t):t},t.format=function(e){s.isString(e)&&(e=_(e));return e instanceof i?e.format():i.prototype.format.call(e)},t.Url=i;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(u),h=["%","/","?",";","#"].concat(c),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,g={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=r("./node_modules/querystring/index.js");function _(e,t,r){if(e&&s.isObject(e)&&e instanceof i)return e;var n=new i;return n.parse(e,t,r),n}i.prototype.parse=function(e,t,r){if(!s.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),a=-1!==i&&i<e.indexOf("#")?"?":"#",u=e.split(a);u[0]=u[0].replace(/\\/g,"/");var _=e=u.join(a);if(_=_.trim(),!r&&1===e.split("#").length){var b=l.exec(_);if(b)return this.path=_,this.href=_,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=o.exec(_);if(x){var D=(x=x[0]).toLowerCase();this.protocol=D,_=_.substr(x.length)}if(r||x||_.match(/^\/\/[^@\/]+@[^@\/]+/)){var w="//"===_.substr(0,2);!w||x&&m[x]||(_=_.substr(2),this.slashes=!0)}if(!m[x]&&(w||x&&!v[x])){for(var E,C,A=-1,j=0;j<d.length;j++){-1!==(T=_.indexOf(d[j]))&&(-1===A||T<A)&&(A=T)}-1!==(C=-1===A?_.lastIndexOf("@"):_.lastIndexOf("@",A))&&(E=_.slice(0,C),_=_.slice(C+1),this.auth=decodeURIComponent(E)),A=-1;for(j=0;j<h.length;j++){var T;-1!==(T=_.indexOf(h[j]))&&(-1===A||T<A)&&(A=T)}-1===A&&(A=_.length),this.host=_.slice(0,A),_=_.slice(A),this.parseHost(),this.hostname=this.hostname||"";var M="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!M)for(var F=this.hostname.split(/\./),S=(j=0,F.length);j<S;j++){var P=F[j];if(P&&!P.match(p)){for(var k="",L=0,O=P.length;L<O;L++)P.charCodeAt(L)>127?k+="x":k+=P[L];if(!k.match(p)){var R=F.slice(0,j),q=F.slice(j+1),B=P.match(f);B&&(R.push(B[1]),q.unshift(B[2])),q.length&&(_="/"+q.join(".")+_),this.hostname=R.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),M||(this.hostname=n.toASCII(this.hostname));var z=this.port?":"+this.port:"",I=this.hostname||"";this.host=I+z,this.href+=this.host,M&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==_[0]&&(_="/"+_))}if(!g[D])for(j=0,S=c.length;j<S;j++){var N=c[j];if(-1!==_.indexOf(N)){var U=encodeURIComponent(N);U===N&&(U=escape(N)),_=_.split(N).join(U)}}var H=_.indexOf("#");-1!==H&&(this.hash=_.substr(H),_=_.slice(0,H));var V=_.indexOf("?");if(-1!==V?(this.search=_.substr(V),this.query=_.substr(V+1),t&&(this.query=y.parse(this.query)),_=_.slice(0,V)):t&&(this.search="",this.query={}),_&&(this.pathname=_),v[D]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){z=this.pathname||"";var X=this.search||"";this.path=z+X}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&s.isObject(this.query)&&Object.keys(this.query).length&&(o=y.stringify(this.query));var a=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==i?(i="//"+(i||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):i||(i=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+i+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+n},i.prototype.resolve=function(e){return this.resolveObject(_(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if(s.isString(e)){var t=new i;t.parse(e,!1,!0),e=t}for(var r=new i,n=Object.keys(this),o=0;o<n.length;o++){var a=n[o];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),u=0;u<l.length;u++){var c=l[u];"protocol"!==c&&(r[c]=e[c])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!v[e.protocol]){for(var h=Object.keys(e),d=0;d<h.length;d++){var p=h[d];r[p]=e[p]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||m[e.protocol])r.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),r.pathname=f.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var g=r.pathname||"",y=r.search||"";r.path=g+y}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var _=r.pathname&&"/"===r.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=b||_||r.host&&e.pathname,D=x,w=r.pathname&&r.pathname.split("/")||[],E=(f=e.pathname&&e.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(E&&(r.hostname="",r.port=null,r.host&&(""===w[0]?w[0]=r.host:w.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),x=x&&(""===f[0]||""===w[0])),b)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,w=f;else if(f.length)w||(w=[]),w.pop(),w=w.concat(f),r.search=e.search,r.query=e.query;else if(!s.isNullOrUndefined(e.search)){if(E)r.hostname=r.host=w.shift(),(M=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=M.shift(),r.host=r.hostname=M.shift());return r.search=e.search,r.query=e.query,s.isNull(r.pathname)&&s.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!w.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var C=w.slice(-1)[0],A=(r.host||e.host||w.length>1)&&("."===C||".."===C)||""===C,j=0,T=w.length;T>=0;T--)"."===(C=w[T])?w.splice(T,1):".."===C?(w.splice(T,1),j++):j&&(w.splice(T,1),j--);if(!x&&!D)for(;j--;j)w.unshift("..");!x||""===w[0]||w[0]&&"/"===w[0].charAt(0)||w.unshift(""),A&&"/"!==w.join("/").substr(-1)&&w.push("");var M,F=""===w[0]||w[0]&&"/"===w[0].charAt(0);E&&(r.hostname=r.host=F?"":w.length?w.shift():"",(M=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=M.shift(),r.host=r.hostname=M.shift()));return(x=x||r.host&&w.length)&&!F&&w.unshift(""),w.length?r.pathname=w.join("/"):(r.pathname=null,r.path=null),s.isNull(r.pathname)&&s.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},i.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/webpack-dev-server/client/utils/log.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){n.log.error(e)}}var t,r,i;return t=e,(r=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&s(t.prototype,r),i&&s(t,i),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/webpack/hot/log.js"),s=r.n(n),i=r("./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js"),o=r.n(i),a=r("./node_modules/webpack-dev-server/client/utils/parseURL.js"),l=r("./node_modules/webpack-dev-server/client/socket.js"),u=r("./node_modules/webpack-dev-server/client/overlay.js"),c=r("./node_modules/webpack-dev-server/client/utils/log.js"),h=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),d=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),p=r("./node_modules/webpack-dev-server/client/utils/createSocketURL.js"),f={isUnloading:!1,currentHash:r.h()},g={hot:!1,liveReload:!1,progress:!1,overlay:!1},m=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info");function v(e){s().setLogLevel("verbose"===e||"log"===e?"info":e),(0,c.setLogLevel)(e)}"true"===m.hot&&(g.hot=!0,c.log.info("Hot Module Replacement enabled.")),"true"===m["live-reload"]&&(g.liveReload=!0,c.log.info("Live Reloading enabled.")),m.logging&&(g.logging=m.logging),g.logging&&v(g.logging),self.addEventListener("beforeunload",(function(){f.isUnloading=!0}));var y={hot:function(){"false"!==m.hot&&(g.hot=!0,c.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==m["live-reload"]&&(g.liveReload=!0,c.log.info("Live Reloading enabled."))},invalid:function(){c.log.info("App updated. Recompiling..."),g.overlay&&(0,u.hide)(),(0,h.default)("Invalid")},hash:function(e){f.previousHash=f.currentHash,f.currentHash=e},logging:v,overlay:function(e){"undefined"!=typeof document&&(g.overlay=e)},progress:function(e){g.progress=e},"progress-update":function(e){g.progress&&c.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,h.default)("Progress",e)},"still-ok":function(){c.log.info("Nothing changed."),g.overlay&&(0,u.hide)(),(0,h.default)("StillOk")},ok:function(){(0,h.default)("Ok"),g.overlay&&(0,u.hide)(),(0,d.default)(g,f)},"content-changed":function(e){c.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){c.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e){c.log.warn("Warnings while compiling.");var t=e.map((function(e){return o()(e.message?e.message:e)}));(0,h.default)("Warnings",t);for(var r=0;r<t.length;r++)c.log.warn(t[r]);("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.warnings)&&(0,u.show)(e,"warnings"),(0,d.default)(g,f)},errors:function(e){c.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){return o()(e.message?e.message:e)}));(0,h.default)("Errors",t);for(var r=0;r<t.length;r++)c.log.error(t[r]);("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.errors)&&(0,u.show)(e,"errors")},error:function(e){c.log.error(e)},close:function(){c.log.info("Disconnected!"),g.overlay&&(0,u.hide)(),(0,h.default)("Close")}},_=(0,p.default)(m);(0,l.default)(_,y)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function r(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=i;var o=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[o]=t,this.getChildLogger=r}var t,n,u;return t=e,n=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this[o](i.error,r)}}},{key:"trace",value:function(){this[o](i.trace,["Trace"])}},{key:"clear",value:function(){this[o](i.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupEnd,t)}},{key:"profile",value:function(e){this[o](i.profile,[e])}},{key:"profileEnd",value:function(e){this[o](i.profileEnd,[e])}},{key:"time",value:function(e){this[a]=this[a]||new Map,this[a].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var n=process.hrtime(t);this[o](i.time,[e].concat(r(n)))}},{key:"timeEnd",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var n=process.hrtime(t);this[a].delete(e),this[o](i.time,[e].concat(r(n)))}},{key:"timeAggregate",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[a].delete(e),this[l]=this[l]||new Map;var n=this[l].get(e);void 0!==n&&(r[1]+n[1]>1e9?(r[0]+=n[0]+1,r[1]=r[1]-1e9+n[1]):(r[0]+=n[0],r[1]+=n[1])),this[l].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&this[o](i.time,[e].concat(r(t)))}}}],n&&s(t.prototype,n),u&&s(t,u),e}();t.Logger=u},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function n(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=r("./node_modules/webpack/lib/logging/Logger.js").LogType,o=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},a={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,s=e.debug,l=void 0!==s&&s,u=e.console,c="boolean"==typeof l?[function(){return l}]:[].concat(l).map(o),h=a["".concat(r)]||0;return function(e,t,r){var s=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(n(r.slice(1))):["[".concat(e,"]")].concat(n(r)):[]},o=c.some((function(t){return t(e)}));switch(t){case i.debug:if(!o)return;"function"==typeof u.debug?u.debug.apply(u,n(s())):u.log.apply(u,n(s()));break;case i.log:if(!o&&h>a.log)return;u.log.apply(u,n(s()));break;case i.info:if(!o&&h>a.info)return;u.info.apply(u,n(s()));break;case i.warn:if(!o&&h>a.warn)return;u.warn.apply(u,n(s()));break;case i.error:if(!o&&h>a.error)return;u.error.apply(u,n(s()));break;case i.trace:if(!o)return;u.trace();break;case i.groupCollapsed:if(!o&&h>a.log)return;if(!o&&h>a.verbose){"function"==typeof u.groupCollapsed?u.groupCollapsed.apply(u,n(s())):u.log.apply(u,n(s()));break}case i.group:if(!o&&h>a.log)return;"function"==typeof u.group?u.group.apply(u,n(s())):u.log.apply(u,n(s()));break;case i.groupEnd:if(!o&&h>a.log)return;"function"==typeof u.groupEnd&&u.groupEnd();break;case i.time:if(!o&&h>a.log)return;var l=1e3*r[1]+r[2]/1e6,d="[".concat(e,"] ").concat(r[0],": ").concat(l," ms");"function"==typeof u.logTime?u.logTime(d):u.log(d);break;case i.profile:"function"==typeof u.profile&&u.profile.apply(u,n(s()));break;case i.profileEnd:"function"==typeof u.profileEnd&&u.profileEnd.apply(u,n(s()));break;case i.clear:if(!o&&h>a.log)return;"function"==typeof u.clear&&u.clear();break;case i.status:if(!o&&h>a.info)return;"function"==typeof u.status?0===r.length?u.status():u.status.apply(u,n(s())):0!==r.length&&u.info.apply(u,n(s()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(this,arguments)}var s=r("./client-src/modules/logger/SyncBailHookFake.js"),i=r("./node_modules/webpack/lib/logging/Logger.js").Logger,o=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),a={level:"info",debug:!1,console},l=o(a);t.getLogger=function(e){return new i((function(r,n){void 0===t.hooks.log.call(e,r,n)&&l(e,r,n)}),(function(r){return t.getLogger("".concat(e,"/").concat(r))}))},t.configureDefaultLogger=function(e){n(a,e),l=o(a)},t.hooks={log:new s(["origin","type","args"])}}},r={};function n(t){var s=r[t];if(void 0!==s)return s.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};!function(){n.r(s),n.d(s,{default:function(){return e}});var e=n("./node_modules/webpack/lib/logging/runtime.js")}();var i=t;for(var o in s)i[o]=s[o];s.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":(e,t)=>{!function(){"use strict";var e={"./node_modules/strip-ansi/index.js":function(e,t,r){r.r(t),r.d(t,{default:function(){return s}});var n=r("./node_modules/strip-ansi/node_modules/ansi-regex/index.js");function s(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace((0,n.default)(),"")}},"./node_modules/strip-ansi/node_modules/ansi-regex/index.js":function(e,t,r){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.onlyFirst,r=void 0!==t&&t,n=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(n,r?void 0:"g")}r.r(t),r.d(t,{default:function(){return n}})}},r={};function n(t){var s=r[t];if(void 0!==s)return s.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};!function(){n.r(s);var e=n("./node_modules/strip-ansi/index.js");s.default=e.default}();var i=t;for(var o in s)i[o]=s[o];s.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{show:()=>d,hide:()=>h});var n,s,i=r("./node_modules/ansi-html-community/index.js"),o=r.n(i),a=r("./node_modules/html-entities/lib/index.js"),l={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},u=[];function c(e){s?e(s):(u.push(e),n||((n=document.createElement("iframe")).id="webpack-dev-server-client-overlay",n.src="about:blank",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.width="100vw",n.style.height="100vh",n.style.border="none",n.style.zIndex=9999999999,n.onload=function(){(s=n.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",s.style.position="fixed",s.style.boxSizing="border-box",s.style.left=0,s.style.top=0,s.style.right=0,s.style.bottom=0,s.style.width="100vw",s.style.height="100vh",s.style.backgroundColor="rgba(0, 0, 0, 0.85)",s.style.color="#E8E8E8",s.style.fontFamily="Menlo, Consolas, monospace",s.style.fontSize="large",s.style.padding="2rem",s.style.lineHeight="1.2",s.style.whiteSpace="pre-wrap",s.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var t=document.createElement("button");t.innerText="X",t.style.background="transparent",t.style.border="none",t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="white",t.style.cursor="pointer",t.style.cssFloat="right",t.style.styleFloat="right",t.addEventListener("click",(function(){h()})),s.appendChild(e),s.appendChild(t),s.appendChild(document.createElement("br")),s.appendChild(document.createElement("br")),n.contentDocument.body.appendChild(s),u.forEach((function(e){e(s)})),u=[],n.onload=null},document.body.appendChild(n)))}function h(){n&&(document.body.removeChild(n),n=null,s=null)}function d(e,t){c((function(){e.forEach((function(r){var n=document.createElement("div"),i=document.createElement("span");i.innerText="warnings"===t?"Warning:":"Error:",i.style.color="#".concat(l.red);var u=r.message||e[0],c=o()((0,a.encode)(u)),h=document.createElement("div");h.innerHTML=c,n.appendChild(i),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),n.appendChild(h),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),s.appendChild(n)}))}))}o().setColors(l)},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),s=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),i=void 0!==s?void 0!==s.default?s.default:s:n.default,o=0,a=null,l=function(e,t){(a=new i(e)).onOpen((function(){o=0})),a.onClose((function(){if(0===o&&t.close(),a=null,o<=10){var r=1e3*Math.pow(2,o)+100*Math.random();o+=1,setTimeout((function(){l(e,t)}),r)}})),a.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data)}))};const u=l},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/url/url.js");const s=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var s=e.protocol||self.location.protocol;("auto:"===s||t&&r&&"https:"===self.location.protocol)&&(s=self.location.protocol),s=s.replace(/^(?:http|.+-extension|file)/i,"ws");var i="";e.username&&(i=e.username,e.password&&(i=i.concat(":",e.password)));var o=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),a=e.port;a&&"0"!==a||(a=self.location.port);var l="/ws";return e.pathname&&!e.fromCurrentScript&&(l=e.pathname),n.format({protocol:s,auth:i,hostname:o,port:a,pathname:l,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>o,setLogLevel:()=>i});var n=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),s=r.n(n);function i(e){s().configureDefaultLogger({level:e})}i("info");var o=s().getLogger("webpack-dev-server")},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/url/url.js"),s=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const i=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.substr(1).split("&"),i=0;i<r.length;i++){var o=r[i].split("=");t[o[0]]=decodeURIComponent(o[1])}else{var a=(0,s.default)();if(a){var l;try{l=new URL(a,self.location.href)}catch(e){}l&&((t=l).fromCurrentScript=!0)}else(t=n.parse(self.location.href,!0,!0)).fromCurrentScript=!0}return t}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/webpack/hot/emitter.js"),s=r.n(n),i=r("./node_modules/webpack-dev-server/client/utils/log.js");const o=function(e,t){var r=e.hot,n=e.liveReload;if(!t.isUnloading){var o=t.currentHash,a=t.previousHash;if(!(o.indexOf(a)>=0)){var l=self.location.search.toLowerCase(),u=-1===l.indexOf("webpack-dev-server-hot=false"),c=-1===l.indexOf("webpack-dev-server-live-reload=false");if(r&&u)i.log.info("App hot update..."),s().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(n&&c)var h=self,d=self.setInterval((function(){("about:"!==h.location.protocol||(h=h.parent).parent===h)&&p(h,d)}))}}function p(e,t){clearInterval(t),i.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var n,s=function(){return n.indexOf(r.h())>=0},i=r("./node_modules/webpack/hot/log.js"),o=function t(){e.hot.check(!0).then((function(e){if(!e)return i("warning","[HMR] Cannot find update. Need to do a full reload!"),i("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void window.location.reload();s()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),s()&&i("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(i("warning","[HMR] Cannot apply update. Need to do a full reload!"),i("warning","[HMR] "+i.formatError(t)),window.location.reload()):i("warning","[HMR] Update failed: "+i.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){n=t,s()||"idle"!==e.hot.status()||(i("info","[HMR] Checking for updates on the server..."),o())})),i("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var n=r("./node_modules/events/events.js");e.exports=new n},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var n=e.filter((function(e){return t&&t.indexOf(e)<0})),s=r("./node_modules/webpack/hot/log.js");(n.length>0&&(s("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),n.forEach((function(e){s("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(s("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");s.groupCollapsed("info","[HMR]  - "+t.pop()),s("info","[HMR]  - "+e),s.groupEnd("info")}else s("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&s("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):s("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function n(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function s(e){return function(t,r){n(t)&&e(r)}}e.exports=function(e,t){n(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,o=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=s(i),e.exports.groupCollapsed=s(o),e.exports.groupEnd=s(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./styles/index.scss":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},"./app/shaders/home-fragment.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/home-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="#define GLSLIFY 1\n#define PI 3.14159265359\n\nattribute vec2 uv;\n\nattribute vec3 position;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n  newPosition.z -= sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) * abs(uSpeed);\n  // newPosition.z -= sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) * 0.7;\n\n  gl_Position = projectionMatrix * newPosition;\n}\n"},"./app/shaders/plane-fragment.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="#define GLSLIFY 1\nattribute vec2 uv;\n\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"}},l={};function u(e){var t=l[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=l[e]={id:e,loaded:!1,exports:{}};try{var n={id:e,module:r,factory:a[e],require:u};u.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require)}catch(e){throw r.error=e,e}return r.loaded=!0,r.exports}u.m=a,u.c=l,u.i=[],u.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return u.d(t,{a:t}),t},u.d=(e,t)=>{for(var r in t)u.o(t,r)&&!u.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},u.hu=e=>e+"."+u.h()+".hot-update.js",u.miniCssF=e=>e+".css",u.hmrF=()=>"main."+u.h()+".hot-update.json",u.h=()=>"611da49ee003e07526c6",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="floema:",u.l=(r,n,s,i)=>{if(e[r])e[r].push(n);else{var o,a;if(void 0!==s)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var h=l[c];if(h.getAttribute("src")==r||h.getAttribute("data-webpack")==t+s){o=h;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,u.nc&&o.setAttribute("nonce",u.nc),o.setAttribute("data-webpack",t+s),o.src=r),e[r]=[n];var d=(t,n)=>{o.onerror=o.onload=null,clearTimeout(p);var s=e[r];if(delete e[r],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((e=>e(n))),t)return t(n)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=d.bind(null,o.onerror),o.onload=d.bind(null,o.onload),a&&document.head.appendChild(o)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,n,s={},i=u.c,o=[],a=[],l="idle";function c(e){l=e;for(var t=[],r=0;r<a.length;r++)t[r]=a[r].call(null,e);return Promise.all(t)}function h(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return h(e)}))}function d(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return c("check").then(u.hmrM).then((function(n){return n?c("prepare").then((function(){var s=[];return t=[],r=[],Promise.all(Object.keys(u.hmrC).reduce((function(e,t){return u.hmrC[t](n.c,n.r,n.m,e,r,s),e}),[])).then((function(){return h((function(){return e?f(e):c("ready").then((function(){return s}))}))}))})):c(g()?"ready":"idle").then((function(){return null}))}))}function p(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):f(e)}function f(e){e=e||{},g();var t=r.map((function(t){return t(e)}));r=void 0;var s=t.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return c("abort").then((function(){throw s[0]}));var i=c("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var o,a=c("apply"),l=function(e){o||(o=e)},u=[];return t.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)u.push(t[r])}})),Promise.all([i,a]).then((function(){return o?c("fail").then((function(){throw o})):n?f(e).then((function(e){return u.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):c("idle").then((function(){return u}))}))}function g(){if(n)return r||(r=[]),Object.keys(u.hmrI).forEach((function(e){n.forEach((function(t){u.hmrI[e](t,r)}))})),n=void 0,!0}u.hmrD=s,u.i.push((function(f){var g,m,v,y,_=f.module,b=function(r,n){var s=i[n];if(!s)return r;var a=function(t){if(s.hot.active){if(i[t]){var a=i[t].parents;-1===a.indexOf(n)&&a.push(n)}else o=[n],e=t;-1===s.children.indexOf(t)&&s.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),o=[];return r(t)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var d in r)Object.prototype.hasOwnProperty.call(r,d)&&"e"!==d&&Object.defineProperty(a,d,u(d));return a.e=function(e){return function(e){switch(l){case"ready":return c("prepare"),t.push(e),h((function(){return c("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},a}(f.require,f.id);_.hot=(g=f.id,m=_,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==g,_requireSelf:function(){o=m.parents.slice(),e=v?void 0:g,u(g)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":r=[],Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](g,r)})),c("ready");break;case"ready":Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](g,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(g)}},check:d,apply:p,status:function(e){if(!e)return l;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:s[g]},e=void 0,y),_.parents=o,_.children=[],o=[],f.require=b})),u.hmrC={},u.hmrI={}})(),(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var t=u.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e})(),r=(e,t,r,n)=>{var s=document.createElement("link");return s.rel="stylesheet",s.type="text/css",s.onerror=s.onload=i=>{if(s.onerror=s.onload=null,"load"===i.type)r();else{var o=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=o,l.request=a,s.parentNode.removeChild(s),n(l)}},s.href=t,document.head.appendChild(s),s},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var s=(o=r[n]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(s===e||s===t))return o}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var o;if((s=(o=i[n]).getAttribute("data-href"))===e||s===t)return o}},s=[],i=[],o=e=>({dispose:()=>{for(var e=0;e<s.length;e++){var t=s[e];t.parentNode&&t.parentNode.removeChild(t)}s.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),u.hmrC.miniCss=(e,t,a,l,c,h)=>{c.push(o),e.forEach((e=>{var t=u.miniCssF(e),o=u.p+t,a=n(t,o);a&&l.push(new Promise(((t,n)=>{var l=r(e,o,(()=>{l.as="style",l.rel="preload",t()}),n);s.push(a),i.push(l)})))}))},(()=>{var e,t,r,n,s=u.hmrS_jsonp=u.hmrS_jsonp||{main:0},i={};function o(e){return new Promise(((t,r)=>{i[e]=t;var n=u.p+u.hu(e),s=new Error;u.l(n,(t=>{if(i[e]){i[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;s.message="Loading hot update chunk "+e+" failed.\n("+n+": "+o+")",s.name="ChunkLoadError",s.type=n,s.request=o,r(s)}}))}))}function a(i){function o(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var s=n.pop(),i=s.id,o=s.chain,l=u.c[i];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:i};if(l.hot._main)return{type:"unaccepted",chain:o,moduleId:i};for(var c=0;c<l.parents.length;c++){var h=l.parents[c],d=u.c[h];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:o.concat([h]),moduleId:i,parentId:h};-1===t.indexOf(h)&&(d.hot._acceptedDependencies[i]?(r[h]||(r[h]=[]),a(r[h],[i])):(delete r[h],t.push(h),n.push({chain:o.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}u.f&&delete u.f.jsonpHmr,e=void 0;var l={},c=[],h={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(u.o(t,p)){var f,g=t[p],m=!1,v=!1,y=!1,_="";switch((f=g?o(p):{type:"disposed",moduleId:p}).chain&&(_="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":i.onDeclined&&i.onDeclined(f),i.ignoreDeclined||(m=new Error("Aborted because of self decline: "+f.moduleId+_));break;case"declined":i.onDeclined&&i.onDeclined(f),i.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+_));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(f),i.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+_));break;case"accepted":i.onAccepted&&i.onAccepted(f),v=!0;break;case"disposed":i.onDisposed&&i.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(m)return{error:m};if(v)for(p in h[p]=g,a(c,f.outdatedModules),f.outdatedDependencies)u.o(f.outdatedDependencies,p)&&(l[p]||(l[p]=[]),a(l[p],f.outdatedDependencies[p]));y&&(a(c,[f.moduleId]),h[p]=d)}t=void 0;for(var b,x=[],D=0;D<c.length;D++){var w=c[D],E=u.c[w];E&&(E.hot._selfAccepted||E.hot._main)&&h[w]!==d&&!E.hot._selfInvalidated&&x.push({module:w,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete s[e]})),r=void 0;for(var t,n=c.slice();n.length>0;){var i=n.pop(),o=u.c[i];if(o){var a={},h=o.hot._disposeHandlers;for(D=0;D<h.length;D++)h[D].call(null,a);for(u.hmrD[i]=a,o.hot.active=!1,delete u.c[i],delete l[i],D=0;D<o.children.length;D++){var d=u.c[o.children[D]];d&&((e=d.parents.indexOf(i))>=0&&d.parents.splice(e,1))}}}for(var p in l)if(u.o(l,p)&&(o=u.c[p]))for(b=l[p],D=0;D<b.length;D++)t=b[D],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(e){for(var t in h)u.o(h,t)&&(u.m[t]=h[t]);for(var r=0;r<n.length;r++)n[r](u);for(var s in l)if(u.o(l,s)){var o=u.c[s];if(o){b=l[s];for(var a=[],d=[],p=[],f=0;f<b.length;f++){var g=b[f],m=o.hot._acceptedDependencies[g],v=o.hot._acceptedErrorHandlers[g];if(m){if(-1!==a.indexOf(m))continue;a.push(m),d.push(v),p.push(g)}}for(var y=0;y<a.length;y++)try{a[y].call(null,b)}catch(t){if("function"==typeof d[y])try{d[y](t,{moduleId:s,dependencyId:p[y]})}catch(r){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:s,dependencyId:p[y],error:r,originalError:t}),i.ignoreErrored||(e(r),e(t))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:s,dependencyId:p[y],error:t}),i.ignoreErrored||e(t)}}}for(var _=0;_<x.length;_++){var D=x[_],w=D.module;try{D.require(w)}catch(t){if("function"==typeof D.errorHandler)try{D.errorHandler(t,{moduleId:w,module:u.c[w]})}catch(r){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:w,error:r,originalError:t}),i.ignoreErrored||(e(r),e(t))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:w,error:t}),i.ignoreErrored||e(t)}}return c}}}self.webpackHotUpdatefloema=(e,r,s)=>{for(var o in r)u.o(r,o)&&(t[o]=r[o]);s&&n.push(s),i[e]&&(i[e](),i[e]=void 0)},u.hmrI.jsonp=function(e,s){t||(t={},n=[],r=[],s.push(a)),u.o(t,e)||(t[e]=u.m[e])},u.hmrC.jsonp=function(i,l,c,h,d,p){d.push(a),e={},r=l,t=c.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],i.forEach((function(t){u.o(s,t)&&void 0!==s[t]&&(h.push(o(t)),e[t]=!0)})),u.f&&(u.f.jsonpHmr=function(t,r){e&&!u.o(e,t)&&u.o(s,t)&&void 0!==s[t]&&(r.push(o(t)),e[t]=!0)})},u.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(u.p+u.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),u("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info"),u("./node_modules/webpack/hot/dev-server.js"),u("./app/index.js");u("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFlBQVksSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFlBQVksSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsS0FBS25CLFdBQVcsQ0FBQyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLEVBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsRUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFFBQVEsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFNBQVMsSUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFNBQVMsRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksWUFBWSxFQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLE9BQU8sRUFBSSxPQUFPLEVBQUksT0FBTyxFQUFJLFlBQVksRUFBSSxPQUFPLEVBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksWUFBWSxFQUFJLFFBQVEsRUFBSSxRQUFRLEVBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksWUFBWSxFQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLE9BQU8sRUFBSSxPQUFPLEVBQUksT0FBTyxFQUFJLFlBQVksRUFBSSxPQUFPLEVBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFlBQVksRUFBSSxRQUFRLEVBQUksUUFBUSxFQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksYUFBYSxFQUFJLFVBQVUsRUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLElBQUksVUFBVSxFQUFJLFlBQVksSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVlqQixNQUFNLENBQUNvQyxTQUFTLENBQUMsU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssa0JBQWtCLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxX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QUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxjQUFjLElBQUksVUFBVSxJQUFJLGVBQWUsS0FBSyxjQUFjLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxtQkFBbUIsSUFBSSxlQUFlLElBQUksU0FBUyxLQUFLLGNBQWMsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxpQkFBaUIsSUFBSSxxQkFBcUIsSUFBSSxVQUFVLElBQUksY0FBYyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssWUFBWSxJQUFJLGVBQWUsSUFBSSxxQkFBcUIsSUFBSSxnQkFBZ0IsSUFBSSxrQkFBa0IsSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLFlBQVksSUFBSSxnQkFBZ0IsSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxnQkFBZ0IsSUFBSSxpQkFBaUIsSUFBSSxzQkFBc0IsSUFBSSxrQkFBa0IsSUFBSSxrQkFBa0IsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxRQUFRLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLG1CQUFtQixJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLGdCQUFnQixJQUFJLGNBQWMsSUFBSSxZQUFZLElBQUksY0FBYyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxjQUFjLElBQUksYUFBYSxJQUFJLFlBQVksSUFBSSxvQkFBb0IsSUFBSSxrQkFBa0IsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksaUJBQWlCLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksc0JBQXNCLElBQUksc0JBQXNCLElBQUksdUJBQXVCLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssWUFBWSxLQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLGNBQWMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLG9CQUFvQixJQUFJLHFCQUFxQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLGdCQUFnQixJQUFJLGdCQUFnQixJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksY0FBYyxJQUFJLG1CQUFtQixJQUFJLGNBQWMsSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxxQkFBcUIsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksZ0JBQWdCLElBQUksaUJBQWlCLElBQUksa0JBQWtCLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksUUFBUSxLQUFLLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksZUFBZSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksY0FBYyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGNBQWMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxhQUFhLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFNBQVMsS0FBSyxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxTQUFTLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLGNBQWMsSUFBSSxrQkFBa0IsSUFBSSxvQkFBb0IsSUFBSSxrQkFBa0IsSUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSx3QkFBd0IsSUFBSSxtQkFBbUIsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksY0FBYyxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxrQkFBa0IsSUFBSSx1QkFBdUIsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxlQUFlLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxrQkFBa0IsSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxPQUFPLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssUUFBUSxLQUFLLFNBQVMsS0FBSyxlQUFlLElBQUksb0JBQW9CLElBQUksUUFBUSxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssZ0JBQWdCLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxLQUFLLFVBQVUsS0FBSyxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxLQUFLLFdBQVcsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxLQUFLLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksUUFBUSxLQUFLLFFBQVEsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxjQUFjLEtBQUssU0FBUyxLQUFLLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxlQUFlLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxjQUFjLEtBQUssU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssYUFBYSxLQUFLLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLFdBQVcsS0FBSyxVQUFVLEtBQUssWUFBWSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxZQUFZLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssV0FBVyxLQUFLLGdCQUFnQixJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLGNBQWMsSUFBSSxtQkFBbUIsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLGNBQWMsSUFBSSxlQUFlLEtBQUssVUFBVSxJQUFJLFlBQVksS0FBSyxTQUFTLElBQUksVUFBVSxLQUFLLFVBQVUsSUFBSSxZQUFZLEtBQUssY0FBYyxJQUFJLGVBQWUsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksbUJBQW1CLElBQUkscUJBQXFCLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFlBQVksSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxZQUFZLEtBQUssV0FBVyxJQUFJLFlBQVksS0FBSyxVQUFVLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLGNBQWMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGVBQWUsSUFBSSxnQkFBZ0IsSUFBSSxXQUFXLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLEtBQUssZ0JBQWdCLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGNBQWMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGVBQWUsSUFBSSxtQkFBbUIsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSxxQkFBcUIsSUFBSSxvQkFBb0IsSUFBSSxvQkFBb0IsSUFBSSxTQUFTLElBQUksaUJBQWlCLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFFBQVEsS0FBSyxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLGtCQUFrQixJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxLQUFLLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxVQUFVLElBQUksV0FBVyxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxvQkFBb0IsSUFBSSxnQkFBZ0IsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGVBQWUsSUFBSSxnQkFBZ0IsSUFBSSxXQUFXLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJLGNBQWMsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxnQkFBZ0IsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLGlCQUFpQixJQUFJLGlCQUFpQixJQUFJLG1CQUFtQixJQUFJLGNBQWMsSUFBSSxrQkFBa0IsSUFBSSxvQkFBb0IsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxxQkFBcUIsSUFBSSxzQkFBc0IsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFlBQVksSUFBSSxnQkFBZ0IsSUFBSSxrQkFBa0IsSUFBSSxtQkFBbUIsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxpQkFBaUIsS0FBSyxrQkFBa0IsS0FBSyxpQkFBaUIsS0FBSyxrQkFBa0IsS0FBSyxhQUFhLElBQUksb0JBQW9CLElBQUkscUJBQXFCLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsS0FBSyxVQUFVLEtBQUssU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsS0FBSyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLE9BQU8sSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMs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SSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksV0FBVyxFQUFJLE9BQU8sRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksV0FBVyxHQUFLLFFBQVEsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxZQUFZLEdBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksT0FBTyxHQUFLLFNBQVMsRUFBSSxXQUFXLEVBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksb0JBQW9CLElBQUksU0FBUyxFQUFJLFFBQVEsR0FBSyxRQUFRLEVBQUksUUFBUSxFQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksUUFBUSxJQUFJLFNBQVMsR0FBSyxRQUFRLEVBQUksY0FBYyxHQUFLLFNBQVMsSUFBSSxhQUFhLElBQUksUUFBUSxFQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksc0JBQXNCLElBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksUUFBUSxFQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsRUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksdUJBQXVCLElBQUkscUJBQXFCLElBQUksdUJBQXVCLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLHFCQUFxQixJQUFJLG9CQUFvQixJQUFJLHNCQUFzQixJQUFJLHFCQUFxQixJQUFJLG1CQUFtQixJQUFJLHFCQUFxQixJQUFJLG1CQUFtQixJQUFJLG1CQUFtQixFQUFJLFVBQVUsSUFBSSxpQkFBaUIsSUFBSSxVQUFVLEVBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxnQkFBZ0IsRUFBSSxXQUFXLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLElBQUksT0FBTyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsR0FBSyxRQUFRLElBQUksWUFBWSxFQUFJLFVBQVUsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksZ0JBQWdCLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsRUFBSSxVQUFVLElBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxTQUFTLEtBQUssUUFBUSxFQUFJLFFBQVEsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFFBQVEsR0FBSyxRQUFRLElBQUksY0FBYyxFQUFJLFVBQVUsS0FBSyxlQUFlLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksU0FBUyxHQUFLLFNBQVMsRUFBSSxXQUFXLEVBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFdBQVcsR0FBSyxRQUFRLEVBQUksV0FBVyxFQUFJLFVBQVVqMEUsRUFBRSxXQUFXLElBQUksZUFBZSxJQUFJLFNBQVMsSUFBSSxxQkFBcUIsSUFBSSxTQUFTLElBQUksVUFBVSxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFlBQVksRUFBSSxVQUFVLEVBQUksWUFBWSxFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksV0FBVyxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxFQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxzQkFBc0IsSUFBSSxXQUFXLElBQUksV0FBVyxHQUFLLFFBQVEsR0FBSyxTQUFTLEdBQUssU0FBUyxJQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksV0FBVyxHQUFLLFFBQVEsR0FBSyxTQUFTLEdBQUssU0FBUyxHQUFLLFFBQVEsRUFBSSxPQUFPLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxTQUFTLEVBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsR0FBSyxRQUFRLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxTQUFTLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksUUFBUSxFQUFJLFNBQVMsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLGFBQWEsR0FBSyxTQUFTLEVBQUksV0FBVyxFQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFVBQVUsR0FBSyxRQUFRLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksWUFBWSxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFNBQVMsRUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGFBQWEsRUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFlBQVksRUFBSSxTQUFTLEVBQUksU0FBUyxJQUFJLFVBQVUsR0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxRQUFRLEtBQUssWUFBWSxJQUFJLFNBQVMsR0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxFQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxHQUFLLFFBQVEsRUFBSSxTQUFTLElBQUksY0FBYyxFQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxZQUFZLEdBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxHQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxvQkFBb0IsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxFQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFFBQVEsRUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsR0FBSyxRQUFRLElBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVdzMkUsRUFBRSxXQUFXLEdBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxHQUFLLFNBQVMsRUFBSSxTQUFTLElBQUksU0FBUyxFQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksaUJBQWlCLElBQUksWUFBWSxFQUFJLFNBQVMsSUFBSSxhQUFhLEVBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxXQUFXLElBQUksV0FBVyxFQUFJLFVBQVUsSUFBSSxZQUFZLEVBQUksUUFBUSxFQUFJLFNBQVMsSUFBSSxrQkFBa0IsR0FBSyxRQUFRLElBQUksT0FBTyxFQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxhQUFhLEVBQUksUUFBUSxJQUFJLGdCQUFnQixJQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxFQUFJLFFBQVEsSUFBSSxTQUFTLEVBQUksVUFBVSxHQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsRUFBSSxZQUFZLEVBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxpQkFBaUIsSUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFFBQVEsRUFBSSxRQUFRLEVBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEVBQUksUUFBUSxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsR0FBSyxRQUFRLEVBQUksVUFBVUMsR0FBRyxVQUFVLElBQUksU0FBUyxFQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUksU0FBUyxHQUFLLFNBQVMsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxlQUFlLEVBQUksV0FBVyxFQUFJLFVBQVUsSUFBSSxjQUFjLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksV0FBVyxHQUFLLFFBQVEsRUFBSSxVQUFVLEVBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksd0JBQXdCLEVBQUksV0FBVyxFQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFdBQVcsR0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFdBQVcsR0FBSyxTQUFTLEVBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxTQUFTLElBQUksVUFBVSxHQUFLLFFBQVEsRUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksV0FBVyxJQUFJLFNBQVMsRUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksU0FBUyxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxRQUFRLEdBQUssUUFBUSxFQUFJLFVBQVUsR0FBSyxTQUFTLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLGFBQWEsRUFBSSxXQUFXLEVBQUksUUFBUSxHQUFLLFFBQVEsRUFBSSxXQUFXLEVBQUksU0FBUyxFQUFJLFNBQVMsR0FBSyxTQUFTLEdBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLFNBQVMsRUFBSSxXQUFXLElBQUksYUFBYSxFQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksa0JBQWtCLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksYUFBYSxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsR0FBSyxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsRUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksaUJBQWlCLElBQUksYUFBYSxJQUFJLFlBQVksS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksUUFBUSxJQUFJLFVBQVUsR0FBSyxRQUFRLElBQUksUUFBUSxFQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxHQUFLLFNBQVMsR0FBSyxTQUFTLEVBQUksT0FBTyxJQUFJLFVBQVUsS0FBSyxRQUFRLEtBQUssUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLEtBQUssUUFBUSxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxXQUFXLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxVQUFVLEVBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLFdBQVcsS0FBSyxhQUFhLElBQUksU0FBUyxFQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxVQUFVLElBQUksU0FBUyxHQUFLLFFBQVEsSUFBSSxvQkFBb0IsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsRUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLGVBQWUsSUFBSSxTQUFTLEdBQUssU0FBUyxJQUFJLFFBQVEsS0FBSyxXQUFXLEtBQUssYUFBYSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksS0FBSyxXQUFXLEtBQUssVUFBVSxJQUFJLFlBQVksSUFBSSxnQkFBZ0IsS0FBSyxXQUFXLEtBQUssV0FBVyxHQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssZUFBZSxJQUFJLFNBQVMsS0FBSyxlQUFlLEVBQUksV0FBVyxFQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxXQUFXLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxZQUFZLElBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssWUFBWSxJQUFJLFdBQVcsS0FBSyxZQUFZLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxFQUFJLFVBQVUsSUFBSSxVQUFVLEdBQUssUUFBUSxJQUFJLFNBQVMsRUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFlBQVksSUFBSSxTQUFTLEdBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsRUFBSSxTQUFTLEVBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxRQUFRLEVBQUksV0FBVyxJQUFJLFNBQVMsRUFBSSxXQUFXLElBQUksYUFBYSxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksR0FBSyxRQUFRLEVBQUksUUFBUSxFQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksT0FBTyxFQUFJLFVBQVUsRUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLGFBQWEsR0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFdBQVcsR0FBSyxTQUFTLEVBQUksUUFBUSxJQUFJLFdBQVcsR0FBSyxRQUFRLEdBQUssU0FBUyxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLG1CQUFtQixJQUFJLG9CQUFvQixJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsR0FBSyxRQUFRLElBQUksV0FBVyxFQUFJLFFBQVEsRUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLFlBQVksSUFBSSxPQUFPLEVBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxlQUFlLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLEVBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsR0FBSyxRQUFRLElBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxLQUFLLFVBQVUsRUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLGNBQWMsS0FBSyxXQUFXLEtBQUssV0FBVyxHQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGNBQWMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxlQUFlLElBQUksY0FBYyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksV0FBVyxFQUFJLFFBQVEsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxXQUFXLEdBQUssUUFBUSxFQUFJLFVBQVUsRUFBSSxhQUFhLEVBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsR0FBSyxTQUFTLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxXQUFXLElBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksV0FBVyxJQUFJLFdBQVcsR0FBSyxRQUFRLEVBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksVUFBVSxHQUFLLFNBQVMsRUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFdBQVcsS0FBSyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsRUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEdBQUssUUFBUSxHQUFLLFNBQVMsR0FBSyxTQUFTLElBQUksWUFBWSxFQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxFQUFJLE9BQU8sR0FBSyxRQUFRLEdBQUssU0FBUyxHQUFLLFNBQVMsR0FBSyxRQUFRLEVBQUksT0FBTyxJQUFJLFNBQVMsR0FBSyxTQUFTLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFFBQVEsSUFBSSxRQUFRLEdBQUssUUFBUSxFQUFJLFNBQVMsR0FBSyxT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aXB0Iiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2FuaW1hdGlvbnMvSGlnaGxpZ2h0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9hbmltYXRpb25zL1BhcmFncmFwaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvYW5pbWF0aW9ucy9UaXRsZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY2xhc3Nlcy9BbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NsYXNzZXMvQXN5bmNMb2FkLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jbGFzc2VzL0NvbG9ycy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY2xhc3Nlcy9Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NsYXNzZXMvUGFnZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0Fib3V0L0dhbGxlcnkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0Fib3V0L01lZGlhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9BYm91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvQ29sbGVjdGlvbnMvTWVkaWEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0NvbGxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9EZXRhaWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0hvbWUvTWVkaWEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL05hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvUHJlbG9hZGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvcGFnZXMvQWJvdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3BhZ2VzL0NvbGxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9wYWdlcy9EZXRhaWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3BhZ2VzL0hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3V0aWxzL2NvbG9yLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC91dGlscy90ZXh0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9hbnNpLWh0bWwtY29tbXVuaXR5L2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9DU1NSdWxlUGx1Z2luLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL0RyYWdnYWJsZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9FYXNlUGFjay5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9FYXNlbFBsdWdpbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9Nb3Rpb25QYXRoUGx1Z2luLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL1BpeGlQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2dzYXAvU2Nyb2xsVG9QbHVnaW4uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2dzYXAvU2Nyb2xsVHJpZ2dlci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9UZXh0UGx1Z2luLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL2FsbC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9nc2FwLWNvcmUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2dzYXAvdXRpbHMvbWF0cml4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL3V0aWxzL3BhdGhzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL3V0aWxzL3N0cmluZ3MuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9uYW1lZC1yZWZlcmVuY2VzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9udW1lcmljLXVuaWNvZGUtbWFwLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlQdXNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yT3duLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzSW4uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXRlcmF0ZWUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VFYWNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxBcnJheXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWF0Y2hEYXRhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9scy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRUYWcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUFkZC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9QYXRoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZWFjaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZm9yRWFjaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2dldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tZW1vaXplLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL25vcm1hbGl6ZS11cmwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9pc0V2ZW50U3VwcG9ydGVkLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL25vcm1hbGl6ZVdoZWVsLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvQ2FtZXJhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvR2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9NZXNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvUHJvZ3JhbS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1JlbmRlcmVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvVGV4dHVyZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9leHRyYXMvUGxhbmUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9FdWxlci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL01hdDMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9NYXQ0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvUXVhdC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL1ZlYzMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvRXVsZXJGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL01hdDNGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL01hdDRGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1F1YXRGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1ZlYzNGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1ZlYzRGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9wcmVmaXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2RlY29kZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZW5jb2RlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvdXJsL3VybC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2NyZWF0ZVNvY2tldFVSTC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9wYXJzZVVSTC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9yZWxvYWRBcHAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy1hcHBseS1yZXN1bHQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9zdHlsZXMvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvc2hhZGVycy9ob21lLWZyYWdtZW50Lmdsc2wiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3NoYWRlcnMvaG9tZS12ZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvc2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9zaGFkZXJzL3BsYW5lLXZlcnRleC5nbHNsIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IHVwZGF0ZSBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldCB1cGRhdGUgbWFuaWZlc3QgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2hvdCBtb2R1bGUgcmVwbGFjZW1lbnQiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcImZsb2VtYTpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHQ7XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsInZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpID0+IHtcblx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRsaW5rVGFnLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRsaW5rVGFnLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdHZhciBvbkxpbmtDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcy5cblx0XHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG51bGw7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJykge1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0dmFyIHJlYWxIcmVmID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5ocmVmIHx8IGZ1bGxocmVmO1xuXHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZWFsSHJlZiArIFwiKVwiKTtcblx0XHRcdGVyci5jb2RlID0gXCJDU1NfQ0hVTktfTE9BRF9GQUlMRURcIjtcblx0XHRcdGVyci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0ZXJyLnJlcXVlc3QgPSByZWFsSHJlZjtcblx0XHRcdGxpbmtUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rVGFnKVxuXHRcdFx0cmVqZWN0KGVycik7XG5cdFx0fVxuXHR9XG5cdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gb25MaW5rQ29tcGxldGU7XG5cdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG5cdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gbm8gY2h1bmsgbG9hZGluZ1xuXG52YXIgb2xkVGFncyA9IFtdO1xudmFyIG5ld1RhZ3MgPSBbXTtcbnZhciBhcHBseUhhbmRsZXIgPSAob3B0aW9ucykgPT4ge1xuXHRyZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9sZFRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBvbGRUYWcgPSBvbGRUYWdzW2ldO1xuXHRcdFx0aWYob2xkVGFnLnBhcmVudE5vZGUpIG9sZFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZFRhZyk7XG5cdFx0fVxuXHRcdG9sZFRhZ3MubGVuZ3RoID0gMDtcblx0fSwgYXBwbHk6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmV3VGFncy5sZW5ndGg7IGkrKykgbmV3VGFnc1tpXS5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0XHRuZXdUYWdzLmxlbmd0aCA9IDA7XG5cdH0gfTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5taW5pQ3NzID0gKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkgPT4ge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaCgoY2h1bmtJZCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdHZhciBvbGRUYWcgPSBmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZik7XG5cdFx0aWYoIW9sZFRhZykgcmV0dXJuO1xuXHRcdHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIHRhZyA9IGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsICgpID0+IHtcblx0XHRcdFx0dGFnLmFzID0gXCJzdHlsZVwiO1xuXHRcdFx0XHR0YWcucmVsID0gXCJwcmVsb2FkXCI7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0sIHJlamVjdCk7XG5cdFx0XHRvbGRUYWdzLnB1c2gob2xkVGFnKTtcblx0XHRcdG5ld1RhZ3MucHVzaCh0YWcpO1xuXHRcdH0pKTtcblx0fSk7XG59IiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiLi4vY2xhc3Nlcy9BbmltYXRpb25cIjtcclxuaW1wb3J0IHsgY2FsY3VsYXRlIH0gZnJvbSBcIi4uL3V0aWxzL3RleHRcIjtcclxuXHJcbmNsYXNzIEhpZ2hsaWdodCBleHRlbmRzIEFuaW1hdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XHJcbiAgICBzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pO1xyXG4gICAgdGhpcy5lbGVtZW50TGFiZWwgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5hYm91dF9faGlnaGxpZ2h0X19sYWJlbFwiKTtcclxuICB9XHJcblxyXG4gIGFuaW1hdGVJbigpIHtcclxuICAgIGlmICh0aGlzLmVsZW1lbnRMYWJlbCkge1xyXG4gICAgICB0aGlzLmFuaW1hdGVJblRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSgpO1xyXG5cclxuICAgICAgdGhpcy5hbmltYXRlSW5UaW1lbGluZS5zZXQodGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuYW5pbWF0ZUluVGltZWxpbmUuZnJvbVRvKFxyXG4gICAgICAgIHRoaXMuZWxlbWVudExhYmVsLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgICAgIHk6IFwiNXJlbVwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgICAgZHVyYXRpb246IDEuMixcclxuICAgICAgICAgIGRlbGF5OiAxLFxyXG4gICAgICAgICAgZWFzZTogXCJleHBvLm91dFwiLFxyXG4gICAgICAgICAgeTogXCIwJVwiLFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFuaW1hdGVPdXQoKSB7XHJcbiAgICBpZiAodGhpcy5lbGVtZW50TGFiZWwpIHtcclxuICAgICAgZ3NhcC5zZXQodGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgYXV0b0FscGhhOiAwLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uUmVzaXplKCkge31cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGlnaGxpZ2h0O1xyXG4iLCJpbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xyXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gXCIuLi9jbGFzc2VzL0FuaW1hdGlvblwiO1xyXG5pbXBvcnQgeyBzcGxpdCwgY2FsY3VsYXRlIH0gZnJvbSBcIi4uL3V0aWxzL3RleHRcIjtcclxuXHJcbmNsYXNzIFBhcmFncmFwaCBleHRlbmRzIEFuaW1hdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XHJcbiAgICBzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pO1xyXG5cclxuICAgIGNvbnN0IHBhcmFncmFwaHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwXCIpO1xyXG4gICAgcGFyYWdyYXBocy5mb3JFYWNoKChwYXJhZ3JhcGgpID0+IHtcclxuICAgICAgc3BsaXQoe1xyXG4gICAgICAgIGVsZW1lbnQ6IHBhcmFncmFwaCxcclxuICAgICAgICBhcHBlbmQ6IGZhbHNlLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNwbGl0KHtcclxuICAgICAgICBlbGVtZW50OiBwYXJhZ3JhcGgsXHJcbiAgICAgICAgYXBwZW5kOiBmYWxzZSxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnRXb3JkU3BhbnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNwYW4gc3BhblwiKTtcclxuICB9XHJcblxyXG4gIGFuaW1hdGVJbigpIHtcclxuICAgIGdzYXAuc2V0KHRoaXMuZWxlbWVudCwge1xyXG4gICAgICBhdXRvQWxwaGE6IDEsXHJcbiAgICB9KTtcclxuXHJcbiAgICBnc2FwLmZyb21UbyhcclxuICAgICAgdGhpcy5lbGVtZW50V29yZHMsXHJcbiAgICAgIHtcclxuICAgICAgICB5OiBcIjEwMCVcIixcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGRlbGF5OiAwLjUsXHJcbiAgICAgICAgZHVyYXRpb246IDEuNSxcclxuICAgICAgICBlYXNlOiBcImV4cG8ub3V0XCIsXHJcbiAgICAgICAgc3RhZ2dlcjoge1xyXG4gICAgICAgICAgYW1vdW50OiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeTogXCIwJVwiLFxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgYW5pbWF0ZU91dCgpIHtcclxuICAgIGdzYXAuc2V0KHRoaXMuZWxlbWVudCwge1xyXG4gICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG9uUmVzaXplKCkge1xyXG4gICAgdGhpcy5lbGVtZW50V29yZHMgPSBjYWxjdWxhdGUodGhpcy5lbGVtZW50V29yZFNwYW5zKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBhcmFncmFwaDtcclxuIiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiLi4vY2xhc3Nlcy9BbmltYXRpb25cIjtcclxuaW1wb3J0IHsgc3BsaXRDaGFycyB9IGZyb20gXCIuLi91dGlscy90ZXh0XCI7XHJcblxyXG5jbGFzcyBUaXRsZSBleHRlbmRzIEFuaW1hdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XHJcbiAgICBzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pO1xyXG5cclxuICAgIGNvbnN0IHsgbGluZXMgfSA9IHNwbGl0Q2hhcnMoeyBlbGVtZW50IH0pO1xyXG4gICAgdGhpcy5saW5lcyA9IGxpbmVzO1xyXG4gIH1cclxuXHJcbiAgYW5pbWF0ZUluKCkge1xyXG4gICAgdGhpcy5hbmltYXRlSW5UaW1lbGluZSA9IGdzYXAudGltZWxpbmUoeyBkZWxheTogMC41IH0pO1xyXG5cclxuICAgIHRoaXMuYW5pbWF0ZUluVGltZWxpbmUuc2V0KHRoaXMuZWxlbWVudCwge1xyXG4gICAgICBhdXRvQWxwaGE6IDEsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmxpbmVzLmZvckVhY2goKGxpbmUsIGluZGV4KSA9PiB7XHJcbiAgICAgIHRoaXMuYW5pbWF0ZUluVGltZWxpbmUuZnJvbVRvKFxyXG4gICAgICAgIGxpbmUucXVlcnlTZWxlY3RvckFsbChcInNwYW5cIiksXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgeTogXCIxMDAlXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBkZWxheTogaW5kZXggKiAwLjIsXHJcbiAgICAgICAgICBkdXJhdGlvbjogMS4yLFxyXG4gICAgICAgICAgZWFzZTogXCJlbGFzdGljLm91dCgwLjMsIDAuNilcIixcclxuICAgICAgICAgIHN0YWdnZXI6IHtcclxuICAgICAgICAgICAgYW1vdW50OiAwLjEsXHJcbiAgICAgICAgICAgIGZyb206IFwicmFuZG9tXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgeTogXCIwJVwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgMFxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhbmltYXRlT3V0KCkge1xyXG4gICAgZ3NhcC5zZXQodGhpcy5lbGVtZW50LCB7XHJcbiAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb25SZXNpemUoKSB7XHJcbiAgICAvLyB0aGlzLmVsZW1lbnRMaW5lcyA9IGNhbGN1bGF0ZSh0aGlzLmVsZW1lbnRMaW5lU3BhbnMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGl0bGU7XHJcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSBcIi4vQ29tcG9uZW50XCI7XHJcblxyXG5jbGFzcyBBbmltYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xyXG4gICAgc3VwZXIoe1xyXG4gICAgICBlbGVtZW50LFxyXG4gICAgICBlbGVtZW50cyxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZU9ic2VydmVyKCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVPYnNlcnZlcigpIHtcclxuICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcclxuICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgdGhpcy5hbmltYXRlSW4oKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5hbmltYXRlT3V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgYW5pbWF0ZUluKCkge31cclxuXHJcbiAgYW5pbWF0ZU91dCgpIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGlvbjtcclxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiLi9Db21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzeW5jTG9hZCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50IH0pIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgZWxlbWVudCxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZU9ic2VydmVyKCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVPYnNlcnZlcigpIHtcclxuICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcclxuICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnQuc3JjKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zcmMgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJsb2FkZWRcIik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImxvYWRlZFwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XHJcblxyXG5jbGFzcyBDb2xvcnMge1xyXG4gIGNoYW5nZSh7IGJhY2tncm91bmRDb2xvciwgY29sb3IgfSkge1xyXG4gICAgZ3NhcC50byhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtcclxuICAgICAgYmFja2dyb3VuZENvbG9yLFxyXG4gICAgICBjb2xvcixcclxuICAgICAgZHVyYXRpb246IDEuNSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENvbG9yc01hbmFnZXIgPSBuZXcgQ29sb3JzKCk7XHJcbiIsImltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiO1xyXG5pbXBvcnQgR1NBUCBmcm9tIFwiZ3NhcFwiO1xyXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJldmVudHNcIjtcclxuXHJcbmNsYXNzIENvbXBvbmVudCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5zZWxlY3RvciA9IGVsZW1lbnQ7XHJcbiAgICB0aGlzLnNlbGVjdG9yQ2hpbGRyZW4gPSB7IC4uLmVsZW1lbnRzIH07XHJcbiAgICB0aGlzLmNyZWF0ZSgpO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKCkge1xyXG4gICAgaWYgKHRoaXMuc2VsZWN0b3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLnNlbGVjdG9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKTtcclxuICAgIH1cclxuICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcclxuXHJcbiAgICBlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKHNlbGVjdG9yLCBuYW1lKSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBzZWxlY3RvciBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCB8fFxyXG4gICAgICAgIHNlbGVjdG9yIGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0XHJcbiAgICAgICkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHNbbmFtZV0gPSBzZWxlY3RvcjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRzW25hbWVdID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW25hbWVdLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgdGhpcy5lbGVtZW50c1tuYW1lXSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW25hbWVdLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgdGhpcy5lbGVtZW50c1tuYW1lXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRFdmVudExpc3RlbmVycygpIHt9XHJcblxyXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge31cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xyXG4iLCJpbXBvcnQgR1NBUCBmcm9tIFwiZ3NhcFwiO1xyXG5pbXBvcnQgZWFjaCBmcm9tIFwibG9kYXNoL2VhY2hcIjtcclxuaW1wb3J0IG1hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xyXG5pbXBvcnQgUHJlZml4IGZyb20gXCJwcmVmaXhcIjtcclxuaW1wb3J0IEhpZ2hsaWdodCBmcm9tIFwiLi4vYW5pbWF0aW9ucy9IaWdobGlnaHRcIjtcclxuaW1wb3J0IFBhcmFncmFwaCBmcm9tIFwiLi4vYW5pbWF0aW9ucy9QYXJhZ3JhcGhcIjtcclxuaW1wb3J0IFRpdGxlIGZyb20gXCIuLi9hbmltYXRpb25zL1RpdGxlXCI7XHJcbmltcG9ydCBBc3luY0xvYWQgZnJvbSBcIi4vQXN5bmNMb2FkXCI7XHJcbmltcG9ydCB7IENvbG9yc01hbmFnZXIgfSBmcm9tIFwiLi9Db2xvcnNcIjtcclxuXHJcbmNsYXNzIFBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMsIGlkIH0pIHtcclxuICAgIHRoaXMuc2VsZWN0b3IgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5zZWxlY3RvckNoaWxkcmVuID0ge1xyXG4gICAgICAuLi5lbGVtZW50cyxcclxuICAgICAgYW5pbWF0aW9uc1RpdGxlczogJ1tkYXRhLWFuaW1hdGlvbj1cInRpdGxlXCJdJyxcclxuICAgICAgYW5pbWF0aW9uc1BhcmFncmFwaHM6ICdbZGF0YS1hbmltYXRpb249XCJwYXJhZ3JhcGhcIl0nLFxyXG4gICAgICBhbmltYXRpb25zSGlnaGxpZ2h0czogJ1tkYXRhLWFuaW1hdGlvbj1cImhpZ2hsaWdodFwiXScsXHJcblxyXG4gICAgICBwcmVsb2FkZXJzOiBcIltkYXRhLXNyY11cIixcclxuICAgIH07XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnRyYW5zZm9ybVByZWZpeCA9IFByZWZpeChcInRyYW5zZm9ybVwiKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENSVURcclxuICAgKi9cclxuXHJcbiAgY3JlYXRlKCkge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKTtcclxuICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcclxuXHJcbiAgICBlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKHNlbGVjdG9yLCBuYW1lKSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBzZWxlY3RvciBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCB8fFxyXG4gICAgICAgIHNlbGVjdG9yIGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0XHJcbiAgICAgICkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHNbbmFtZV0gPSBzZWxlY3RvcjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRzW25hbWVdID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW25hbWVdLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgdGhpcy5lbGVtZW50c1tuYW1lXSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW25hbWVdLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgdGhpcy5lbGVtZW50c1tuYW1lXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5zY3JvbGwgPSB7XHJcbiAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgIHRhcmdldDogMCxcclxuICAgICAgbGFzdDogMCxcclxuICAgICAgbGltaXQ6IDAsXHJcbiAgICB9O1xyXG4gICAgdGhpcy5vblJlc2l6ZSgpO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlQW5pbWF0aW9ucygpO1xyXG4gICAgdGhpcy5jcmVhdGVQcmVsb2FkZXIoKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZVByZWxvYWRlcigpIHtcclxuICAgIHRoaXMucHJlbG9hZGVycyA9IG1hcCh0aGlzLmVsZW1lbnRzLnByZWxvYWRlcnMsIChlbGVtZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgQXN5bmNMb2FkKHsgZWxlbWVudCB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlQW5pbWF0aW9ucygpIHtcclxuICAgIHRoaXMuYW5pbWF0aW9ucyA9IFtdO1xyXG5cclxuICAgIC8vIFRpdGxlcy5cclxuICAgIHRoaXMuYW5pbWF0aW9uc1RpdGxlcyA9IG1hcCh0aGlzLmVsZW1lbnRzLmFuaW1hdGlvbnNUaXRsZXMsIChlbGVtZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgVGl0bGUoeyBlbGVtZW50IH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25zVGl0bGVzKTtcclxuXHJcbiAgICAvLyBQYXJhZ3JhcGhzLlxyXG4gICAgdGhpcy5hbmltYXRpb25zUGFyYWdyYXBocyA9IG1hcChcclxuICAgICAgdGhpcy5lbGVtZW50cy5hbmltYXRpb25zUGFyYWdyYXBocyxcclxuICAgICAgKGVsZW1lbnQpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFBhcmFncmFwaCh7IGVsZW1lbnQgfSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25zUGFyYWdyYXBocyk7XHJcblxyXG4gICAgLy8gSGlnaGxpZ2h0cy5cclxuICAgIHRoaXMuYW5pbWF0aW9uc0hpZ2hsaWdodHMgPSBtYXAoXHJcbiAgICAgIHRoaXMuZWxlbWVudHMuYW5pbWF0aW9uc0hpZ2hsaWdodHMsXHJcbiAgICAgIChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHQoeyBlbGVtZW50IH0pO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0hpZ2hsaWdodHMpO1xyXG4gIH1cclxuXHJcbiAgc2hvdyhhbmltYXRpb24pIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBDb2xvcnNNYW5hZ2VyLmNoYW5nZSh7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1iYWNrZ3JvdW5kXCIpLFxyXG4gICAgICAgIGNvbG9yOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb2xvclwiKSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlSW4gPSBhbmltYXRpb247XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlSW4gPSBHU0FQLnRpbWVsaW5lKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYW5pbWF0ZUluLmZyb21UbyhcclxuICAgICAgICAgIHRoaXMuZWxlbWVudCxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYW5pbWF0ZUluLmNhbGwoKF8pID0+IHtcclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5vblJlc2l6ZSgpO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgIHRoaXMuYW5pbWF0ZU91dCA9IEdTQVAudGltZWxpbmUoKTtcclxuXHJcbiAgICAgIHRoaXMuYW5pbWF0ZU91dC50byh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICAgICAgb25Db21wbGV0ZTogcmVzb2x2ZSxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIHRoaXMuc2Nyb2xsLnRhcmdldCA9IEdTQVAudXRpbHMuY2xhbXAoXHJcbiAgICAgIDAsXHJcbiAgICAgIHRoaXMuc2Nyb2xsLmxpbWl0LFxyXG4gICAgICB0aGlzLnNjcm9sbC50YXJnZXRcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUoXHJcbiAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQsXHJcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCxcclxuICAgICAgMC4xXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50IDwgMC4wMSkgdGhpcy5zY3JvbGwuY3VycmVudCA9IDA7XHJcbiAgICBpZiAodGhpcy5lbGVtZW50cy53cmFwcGVyKSB7XHJcbiAgICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5zdHlsZVtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybVByZWZpeFxyXG4gICAgICBdID0gYHRyYW5zbGF0ZVkoLSR7dGhpcy5zY3JvbGwuY3VycmVudH1weClgO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV2ZW50cy5cclxuICAgKi9cclxuXHJcbiAgb25SZXNpemUoKSB7XHJcbiAgICBpZiAodGhpcy5lbGVtZW50cy53cmFwcGVyKVxyXG4gICAgICB0aGlzLnNjcm9sbC5saW1pdCA9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHJcbiAgICBlYWNoKHRoaXMuYW5pbWF0aW9ucywgKGFuaW1hdGlvbikgPT4gYW5pbWF0aW9uLm9uUmVzaXplKCkpO1xyXG4gIH1cclxuXHJcbiAgb25XaGVlbCh7IHBpeGVsWSB9KSB7XHJcbiAgICB0aGlzLnNjcm9sbC50YXJnZXQgKz0gcGl4ZWxZO1xyXG4gIH1cclxuXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIiwgdGhpcy5vbldoZWVsLmJpbmQodGhpcykpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgLy8gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsIHRoaXMub25XaGVlbC5iaW5kKHRoaXMpKTtcclxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdlO1xyXG4iLCJpbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcC9hbGxcIjtcclxuaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiLi4vY2xhc3Nlcy9Db21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xyXG4gICAgc3VwZXIoeyBlbGVtZW50IH0pO1xyXG5cclxuICAgIHRoaXMucGF0aCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihcInBhdGg6bGFzdC1jaGlsZFwiKTtcclxuICAgIHRoaXMucGF0aExlbmd0aCA9IHRoaXMucGF0aC5nZXRUb3RhbExlbmd0aCgpO1xyXG5cclxuICAgIHRoaXMudGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHsgcGF1c2VkOiB0cnVlIH0pO1xyXG4gICAgdGhpcy50aW1lbGluZS5mcm9tVG8oXHJcbiAgICAgIHRoaXMucGF0aCxcclxuICAgICAge1xyXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IHRoaXMucGF0aExlbmd0aCxcclxuICAgICAgICBzdHJva2VEYXNoYXJyYXk6IGAke3RoaXMucGF0aExlbmd0aH0gJHt0aGlzLnBhdGhMZW5ndGh9YCxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IDAsXHJcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiBgJHt0aGlzLnBhdGhMZW5ndGh9ICR7dGhpcy5wYXRoTGVuZ3RofWAsXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlRW50ZXIoKSB7XHJcbiAgICB0aGlzLnRpbWVsaW5lLnBsYXkoKTtcclxuICB9XHJcbiAgb25Nb3VzZUxlYXZlKCkge1xyXG4gICAgdGhpcy50aW1lbGluZS5yZXZlcnNlKCk7XHJcbiAgfVxyXG5cclxuICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMub25Nb3VzZUVudGVyRXZlbnQgPSB0aGlzLm9uTW91c2VFbnRlci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbk1vdXNlTGVhdmVFdmVudCA9IHRoaXMub25Nb3VzZUxlYXZlLmJpbmQodGhpcyk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMub25Nb3VzZUVudGVyRXZlbnQpO1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMub25Nb3VzZUxlYXZlRXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgdGhpcy5vbk1vdXNlRW50ZXJFdmVudCk7XHJcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5vbk1vdXNlTGVhdmVFdmVudCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcclxuaW1wb3J0IE1lZGlhIGZyb20gXCIuL01lZGlhXCI7XHJcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XHJcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gXCJvZ2xcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbGxlcnkge1xyXG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZ2wsIGdlb21ldHJ5LCBzY2VuZSwgaW5kZXgsIHNpemVzIH0pIHtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XHJcbiAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XHJcblxyXG4gICAgLy8gdGhpcy5vblJlc2l6ZSgpO1xyXG4gICAgdGhpcy5ncm91cCA9IG5ldyBUcmFuc2Zvcm0oKTtcclxuICAgIHRoaXMuY3JlYXRlTWVkaWFzKCk7XHJcblxyXG4gICAgdGhpcy5ncm91cC5zZXRQYXJlbnQodGhpcy5zY2VuZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbmltYXRpb25zXHJcbiAgICovXHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSkgPT4gbWVkaWEuc2hvdygpKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSkgPT4gbWVkaWEuaGlkZSgpKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU1lZGlhcygpIHtcclxuICAgIHRoaXMubWVkaWFFbGVtZW50cyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgICBcIi5hYm91dF9fZ2FsbGVyeV9fbWVkaWFcIlxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLm1lZGlhcyA9IG1hcCh0aGlzLm1lZGlhRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IE1lZGlhKHtcclxuICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICAgIHNjZW5lOiB0aGlzLmdyb3VwLFxyXG4gICAgICAgIGluZGV4LFxyXG4gICAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc2Nyb2xsID0ge1xyXG4gICAgICBjdXJyZW50OiAwLFxyXG4gICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgIGxhc3Q6IDAsXHJcbiAgICAgIGxlcnA6IDAuMSxcclxuICAgICAgeTogMCxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy55ID0ge1xyXG4gICAgICBjdXJyZW50OiAwLFxyXG4gICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgIGxlcnA6IDAuMSxcclxuICAgICAgbGltaXQ6IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXZlbnRzXHJcbiAgICovXHJcblxyXG4gIG9uUmVzaXplKGV2ZW50KSB7XHJcbiAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICB0aGlzLnNpemVzID0gZXZlbnQuc2l6ZXM7XHJcblxyXG4gICAgdGhpcy53aWR0aCA9ICh0aGlzLmJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIHRoaXMuc2l6ZXMud2lkdGg7XHJcblxyXG4gICAgdGhpcy55LmxpbWl0ID0gdGhpcy5ib3VuZHMuaGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0O1xyXG5cclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiBtZWRpYS5vblJlc2l6ZShldmVudCkpO1xyXG4gIH1cclxuXHJcbiAgb25Ub3VjaERvd24oeyB4LCB5IH0pIHt9XHJcblxyXG4gIG9uVG91Y2hNb3ZlKHsgeCwgeSB9KSB7XHJcbiAgICBjb25zdCBkaXN0YW5jZSA9ICh4LnN0YXJ0IC0geC5lbmQpIC8gMjA7XHJcblxyXG4gICAgY29uc29sZS5sb2coZGlzdGFuY2UpO1xyXG5cclxuICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBkaXN0YW5jZTtcclxuICB9XHJcblxyXG4gIG9uVG91Y2hVcCh7IHgsIHkgfSkge31cclxuXHJcbiAgb25XaGVlbCh7IHBpeGVsWSB9KSB7XHJcbiAgICB0aGlzLnkudGFyZ2V0ICs9IHBpeGVsWTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZVxyXG4gICAqL1xyXG4gIHVwZGF0ZShzY3JvbGwpIHtcclxuICAgIGlmICghdGhpcy5ib3VuZHMpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IHNjcm9sbC5jdXJyZW50IC0gc2Nyb2xsLnRhcmdldDtcclxuXHJcbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gZ3NhcC51dGlscy5pbnRlcnBvbGF0ZShcclxuICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCxcclxuICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0LFxyXG4gICAgICB0aGlzLnNjcm9sbC5sZXJwXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50IDwgdGhpcy5zY3JvbGwudGFyZ2V0KSB7XHJcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gXCJsZWZ0XCI7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2Nyb2xsLmN1cnJlbnQgPiB0aGlzLnNjcm9sbC50YXJnZXQpIHtcclxuICAgICAgdGhpcy5kaXJlY3Rpb24gPSBcInJpZ2h0XCI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0IC09IDE7XHJcbiAgICB0aGlzLnNjcm9sbC50YXJnZXQgLT0gZGlzdGFuY2UgLyAxMDtcclxuXHJcbiAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSwgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID09PSBcImxlZnRcIiAmJlxyXG4gICAgICAgIG1lZGlhLm1lc2gucG9zaXRpb24ueCArIG1lZGlhLm1lc2guc2NhbGUueCArIDAuMjUgLyAyIDxcclxuICAgICAgICAgIC10aGlzLnNpemVzLndpZHRoIC8gMlxyXG4gICAgICApIHtcclxuICAgICAgICBtZWRpYS5leHRyYS54ICs9IHRoaXMud2lkdGg7XHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPT09IFwicmlnaHRcIiAmJlxyXG4gICAgICAgIG1lZGlhLm1lc2gucG9zaXRpb24ueCAtIG1lZGlhLm1lc2guc2NhbGUueCAtIDAuMjUgLyAyID5cclxuICAgICAgICAgIHRoaXMuc2l6ZXMud2lkdGggLyAyXHJcbiAgICAgICkge1xyXG4gICAgICAgIG1lZGlhLmV4dHJhLnggLT0gdGhpcy53aWR0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgbWVkaWEudXBkYXRlKHRoaXMuc2Nyb2xsKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuZ3JvdXAucG9zaXRpb24ueSA9XHJcbiAgICAgIChzY3JvbGwuY3VycmVudCAvIHdpbmRvdy5pbm5lckhlaWdodCkgKiB0aGlzLnNpemVzLmhlaWdodDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3kuXHJcbiAgICovXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZGVzdHJveSBnYWxsZXJ5ICBcIik7XHJcbiAgICB0aGlzLnNjZW5lLnJlbW92ZUNoaWxkKHRoaXMuZ3JvdXApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBNZXNoLCBQcm9ncmFtLCBUZXh0dXJlIH0gZnJvbSBcIm9nbFwiO1xyXG5pbXBvcnQgdmVydGV4IGZyb20gXCJzaGFkZXJzL3BsYW5lLXZlcnRleC5nbHNsXCI7XHJcbmltcG9ydCBmcmFnbWVudCBmcm9tIFwic2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsXCI7XHJcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBnbCwgZ2VvbWV0cnksIHNjZW5lLCBpbmRleCwgc2l6ZXMgfSkge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcclxuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcclxuXHJcbiAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgdGhpcy5jcmVhdGVNZXNoKCk7XHJcblxyXG4gICAgdGhpcy5leHRyYSA9IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjcmVhdGVUZXh0dXJlKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJhYm91dFwiLCB0aGlzLmVsZW1lbnQuY2hpbGROb2Rlc1swXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKSk7XHJcbiAgICB0aGlzLnRleHR1cmUgPVxyXG4gICAgICB3aW5kb3cuVEVYVFVSRVNbdGhpcy5lbGVtZW50LmNoaWxkTm9kZXNbMF0uZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIildO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUHJvZ3JhbSgpIHtcclxuICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcclxuICAgICAgdmVydGV4LFxyXG4gICAgICBmcmFnbWVudCxcclxuICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICB0TWFwOiB7XHJcbiAgICAgICAgICB2YWx1ZTogdGhpcy50ZXh0dXJlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdUFscGhhOiB7XHJcbiAgICAgICAgICB2YWx1ZTogMSxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVNZXNoKCkge1xyXG4gICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xyXG4gICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcclxuICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKTtcclxuXHJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueCArPSB0aGlzLmluZGV4ICogdGhpcy5tZXNoLnNjYWxlLng7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVCb3VuZHMoeyBzaXplcyB9KSB7XHJcbiAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVNjYWxlKHNpemVzKTtcclxuICAgIHRoaXMudXBkYXRlWCgpO1xyXG4gICAgdGhpcy51cGRhdGVZKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFdmVudHMuXHJcbiAgICovXHJcbiAgb25SZXNpemUoc2l6ZXMpIHtcclxuICAgIHRoaXMuY3JlYXRlQm91bmRzKHNpemVzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuaW1hdGlvbnMuXHJcbiAgICovXHJcbiAgc2hvdygpIHtcclxuICAgIGdzYXAuZnJvbVRvKFxyXG4gICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLFxyXG4gICAgICB7XHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogMSxcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBnc2FwLnRvKHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51QWxwaGEsIHtcclxuICAgICAgdmFsdWU6IDAsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvb3AuXHJcbiAgICovXHJcblxyXG4gIHVwZGF0ZVJvdGF0aW9uKCkge1xyXG4gICAgdGhpcy5tZXNoLnJvdGF0aW9uLnogPSBnc2FwLnV0aWxzLm1hcFJhbmdlKFxyXG4gICAgICAtdGhpcy5zaXplcy53aWR0aCAvIDIsXHJcbiAgICAgIHRoaXMuc2l6ZXMud2lkdGggLyAyLFxyXG4gICAgICBNYXRoLlBJICogMC4xLFxyXG4gICAgICAtTWF0aC5QSSAqIDAuMSxcclxuICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLnhcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVTY2FsZSgpIHtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ib3VuZHMuaGVpZ2h0IC8gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgdGhpcy53aWR0aCA9IHRoaXMuYm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGg7XHJcblxyXG4gICAgdGhpcy5tZXNoLnNjYWxlLnggPSB0aGlzLnNpemVzLndpZHRoICogdGhpcy53aWR0aDtcclxuICAgIHRoaXMubWVzaC5zY2FsZS55ID0gdGhpcy5zaXplcy5oZWlnaHQgKiB0aGlzLmhlaWdodDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVgoeCA9IDApIHtcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID1cclxuICAgICAgLXRoaXMuc2l6ZXMud2lkdGggLyAyICtcclxuICAgICAgdGhpcy5tZXNoLnNjYWxlLnggLyAyICtcclxuICAgICAgKCh0aGlzLmJvdW5kcy5sZWZ0IC0geCkgLyB3aW5kb3cuaW5uZXJXaWR0aCkgKiB0aGlzLnNpemVzLndpZHRoICtcclxuICAgICAgdGhpcy5leHRyYS54O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlWSh5ID0gMCkge1xyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPVxyXG4gICAgICB0aGlzLnNpemVzLmhlaWdodCAvIDIgLVxyXG4gICAgICB0aGlzLm1lc2guc2NhbGUueSAvIDIgLVxyXG4gICAgICAoKHRoaXMuYm91bmRzLnRvcCAtIHkpIC8gd2luZG93LmlubmVySGVpZ2h0KSAqIHRoaXMuc2l6ZXMuaGVpZ2h0IC1cclxuICAgICAgdGhpcy5leHRyYS55O1xyXG5cclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ICs9XHJcbiAgICAgIE1hdGguY29zKCh0aGlzLm1lc2gucG9zaXRpb24ueCAvIHRoaXMuc2l6ZXMud2lkdGgpICogTWF0aC5QSSAqIDAuMSkgKiA0MCAtXHJcbiAgICAgIDQwO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKHNjcm9sbCkge1xyXG4gICAgdGhpcy51cGRhdGVYKHNjcm9sbC5jdXJyZW50KTtcclxuICAgIHRoaXMudXBkYXRlWShzY3JvbGwueSk7XHJcbiAgICB0aGlzLnVwZGF0ZVJvdGF0aW9uKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcclxuaW1wb3J0IHsgUGxhbmUsIFRyYW5zZm9ybSB9IGZyb20gXCJvZ2xcIjtcclxuaW1wb3J0IEdhbGxlcnkgZnJvbSBcIi4vR2FsbGVyeVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yKHsgZ2wsIHNjZW5lLCBzaXplcyB9KSB7XHJcbiAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcblxyXG4gICAgdGhpcy5jcmVhdGVHZW9tZXRyeSgpO1xyXG4gICAgdGhpcy5jcmVhdGVHYWxsZXJpZXMoKTtcclxuICAgIHRoaXMuc2hvdygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQW5pbWF0aW9uc1xyXG4gICAqL1xyXG5cclxuICBzaG93KCkge1xyXG4gICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCAoZ2FsbGVyeSkgPT4gZ2FsbGVyeS5zaG93KCkpO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnkpID0+IGdhbGxlcnkuaGlkZSgpKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUdlb21ldHJ5KCkge1xyXG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUdhbGxlcmllcygpIHtcclxuICAgIHRoaXMuZ2FsbGVyaWVzRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFib3V0X19nYWxsZXJ5XCIpO1xyXG5cclxuICAgIHRoaXMuZ2FsbGVyaWVzID0gbWFwKHRoaXMuZ2FsbGVyaWVzRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IEdhbGxlcnkoe1xyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXHJcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2codGhpcy5nYWxsZXJpZXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXZlbnRzXHJcbiAgICovXHJcblxyXG4gIG9uV2hlZWwoZXZlbnQpIHtcclxuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnkpID0+IGdhbGxlcnkub25XaGVlbChldmVudCkpO1xyXG4gIH1cclxuXHJcbiAgb25SZXNpemUoZXZlbnQpIHtcclxuICAgIG1hcCh0aGlzLmdhbGxlcmllcywgKGdhbGxlcnkpID0+IGdhbGxlcnkub25SZXNpemUoZXZlbnQpKTtcclxuICB9XHJcblxyXG4gIG9uVG91Y2hEb3duKGV2ZW50KSB7XHJcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiBnYWxsZXJ5Lm9uVG91Y2hEb3duKGV2ZW50KSk7XHJcbiAgfVxyXG5cclxuICBvblRvdWNoTW92ZShldmVudCkge1xyXG4gICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCAoZ2FsbGVyeSkgPT4gZ2FsbGVyeS5vblRvdWNoTW92ZShldmVudCkpO1xyXG4gIH1cclxuXHJcbiAgb25Ub3VjaFVwKGV2ZW50KSB7XHJcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiBnYWxsZXJ5Lm9uVG91Y2hVcChldmVudCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlXHJcbiAgICovXHJcbiAgdXBkYXRlKHNjcm9sbCkge1xyXG4gICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCAoZ2FsbGVyeSkgPT4gZ2FsbGVyeS51cGRhdGUoc2Nyb2xsKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXN0cm95XHJcbiAgICovXHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiBnYWxsZXJ5LmRlc3Ryb3koKSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE1lc2gsIFByb2dyYW0gfSBmcm9tIFwib2dsXCI7XHJcbmltcG9ydCB2ZXJ0ZXggZnJvbSBcInNoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2xcIjtcclxuaW1wb3J0IGZyYWdtZW50IGZyb20gXCJzaGFkZXJzL3BsYW5lLWZyYWdtZW50Lmdsc2xcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGdsLCBnZW9tZXRyeSwgc2NlbmUsIGluZGV4LCBzaXplcyB9KSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xyXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgdGhpcy5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgICB0aGlzLmNyZWF0ZU1lc2goKTtcclxuICAgIHRoaXMuY3JlYXRlQm91bmRzKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XHJcblxyXG4gICAgdGhpcy5vcGFjaXR5ID0ge1xyXG4gICAgICBjdXJyZW50OiAwLFxyXG4gICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgIGxlcnA6IDAuMSxcclxuICAgICAgbXVsdGlwbGllcjogMCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjcmVhdGVUZXh0dXJlKCkge1xyXG4gICAgdGhpcy50ZXh0dXJlID0gd2luZG93LlRFWFRVUkVTW3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKV07XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQcm9ncmFtKCkge1xyXG4gICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xyXG4gICAgICB2ZXJ0ZXgsXHJcbiAgICAgIGZyYWdtZW50LFxyXG4gICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgIHRNYXA6IHtcclxuICAgICAgICAgIHZhbHVlOiB0aGlzLnRleHR1cmUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1QWxwaGE6IHtcclxuICAgICAgICAgIHZhbHVlOiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU1lc2goKSB7XHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XHJcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICBwcm9ncmFtOiB0aGlzLnByb2dyYW0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpO1xyXG5cclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ICs9IHRoaXMuaW5kZXggKiB0aGlzLm1lc2guc2NhbGUueDtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUJvdW5kcyh7IHNpemVzIH0pIHtcclxuICAgIHRoaXMuYm91bmRzID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xyXG5cclxuICAgIHRoaXMudXBkYXRlU2NhbGUoc2l6ZXMpO1xyXG4gICAgdGhpcy51cGRhdGVYKCk7XHJcbiAgICB0aGlzLnVwZGF0ZVkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV2ZW50cy5cclxuICAgKi9cclxuICBvblJlc2l6ZShzaXplcykge1xyXG4gICAgdGhpcy5jcmVhdGVCb3VuZHMoc2l6ZXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQW5pbWF0aW9ucy5cclxuICAgKi9cclxuICBzaG93KCkge1xyXG4gICAgZ3NhcC5mcm9tVG8oXHJcbiAgICAgIHRoaXMub3BhY2l0eSxcclxuICAgICAge1xyXG4gICAgICAgIG11bHRpcGxpZXI6IDAsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBtdWx0aXBsaWVyOiAxLFxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIGdzYXAudG8odGhpcy5vcGFjaXR5LCB7XHJcbiAgICAgIG11bHRpcGxpZXI6IDAsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvb3AuXHJcbiAgICovXHJcblxyXG4gIHVwZGF0ZVNjYWxlKCkge1xyXG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICB0aGlzLndpZHRoID0gdGhpcy5ib3VuZHMud2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHJcbiAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMuc2l6ZXMud2lkdGggKiB0aGlzLndpZHRoO1xyXG4gICAgdGhpcy5tZXNoLnNjYWxlLnkgPSB0aGlzLnNpemVzLmhlaWdodCAqIHRoaXMuaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlWCh4ID0gMCkge1xyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPVxyXG4gICAgICAtdGhpcy5zaXplcy53aWR0aCAvIDIgK1xyXG4gICAgICB0aGlzLm1lc2guc2NhbGUueCAvIDIgK1xyXG4gICAgICAoKHRoaXMuYm91bmRzLmxlZnQgLSB4KSAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIHRoaXMuc2l6ZXMud2lkdGg7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVZKHkgPSAwKSB7XHJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9XHJcbiAgICAgIHRoaXMuc2l6ZXMuaGVpZ2h0IC8gMiAtXHJcbiAgICAgIHRoaXMubWVzaC5zY2FsZS55IC8gMiAtXHJcbiAgICAgICgodGhpcy5ib3VuZHMudG9wIC0geSkgLyB3aW5kb3cuaW5uZXJIZWlnaHQpICogdGhpcy5zaXplcy5oZWlnaHQ7XHJcblxyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgKz1cclxuICAgICAgTWF0aC5jb3MoKHRoaXMubWVzaC5wb3NpdGlvbi54IC8gdGhpcy5zaXplcy53aWR0aCkgKiBNYXRoLlBJICogMC4xKSAqIDQwIC1cclxuICAgICAgNDA7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoc2Nyb2xsLCBpbmRleCkge1xyXG4gICAgdGhpcy51cGRhdGVYKHNjcm9sbC54KTtcclxuICAgIHRoaXMudXBkYXRlWShzY3JvbGwueSk7XHJcblxyXG4gICAgdGhpcy5vcGFjaXR5LnRhcmdldCA9IHRoaXMuaW5kZXggPT09IGluZGV4ID8gMSA6IDAuNDtcclxuICAgIHRoaXMub3BhY2l0eS5jdXJyZW50ID0gZ3NhcC51dGlscy5pbnRlcnBvbGF0ZShcclxuICAgICAgdGhpcy5vcGFjaXR5LmN1cnJlbnQsXHJcbiAgICAgIHRoaXMub3BhY2l0eS50YXJnZXQsXHJcbiAgICAgIHRoaXMub3BhY2l0eS5sZXJwXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51QWxwaGEudmFsdWUgPVxyXG4gICAgICB0aGlzLm9wYWNpdHkuY3VycmVudCAqIHRoaXMub3BhY2l0eS5tdWx0aXBsaWVyO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTWVkaWEgZnJvbSBcIi4vTWVkaWFcIjtcclxuaW1wb3J0IG1hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xyXG5pbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSBcIm9nbFwiO1xyXG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xyXG5pbXBvcnQgUHJlZml4IGZyb20gXCJwcmVmaXhcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICBjb25zdHJ1Y3Rvcih7IGdsLCBzY2VuZSwgc2l6ZXMsIHRyYW5zaXRpb24gfSkge1xyXG4gICAgdGhpcy5pZCA9IFwiY29sbGVjdGlvbnNcIjtcclxuICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcclxuICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKCk7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICB0aGlzLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xyXG5cclxuICAgIHRoaXMudHJhbnNmb3JtUHJlZml4ID0gUHJlZml4KFwidHJhbnNmb3JtXCIpO1xyXG4gICAgdGhpcy5nYWxsZXJ5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29sbGVjdGlvbnNfX2dhbGxlcnlcIik7XHJcbiAgICB0aGlzLmdhbGxlcnlXcmFwcGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLmNvbGxlY3Rpb25zX19nYWxsZXJ5X193cmFwcGVyXCJcclxuICAgICk7XHJcbiAgICB0aGlzLm1lZGlhc0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgXCIuY29sbGVjdGlvbnNfX2dhbGxlcnlfX21lZGlhX19pbWFnZVwiXHJcbiAgICApO1xyXG4gICAgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgXCIuY29sbGVjdGlvbnNfX2NvbnRlbnRfX2FydGljbGVcIlxyXG4gICAgKTtcclxuICAgIHRoaXMudGl0bGVFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29sbGVjdGlvbnNfX3RpdGxlc1wiKTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KCk7XHJcbiAgICB0aGlzLmNyZWF0ZUdhbGxlcnkoKTtcclxuICAgIHRoaXMuc2hvdygpO1xyXG5cclxuICAgIHRoaXMuZ3JvdXAuc2V0UGFyZW50KHNjZW5lKTtcclxuXHJcbiAgICB0aGlzLnggPSB7XHJcbiAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgIHRhcmdldDogMCxcclxuICAgICAgbGVycDogMC4xLFxyXG4gICAgICBsaW1pdDogMCxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zY3JvbGwgPSB7XHJcbiAgICAgIHg6IDAsXHJcbiAgICAgIHk6IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQW5pbWF0aW9ucy5cclxuICAgKi9cclxuXHJcbiAgc2hvdygpIHtcclxuICAgIGlmICh0aGlzLnRyYW5zaXRpb24pIHtcclxuICAgICAgdGhpcy50cmFuc2l0aW9uLmFuaW1hdGUodGhpcy5tZWRpYXNbMF0ubWVzaCwgKCkgPT4ge30pO1xyXG4gICAgfVxyXG5cclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiBtZWRpYS5zaG93KCkpO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiBtZWRpYS5oaWRlKCkpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlR2VvbWV0cnkoKSB7XHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlR2FsbGVyeSgpIHtcclxuICAgIHRoaXMubWVkaWFzID0gbWFwKHRoaXMubWVkaWFzRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IE1lZGlhKHtcclxuICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgIGluZGV4LFxyXG4gICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICAgIHNjZW5lOiB0aGlzLmdyb3VwLFxyXG4gICAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXZlbnRzXHJcbiAgICovXHJcblxyXG4gIG9uQ2hhbmdlSW5kZXgoaW5kZXgpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRDb2xsZWN0aW9uID0gcGFyc2VJbnQoXHJcbiAgICAgIHRoaXMubWVkaWFzW2luZGV4XS5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY29sbGVjdGlvblwiKVxyXG4gICAgKTtcclxuXHJcbiAgICBtYXAodGhpcy5kZXNjcmlwdGlvbkVsZW1lbnRzLCAoZWwsIGlkeCkgPT4ge1xyXG4gICAgICBpZiAoaWR4ID09PSBjdXJyZW50Q29sbGVjdGlvbikge1xyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoXCJjb2xsZWN0aW9uc19fY29udGVudF9fYXJ0aWNsZS0tYWN0aXZlXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsZWN0aW9uc19fY29udGVudF9fYXJ0aWNsZS0tYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRpdGxlRWxlbWVudHMuc3R5bGVbdGhpcy50cmFuc2Zvcm1QcmVmaXhdID0gYFxyXG4gICAgICB0cmFuc2xhdGVZKC0kezI1MCAqIGN1cnJlbnRDb2xsZWN0aW9ufSUpXHJcbiAgICAgIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSByb3RhdGUoLTkwZGVnKVxyXG4gICAgYDtcclxuICAgIGNvbnNvbGUubG9nKGN1cnJlbnRDb2xsZWN0aW9uKTtcclxuICB9XHJcblxyXG4gIG9uV2hlZWwoeyBwaXhlbFgsIHBpeGVsWSB9KSB7XHJcbiAgICB0aGlzLngudGFyZ2V0ICs9IHBpeGVsWDtcclxuICAgIHRoaXMueC50YXJnZXQgKz0gcGl4ZWxZO1xyXG4gIH1cclxuXHJcbiAgb25SZXNpemUoZXZlbnQpIHtcclxuICAgIHRoaXMuZ2FsbGVyeUJvdW5kcyA9IHRoaXMuZ2FsbGVyeVdyYXBwZXJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIHRoaXMuc2l6ZXMgPSBldmVudC5zaXplcztcclxuXHJcbiAgICBtYXAodGhpcy5tZWRpYXMsIChtZWRpYSkgPT4gbWVkaWEub25SZXNpemUoZXZlbnQpKTtcclxuXHJcbiAgICB0aGlzLngubGltaXQgPVxyXG4gICAgICB0aGlzLmdhbGxlcnlCb3VuZHMud2lkdGggLSB0aGlzLm1lZGlhc1swXS5lbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgb25Ub3VjaERvd24oeyB4LCB5IH0pIHt9XHJcblxyXG4gIG9uVG91Y2hNb3ZlKHsgeCwgeSB9KSB7XHJcbiAgICB0aGlzLngudGFyZ2V0ICs9ICh4LnN0YXJ0IC0geC5lbmQpIC8gMjA7XHJcbiAgfVxyXG5cclxuICBvblRvdWNoVXAoeyB4LCB5IH0pIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZVxyXG4gICAqL1xyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmICghdGhpcy5nYWxsZXJ5Qm91bmRzKSByZXR1cm47XHJcblxyXG4gICAgdGhpcy54LnRhcmdldCA9IGdzYXAudXRpbHMuY2xhbXAoMCwgdGhpcy54LmxpbWl0LCB0aGlzLngudGFyZ2V0KTtcclxuXHJcbiAgICB0aGlzLnguY3VycmVudCA9IGdzYXAudXRpbHMuaW50ZXJwb2xhdGUoXHJcbiAgICAgIHRoaXMueC5jdXJyZW50LFxyXG4gICAgICB0aGlzLngudGFyZ2V0LFxyXG4gICAgICB0aGlzLngubGVycFxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLnNjcm9sbC54ID0gdGhpcy54LmN1cnJlbnQ7XHJcblxyXG4gICAgdGhpcy5nYWxsZXJ5RWxlbWVudC5zdHlsZVtcclxuICAgICAgdGhpcy50cmFuc2Zvcm1QcmVmaXhcclxuICAgIF0gPSBgdHJhbnNsYXRlWCgtJHt0aGlzLnguY3VycmVudH1weClgO1xyXG5cclxuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5yb3VuZChcclxuICAgICAgKHRoaXMueC5jdXJyZW50IC8gKHRoaXMueC5saW1pdCArIHRoaXMubWVkaWFzWzBdLmVsZW1lbnQuY2xpZW50V2lkdGgpKSAqXHJcbiAgICAgICAgdGhpcy5tZWRpYXMubGVuZ3RoXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLmluZGV4ICE9PSBpbmRleCkge1xyXG4gICAgICB0aGlzLm9uQ2hhbmdlSW5kZXgoaW5kZXgpO1xyXG5cclxuICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhKSA9PiB7XHJcbiAgICAgIG1lZGlhLnVwZGF0ZSh0aGlzLnNjcm9sbCwgdGhpcy5pbmRleCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3lcclxuICAgKi9cclxuXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZGVzdHJweSBob21lXCIpO1xyXG4gICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLmdyb3VwKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTWVzaCwgUHJvZ3JhbSwgUGxhbmUgfSBmcm9tIFwib2dsXCI7XHJcbmltcG9ydCB2ZXJ0ZXggZnJvbSBcInNoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2xcIjtcclxuaW1wb3J0IGZyYWdtZW50IGZyb20gXCJzaGFkZXJzL3BsYW5lLWZyYWdtZW50Lmdsc2xcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICBjb25zdHJ1Y3Rvcih7IGdsLCBzY2VuZSwgc2l6ZXMsIHRyYW5zaXRpb24gfSkge1xyXG4gICAgdGhpcy5pZCA9IFwiZGV0YWlsXCI7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRldGFpbF9fbWVkaWFfX2ltYWdlXCIpO1xyXG4gICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xyXG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xyXG4gICAgdGhpcy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImRldGFpbCBzaXplc1wiLCB0aGlzLnNpemVzKTtcclxuXHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wpO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgdGhpcy5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgICB0aGlzLmNyZWF0ZU1lc2goKTtcclxuICAgIHRoaXMuY3JlYXRlQm91bmRzKHsgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XHJcblxyXG4gICAgLy8gdGhpcy5vblJlc2l6ZShzaXplcyk7XHJcblxyXG4gICAgdGhpcy5zaG93KCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVUZXh0dXJlKCkge1xyXG4gICAgdGhpcy50ZXh0dXJlID0gd2luZG93LlRFWFRVUkVTW3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKV07XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQcm9ncmFtKCkge1xyXG4gICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xyXG4gICAgICB2ZXJ0ZXgsXHJcbiAgICAgIGZyYWdtZW50LFxyXG4gICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgIHRNYXA6IHtcclxuICAgICAgICAgIHZhbHVlOiB0aGlzLnRleHR1cmUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1QWxwaGE6IHtcclxuICAgICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU1lc2goKSB7XHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XHJcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICBwcm9ncmFtOiB0aGlzLnByb2dyYW0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlQm91bmRzKHsgc2l6ZXMgfSkge1xyXG4gICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XHJcblxyXG4gICAgdGhpcy51cGRhdGVTY2FsZShzaXplcyk7XHJcbiAgICB0aGlzLnVwZGF0ZVgoKTtcclxuICAgIHRoaXMudXBkYXRlWSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXZlbnRzLlxyXG4gICAqL1xyXG4gIG9uUmVzaXplKHNpemVzKSB7XHJcbiAgICB0aGlzLmNyZWF0ZUJvdW5kcyh7IHNpemVzOiB0aGlzLnNpemVzIH0pO1xyXG4gICAgdGhpcy51cGRhdGVYKCk7XHJcbiAgICB0aGlzLnVwZGF0ZVkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuaW1hdGlvbnMuXHJcbiAgICovXHJcbiAgc2hvdygpIHtcclxuICAgIGlmICh0aGlzLnRyYW5zaXRpb24pIHtcclxuICAgICAgdGhpcy50cmFuc2l0aW9uLmFuaW1hdGUodGhpcy5tZXNoLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYS52YWx1ZSA9IDE7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZ3NhcC50byh0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLCB7XHJcbiAgICAgICAgdmFsdWU6IDEsXHJcbiAgICAgICAgZHVyYXRpb246IDEsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvb3AuXHJcbiAgICovXHJcblxyXG4gIHVwZGF0ZVNjYWxlKCkge1xyXG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICB0aGlzLndpZHRoID0gdGhpcy5ib3VuZHMud2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHJcbiAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMuc2l6ZXMud2lkdGggKiB0aGlzLndpZHRoO1xyXG4gICAgdGhpcy5tZXNoLnNjYWxlLnkgPSB0aGlzLnNpemVzLmhlaWdodCAqIHRoaXMuaGVpZ2h0O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKHRoaXMuc2l6ZXMud2lkdGgsIHRoaXMud2lkdGgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlWCgpIHtcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID1cclxuICAgICAgLXRoaXMuc2l6ZXMud2lkdGggLyAyICtcclxuICAgICAgdGhpcy5tZXNoLnNjYWxlLnggLyAyICtcclxuICAgICAgKHRoaXMuYm91bmRzLmxlZnQgLyB3aW5kb3cuaW5uZXJXaWR0aCkgKiB0aGlzLnNpemVzLndpZHRoO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlWSgpIHtcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID1cclxuICAgICAgdGhpcy5zaXplcy5oZWlnaHQgLyAyIC1cclxuICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgLyAyIC1cclxuICAgICAgKHRoaXMuYm91bmRzLnRvcCAvIHdpbmRvdy5pbm5lckhlaWdodCkgKiB0aGlzLnNpemVzLmhlaWdodDtcclxuXHJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueSArPVxyXG4gICAgICBNYXRoLmNvcygodGhpcy5tZXNoLnBvc2l0aW9uLnggLyB0aGlzLnNpemVzLndpZHRoKSAqIE1hdGguUEkgKiAwLjEpICogNDAgLVxyXG4gICAgICA0MDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmICghdGhpcy5ib3VuZHMpIHRoaXMudXBkYXRlWCgpO1xyXG4gICAgdGhpcy51cGRhdGVZKCk7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCkge1xyXG4gICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLm1lc2gpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBNZXNoLCBQcm9ncmFtLCBUZXh0dXJlIH0gZnJvbSBcIm9nbFwiO1xyXG5pbXBvcnQgdmVydGV4IGZyb20gXCJzaGFkZXJzL2hvbWUtdmVydGV4Lmdsc2xcIjtcclxuaW1wb3J0IGZyYWdtZW50IGZyb20gXCJzaGFkZXJzL2hvbWUtZnJhZ21lbnQuZ2xzbFwiO1xyXG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZ2wsIGdlb21ldHJ5LCBzY2VuZSwgaW5kZXgsIHNpemVzIH0pIHtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XHJcbiAgICB0aGlzLnNwZWVkID0gMDtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgdGhpcy5jcmVhdGVNZXNoKCk7XHJcblxyXG4gICAgdGhpcy5leHRyYSA9IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjcmVhdGVUZXh0dXJlKCkge1xyXG4gICAgdGhpcy50ZXh0dXJlID0gd2luZG93LlRFWFRVUkVTW3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKV07XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQcm9ncmFtKCkge1xyXG4gICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xyXG4gICAgICB2ZXJ0ZXgsXHJcbiAgICAgIGZyYWdtZW50LFxyXG4gICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgIHRNYXA6IHtcclxuICAgICAgICAgIHZhbHVlOiB0aGlzLnRleHR1cmUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1QWxwaGE6IHtcclxuICAgICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdVZpZXdwb3J0U2l6ZXM6IHtcclxuICAgICAgICAgIHZhbHVlOiBbdGhpcy5zaXplcy53aWR0aCwgdGhpcy5zaXplcy5oZWlnaHRdLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdVNwZWVkOiB7XHJcbiAgICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVNZXNoKCkge1xyXG4gICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xyXG4gICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcclxuICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKTtcclxuXHJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueCArPSB0aGlzLmluZGV4ICogdGhpcy5tZXNoLnNjYWxlLng7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVCb3VuZHMoeyBzaXplcyB9KSB7XHJcbiAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVNjYWxlKHNpemVzKTtcclxuICAgIHRoaXMudXBkYXRlWCgpO1xyXG4gICAgdGhpcy51cGRhdGVZKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFdmVudHMuXHJcbiAgICovXHJcbiAgb25SZXNpemUoc2l6ZXMpIHtcclxuICAgIHRoaXMuY3JlYXRlQm91bmRzKHNpemVzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuaW1hdGlvbnMuXHJcbiAgICovXHJcbiAgc2hvdygpIHtcclxuICAgIGdzYXAuZnJvbVRvKFxyXG4gICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLFxyXG4gICAgICB7XHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogMC40LFxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIGdzYXAudG8odGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYSwge1xyXG4gICAgICB2YWx1ZTogMCxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9vcC5cclxuICAgKi9cclxuXHJcbiAgdXBkYXRlU2NhbGUoKSB7XHJcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgIHRoaXMud2lkdGggPSB0aGlzLmJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cclxuICAgIHRoaXMubWVzaC5zY2FsZS54ID0gdGhpcy5zaXplcy53aWR0aCAqIHRoaXMud2lkdGg7XHJcbiAgICB0aGlzLm1lc2guc2NhbGUueSA9IHRoaXMuc2l6ZXMuaGVpZ2h0ICogdGhpcy5oZWlnaHQ7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVYKHggPSAwKSB7XHJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9XHJcbiAgICAgIC10aGlzLnNpemVzLndpZHRoIC8gMiArXHJcbiAgICAgIHRoaXMubWVzaC5zY2FsZS54IC8gMiArXHJcbiAgICAgICgodGhpcy5ib3VuZHMubGVmdCAtIHgpIC8gd2luZG93LmlubmVyV2lkdGgpICogdGhpcy5zaXplcy53aWR0aCArXHJcbiAgICAgIHRoaXMuZXh0cmEueDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVkoeSA9IDApIHtcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID1cclxuICAgICAgdGhpcy5zaXplcy5oZWlnaHQgLyAyIC1cclxuICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgLyAyIC1cclxuICAgICAgKCh0aGlzLmJvdW5kcy50b3AgLSB5KSAvIHdpbmRvdy5pbm5lckhlaWdodCkgKiB0aGlzLnNpemVzLmhlaWdodCAtXHJcbiAgICAgIHRoaXMuZXh0cmEueTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShzY3JvbGwsIHNwZWVkKSB7XHJcbiAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsLngpO1xyXG4gICAgdGhpcy51cGRhdGVZKHNjcm9sbC55KTtcclxuXHJcbiAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudVNwZWVkLnZhbHVlID0gc3BlZWQgLyA1MDA7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBNZWRpYSBmcm9tIFwiLi9NZWRpYVwiO1xyXG5pbXBvcnQgbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XHJcbmltcG9ydCB7IFBsYW5lLCBUcmFuc2Zvcm0gfSBmcm9tIFwib2dsXCI7XHJcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IoeyBnbCwgc2NlbmUsIHNpemVzIH0pIHtcclxuICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcclxuICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKCk7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcblxyXG4gICAgdGhpcy5nYWxsZXJ5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaG9tZV9nYWxsZXJ5XCIpO1xyXG4gICAgdGhpcy5tZWRpYXNFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIFwiLmhvbWVfX2dhbGxlcnlfX21lZGlhX19pbWFnZSBcIlxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KCk7XHJcbiAgICB0aGlzLmNyZWF0ZUdhbGxlcnkoKTtcclxuICAgIHRoaXMuc2hvdygpO1xyXG5cclxuICAgIHRoaXMuZ3JvdXAuc2V0UGFyZW50KHNjZW5lKTtcclxuXHJcbiAgICB0aGlzLnggPSB7XHJcbiAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgIHRhcmdldDogMCxcclxuICAgICAgbGVycDogMC4xLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnkgPSB7XHJcbiAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgIHRhcmdldDogMCxcclxuICAgICAgbGVycDogMC4xLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbmltYXRpb25zLlxyXG4gICAqL1xyXG5cclxuICBzaG93KCkge1xyXG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IG1lZGlhLnNob3coKSk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IG1lZGlhLmhpZGUoKSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVHZW9tZXRyeSgpIHtcclxuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbCwge1xyXG4gICAgICBoZWlnaHRTZWdtZW50czogMjAsXHJcbiAgICAgIHdpZHRoU2VnbWVudHM6IDIwLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVHYWxsZXJ5KCkge1xyXG4gICAgdGhpcy5tZWRpYXMgPSBtYXAodGhpcy5tZWRpYXNFbGVtZW50cywgKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgTWVkaWEoe1xyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFdmVudHNcclxuICAgKi9cclxuXHJcbiAgb25XaGVlbCh7IHBpeGVsWCwgcGl4ZWxZIH0pIHtcclxuICAgIHRoaXMueC50YXJnZXQgKz0gcGl4ZWxYO1xyXG4gICAgdGhpcy55LnRhcmdldCArPSBwaXhlbFk7XHJcbiAgfVxyXG5cclxuICBvblJlc2l6ZShldmVudCkge1xyXG4gICAgdGhpcy5nYWxsZXJ5Qm91bmRzID0gdGhpcy5nYWxsZXJ5RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICB0aGlzLnNpemVzID0gZXZlbnQuc2l6ZXM7XHJcblxyXG4gICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEpID0+IG1lZGlhLm9uUmVzaXplKGV2ZW50KSk7XHJcbiAgfVxyXG5cclxuICBvblRvdWNoRG93bih7IHgsIHkgfSkge31cclxuXHJcbiAgb25Ub3VjaE1vdmUoeyB4LCB5IH0pIHtcclxuICAgIHRoaXMueC50YXJnZXQgKz0gKHguc3RhcnQgLSB4LmVuZCkgLyAyMDtcclxuICAgIHRoaXMueS50YXJnZXQgKz0gKHkuc3RhcnQgLSB5LmVuZCkgLyAyMDtcclxuICB9XHJcblxyXG4gIG9uVG91Y2hVcCh7IHgsIHkgfSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlXHJcbiAgICovXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgaWYgKCF0aGlzLmdhbGxlcnlCb3VuZHMpIHJldHVybjtcclxuXHJcbiAgICB0aGlzLnguY3VycmVudCA9IGdzYXAudXRpbHMuaW50ZXJwb2xhdGUoXHJcbiAgICAgIHRoaXMueC5jdXJyZW50LFxyXG4gICAgICB0aGlzLngudGFyZ2V0LFxyXG4gICAgICB0aGlzLngubGVycFxyXG4gICAgKTtcclxuICAgIHRoaXMueS5jdXJyZW50ID0gZ3NhcC51dGlscy5pbnRlcnBvbGF0ZShcclxuICAgICAgdGhpcy55LmN1cnJlbnQsXHJcbiAgICAgIHRoaXMueS50YXJnZXQsXHJcbiAgICAgIHRoaXMueS5sZXJwXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLnNjcm9sbC54IDwgdGhpcy54LmN1cnJlbnQpIHtcclxuICAgICAgdGhpcy54LmRpcmVjdGlvbiA9IFwibGVmdFwiO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnNjcm9sbC54ID4gdGhpcy54LmN1cnJlbnQpIHtcclxuICAgICAgdGhpcy54LmRpcmVjdGlvbiA9IFwicmlnaHRcIjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5zY3JvbGwueSA8IHRoaXMueS5jdXJyZW50KSB7XHJcbiAgICAgIHRoaXMueS5kaXJlY3Rpb24gPSBcImRvd25cIjtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zY3JvbGwueSA+IHRoaXMueS5jdXJyZW50KSB7XHJcbiAgICAgIHRoaXMueS5kaXJlY3Rpb24gPSBcInVwXCI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nYWxsZXJ5V2lkdGggPVxyXG4gICAgICAodGhpcy5nYWxsZXJ5Qm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGgpICogdGhpcy5zaXplcy53aWR0aDtcclxuXHJcbiAgICB0aGlzLmdhbGxlcnlIZWlnaHQgPVxyXG4gICAgICAodGhpcy5nYWxsZXJ5Qm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodCkgKiB0aGlzLnNpemVzLmhlaWdodDtcclxuXHJcbiAgICB0aGlzLnNjcm9sbC54ID0gdGhpcy54LmN1cnJlbnQ7XHJcbiAgICB0aGlzLnNjcm9sbC55ID0gdGhpcy55LmN1cnJlbnQ7XHJcblxyXG4gICAgdGhpcy55LnRhcmdldCArPSAxO1xyXG5cclxuICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBpbmRleCkgPT4ge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdGhpcy54LmRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgJiZcclxuICAgICAgICBtZWRpYS5tZXNoLnBvc2l0aW9uLnggKyBtZWRpYS5tZXNoLnNjYWxlLnggLyAyIDwgLXRoaXMuc2l6ZXMud2lkdGggLyAyXHJcbiAgICAgICkge1xyXG4gICAgICAgIG1lZGlhLmV4dHJhLnggKz0gdGhpcy5nYWxsZXJ5V2lkdGg7XHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgdGhpcy54LmRpcmVjdGlvbiA9PT0gXCJyaWdodFwiICYmXHJcbiAgICAgICAgbWVkaWEubWVzaC5wb3NpdGlvbi54IC0gbWVkaWEubWVzaC5zY2FsZS54IC8gMiA+IHRoaXMuc2l6ZXMud2lkdGggLyAyXHJcbiAgICAgICkge1xyXG4gICAgICAgIG1lZGlhLmV4dHJhLnggLT0gdGhpcy5nYWxsZXJ5V2lkdGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnkuZGlyZWN0aW9uID09PSBcInVwXCIgJiZcclxuICAgICAgICBtZWRpYS5tZXNoLnBvc2l0aW9uLnkgKyBtZWRpYS5tZXNoLnNjYWxlLnkgLyAyIDwgLXRoaXMuc2l6ZXMuaGVpZ2h0IC8gMlxyXG4gICAgICApIHtcclxuICAgICAgICBtZWRpYS5leHRyYS55IC09IHRoaXMuZ2FsbGVyeUhlaWdodDtcclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICB0aGlzLnkuZGlyZWN0aW9uID09PSBcImRvd25cIiAmJlxyXG4gICAgICAgIG1lZGlhLm1lc2gucG9zaXRpb24ueSAtIG1lZGlhLm1lc2guc2NhbGUueSAvIDIgPiB0aGlzLnNpemVzLmhlaWdodCAvIDJcclxuICAgICAgKSB7XHJcbiAgICAgICAgbWVkaWEuZXh0cmEueSArPSB0aGlzLmdhbGxlcnlIZWlnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHNwZWVkID0gdGhpcy55LnRhcmdldCAtIHRoaXMueS5jdXJyZW50O1xyXG5cclxuICAgICAgbWVkaWEudXBkYXRlKHRoaXMuc2Nyb2xsLCBzcGVlZCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3lcclxuICAgKi9cclxuXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZGVzdHJweSBob21lXCIpO1xyXG4gICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLmdyb3VwKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTWVzaCwgUHJvZ3JhbSwgUGxhbmUgfSBmcm9tIFwib2dsXCI7XHJcbmltcG9ydCB2ZXJ0ZXggZnJvbSBcInNoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2xcIjtcclxuaW1wb3J0IGZyYWdtZW50IGZyb20gXCJzaGFkZXJzL3BsYW5lLWZyYWdtZW50Lmdsc2xcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zaXRpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgZGV0YWlscywgZ2wsIHNjZW5lLCB1cmwgfSkge1xyXG4gICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcclxuICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcclxuICAgIHRoaXMudXJsID0gdXJsO1xyXG5cclxuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQcm9ncmFtKHRleHR1cmUpIHtcclxuICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcclxuICAgICAgdmVydGV4LFxyXG4gICAgICBmcmFnbWVudCxcclxuICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICB0TWFwOiB7XHJcbiAgICAgICAgICB2YWx1ZTogdGV4dHVyZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVBbHBoYToge1xyXG4gICAgICAgICAgdmFsdWU6IDEsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlTWVzaChtZXNoKSB7XHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XHJcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICBwcm9ncmFtOiB0aGlzLnByb2dyYW0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm1lc2guc2NhbGUueCA9IG1lc2guc2NhbGUueDtcclxuICAgIHRoaXMubWVzaC5zY2FsZS55ID0gbWVzaC5zY2FsZS55O1xyXG4gICAgdGhpcy5tZXNoLnNjYWxlLnogPSBtZXNoLnNjYWxlLno7XHJcblxyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSBtZXNoLnBvc2l0aW9uLng7XHJcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9IG1lc2gucG9zaXRpb24ueTtcclxuXHJcbiAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpO1xyXG4gIH1cclxuXHJcbiAgc2V0RWxlbWVudChlbGVtZW50KSB7XHJcbiAgICBpZiAoZWxlbWVudC5pZCA9PT0gXCJjb2xsZWN0aW9uc1wiKSB7XHJcbiAgICAgIGNvbnN0IHsgaW5kZXgsIG1lZGlhcyB9ID0gZWxlbWVudDtcclxuICAgICAgY29uc3QgbWVkaWEgPSBtZWRpYXNbaW5kZXhdO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIk1lZGlhXCIsIG1lZGlhKTtcclxuXHJcbiAgICAgIHRoaXMuY3JlYXRlUHJvZ3JhbShtZWRpYS50ZXh0dXJlKTtcclxuICAgICAgdGhpcy5jcmVhdGVNZXNoKG1lZGlhLm1lc2gpO1xyXG4gICAgICB0aGlzLm1lc2gucG9zaXRpb24ueiA9IG1lZGlhLm1lc2gucG9zaXRpb24ueiArIDAuMDE7XHJcblxyXG4gICAgICB0aGlzLnRyYW5zaXRpb24gPSBcImRldGFpbFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jcmVhdGVQcm9ncmFtKGVsZW1lbnQudGV4dHVyZSk7XHJcbiAgICAgIHRoaXMuY3JlYXRlTWVzaChlbGVtZW50Lm1lc2gpO1xyXG4gICAgICB0aGlzLm1lc2gucG9zaXRpb24ueiA9IDAuMDE7XHJcblxyXG4gICAgICB0aGlzLnRyYW5zaXRpb24gPSBcImNvbGxlY3Rpb25zXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmFuc2l0aW9ucy5cclxuICAgKi9cclxuICBhbmltYXRlKGVsZW1lbnQsIG9uQ29tcGxldGUpIHtcclxuICAgIC8vIGlmICh0aGlzLnRyYW5zaXRpb24gPT09IFwiZGV0YWlsXCIpIHtcclxuICAgIGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XHJcbiAgICAgIGRlbGF5OiAwLjUsXHJcbiAgICAgIG9uQ29tcGxldGUsXHJcbiAgICB9KTtcclxuICAgIHRpbWVsaW5lLnRvKFxyXG4gICAgICB0aGlzLm1lc2guc2NhbGUsXHJcbiAgICAgIHtcclxuICAgICAgICBkdXJhdGlvbjogMS41LFxyXG4gICAgICAgIGVhc2U6IFwiZXhwby5pbk91dFwiLFxyXG4gICAgICAgIHg6IGVsZW1lbnQuc2NhbGUueCxcclxuICAgICAgICB5OiBlbGVtZW50LnNjYWxlLnksXHJcbiAgICAgICAgejogZWxlbWVudC5zY2FsZS56LFxyXG4gICAgICB9LFxyXG4gICAgICAwXHJcbiAgICApO1xyXG5cclxuICAgIHRpbWVsaW5lLnRvKFxyXG4gICAgICB0aGlzLm1lc2gucG9zaXRpb24sXHJcbiAgICAgIHtcclxuICAgICAgICBkdXJhdGlvbjogMS41LFxyXG4gICAgICAgIGVhc2U6IFwiZXhwby5pbk91dFwiLFxyXG4gICAgICAgIHg6IGVsZW1lbnQucG9zaXRpb24ueCxcclxuICAgICAgICB5OiBlbGVtZW50LnBvc2l0aW9uLnksXHJcbiAgICAgIH0sXHJcbiAgICAgIDBcclxuICAgICk7XHJcblxyXG4gICAgdGltZWxpbmUuY2FsbCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2NlbmUucmVtb3ZlQ2hpbGQodGhpcy5tZXNoKTtcclxuICAgIH0pO1xyXG4gICAgLy8gfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0gfSBmcm9tIFwib2dsXCI7XHJcbmltcG9ydCBBYm91dCBmcm9tIFwiLi9BYm91dFwiO1xyXG5pbXBvcnQgQ29sbGVjdGlvbnMgZnJvbSBcIi4vQ29sbGVjdGlvbnNcIjtcclxuaW1wb3J0IERldGFpbCBmcm9tIFwiLi9EZXRhaWxcIjtcclxuaW1wb3J0IEhvbWUgZnJvbSBcIi4vSG9tZVwiO1xyXG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tIFwiLi9UcmFuc2l0aW9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXMge1xyXG4gIGNvbnN0cnVjdG9yKHsgdGVtcGxhdGUgfSkge1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xyXG5cclxuICAgIHRoaXMueCA9IHtcclxuICAgICAgc3RhcnQ6IDAsXHJcbiAgICAgIGVuZDogMCxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy55ID0ge1xyXG4gICAgICBzdGFydDogMCxcclxuICAgICAgZW5kOiAwLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUNhbWVyYSgpO1xyXG4gICAgdGhpcy5jcmVhdGVTY2VuZSgpO1xyXG4gICAgdGhpcy5vblJlc2l6ZSgpO1xyXG4gICAgLy8gdGhpcy5vbkNoYW5nZSh0ZW1wbGF0ZSk7XHJcblxyXG4gICAgdGhpcy5pc0Rvd24gPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZVJlbmRlcmVyKCkge1xyXG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcih7IGFscGhhOiB0cnVlLCBhbnRpYWxpYXM6IHRydWUgfSk7XHJcbiAgICB0aGlzLmdsID0gdGhpcy5yZW5kZXJlci5nbDtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5nbC5jYW52YXMpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ2FtZXJhKCkge1xyXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKHRoaXMuZ2wpO1xyXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueiA9IDU7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVTY2VuZSgpIHtcclxuICAgIHRoaXMuc2NlbmUgPSBuZXcgVHJhbnNmb3JtKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIb21lXHJcbiAgICovXHJcblxyXG4gIGNyZWF0ZUhvbWUoKSB7XHJcbiAgICB0aGlzLmhvbWUgPSBuZXcgSG9tZSh7IGdsOiB0aGlzLmdsLCBzY2VuZTogdGhpcy5zY2VuZSwgc2l6ZXM6IHRoaXMuc2l6ZXMgfSk7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95SG9tZSgpIHtcclxuICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgdGhpcy5ob21lLmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy5ob21lID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFib3V0XHJcbiAgICovXHJcblxyXG4gIGNyZWF0ZUFib3V0KCkge1xyXG4gICAgdGhpcy5hYm91dCA9IG5ldyBBYm91dCh7XHJcbiAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcclxuICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3lBYm91dCgpIHtcclxuICAgIGlmICh0aGlzLmFib3V0KSB7XHJcbiAgICAgIHRoaXMuYWJvdXQuZGVzdHJveSgpO1xyXG4gICAgICB0aGlzLmFib3V0ID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbGxlY3Rpb25zXHJcbiAgICovXHJcblxyXG4gIGNyZWF0ZUNvbGxlY3Rpb25zKCkge1xyXG4gICAgdGhpcy5jb2xsZWN0aW9ucyA9IG5ldyBDb2xsZWN0aW9ucyh7XHJcbiAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcclxuICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICAgIHRyYW5zaXRpb246IHRoaXMudHJhbnNpdGlvbixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveUNvbGxlY3Rpb25zKCkge1xyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcclxuICAgICAgdGhpcy5jb2xsZWN0aW9ucy5kZXN0cm95KCk7XHJcbiAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0YWlsXHJcbiAgICovXHJcblxyXG4gIGNyZWF0ZURldGFpbCgpIHtcclxuICAgIHRoaXMuZGV0YWlsID0gbmV3IERldGFpbCh7XHJcbiAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcclxuICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICAgIHRyYW5zaXRpb246IHRoaXMudHJhbnNpdGlvbixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveURldGFpbCgpIHtcclxuICAgIGlmICh0aGlzLmRldGFpbCkge1xyXG4gICAgICB0aGlzLmRldGFpbC5kZXN0cm95KCk7XHJcbiAgICAgIHRoaXMuZGV0YWlsID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV2ZW50cy5cclxuICAgKi9cclxuXHJcbiAgb25QcmVsb2FkZWQoKSB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlKHRoaXMudGVtcGxhdGUpO1xyXG4gICAgdGhpcy5vblJlc2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgb25SZXNpemUoKSB7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICB0aGlzLmNhbWVyYS5wZXJzcGVjdGl2ZSh7XHJcbiAgICAgIGFzcGVjdDogdGhpcy5nbC5jYW52YXMud2lkdGggLyB0aGlzLmdsLmNhbnZhcy5oZWlnaHQsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBmb3YgPSB0aGlzLmNhbWVyYS5mb3YgKiAoTWF0aC5QSSAvIDE4MCk7XHJcbiAgICBjb25zdCBoZWlnaHQgPSAyICogTWF0aC50YW4oZm92IC8gMikgKiB0aGlzLmNhbWVyYS5wb3NpdGlvbi56O1xyXG4gICAgY29uc3Qgd2lkdGggPSBoZWlnaHQgKiB0aGlzLmNhbWVyYS5hc3BlY3Q7XHJcblxyXG4gICAgdGhpcy5zaXplcyA9IHtcclxuICAgICAgaGVpZ2h0LFxyXG4gICAgICB3aWR0aCxcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICB0aGlzLmhvbWUub25SZXNpemUoe1xyXG4gICAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5hYm91dCkge1xyXG4gICAgICB0aGlzLmFib3V0Lm9uUmVzaXplKHtcclxuICAgICAgICBzaXplczogdGhpcy5zaXplcyxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcclxuICAgICAgdGhpcy5jb2xsZWN0aW9ucy5vblJlc2l6ZSh7XHJcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmRldGFpbCkge1xyXG4gICAgICB0aGlzLmRldGFpbC5vblJlc2l6ZSh7XHJcbiAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2VTdGFydCh1cmwpIHtcclxuICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgdGhpcy5ob21lLmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5hYm91dCkge1xyXG4gICAgICB0aGlzLmFib3V0LmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5jb2xsZWN0aW9ucykge1xyXG4gICAgICB0aGlzLmNvbGxlY3Rpb25zLmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlzRnJvbUNvbGxlY3Rpb25zVG9EZXRhaWxzID1cclxuICAgICAgdGhpcy50ZW1wbGF0ZSA9PT0gXCJjb2xsZWN0aW9uc1wiICYmIHVybC5pbmRleE9mKFwiZGV0YWlsXCIpID4gLTE7XHJcblxyXG4gICAgdGhpcy5pc0Zyb21EZXRhaWxzVG9Db2xsZWN0aW9ucyA9XHJcbiAgICAgIHRoaXMudGVtcGxhdGUgPT09IFwiZGV0YWlsXCIgJiYgdXJsLmluZGV4T2YoXCJjb2xsZWN0aW9uc1wiKSA+IC0xO1xyXG5cclxuICAgIGlmICh0aGlzLmlzRnJvbUNvbGxlY3Rpb25zVG9EZXRhaWxzIHx8IHRoaXMuaXNGcm9tRGV0YWlsc1RvQ29sbGVjdGlvbnMpIHtcclxuICAgICAgdGhpcy50cmFuc2l0aW9uID0gbmV3IFRyYW5zaXRpb24oe1xyXG4gICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxyXG4gICAgICAgIHVybCxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAodGhpcy50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uLnNldEVsZW1lbnQodGhpcy5jb2xsZWN0aW9ucyB8fCB0aGlzLmRldGFpbCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlKHRlbXBsYXRlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInRlbXBsYXRlOlwiLCB0ZW1wbGF0ZSk7XHJcblxyXG4gICAgaWYgKHRlbXBsYXRlID09PSBcImhvbWVcIikge1xyXG4gICAgICB0aGlzLmNyZWF0ZUhvbWUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZGVzdHJveUhvbWUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGVtcGxhdGUgPT09IFwiYWJvdXRcIikge1xyXG4gICAgICB0aGlzLmNyZWF0ZUFib3V0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRlc3Ryb3lBYm91dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0ZW1wbGF0ZSA9PT0gXCJjb2xsZWN0aW9uc1wiKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlQ29sbGVjdGlvbnMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZGVzdHJveUNvbGxlY3Rpb25zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRlbXBsYXRlID09PSBcImRldGFpbFwiKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlRGV0YWlsKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRlc3Ryb3lEZXRhaWwoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcbiAgfVxyXG5cclxuICBvbldoZWVsKGV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgIHRoaXMuaG9tZS5vbldoZWVsKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5hYm91dCkge1xyXG4gICAgICB0aGlzLmFib3V0Lm9uV2hlZWwoZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgIHRoaXMuY29sbGVjdGlvbnMub25XaGVlbChldmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblRvdWNoRG93bihldmVudCkge1xyXG4gICAgdGhpcy5pc0Rvd24gPSB0cnVlO1xyXG4gICAgdGhpcy54LnN0YXJ0ID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LmNsaWVudFg7XHJcbiAgICB0aGlzLnkuc3RhcnQgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WTtcclxuXHJcbiAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgIHRoaXMuaG9tZS5vblRvdWNoRG93bih7XHJcbiAgICAgICAgeDogdGhpcy54LFxyXG4gICAgICAgIHk6IHRoaXMueSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuYWJvdXQpIHtcclxuICAgICAgdGhpcy5hYm91dC5vblRvdWNoRG93bih7XHJcbiAgICAgICAgeDogdGhpcy54LFxyXG4gICAgICAgIHk6IHRoaXMueSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcclxuICAgICAgdGhpcy5jb2xsZWN0aW9ucy5vblRvdWNoRG93bih7XHJcbiAgICAgICAgeDogdGhpcy54LFxyXG4gICAgICAgIHk6IHRoaXMueSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblRvdWNoTW92ZShldmVudCkge1xyXG4gICAgaWYgKCF0aGlzLmlzRG93bikgcmV0dXJuO1xyXG4gICAgY29uc3QgeCA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFggOiBldmVudC5jbGllbnRYO1xyXG4gICAgY29uc3QgeSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC5jbGllbnRZO1xyXG5cclxuICAgIHRoaXMueC5lbmQgPSB4O1xyXG4gICAgdGhpcy55LmVuZCA9IHk7XHJcblxyXG4gICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICB0aGlzLmhvbWUub25Ub3VjaE1vdmUoe1xyXG4gICAgICAgIHg6IHRoaXMueCxcclxuICAgICAgICB5OiB0aGlzLnksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmFib3V0KSB7XHJcbiAgICAgIHRoaXMuYWJvdXQub25Ub3VjaE1vdmUoe1xyXG4gICAgICAgIHg6IHRoaXMueCxcclxuICAgICAgICB5OiB0aGlzLnksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgIHRoaXMuY29sbGVjdGlvbnMub25Ub3VjaE1vdmUoe1xyXG4gICAgICAgIHg6IHRoaXMueCxcclxuICAgICAgICB5OiB0aGlzLnksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Ub3VjaFVwKGV2ZW50KSB7XHJcbiAgICB0aGlzLmlzRG93biA9IGZhbHNlO1xyXG4gICAgY29uc3QgeCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzXHJcbiAgICAgID8gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WFxyXG4gICAgICA6IGV2ZW50LmNsaWVudFg7XHJcbiAgICBjb25zdCB5ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNcclxuICAgICAgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZXHJcbiAgICAgIDogZXZlbnQuY2xpZW50WTtcclxuXHJcbiAgICB0aGlzLnguZW5kID0geDtcclxuICAgIHRoaXMueS5lbmQgPSB5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlLlxyXG4gICAqL1xyXG4gIHVwZGF0ZShzY3JvbGwpIHtcclxuICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgdGhpcy5ob21lLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmFib3V0KSB7XHJcbiAgICAgIHRoaXMuYWJvdXQudXBkYXRlKHNjcm9sbCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcclxuICAgICAgdGhpcy5jb2xsZWN0aW9ucy51cGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5kZXRhaWwpIHtcclxuICAgICAgdGhpcy5kZXRhaWwudXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXIoe1xyXG4gICAgICBjYW1lcmE6IHRoaXMuY2FtZXJhLFxyXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuLi9jbGFzc2VzL0NvbXBvbmVudFwiO1xyXG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xyXG5cclxuaW1wb3J0IHsgQ09MT1JfQlJJR0hUX0dSQVksIENPTE9SX1FVQVJURVJfU1BBTklTSF9XSElURSB9IGZyb20gXCIuLi91dGlscy9jb2xvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IoeyB0ZW1wbGF0ZSB9KSB7XHJcbiAgICBzdXBlcih7XHJcbiAgICAgIGVsZW1lbnQ6IFwiLm5hdmlnYXRpb25cIixcclxuICAgICAgZWxlbWVudHM6IHtcclxuICAgICAgICBpdGVtczogXCIubmF2aWdhdGlvbl9fbGlzdF9faXRlbVwiLFxyXG4gICAgICAgIGxpbmtzOiBcIi5uYXZpZ2F0aW9uX19saXN0X19saW5rXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm9uQ2hhbmdlKHRlbXBsYXRlKTtcclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlKHRlbXBsYXRlKSB7XHJcbiAgICBpZiAodGVtcGxhdGUgPT09IFwiYWJvdXRcIikge1xyXG4gICAgICBnc2FwLnRvKHRoaXMuZWxlbWVudCwge1xyXG4gICAgICAgIGNvbG9yOiBDT0xPUl9CUklHSFRfR1JBWSxcclxuICAgICAgICBkdXJhdGlvbjogMS41LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGdzYXAudG8odGhpcy5lbGVtZW50cy5pdGVtc1swXSwge1xyXG4gICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgICBkdXJhdGlvbjogMC43NSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBnc2FwLnRvKHRoaXMuZWxlbWVudHMuaXRlbXNbMV0sIHtcclxuICAgICAgICBhdXRvQWxwaGE6IDEsXHJcbiAgICAgICAgZGVsYXk6IDAuNzUsXHJcbiAgICAgICAgZHVyYXRpb246IDAuNzUsXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZ3NhcC50byh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICBjb2xvcjogQ09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFLFxyXG4gICAgICAgIGR1cmF0aW9uOiAxLjUsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZ3NhcC50byh0aGlzLmVsZW1lbnRzLml0ZW1zWzBdLCB7XHJcbiAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgIGRlbGF5OiAwLjc1LFxyXG4gICAgICAgIGR1cmF0aW9uOiAwLjc1LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGdzYXAudG8odGhpcy5lbGVtZW50cy5pdGVtc1sxXSwge1xyXG4gICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgICBkdXJhdGlvbjogMC43NSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSBcImNsYXNzZXMvQ29tcG9uZW50XCI7XHJcbmltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCI7XHJcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwib2dsXCI7XHJcbmltcG9ydCB7IHNwbGl0IH0gZnJvbSBcIi4uL3V0aWxzL3RleHRcIjtcclxuXHJcbmNsYXNzIFByZWxvYWRlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IoeyBjYW52YXMgfSkge1xyXG4gICAgc3VwZXIoe1xyXG4gICAgICBlbGVtZW50OiBcIi5wcmVsb2FkZXJcIixcclxuICAgICAgZWxlbWVudHM6IHtcclxuICAgICAgICB0ZXh0OiBcIi5wcmVsb2FkZXJfX3RleHRcIixcclxuICAgICAgICBudW1iZXI6IFwiLnByZWxvYWRlcl9fbnVtYmVyXCIsXHJcbiAgICAgICAgbnVtYmVyVGV4dDogXCIucHJlbG9hZGVyX19udW1iZXJfX3RleHRcIixcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHNwbGl0KHtcclxuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50cy50ZXh0LFxyXG4gICAgICBleHByZXNzaW9uOiBcIjxicj5cIixcclxuICAgIH0pO1xyXG5cclxuICAgIHNwbGl0KHtcclxuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50cy50ZXh0LFxyXG4gICAgICBleHByZXNzaW9uOiBcIjxicj5cIixcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudHMudGl0bGVTcGFucyA9IHRoaXMuZWxlbWVudHMudGV4dC5xdWVyeVNlbGVjdG9yQWxsKFwic3BhbiBzcGFuXCIpO1xyXG5cclxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgd2luZG93LlRFWFRVUkVTID0ge307XHJcblxyXG4gICAgdGhpcy5sZW5ndGggPSAwO1xyXG4gICAgdGhpcy5jcmVhdGVMb2FkZXIoKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUxvYWRlcigpIHtcclxuICAgIHdpbmRvdy5BU1NFVFMuZm9yRWFjaCgoaW1hZ2VVcmwpID0+IHtcclxuICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKHRoaXMuY2FudmFzLmdsLCB7XHJcbiAgICAgICAgZ2VuZXJhdGVNaXBtYXBzOiBmYWxzZSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcclxuICAgICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c2VcIjtcclxuICAgICAgaW1hZ2Uuc3JjID0gaW1hZ2VVcmw7XHJcbiAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICB0ZXh0dXJlLmltYWdlID0gaW1hZ2U7XHJcbiAgICAgICAgdGhpcy5vbkFzc2V0TG9hZGVkKCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3aW5kb3cuVEVYVFVSRVNbaW1hZ2VVcmxdID0gdGV4dHVyZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb25Bc3NldExvYWRlZCgpIHtcclxuICAgIHRoaXMubGVuZ3RoICs9IDE7XHJcbiAgICBjb25zdCBwZXJjZW50YWdlTG9hZGVkID0gTWF0aC5yb3VuZChcclxuICAgICAgKHRoaXMubGVuZ3RoIC8gd2luZG93LkFTU0VUUy5sZW5ndGgpICogMTAwXHJcbiAgICApO1xyXG4gICAgdGhpcy5lbGVtZW50cy5udW1iZXJUZXh0LmlubmVyVGV4dCA9IHBlcmNlbnRhZ2VMb2FkZWQgKyBcIiVcIjtcclxuXHJcbiAgICBpZiAocGVyY2VudGFnZUxvYWRlZCA9PT0gMTAwKSB7XHJcbiAgICAgIHRoaXMub25Mb2FkZWQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uTG9hZGVkKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIHRoaXMuYW5pbWF0ZU91dCA9IEdTQVAudGltZWxpbmUoe1xyXG4gICAgICAgIGRlbGF5OiAyLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuYW5pbWF0ZU91dC50byh0aGlzLmVsZW1lbnRzLnRpdGxlU3BhbnMsIHtcclxuICAgICAgICBkdXJhdGlvbjogMS41LFxyXG4gICAgICAgIGVhc2U6IFwiZXhwby5vdXRcIixcclxuICAgICAgICBzdGFnZ2VyOiAwLjEsXHJcbiAgICAgICAgeTogXCIxMDAlXCIsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5hbmltYXRlT3V0LnRvKFxyXG4gICAgICAgIHRoaXMuZWxlbWVudHMubnVtYmVyVGV4dCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBkdXJhdGlvbjogMS41LFxyXG4gICAgICAgICAgZWFzZTogXCJleHBvLm91dFwiLFxyXG4gICAgICAgICAgeTogXCIxMDAlXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcIi09MS40XCJcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHRoaXMuYW5pbWF0ZU91dC50byhcclxuICAgICAgICB0aGlzLmVsZW1lbnQsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZHVyYXRpb246IDEuNSxcclxuICAgICAgICAgIGVhc2U6IFwiZXhwby5vdXRcIixcclxuICAgICAgICAgIHNjYWxlWTogMCxcclxuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogXCIxMDAlIDEwMCVcIixcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiLT0xXCJcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHRoaXMuYW5pbWF0ZU91dC5jYWxsKChfKSA9PiB0aGlzLmVtaXQoXCJjb21wbGV0ZWRcIikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCkge1xyXG4gICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByZWxvYWRlcjtcclxuIiwiaW1wb3J0IGVhY2ggZnJvbSBcImxvZGFzaC9lYWNoXCI7XHJcblxyXG5pbXBvcnQgQWJvdXQgZnJvbSBcIi4vcGFnZXMvQWJvdXRcIjtcclxuaW1wb3J0IENvbGxlY3Rpb25zIGZyb20gXCIuL3BhZ2VzL0NvbGxlY3Rpb25zXCI7XHJcbmltcG9ydCBEZXRhaWwgZnJvbSBcIi4vcGFnZXMvRGV0YWlsXCI7XHJcbmltcG9ydCBIb21lIGZyb20gXCIuL3BhZ2VzL0hvbWVcIjtcclxuXHJcbmltcG9ydCBDYW52YXMgZnJvbSBcIi4vY29tcG9uZW50cy9DYW52YXNcIjtcclxuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcIi4vY29tcG9uZW50cy9OYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCBQcmVsb2FkZXIgZnJvbSBcIi4vY29tcG9uZW50cy9QcmVsb2FkZXJcIjtcclxuaW1wb3J0IG5vcm1hbGl6ZVdoZWVsIGZyb20gXCJub3JtYWxpemUtd2hlZWxcIjtcclxuXHJcbmNsYXNzIEFwcCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUNhbnZhcygpO1xyXG4gICAgdGhpcy5jcmVhdGVQcmVsb2FkZXIoKTtcclxuICAgIHRoaXMuY3JlYXRlTmF2aWdhdGlvbigpO1xyXG4gICAgdGhpcy5jcmVhdGVQYWdlcygpO1xyXG5cclxuICAgIHRoaXMuYWRkTGlua0xpc3RlbmVycygpO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIHRoaXMub25SZXNpemUoKTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDUlVELlxyXG4gICAqL1xyXG5cclxuICBjcmVhdGVOYXZpZ2F0aW9uKCkge1xyXG4gICAgdGhpcy5uYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZSB9KTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZVByZWxvYWRlcigpIHtcclxuICAgIHRoaXMucHJlbG9hZGVyID0gbmV3IFByZWxvYWRlcih7IGNhbnZhczogdGhpcy5jYW52YXMgfSk7XHJcbiAgICB0aGlzLnByZWxvYWRlci5vbmNlKFwiY29tcGxldGVkXCIsIHRoaXMub25QcmVsb2FkZWQuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDYW52YXMoKSB7XHJcbiAgICB0aGlzLmNhbnZhcyA9IG5ldyBDYW52YXMoeyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZSB9KTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNvbnRlbnQoKSB7XHJcbiAgICB0aGlzLmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnRcIik7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5jb250ZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdGVtcGxhdGVcIik7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQYWdlcygpIHtcclxuICAgIHRoaXMucGFnZXMgPSB7XHJcbiAgICAgIGFib3V0OiBuZXcgQWJvdXQoKSxcclxuICAgICAgY29sbGVjdGlvbnM6IG5ldyBDb2xsZWN0aW9ucygpLFxyXG4gICAgICBkZXRhaWw6IG5ldyBEZXRhaWwoKSxcclxuICAgICAgaG9tZTogbmV3IEhvbWUoKSxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXTtcclxuICAgIHRoaXMucGFnZS5jcmVhdGUoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLnVwZGF0ZSkge1xyXG4gICAgICB0aGlzLnBhZ2UudXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMudXBkYXRlKSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLnVwZGF0ZSh0aGlzLnBhZ2Uuc2Nyb2xsKTtcclxuICAgIH1cclxuICAgIHRoaXMuZnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXZlbnRzLlxyXG4gICAqL1xyXG5cclxuICBvblByZWxvYWRlZCgpIHtcclxuICAgIHRoaXMucHJlbG9hZGVyLmRlc3Ryb3koKTtcclxuICAgIHRoaXMuY2FudmFzLm9uUHJlbG9hZGVkKCk7XHJcbiAgICB0aGlzLnBhZ2Uuc2hvdygpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25DaGFuZ2UoeyB1cmwsIHB1c2ggPSB0cnVlIH0pIHtcclxuICAgIHRoaXMuY2FudmFzLm9uQ2hhbmdlU3RhcnQodXJsKTtcclxuICAgIHRoaXMucGFnZS5oaWRlKCk7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJsKTtcclxuXHJcbiAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZXMudGV4dCgpO1xyXG4gICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgICAgaWYgKHB1c2gpIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgXCJcIiwgdXJsKTtcclxuXHJcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sO1xyXG5cclxuICAgICAgY29uc3QgZGl2Q29udGVudCA9IGRpdi5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnRcIik7XHJcblxyXG4gICAgICB0aGlzLnRlbXBsYXRlID0gZGl2Q29udGVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRlbXBsYXRlXCIpO1xyXG5cclxuICAgICAgdGhpcy5uYXZpZ2F0aW9uLm9uQ2hhbmdlKHRoaXMudGVtcGxhdGUpO1xyXG5cclxuICAgICAgdGhpcy5jb250ZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdGVtcGxhdGVcIiwgdGhpcy50ZW1wbGF0ZSk7XHJcblxyXG4gICAgICB0aGlzLmNvbnRlbnQuaW5uZXJIVE1MID0gZGl2Q29udGVudC5pbm5lckhUTUw7XHJcbiAgICAgIHRoaXMuY2FudmFzLm9uQ2hhbmdlKHRoaXMudGVtcGxhdGUpO1xyXG5cclxuICAgICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXTtcclxuICAgICAgdGhpcy5wYWdlLmNyZWF0ZSgpO1xyXG5cclxuICAgICAgdGhpcy5vblJlc2l6ZSgpO1xyXG4gICAgICB0aGlzLnBhZ2Uuc2hvdygpO1xyXG5cclxuICAgICAgLy8gdGhpcy5jcmVhdGVDYW52YXMoKTtcclxuXHJcbiAgICAgIHRoaXMuYWRkTGlua0xpc3RlbmVycygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXCJlcnJvclwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uUmVzaXplKCkge1xyXG4gICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uUmVzaXplKSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLm9uUmVzaXplKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5wYWdlICYmIHRoaXMucGFnZS5vblJlc2l6ZSkge1xyXG4gICAgICB0aGlzLnBhZ2Uub25SZXNpemUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uUG9wU3RhdGUoKSB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlKHsgdXJsOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIHB1c2g6IGZhbHNlIH0pO1xyXG4gIH1cclxuXHJcbiAgb25Ub3VjaERvd24oZXZlbnQpIHtcclxuICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vblRvdWNoRG93bikge1xyXG4gICAgICB0aGlzLmNhbnZhcy5vblRvdWNoRG93bihldmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblRvdWNoTW92ZShldmVudCkge1xyXG4gICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uVG91Y2hNb3ZlKSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLm9uVG91Y2hNb3ZlKGV2ZW50KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uVG91Y2hVcChldmVudCkge1xyXG4gICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uVG91Y2hVcCkge1xyXG4gICAgICB0aGlzLmNhbnZhcy5vblRvdWNoVXAoZXZlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25XaGVlbChldmVudCkge1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZFdoZWVsID0gbm9ybWFsaXplV2hlZWwoZXZlbnQpO1xyXG5cclxuICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uV2hlZWwpIHtcclxuICAgICAgdGhpcy5wYWdlLm9uV2hlZWwobm9ybWFsaXplZFdoZWVsKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vbldoZWVsKSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLm9uV2hlZWwobm9ybWFsaXplZFdoZWVsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsIHRoaXMub25XaGVlbC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLm9uVG91Y2hEb3duLmJpbmQodGhpcykpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vblRvdWNoTW92ZS5iaW5kKHRoaXMpKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm9uVG91Y2hVcC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5vblRvdWNoRG93bi5iaW5kKHRoaXMpKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMub25Ub3VjaE1vdmUuYmluZCh0aGlzKSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMub25Ub3VjaFVwLmJpbmQodGhpcykpO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIHRoaXMub25Qb3BTdGF0ZS5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGFkZExpbmtMaXN0ZW5lcnMoKSB7XHJcbiAgICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhXCIpO1xyXG4gICAgZWFjaChsaW5rcywgKGxpbmspID0+IHtcclxuICAgICAgbGluay5vbmNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCB7IGhyZWYgfSA9IGxpbms7XHJcblxyXG4gICAgICAgIHRoaXMub25DaGFuZ2UoeyB1cmw6IGhyZWYgfSk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbm5ldyBBcHAoKTtcclxuIiwiaW1wb3J0IFBhZ2UgZnJvbSBcImNsYXNzZXMvUGFnZVwiO1xyXG5cclxuY2xhc3MgQWJvdXQgZXh0ZW5kcyBQYWdlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgZWxlbWVudHM6IHtcclxuICAgICAgICB3cmFwcGVyOiBcIi5hYm91dF9fd3JhcHBlclwiLFxyXG4gICAgICB9LFxyXG4gICAgICBlbGVtZW50OiBcIi5hYm91dFwiLFxyXG4gICAgICBpZDogXCJhYm91dFwiLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBYm91dDtcclxuIiwiaW1wb3J0IFBhZ2UgZnJvbSBcImNsYXNzZXMvUGFnZVwiO1xyXG5cclxuY2xhc3MgQ29sbGVjdGlvbnMgZXh0ZW5kcyBQYWdlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKHsgZWxlbWVudDogXCIuY29sbGVjdGlvbnNcIiwgaWQ6IFwiY29sbGVjdGlvbnNcIiB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbGxlY3Rpb25zO1xyXG4iLCJpbXBvcnQgUGFnZSBmcm9tIFwiY2xhc3Nlcy9QYWdlXCI7XHJcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvQnV0dG9uXCI7XHJcblxyXG5jbGFzcyBEZXRhaWwgZXh0ZW5kcyBQYWdlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgZWxlbWVudDogXCIuZGV0YWlsXCIsXHJcbiAgICAgIGlkOiBcImRldGFpbFwiLFxyXG4gICAgICBlbGVtZW50czoge1xyXG4gICAgICAgIGJ1dHRvbjogXCIuZGV0YWlsX19idXR0b25cIixcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKCkge1xyXG4gICAgc3VwZXIuY3JlYXRlKCk7XHJcbiAgICB0aGlzLmxpbmsgPSBuZXcgQnV0dG9uKHRoaXMuZWxlbWVudHMuYnV0dG9uKTtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICB0aGlzLmxpbmsucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBjb25zdCB0aW1lbGluZSA9IGdzYXAudGltZWxpbmUoeyBkZWxheTogMiB9KTtcclxuXHJcbiAgICB0aW1lbGluZS5mcm9tVG8oXHJcbiAgICAgIHRoaXMuZWxlbWVudCxcclxuICAgICAge1xyXG4gICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGF1dG9BbHBoYTogMSxcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBzdXBlci5zaG93KHRpbWVsaW5lKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERldGFpbDtcclxuIiwiaW1wb3J0IFBhZ2UgZnJvbSBcImNsYXNzZXMvUGFnZVwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0J1dHRvblwiO1xyXG5cclxuY2xhc3MgSG9tZSBleHRlbmRzIFBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoe1xyXG4gICAgICBlbGVtZW50OiBcIi5ob21lXCIsXHJcbiAgICAgIGVsZW1lbnRzOiB7XHJcbiAgICAgICAgYnV0dG9uOiBcIi5ob21lX19saW5rXCIsXHJcbiAgICAgICAgdGl0bGVzOiBcIi5ob21lX190aXRsZXNcIixcclxuICAgICAgICBnYWxsZXJ5OiBcIi5ob21lX2dhbGxlcnlcIixcclxuICAgICAgICBuYXZpZ2F0aW9uOiBcIi5uYXZpZ2F0aW9uXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIGlkOiBcImhvbWVcIixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKCkge1xyXG4gICAgc3VwZXIuY3JlYXRlKCk7XHJcbiAgICB0aGlzLmxpbmsgPSBuZXcgQnV0dG9uKHRoaXMuZWxlbWVudHMuYnV0dG9uKTtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICB0aGlzLmxpbmsucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhvbWU7XHJcbiIsImV4cG9ydCBjb25zdCBDT0xPUl9CUklHSFRfR1JBWSA9IFwiIzM3Mzg0Y1wiO1xyXG5leHBvcnQgY29uc3QgQ09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFID0gXCIjZjlmMWU3XCI7XHJcbiIsImltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0Q2hhcnMoeyBlbGVtZW50IH0pIHtcclxuICBjb25zdCByYXdMaW5lcyA9IGVsZW1lbnQuaW5uZXJIVE1MLnRvU3RyaW5nKCkudHJpbSgpLnNwbGl0KFwiPGJyPlwiKTtcclxuICBsZXQgaW5uZXJIVE1MID0gXCJcIjtcclxuICByYXdMaW5lcy5mb3JFYWNoKChsaW5lKSA9PiB7XHJcbiAgICBjb25zdCBzdHJpbmcgPSBsaW5lXHJcbiAgICAgIC5zcGxpdChcIlwiKVxyXG4gICAgICAubWFwKChjKSA9PiB7XHJcbiAgICAgICAgaWYgKGMgPT09IFwiIFwiKSByZXR1cm4gYztcclxuICAgICAgICByZXR1cm4gYDxzcGFuPiR7Y308L3NwYW4+YDtcclxuICAgICAgfSlcclxuICAgICAgLmpvaW4oXCJcIik7XHJcbiAgICBpbm5lckhUTUwgKz0gYDxzcGFuIGRhdGEtY2xhc3M9XCJsaW5lXCI+JHtzdHJpbmd9PC9zcGFuPjxicj5gO1xyXG4gIH0pO1xyXG5cclxuICBlbGVtZW50LmlubmVySFRNTCA9IGlubmVySFRNTDtcclxuICBjb25zdCBjaGFycyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNwYW4gc3BhblwiKTtcclxuICBjb25zdCBsaW5lcyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY2xhc3M9XCJsaW5lXCJdJyk7XHJcblxyXG4gIHJldHVybiB7IGNoYXJzLCBsaW5lcyB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3BsaXQoeyBlbGVtZW50LCBleHByZXNzaW9uID0gXCIgXCIsIGFwcGVuZCA9IHRydWUgfSkge1xyXG4gIGNvbnN0IHdvcmRzID0gc3BsaXRUZXh0KGVsZW1lbnQuaW5uZXJIVE1MLnRvU3RyaW5nKCkudHJpbSgpLCBleHByZXNzaW9uKTtcclxuXHJcbiAgbGV0IGlubmVySFRNTCA9IFwiXCI7XHJcblxyXG4gIGVhY2god29yZHMsIChsaW5lKSA9PiB7XHJcbiAgICBpZiAobGluZS5pbmRleE9mKFwiPGJyPlwiKSA+IC0xKSB7XHJcbiAgICAgIGNvbnN0IGxpbmVzID0gbGluZS5zcGxpdChcIjxicj5cIik7XHJcblxyXG4gICAgICBlYWNoKGxpbmVzLCAobGluZSwgaW5kZXgpID0+IHtcclxuICAgICAgICBpbm5lckhUTUwgKz0gaW5kZXggPiAwID8gXCI8YnI+XCIgKyBwYXJzZUxpbmUobGluZSkgOiBwYXJzZUxpbmUobGluZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaW5uZXJIVE1MICs9IHBhcnNlTGluZShsaW5lKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZWxlbWVudC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XHJcblxyXG4gIGNvbnN0IHNwYW5zID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3BhblwiKTtcclxuXHJcbiAgaWYgKGFwcGVuZCkge1xyXG4gICAgZWFjaChzcGFucywgKHNwYW4pID0+IHtcclxuICAgICAgY29uc3QgaXNTaW5nbGVMZXR0ZXIgPSBzcGFuLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMTtcclxuICAgICAgY29uc3QgaXNOb3RFbXB0eSA9IHNwYW4uaW5uZXJIVE1MLnRyaW0oKSAhPT0gXCJcIjtcclxuICAgICAgY29uc3QgaXNOb3RBbmRDaGFyYWN0ZXIgPSBzcGFuLnRleHRDb250ZW50ICE9PSBcIiZcIjtcclxuICAgICAgY29uc3QgaXNOb3REYXNoQ2hhcmFjdGVyID0gc3Bhbi50ZXh0Q29udGVudCAhPT0gXCItXCI7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgaXNTaW5nbGVMZXR0ZXIgJiZcclxuICAgICAgICBpc05vdEVtcHR5ICYmXHJcbiAgICAgICAgaXNOb3RBbmRDaGFyYWN0ZXIgJiZcclxuICAgICAgICBpc05vdERhc2hDaGFyYWN0ZXJcclxuICAgICAgKSB7XHJcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBgJHtzcGFuLnRleHRDb250ZW50fSZuYnNwO2A7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNwYW5zO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlKHNwYW5zKSB7XHJcbiAgY29uc3QgbGluZXMgPSBbXTtcclxuICBsZXQgd29yZHMgPSBbXTtcclxuXHJcbiAgbGV0IHBvc2l0aW9uID0gc3BhbnNbMF0ub2Zmc2V0VG9wO1xyXG5cclxuICBlYWNoKHNwYW5zLCAoc3BhbiwgaW5kZXgpID0+IHtcclxuICAgIGlmIChzcGFuLm9mZnNldFRvcCA9PT0gcG9zaXRpb24pIHtcclxuICAgICAgd29yZHMucHVzaChzcGFuKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3Bhbi5vZmZzZXRUb3AgIT09IHBvc2l0aW9uKSB7XHJcbiAgICAgIGxpbmVzLnB1c2god29yZHMpO1xyXG5cclxuICAgICAgd29yZHMgPSBbXTtcclxuICAgICAgd29yZHMucHVzaChzcGFuKTtcclxuXHJcbiAgICAgIHBvc2l0aW9uID0gc3Bhbi5vZmZzZXRUb3A7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGluZGV4ICsgMSA9PT0gc3BhbnMubGVuZ3RoKSB7XHJcbiAgICAgIGxpbmVzLnB1c2god29yZHMpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gbGluZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNwbGl0VGV4dCh0ZXh0LCBleHByZXNzaW9uKSB7XHJcbiAgY29uc3Qgc3BsaXRzID0gdGV4dC5zcGxpdChcIjxicj5cIik7XHJcblxyXG4gIGxldCB3b3JkcyA9IFtdO1xyXG5cclxuICBlYWNoKHNwbGl0cywgKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgIHdvcmRzLnB1c2goXCI8YnI+XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHdvcmRzID0gd29yZHMuY29uY2F0KGl0ZW0uc3BsaXQoZXhwcmVzc2lvbikpO1xyXG5cclxuICAgIGxldCBpc0xpbmsgPSBmYWxzZTtcclxuICAgIGxldCBsaW5rID0gXCJcIjtcclxuXHJcbiAgICBjb25zdCBpbm5lckhUTUwgPSBbXTtcclxuXHJcbiAgICBlYWNoKHdvcmRzLCAod29yZCkgPT4ge1xyXG4gICAgICBpZiAoIWlzTGluayAmJiAod29yZC5pbmNsdWRlcyhcIjxhXCIpIHx8IHdvcmQuaW5jbHVkZXMoXCI8c3Ryb25nXCIpKSkge1xyXG4gICAgICAgIGxpbmsgPSBcIlwiO1xyXG5cclxuICAgICAgICBpc0xpbmsgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNMaW5rKSB7XHJcbiAgICAgICAgbGluayArPSBgICR7d29yZH1gO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNMaW5rICYmICh3b3JkLmluY2x1ZGVzKFwiL2E+XCIpIHx8IHdvcmQuaW5jbHVkZXMoXCIvc3Ryb25nPlwiKSkpIHtcclxuICAgICAgICBpbm5lckhUTUwucHVzaChsaW5rKTtcclxuXHJcbiAgICAgICAgbGluayA9IFwiXCI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghaXNMaW5rICYmIGxpbmsgPT09IFwiXCIpIHtcclxuICAgICAgICBpbm5lckhUTUwucHVzaCh3b3JkKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzTGluayAmJiAod29yZC5pbmNsdWRlcyhcIi9hPlwiKSB8fCB3b3JkLmluY2x1ZGVzKFwiL3N0cm9uZz5cIikpKSB7XHJcbiAgICAgICAgaXNMaW5rID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHdvcmRzID0gaW5uZXJIVE1MO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gd29yZHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlTGluZShsaW5lKSB7XHJcbiAgbGluZSA9IGxpbmUudHJpbSgpO1xyXG5cclxuICBpZiAobGluZSA9PT0gXCJcIiB8fCBsaW5lID09PSBcIiBcIikge1xyXG4gICAgcmV0dXJuIGxpbmU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBsaW5lID09PSBcIjxicj5cIlxyXG4gICAgICA/IFwiPGJyPlwiXHJcbiAgICAgIDogYDxzcGFuPiR7bGluZX08L3NwYW4+YCArIChsaW5lLmxlbmd0aCA+IDEgPyBcIiBcIiA6IFwiXCIpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VMaW5lVG9DaGFyKGxpbmUpIHtcclxuICBsaW5lID0gbGluZS50cmltKCk7XHJcblxyXG4gIGlmIChsaW5lID09PSBcIlwiIHx8IGxpbmUgPT09IFwiIFwiKSB7XHJcbiAgICByZXR1cm4gbGluZTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGxpbmUgPT09IFwiPGJyPlwiXHJcbiAgICAgID8gXCI8YnI+XCJcclxuICAgICAgOiBsaW5lLnNwbGl0KFwiXCIpLm1hcCgoYykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGA8c3Bhbj4ke2N9PC9zcGFuPmA7XHJcbiAgICAgICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MXG5cbi8vIFJlZmVyZW5jZSB0byBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2Fuc2ktcmVnZXhcbnZhciBfcmVnQU5TSSA9IC8oPzooPzpcXHUwMDFiXFxbKXxcXHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XFx1MDAxYltBLU1dL1xuXG52YXIgX2RlZkNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXVxuICBibGFjazogJzAwMCcsXG4gIHJlZDogJ2ZmMDAwMCcsXG4gIGdyZWVuOiAnMjA5ODA1JyxcbiAgeWVsbG93OiAnZThiZjAzJyxcbiAgYmx1ZTogJzAwMDBmZicsXG4gIG1hZ2VudGE6ICdmZjAwZmYnLFxuICBjeWFuOiAnMDBmZmVlJyxcbiAgbGlnaHRncmV5OiAnZjBmMGYwJyxcbiAgZGFya2dyZXk6ICc4ODgnXG59XG52YXIgX3N0eWxlcyA9IHtcbiAgMzA6ICdibGFjaycsXG4gIDMxOiAncmVkJyxcbiAgMzI6ICdncmVlbicsXG4gIDMzOiAneWVsbG93JyxcbiAgMzQ6ICdibHVlJyxcbiAgMzU6ICdtYWdlbnRhJyxcbiAgMzY6ICdjeWFuJyxcbiAgMzc6ICdsaWdodGdyZXknXG59XG52YXIgX29wZW5UYWdzID0ge1xuICAnMSc6ICdmb250LXdlaWdodDpib2xkJywgLy8gYm9sZFxuICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbVxuICAnMyc6ICc8aT4nLCAvLyBpdGFsaWNcbiAgJzQnOiAnPHU+JywgLy8gdW5kZXJzY29yZVxuICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW5cbiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZVxufVxudmFyIF9jbG9zZVRhZ3MgPSB7XG4gICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljXG4gICcyNCc6ICc8L3U+JywgLy8gcmVzZXQgdW5kZXJzY29yZVxuICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGVcbn1cblxuO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPidcbn0pXG5cbi8qKlxuICogQ29udmVydHMgdGV4dCB3aXRoIEFOU0kgY29sb3IgY29kZXMgdG8gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7XG4gIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS5cbiAgaWYgKCFfcmVnQU5TSS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS5cbiAgdmFyIGFuc2lDb2RlcyA9IFtdXG4gIC8vIFJlcGxhY2Ugd2l0aCBtYXJrdXAuXG4gIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1xcMDMzXFxbKFxcZCspbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkge1xuICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdXG4gICAgaWYgKG90KSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuXG4gICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgICAgcmV0dXJuICc8L3NwYW4+J1xuICAgICAgfVxuICAgICAgLy8gT3BlbiB0YWcuXG4gICAgICBhbnNpQ29kZXMucHVzaChzZXEpXG4gICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPVwiJyArIG90ICsgJztcIj4nXG4gICAgfVxuXG4gICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdXG4gICAgaWYgKGN0KSB7XG4gICAgICAvLyBQb3Agc2VxdWVuY2VcbiAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgcmV0dXJuIGN0XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9KVxuXG4gIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuXG4gIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aFxuICA7KGwgPiAwKSAmJiAocmV0ICs9IEFycmF5KGwgKyAxKS5qb2luKCc8L3NwYW4+JykpXG5cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSBjb2xvcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzXG4gKi9cbmFuc2lIVE1MLnNldENvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJylcbiAgfVxuXG4gIHZhciBfZmluYWxDb2xvcnMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gX2RlZkNvbG9ycykge1xuICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbFxuICAgIGlmICghaGV4KSB7XG4gICAgICBfZmluYWxDb2xvcnNba2V5XSA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCdyZXNldCcgPT09IGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhleCA9IFtoZXhdXG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZydcbiAgICAgIH0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgICAgfVxuICAgICAgdmFyIGRlZkhleENvbG9yID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBpZiAoIWhleFswXSkge1xuICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXVxuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkge1xuICAgICAgICBoZXggPSBbaGV4WzBdXVxuICAgICAgICBoZXgucHVzaChkZWZIZXhDb2xvclsxXSlcbiAgICAgIH1cblxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDAsIDIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICB9XG4gICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXhcbiAgfVxuICBfc2V0VGFncyhfZmluYWxDb2xvcnMpXG59XG5cbi8qKlxuICogUmVzZXQgY29sb3JzLlxuICovXG5hbnNpSFRNTC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgX3NldFRhZ3MoX2RlZkNvbG9ycylcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuYW5zaUhUTUwudGFncyA9IHt9XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX29wZW5UYWdzIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jbG9zZVRhZ3MgfVxuICB9KVxufSBlbHNlIHtcbiAgYW5zaUhUTUwudGFncy5vcGVuID0gX29wZW5UYWdzXG4gIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzXG59XG5cbmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHtcbiAgLy8gcmVzZXQgYWxsXG4gIF9vcGVuVGFnc1snMCddID0gJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtvcGFjaXR5OjE7Y29sb3I6IycgKyBjb2xvcnMucmVzZXRbMF0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMV1cbiAgLy8gaW52ZXJzZVxuICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXVxuICAvLyBkYXJrIGdyZXlcbiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5XG5cbiAgZm9yICh2YXIgY29kZSBpbiBfc3R5bGVzKSB7XG4gICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXVxuICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCdcbiAgICBfb3BlblRhZ3NbY29kZV0gPSAnY29sb3I6IycgKyBvcmlDb2xvclxuICAgIGNvZGUgPSBwYXJzZUludChjb2RlKVxuICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3JcbiAgfVxufVxuXG5hbnNpSFRNTC5yZXNldCgpXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiLyohXG4gKiBDU1NQbHVnaW4gMy43LjFcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjEsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBnc2FwLCBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgZ2V0VW5pdCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfZm9yRWFjaE5hbWUsIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHksIF9jb2xvclN0cmluZ0ZpbHRlciwgX2NoZWNrUGx1Z2luLCBfcmVwbGFjZVJhbmRvbSwgX3BsdWdpbnMsIEdTQ2FjaGUsIFByb3BUd2VlbiwgX2NvbmZpZywgX3RpY2tlciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtIC8vZm9yIHRoZSBjb21tZW50ZWQtb3V0IGNsYXNzTmFtZSBmZWF0dXJlLlxufSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcblxudmFyIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfcGx1Z2luSW5pdHRlZCxcbiAgICBfdGVtcERpdixcbiAgICBfdGVtcERpdlN0eWxlcixcbiAgICBfcmVjZW50U2V0dGVyUGx1Z2luLFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3BzID0ge30sXG4gICAgX1JBRDJERUcgPSAxODAgLyBNYXRoLlBJLFxuICAgIF9ERUcyUkFEID0gTWF0aC5QSSAvIDE4MCxcbiAgICBfYXRhbjIgPSBNYXRoLmF0YW4yLFxuICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgX2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuICAgIF9ob3Jpem9udGFsRXhwID0gLyg/OmxlZnR8cmlnaHR8d2lkdGh8bWFyZ2lufHBhZGRpbmd8eCkvaSxcbiAgICBfY29tcGxleEV4cCA9IC9bXFxzLFxcKF1cXFMvLFxuICAgIF9wcm9wZXJ0eUFsaWFzZXMgPSB7XG4gIGF1dG9BbHBoYTogXCJvcGFjaXR5LHZpc2liaWxpdHlcIixcbiAgc2NhbGU6IFwic2NhbGVYLHNjYWxlWVwiLFxuICBhbHBoYTogXCJvcGFjaXR5XCJcbn0sXG4gICAgX3JlbmRlckNTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyhyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICAvL2lmIHVuaXRzIGNoYW5nZSwgd2UgbmVlZCBhIHdheSB0byByZW5kZXIgdGhlIG9yaWdpbmFsIHVuaXQvdmFsdWUgd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgKHJhdGlvOjApXG5fcmVuZGVyUm91bmRlZENTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyUm91bmRlZENTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHZhbHVlID0gZGF0YS5zICsgZGF0YS5jICogcmF0aW87XG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCB+fih2YWx1ZSArICh2YWx1ZSA8IDAgPyAtLjUgOiAuNSkpICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZShyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gZGF0YS5lIDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvICE9PSAxID8gZGF0YS5iIDogZGF0YS5lLCBkYXRhKTtcbn0sXG4gICAgX3NldHRlckNTU1N0eWxlID0gZnVuY3Rpb24gX3NldHRlckNTU1N0eWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJDU1NQcm9wID0gZnVuY3Rpb24gX3NldHRlckNTU1Byb3AodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGUgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcC5zY2FsZVggPSB0YXJnZXQuX2dzYXAuc2NhbGVZID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIixcbiAgICBfc3VwcG9ydHMzRCxcbiAgICBfY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50KHR5cGUsIG5zKSB7XG4gIHZhciBlID0gX2RvYy5jcmVhdGVFbGVtZW50TlMgPyBfZG9jLmNyZWF0ZUVsZW1lbnROUygobnMgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIpLnJlcGxhY2UoL15odHRwcy8sIFwiaHR0cFwiKSwgdHlwZSkgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBzZXJ2ZXJzIHN3YXAgaW4gaHR0cHMgZm9yIGh0dHAgaW4gdGhlIG5hbWVzcGFjZSB3aGljaCBjYW4gYnJlYWsgdGhpbmdzLCBtYWtpbmcgXCJzdHlsZVwiIGluYWNjZXNzaWJsZS5cblxuICByZXR1cm4gZS5zdHlsZSA/IGUgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBlbnZpcm9ubWVudHMgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgd2hlbiBjcmVhdGVkIHdpdGggYSBuYW1lc3BhY2UgaW4gd2hpY2ggY2FzZSB3ZSBkZWZhdWx0IHRvIHRoZSBzdGFuZGFyZCBjcmVhdGVFbGVtZW50KCkgdG8gd29yayBhcm91bmQgdGhlIGlzc3VlLiBBbHNvIG5vdGUgdGhhdCB3aGVuIEdTQVAgaXMgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIGFuIFNWRyBmaWxlLCBjcmVhdGVFbGVtZW50KCkgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBzdHlsZSBvYmplY3QgaW4gRmlyZWZveCAoc2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAyMTUtcHJvYmxlbS11c2luZy10d2Vlbm1heC1pbi1zdGFuZGFsb25lLXNlbGYtY29udGFpbmluZy1zdmctZmlsZS1lcnItY2Fubm90LXNldC1wcm9wZXJ0eS1jc3N0ZXh0LW9mLXVuZGVmaW5lZC8pLlxufSxcbiAgICBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHNraXBQcmVmaXhGYWxsYmFjaykge1xuICB2YXIgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG4gIHJldHVybiBjc1twcm9wZXJ0eV0gfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KSB8fCAhc2tpcFByZWZpeEZhbGxiYWNrICYmIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSkgfHwgcHJvcGVydHksIDEpIHx8IFwiXCI7IC8vY3NzIHZhcmlhYmxlcyBtYXkgbm90IG5lZWQgY2FwcyBzd2FwcGVkIG91dCBmb3IgZGFzaGVzIGFuZCBsb3dlcmNhc2UuXG59LFxuICAgIF9wcmVmaXhlcyA9IFwiTyxNb3osbXMsTXMsV2Via2l0XCIuc3BsaXQoXCIsXCIpLFxuICAgIF9jaGVja1Byb3BQcmVmaXggPSBmdW5jdGlvbiBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5LCBlbGVtZW50LCBwcmVmZXJQcmVmaXgpIHtcbiAgdmFyIGUgPSBlbGVtZW50IHx8IF90ZW1wRGl2LFxuICAgICAgcyA9IGUuc3R5bGUsXG4gICAgICBpID0gNTtcblxuICBpZiAocHJvcGVydHkgaW4gcyAmJiAhcHJlZmVyUHJlZml4KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5O1xuICB9XG5cbiAgcHJvcGVydHkgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnN1YnN0cigxKTtcblxuICB3aGlsZSAoaS0tICYmICEoX3ByZWZpeGVzW2ldICsgcHJvcGVydHkgaW4gcykpIHt9XG5cbiAgcmV0dXJuIGkgPCAwID8gbnVsbCA6IChpID09PSAzID8gXCJtc1wiIDogaSA+PSAwID8gX3ByZWZpeGVzW2ldIDogXCJcIikgKyBwcm9wZXJ0eTtcbn0sXG4gICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKCkge1xuICBpZiAoX3dpbmRvd0V4aXN0cygpICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IF93aW4uZG9jdW1lbnQ7XG4gICAgX2RvY0VsZW1lbnQgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfdGVtcERpdiA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpIHx8IHtcbiAgICAgIHN0eWxlOiB7fVxuICAgIH07XG4gICAgX3RlbXBEaXZTdHlsZXIgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBfdHJhbnNmb3JtUHJvcCA9IF9jaGVja1Byb3BQcmVmaXgoX3RyYW5zZm9ybVByb3ApO1xuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiO1xuICAgIF90ZW1wRGl2LnN0eWxlLmNzc1RleHQgPSBcImJvcmRlci13aWR0aDowO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7cGFkZGluZzowXCI7IC8vbWFrZSBzdXJlIHRvIG92ZXJyaWRlIGNlcnRhaW4gcHJvcGVydGllcyB0aGF0IG1heSBjb250YW1pbmF0ZSBtZWFzdXJlbWVudHMsIGluIGNhc2UgdGhlIHVzZXIgaGFzIG92ZXJyZWFjaGluZyBzdHlsZSBzaGVldHMuXG5cbiAgICBfc3VwcG9ydHMzRCA9ICEhX2NoZWNrUHJvcFByZWZpeChcInBlcnNwZWN0aXZlXCIpO1xuICAgIF9wbHVnaW5Jbml0dGVkID0gMTtcbiAgfVxufSxcbiAgICBfZ2V0QkJveEhhY2sgPSBmdW5jdGlvbiBfZ2V0QkJveEhhY2soc3dhcElmUG9zc2libGUpIHtcbiAgLy93b3JrcyBhcm91bmQgaXNzdWVzIGluIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgdGhhdCBkb24ndCBjb3JyZWN0bHkgcmVwb3J0IGdldEJCb3goKSBvbiBTVkcgZWxlbWVudHMgaW5zaWRlIGEgPGRlZnM+IGVsZW1lbnQgYW5kL29yIDxtYXNrPi4gV2UgdHJ5IGNyZWF0aW5nIGFuIFNWRywgYWRkaW5nIGl0IHRvIHRoZSBkb2N1bWVudEVsZW1lbnQgYW5kIHRvc3MgdGhlIGVsZW1lbnQgaW4gdGhlcmUgc28gdGhhdCBpdCdzIGRlZmluaXRlbHkgcGFydCBvZiB0aGUgcmVuZGVyaW5nIHRyZWUsIHRoZW4gZ3JhYiB0aGUgYmJveCBhbmQgaWYgaXQgd29ya3MsIHdlIGFjdHVhbGx5IHN3YXAgb3V0IHRoZSBvcmlnaW5hbCBnZXRCQm94KCkgbWV0aG9kIGZvciBvdXIgb3duIHRoYXQgZG9lcyB0aGVzZSBleHRyYSBzdGVwcyB3aGVuZXZlciBnZXRCQm94IGlzIG5lZWRlZC4gVGhpcyBoZWxwcyBlbnN1cmUgdGhhdCBwZXJmb3JtYW5jZSBpcyBvcHRpbWFsIChvbmx5IGRvIGFsbCB0aGVzZSBleHRyYSBzdGVwcyB3aGVuIGFic29sdXRlbHkgbmVjZXNzYXJ5Li4ubW9zdCBlbGVtZW50cyBkb24ndCBuZWVkIGl0KS5cbiAgdmFyIHN2ZyA9IF9jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHRoaXMub3duZXJTVkdFbGVtZW50ICYmIHRoaXMub3duZXJTVkdFbGVtZW50LmdldEF0dHJpYnV0ZShcInhtbG5zXCIpIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiksXG4gICAgICBvbGRQYXJlbnQgPSB0aGlzLnBhcmVudE5vZGUsXG4gICAgICBvbGRTaWJsaW5nID0gdGhpcy5uZXh0U2libGluZyxcbiAgICAgIG9sZENTUyA9IHRoaXMuc3R5bGUuY3NzVGV4dCxcbiAgICAgIGJib3g7XG5cbiAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoc3ZnKTtcblxuICBzdmcuYXBwZW5kQ2hpbGQodGhpcyk7XG4gIHRoaXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICBpZiAoc3dhcElmUG9zc2libGUpIHtcbiAgICB0cnkge1xuICAgICAgYmJveCA9IHRoaXMuZ2V0QkJveCgpO1xuICAgICAgdGhpcy5fZ3NhcEJCb3ggPSB0aGlzLmdldEJCb3g7IC8vc3RvcmUgdGhlIG9yaWdpbmFsXG5cbiAgICAgIHRoaXMuZ2V0QkJveCA9IF9nZXRCQm94SGFjaztcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9IGVsc2UgaWYgKHRoaXMuX2dzYXBCQm94KSB7XG4gICAgYmJveCA9IHRoaXMuX2dzYXBCQm94KCk7XG4gIH1cblxuICBpZiAob2xkUGFyZW50KSB7XG4gICAgaWYgKG9sZFNpYmxpbmcpIHtcbiAgICAgIG9sZFBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgb2xkU2libGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9sZFBhcmVudC5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZChzdmcpO1xuXG4gIHRoaXMuc3R5bGUuY3NzVGV4dCA9IG9sZENTUztcbiAgcmV0dXJuIGJib3g7XG59LFxuICAgIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3MgPSBmdW5jdGlvbiBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgYXR0cmlidXRlc0FycmF5KSB7XG4gIHZhciBpID0gYXR0cmlidXRlc0FycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlc0FycmF5W2ldKSkge1xuICAgICAgcmV0dXJuIHRhcmdldC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlc0FycmF5W2ldKTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX2dldEJCb3ggPSBmdW5jdGlvbiBfZ2V0QkJveCh0YXJnZXQpIHtcbiAgdmFyIGJvdW5kcztcblxuICB0cnkge1xuICAgIGJvdW5kcyA9IHRhcmdldC5nZXRCQm94KCk7IC8vRmlyZWZveCB0aHJvd3MgZXJyb3JzIGlmIHlvdSB0cnkgY2FsbGluZyBnZXRCQm94KCkgb24gYW4gU1ZHIGVsZW1lbnQgdGhhdCdzIG5vdCByZW5kZXJlZCAobGlrZSBpbiBhIDxzeW1ib2w+IG9yIDxkZWZzPikuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYxMjExOFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSk7XG4gIH1cblxuICBib3VuZHMgJiYgKGJvdW5kcy53aWR0aCB8fCBib3VuZHMuaGVpZ2h0KSB8fCB0YXJnZXQuZ2V0QkJveCA9PT0gX2dldEJCb3hIYWNrIHx8IChib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpKTsgLy9zb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIG1pc3JlcG9ydCB0aGUgYm91bmRzIGlmIHRoZSBlbGVtZW50IGhhcyB6ZXJvIHdpZHRoIGFuZCBoZWlnaHQgKGl0IGp1c3QgYXNzdW1lcyBpdCdzIGF0IHg6MCwgeTowKSwgdGh1cyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGdyYWIgdGhlIHBvc2l0aW9uIGluIHRoYXQgY2FzZS5cblxuICByZXR1cm4gYm91bmRzICYmICFib3VuZHMud2lkdGggJiYgIWJvdW5kcy54ICYmICFib3VuZHMueSA/IHtcbiAgICB4OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInhcIiwgXCJjeFwiLCBcIngxXCJdKSB8fCAwLFxuICAgIHk6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieVwiLCBcImN5XCIsIFwieTFcIl0pIHx8IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH0gOiBib3VuZHM7XG59LFxuICAgIF9pc1NWRyA9IGZ1bmN0aW9uIF9pc1NWRyhlKSB7XG4gIHJldHVybiAhIShlLmdldENUTSAmJiAoIWUucGFyZW50Tm9kZSB8fCBlLm93bmVyU1ZHRWxlbWVudCkgJiYgX2dldEJCb3goZSkpO1xufSxcbiAgICAvL3JlcG9ydHMgaWYgdGhlIGVsZW1lbnQgaXMgYW4gU1ZHIG9uIHdoaWNoIGdldEJCb3goKSBhY3R1YWxseSB3b3Jrc1xuX3JlbW92ZVByb3BlcnR5ID0gZnVuY3Rpb24gX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgaWYgKHByb3BlcnR5KSB7XG4gICAgdmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlO1xuXG4gICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3ApIHtcbiAgICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLnJlbW92ZVByb3BlcnR5KSB7XG4gICAgICBpZiAocHJvcGVydHkuc3Vic3RyKDAsIDIpID09PSBcIm1zXCIgfHwgcHJvcGVydHkuc3Vic3RyKDAsIDYpID09PSBcIndlYmtpdFwiKSB7XG4gICAgICAgIC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcbiAgICAgICAgcHJvcGVydHkgPSBcIi1cIiArIHByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG4gICAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgIH1cbiAgfVxufSxcbiAgICBfYWRkTm9uVHdlZW5pbmdQVCA9IGZ1bmN0aW9uIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgYmVnaW5uaW5nLCBlbmQsIG9ubHlTZXRBdEVuZCkge1xuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIG9ubHlTZXRBdEVuZCA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUpO1xuICBwbHVnaW4uX3B0ID0gcHQ7XG4gIHB0LmIgPSBiZWdpbm5pbmc7XG4gIHB0LmUgPSBlbmQ7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9ub25Db252ZXJ0aWJsZVVuaXRzID0ge1xuICBkZWc6IDEsXG4gIHJhZDogMSxcbiAgdHVybjogMVxufSxcbiAgICAvL3Rha2VzIGEgc2luZ2xlIHZhbHVlIGxpa2UgMjBweCBhbmQgY29udmVydHMgaXQgdG8gdGhlIHVuaXQgc3BlY2lmaWVkLCBsaWtlIFwiJVwiLCByZXR1cm5pbmcgb25seSB0aGUgbnVtZXJpYyBhbW91bnQuXG5fY29udmVydFRvVW5pdCA9IGZ1bmN0aW9uIF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSB7XG4gIHZhciBjdXJWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDAsXG4gICAgICBjdXJVbml0ID0gKHZhbHVlICsgXCJcIikudHJpbSgpLnN1YnN0cigoY3VyVmFsdWUgKyBcIlwiKS5sZW5ndGgpIHx8IFwicHhcIixcbiAgICAgIC8vIHNvbWUgYnJvd3NlcnMgbGVhdmUgZXh0cmEgd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nIG9mIENTUyB2YXJpYWJsZXMsIGhlbmNlIHRoZSBuZWVkIHRvIHRyaW0oKVxuICBzdHlsZSA9IF90ZW1wRGl2LnN0eWxlLFxuICAgICAgaG9yaXpvbnRhbCA9IF9ob3Jpem9udGFsRXhwLnRlc3QocHJvcGVydHkpLFxuICAgICAgaXNSb290U1ZHID0gdGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIixcbiAgICAgIG1lYXN1cmVQcm9wZXJ0eSA9IChpc1Jvb3RTVkcgPyBcImNsaWVudFwiIDogXCJvZmZzZXRcIikgKyAoaG9yaXpvbnRhbCA/IFwiV2lkdGhcIiA6IFwiSGVpZ2h0XCIpLFxuICAgICAgYW1vdW50ID0gMTAwLFxuICAgICAgdG9QaXhlbHMgPSB1bml0ID09PSBcInB4XCIsXG4gICAgICB0b1BlcmNlbnQgPSB1bml0ID09PSBcIiVcIixcbiAgICAgIHB4LFxuICAgICAgcGFyZW50LFxuICAgICAgY2FjaGUsXG4gICAgICBpc1NWRztcblxuICBpZiAodW5pdCA9PT0gY3VyVW5pdCB8fCAhY3VyVmFsdWUgfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbdW5pdF0gfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbY3VyVW5pdF0pIHtcbiAgICByZXR1cm4gY3VyVmFsdWU7XG4gIH1cblxuICBjdXJVbml0ICE9PSBcInB4XCIgJiYgIXRvUGl4ZWxzICYmIChjdXJWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBcInB4XCIpKTtcbiAgaXNTVkcgPSB0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpO1xuXG4gIGlmICgodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSB8fCB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpKSkge1xuICAgIHB4ID0gaXNTVkcgPyB0YXJnZXQuZ2V0QkJveCgpW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA6IHRhcmdldFttZWFzdXJlUHJvcGVydHldO1xuICAgIHJldHVybiBfcm91bmQodG9QZXJjZW50ID8gY3VyVmFsdWUgLyBweCAqIGFtb3VudCA6IGN1clZhbHVlIC8gMTAwICogcHgpO1xuICB9XG5cbiAgc3R5bGVbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdID0gYW1vdW50ICsgKHRvUGl4ZWxzID8gY3VyVW5pdCA6IHVuaXQpO1xuICBwYXJlbnQgPSB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpIHx8IHVuaXQgPT09IFwiZW1cIiAmJiB0YXJnZXQuYXBwZW5kQ2hpbGQgJiYgIWlzUm9vdFNWRyA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gIGlmIChpc1NWRykge1xuICAgIHBhcmVudCA9ICh0YXJnZXQub3duZXJTVkdFbGVtZW50IHx8IHt9KS5wYXJlbnROb2RlO1xuICB9XG5cbiAgaWYgKCFwYXJlbnQgfHwgcGFyZW50ID09PSBfZG9jIHx8ICFwYXJlbnQuYXBwZW5kQ2hpbGQpIHtcbiAgICBwYXJlbnQgPSBfZG9jLmJvZHk7XG4gIH1cblxuICBjYWNoZSA9IHBhcmVudC5fZ3NhcDtcblxuICBpZiAoY2FjaGUgJiYgdG9QZXJjZW50ICYmIGNhY2hlLndpZHRoICYmIGhvcml6b250YWwgJiYgY2FjaGUudGltZSA9PT0gX3RpY2tlci50aW1lKSB7XG4gICAgcmV0dXJuIF9yb3VuZChjdXJWYWx1ZSAvIGNhY2hlLndpZHRoICogYW1vdW50KTtcbiAgfSBlbHNlIHtcbiAgICAodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAoc3R5bGUucG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwicG9zaXRpb25cIikpO1xuICAgIHBhcmVudCA9PT0gdGFyZ2V0ICYmIChzdHlsZS5wb3NpdGlvbiA9IFwic3RhdGljXCIpOyAvLyBsaWtlIGZvciBib3JkZXJSYWRpdXMsIGlmIGl0J3MgYSAlIHdlIG11c3QgaGF2ZSBpdCByZWxhdGl2ZSB0byB0aGUgdGFyZ2V0IGl0c2VsZiBidXQgdGhhdCBtYXkgbm90IGhhdmUgcG9zaXRpb246IHJlbGF0aXZlIG9yIHBvc2l0aW9uOiBhYnNvbHV0ZSBpbiB3aGljaCBjYXNlIGl0J2QgZ28gdXAgdGhlIGNoYWluIHVudGlsIGl0IGZpbmRzIGl0cyBvZmZzZXRQYXJlbnQgKGJhZCkuIHBvc2l0aW9uOiBzdGF0aWMgcHJvdGVjdHMgYWdhaW5zdCB0aGF0LlxuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcbiAgICBweCA9IF90ZW1wRGl2W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKF90ZW1wRGl2KTtcbiAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgIGlmIChob3Jpem9udGFsICYmIHRvUGVyY2VudCkge1xuICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUocGFyZW50KTtcbiAgICAgIGNhY2hlLnRpbWUgPSBfdGlja2VyLnRpbWU7XG4gICAgICBjYWNoZS53aWR0aCA9IHBhcmVudFttZWFzdXJlUHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfcm91bmQodG9QaXhlbHMgPyBweCAqIGN1clZhbHVlIC8gYW1vdW50IDogcHggJiYgY3VyVmFsdWUgPyBhbW91bnQgLyBweCAqIGN1clZhbHVlIDogMCk7XG59LFxuICAgIF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgdmFyIHZhbHVlO1xuICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTtcblxuICBpZiAocHJvcGVydHkgaW4gX3Byb3BlcnR5QWxpYXNlcyAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV07XG5cbiAgICBpZiAofnByb3BlcnR5LmluZGV4T2YoXCIsXCIpKSB7XG4gICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnNwbGl0KFwiLFwiKVswXTtcbiAgICB9XG4gIH1cblxuICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgIHZhbHVlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSk7XG4gICAgdmFsdWUgPSBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IHZhbHVlW3Byb3BlcnR5XSA6IHZhbHVlLnN2ZyA/IHZhbHVlLm9yaWdpbiA6IF9maXJzdFR3b09ubHkoX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCkpICsgXCIgXCIgKyB2YWx1ZS56T3JpZ2luICsgXCJweFwiO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XTtcblxuICAgIGlmICghdmFsdWUgfHwgdmFsdWUgPT09IFwiYXV0b1wiIHx8IHVuY2FjaGUgfHwgfih2YWx1ZSArIFwiXCIpLmluZGV4T2YoXCJjYWxjKFwiKSkge1xuICAgICAgdmFsdWUgPSBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSAmJiBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSh0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB8fCBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgKHByb3BlcnR5ID09PSBcIm9wYWNpdHlcIiA/IDEgOiAwKTsgLy8gbm90ZTogc29tZSBicm93c2VycywgbGlrZSBGaXJlZm94LCBkb24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSEgSW5zdGVhZCwgaXQgb25seSByZXBvcnRzIGV2ZXJ5IGNvcm5lciBsaWtlICBib3JkZXJUb3BMZWZ0UmFkaXVzXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuaXQgJiYgIX4odmFsdWUgKyBcIlwiKS50cmltKCkuaW5kZXhPZihcIiBcIikgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkgKyB1bml0IDogdmFsdWU7XG59LFxuICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcgPSBmdW5jdGlvbiBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCkge1xuICAvL25vdGU6IHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgLy8gc29tZSBicm93c2VycyBsaWtlIFNhZmFyaSBhY3R1YWxseSBQUkVGRVIgdGhlIHByZWZpeGVkIHByb3BlcnR5IGFuZCBtaXMtcmVwb3J0IHRoZSB1bnByZWZpeGVkIHZhbHVlIGxpa2UgY2xpcFBhdGggKEJVRykuIEluIG90aGVyIHdvcmRzLCBldmVuIHRob3VnaCBjbGlwUGF0aCBleGlzdHMgaW4gdGhlIHN0eWxlIChcImNsaXBQYXRoXCIgaW4gdGFyZ2V0LnN0eWxlKSBhbmQgaXQncyBzZXQgaW4gdGhlIENTUyBwcm9wZXJseSAoYWxvbmcgd2l0aCAtd2Via2l0LWNsaXAtcGF0aCksIFNhZmFyaSByZXBvcnRzIGNsaXBQYXRoIGFzIFwibm9uZVwiIHdoZXJlYXMgV2Via2l0Q2xpcFBhdGggcmVwb3J0cyBhY2N1cmF0ZWx5IGxpa2UgXCJlbGxpcHNlKDEwMCUgMCUgYXQgNTAlIDAlKVwiLCBzbyBpbiB0aGlzIGNhc2Ugd2UgbXVzdCBTV0lUQ0ggdG8gdXNpbmcgdGhlIHByZWZpeGVkIHByb3BlcnR5IGluc3RlYWQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzE4MzEwLWNsaXBwYXRoLWRvZXNudC13b3JrLW9uLWlvcy9cbiAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgcyA9IHAgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwLCAxKTtcblxuICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICBwcm9wID0gcDtcbiAgICAgIHN0YXJ0ID0gcztcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7IC8vIEZpcmVmb3ggYnVnOiBhbHdheXMgcmVwb3J0cyBcImJvcmRlckNvbG9yXCIgYXMgXCJcIiwgc28gd2UgbXVzdCBmYWxsIGJhY2sgdG8gYm9yZGVyVG9wQ29sb3IuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzI0NTgzLWhvdy10by1yZXR1cm4tY29sb3JzLXRoYXQtaS1oYWQtYWZ0ZXItcmV2ZXJzZS9cbiAgICB9XG4gIH1cblxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQuc3R5bGUsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgYSxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0VmFsdWVzLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBjb2xvcixcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgZW5kVW5pdCxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChlbmQgPT09IFwiYXV0b1wiKSB7XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gZW5kO1xuICAgIGVuZCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcCkgfHwgZW5kO1xuICAgIHRhcmdldC5zdHlsZVtwcm9wXSA9IHN0YXJ0O1xuICB9XG5cbiAgYSA9IFtzdGFydCwgZW5kXTtcblxuICBfY29sb3JTdHJpbmdGaWx0ZXIoYSk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICByZWxhdGl2ZSA9IGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyArKGVuZFZhbHVlLmNoYXJBdCgwKSArIFwiMVwiKSA6IDA7XG5cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XG4gICAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5zdWJzdHIoMik7XG4gICAgICAgIH1cblxuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IHJlbGF0aXZlID8gcmVsYXRpdmUgKiBlbmROdW0gOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NVxuICAgICAgYWRkZWRUb0RPTSA9IDE7IC8vZmxhZ1xuXG4gICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0U2libGluZztcblxuICAgICAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTsgLy93ZSBtdXN0IGFkZCBpdCB0byB0aGUgRE9NIGluIG9yZGVyIHRvIGdldCB2YWx1ZXMgcHJvcGVybHlcblxuICAgIH1cblxuICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0ZW1wID8gc3R5bGUuZGlzcGxheSA9IHRlbXAgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBcImRpc3BsYXlcIik7XG5cbiAgICBpZiAoYWRkZWRUb0RPTSkge1xuICAgICAgbmV4dFNpYmxpbmcgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbmV4dFNpYmxpbmcpIDogcGFyZW50ID8gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCkgOiBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JjZTJEICYmIG1hdHJpeC5sZW5ndGggPiA2ID8gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzEyXSwgbWF0cml4WzEzXV0gOiBtYXRyaXg7XG59LFxuICAgIF9hcHBseVNWR09yaWdpbiA9IGZ1bmN0aW9uIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIG9yaWdpbiwgb3JpZ2luSXNBYnNvbHV0ZSwgc21vb3RoLCBtYXRyaXhBcnJheSwgcGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgbWF0cml4ID0gbWF0cml4QXJyYXkgfHwgX2dldE1hdHJpeCh0YXJnZXQsIHRydWUpLFxuICAgICAgeE9yaWdpbk9sZCA9IGNhY2hlLnhPcmlnaW4gfHwgMCxcbiAgICAgIHlPcmlnaW5PbGQgPSBjYWNoZS55T3JpZ2luIHx8IDAsXG4gICAgICB4T2Zmc2V0T2xkID0gY2FjaGUueE9mZnNldCB8fCAwLFxuICAgICAgeU9mZnNldE9sZCA9IGNhY2hlLnlPZmZzZXQgfHwgMCxcbiAgICAgIGEgPSBtYXRyaXhbMF0sXG4gICAgICBiID0gbWF0cml4WzFdLFxuICAgICAgYyA9IG1hdHJpeFsyXSxcbiAgICAgIGQgPSBtYXRyaXhbM10sXG4gICAgICB0eCA9IG1hdHJpeFs0XSxcbiAgICAgIHR5ID0gbWF0cml4WzVdLFxuICAgICAgb3JpZ2luU3BsaXQgPSBvcmlnaW4uc3BsaXQoXCIgXCIpLFxuICAgICAgeE9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMF0pIHx8IDAsXG4gICAgICB5T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFsxXSkgfHwgMCxcbiAgICAgIGJvdW5kcyxcbiAgICAgIGRldGVybWluYW50LFxuICAgICAgeCxcbiAgICAgIHk7XG5cbiAgaWYgKCFvcmlnaW5Jc0Fic29sdXRlKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3godGFyZ2V0KTtcbiAgICB4T3JpZ2luID0gYm91bmRzLnggKyAofm9yaWdpblNwbGl0WzBdLmluZGV4T2YoXCIlXCIpID8geE9yaWdpbiAvIDEwMCAqIGJvdW5kcy53aWR0aCA6IHhPcmlnaW4pO1xuICAgIHlPcmlnaW4gPSBib3VuZHMueSArICh+KG9yaWdpblNwbGl0WzFdIHx8IG9yaWdpblNwbGl0WzBdKS5pbmRleE9mKFwiJVwiKSA/IHlPcmlnaW4gLyAxMDAgKiBib3VuZHMuaGVpZ2h0IDogeU9yaWdpbik7XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7XG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBvcmlnaW4gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB8fCBcIjBcIixcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeixcbiAgICAgIHNjYWxlWCxcbiAgICAgIHNjYWxlWSxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgcm90YXRpb25YLFxuICAgICAgcm90YXRpb25ZLFxuICAgICAgc2tld1gsXG4gICAgICBza2V3WSxcbiAgICAgIHBlcnNwZWN0aXZlLFxuICAgICAgeE9yaWdpbixcbiAgICAgIHlPcmlnaW4sXG4gICAgICBtYXRyaXgsXG4gICAgICBhbmdsZSxcbiAgICAgIGNvcyxcbiAgICAgIHNpbixcbiAgICAgIGEsXG4gICAgICBiLFxuICAgICAgYyxcbiAgICAgIGQsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0MSxcbiAgICAgIHQyLFxuICAgICAgdDMsXG4gICAgICBhMTMsXG4gICAgICBhMjMsXG4gICAgICBhMzMsXG4gICAgICBhNDIsXG4gICAgICBhNDMsXG4gICAgICBhMzI7XG4gIHggPSB5ID0geiA9IHJvdGF0aW9uID0gcm90YXRpb25YID0gcm90YXRpb25ZID0gc2tld1ggPSBza2V3WSA9IHBlcnNwZWN0aXZlID0gMDtcbiAgc2NhbGVYID0gc2NhbGVZID0gMTtcbiAgY2FjaGUuc3ZnID0gISEodGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KSk7XG4gIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gIGlmIChjYWNoZS5zdmcpIHtcbiAgICB0MSA9ICghY2FjaGUudW5jYWNoZSB8fCBvcmlnaW4gPT09IFwiMHB4IDBweFwiKSAmJiAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyBpZiBvcmlnaW4gaXMgMCwwIGFuZCBjYWNoZS51bmNhY2hlIGlzIHRydWUsIGxldCB0aGUgcmVjb3JkZWQgZGF0YS1zdmctb3JpZ2luIHN0YXkuIE90aGVyd2lzZSwgd2hlbmV2ZXIgd2Ugc2V0IGNhY2hlLnVuY2FjaGUgdG8gdHJ1ZSwgd2UnZCBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFJlbWVtYmVyLCB0byB3b3JrIGFyb3VuZCBicm93c2VyIGluY29uc2lzdGVuY2llcyB3ZSBhbHdheXMgZm9yY2UgU1ZHIGVsZW1lbnRzJyB0cmFuc2Zvcm1PcmlnaW4gdG8gMCwwIGFuZCBvZmZzZXQgdGhlIHRyYW5zbGF0aW9uIGFjY29yZGluZ2x5LlxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAwKSB7XG4gICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gX2ZpcnN0VHdvT25seShvcmlnaW4pO1xuICB9XG5cbiAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICBjYWNoZS5mb3JjZTNEID0gX2NvbmZpZy5mb3JjZTNEO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gPSBjYWNoZS5zdmcgPyBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA6IF9zdXBwb3J0czNEID8gX3JlbmRlckNTU1RyYW5zZm9ybXMgOiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zO1xuICBjYWNoZS51bmNhY2hlID0gMDtcbiAgcmV0dXJuIGNhY2hlO1xufSxcbiAgICBfZmlyc3RUd29Pbmx5ID0gZnVuY3Rpb24gX2ZpcnN0VHdvT25seSh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlID0gdmFsdWUuc3BsaXQoXCIgXCIpKVswXSArIFwiIFwiICsgdmFsdWVbMV07XG59LFxuICAgIC8vZm9yIGhhbmRsaW5nIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMsIHN0cmlwcGluZyBvdXQgdGhlIDNyZCBkaW1lbnNpb25cbl9hZGRQeFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgdW5pdCA9IGdldFVuaXQoc3RhcnQpO1xuICByZXR1cm4gX3JvdW5kKHBhcnNlRmxvYXQoc3RhcnQpICsgcGFyc2VGbG9hdChfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB2YWx1ZSArIFwicHhcIiwgdW5pdCkpKSArIHVuaXQ7XG59LFxuICAgIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICBjYWNoZS56ID0gXCIwcHhcIjtcbiAgY2FjaGUucm90YXRpb25ZID0gY2FjaGUucm90YXRpb25YID0gXCIwZGVnXCI7XG4gIGNhY2hlLmZvcmNlM0QgPSAwO1xuXG4gIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF96ZXJvRGVnID0gXCIwZGVnXCIsXG4gICAgX3plcm9QeCA9IFwiMHB4XCIsXG4gICAgX2VuZFBhcmVudGhlc2lzID0gXCIpIFwiLFxuICAgIF9yZW5kZXJDU1NUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55LFxuICAgICAgeiA9IF9yZWYueixcbiAgICAgIHJvdGF0aW9uID0gX3JlZi5yb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWSA9IF9yZWYucm90YXRpb25ZLFxuICAgICAgcm90YXRpb25YID0gX3JlZi5yb3RhdGlvblgsXG4gICAgICBza2V3WCA9IF9yZWYuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYuc2NhbGVZLFxuICAgICAgdHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBfcmVmLnRyYW5zZm9ybVBlcnNwZWN0aXZlLFxuICAgICAgZm9yY2UzRCA9IF9yZWYuZm9yY2UzRCxcbiAgICAgIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgICAgek9yaWdpbiA9IF9yZWYuek9yaWdpbixcbiAgICAgIHRyYW5zZm9ybXMgPSBcIlwiLFxuICAgICAgdXNlM0QgPSBmb3JjZTNEID09PSBcImF1dG9cIiAmJiByYXRpbyAmJiByYXRpbyAhPT0gMSB8fCBmb3JjZTNEID09PSB0cnVlOyAvLyBTYWZhcmkgaGFzIGEgYnVnIHRoYXQgY2F1c2VzIGl0IG5vdCB0byByZW5kZXIgM0QgdHJhbnNmb3JtLW9yaWdpbiB2YWx1ZXMgcHJvcGVybHksIHNvIHdlIGZvcmNlIHRoZSB6IG9yaWdpbiB0byAwLCByZWNvcmQgaXQgaW4gdGhlIGNhY2hlLCBhbmQgdGhlbiBkbyB0aGUgbWF0aCBoZXJlIHRvIG9mZnNldCB0aGUgdHJhbnNsYXRlIHZhbHVlcyBhY2NvcmRpbmdseSAoYmFzaWNhbGx5IGRvIHRoZSAzRCB0cmFuc2Zvcm0tb3JpZ2luIHBhcnQgbWFudWFsbHkpXG5cblxuICBpZiAoek9yaWdpbiAmJiAocm90YXRpb25YICE9PSBfemVyb0RlZyB8fCByb3RhdGlvblkgIT09IF96ZXJvRGVnKSkge1xuICAgIHZhciBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25ZKSAqIF9ERUcyUkFELFxuICAgICAgICBhMTMgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgIGEzMyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgY29zO1xuXG4gICAgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWCkgKiBfREVHMlJBRDtcbiAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgeCA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHgsIGExMyAqIGNvcyAqIC16T3JpZ2luKTtcbiAgICB5ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeSwgLU1hdGguc2luKGFuZ2xlKSAqIC16T3JpZ2luKTtcbiAgICB6ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeiwgYTMzICogY29zICogLXpPcmlnaW4gKyB6T3JpZ2luKTtcbiAgfVxuXG4gIGlmICh0cmFuc2Zvcm1QZXJzcGVjdGl2ZSAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJwZXJzcGVjdGl2ZShcIiArIHRyYW5zZm9ybVBlcnNwZWN0aXZlICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInRyYW5zbGF0ZShcIiArIHhQZXJjZW50ICsgXCIlLCBcIiArIHlQZXJjZW50ICsgXCIlKSBcIjtcbiAgfVxuXG4gIGlmICh1c2UzRCB8fCB4ICE9PSBfemVyb1B4IHx8IHkgIT09IF96ZXJvUHggfHwgeiAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0geiAhPT0gX3plcm9QeCB8fCB1c2UzRCA/IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCBcIiArIHogKyBcIikgXCIgOiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwgXCIgKyB5ICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGUoXCIgKyByb3RhdGlvbiArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblkgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVkoXCIgKyByb3RhdGlvblkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25YICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVYKFwiICsgcm90YXRpb25YICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNrZXdYICE9PSBfemVyb0RlZyB8fCBza2V3WSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2tldyhcIiArIHNrZXdYICsgXCIsIFwiICsgc2tld1kgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMSkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJzY2FsZShcIiArIHNjYWxlWCArIFwiLCBcIiArIHNjYWxlWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zIHx8IFwidHJhbnNsYXRlKDAsIDApXCI7XG59LFxuICAgIF9yZW5kZXJTVkdUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlclNWR1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmMiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYyLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmMi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmMi54LFxuICAgICAgeSA9IF9yZWYyLnksXG4gICAgICByb3RhdGlvbiA9IF9yZWYyLnJvdGF0aW9uLFxuICAgICAgc2tld1ggPSBfcmVmMi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZjIuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmMi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmMi5zY2FsZVksXG4gICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICB4T3JpZ2luID0gX3JlZjIueE9yaWdpbixcbiAgICAgIHlPcmlnaW4gPSBfcmVmMi55T3JpZ2luLFxuICAgICAgeE9mZnNldCA9IF9yZWYyLnhPZmZzZXQsXG4gICAgICB5T2Zmc2V0ID0gX3JlZjIueU9mZnNldCxcbiAgICAgIGZvcmNlQ1NTID0gX3JlZjIuZm9yY2VDU1MsXG4gICAgICB0eCA9IHBhcnNlRmxvYXQoeCksXG4gICAgICB0eSA9IHBhcnNlRmxvYXQoeSksXG4gICAgICBhMTEsXG4gICAgICBhMjEsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0ZW1wO1xuXG4gIHJvdGF0aW9uID0gcGFyc2VGbG9hdChyb3RhdGlvbik7XG4gIHNrZXdYID0gcGFyc2VGbG9hdChza2V3WCk7XG4gIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG5cbiAgaWYgKHNrZXdZKSB7XG4gICAgLy9mb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgY29tYmluZSBhbGwgc2tld2luZyBpbnRvIHRoZSBza2V3WCBhbmQgcm90YXRpb24gdmFsdWVzLiBSZW1lbWJlciwgYSBza2V3WSBvZiAxMCBkZWdyZWVzIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgZGVncmVlcyBwbHVzIGEgc2tld1ggb2YgMTAgZGVncmVlcy5cbiAgICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuICAgIHNrZXdYICs9IHNrZXdZO1xuICAgIHJvdGF0aW9uICs9IHNrZXdZO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uIHx8IHNrZXdYKSB7XG4gICAgcm90YXRpb24gKj0gX0RFRzJSQUQ7XG4gICAgc2tld1ggKj0gX0RFRzJSQUQ7XG4gICAgYTExID0gTWF0aC5jb3Mocm90YXRpb24pICogc2NhbGVYO1xuICAgIGEyMSA9IE1hdGguc2luKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMTIgPSBNYXRoLnNpbihyb3RhdGlvbiAtIHNrZXdYKSAqIC1zY2FsZVk7XG4gICAgYTIyID0gTWF0aC5jb3Mocm90YXRpb24gLSBza2V3WCkgKiBzY2FsZVk7XG5cbiAgICBpZiAoc2tld1gpIHtcbiAgICAgIHNrZXdZICo9IF9ERUcyUkFEO1xuICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdYIC0gc2tld1kpO1xuICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgYTEyICo9IHRlbXA7XG4gICAgICBhMjIgKj0gdGVtcDtcblxuICAgICAgaWYgKHNrZXdZKSB7XG4gICAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WSk7XG4gICAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgICAgYTExICo9IHRlbXA7XG4gICAgICAgIGEyMSAqPSB0ZW1wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGExMSA9IF9yb3VuZChhMTEpO1xuICAgIGEyMSA9IF9yb3VuZChhMjEpO1xuICAgIGExMiA9IF9yb3VuZChhMTIpO1xuICAgIGEyMiA9IF9yb3VuZChhMjIpO1xuICB9IGVsc2Uge1xuICAgIGExMSA9IHNjYWxlWDtcbiAgICBhMjIgPSBzY2FsZVk7XG4gICAgYTIxID0gYTEyID0gMDtcbiAgfVxuXG4gIGlmICh0eCAmJiAhfih4ICsgXCJcIikuaW5kZXhPZihcInB4XCIpIHx8IHR5ICYmICF+KHkgKyBcIlwiKS5pbmRleE9mKFwicHhcIikpIHtcbiAgICB0eCA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHgsIFwicHhcIik7XG4gICAgdHkgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieVwiLCB5LCBcInB4XCIpO1xuICB9XG5cbiAgaWYgKHhPcmlnaW4gfHwgeU9yaWdpbiB8fCB4T2Zmc2V0IHx8IHlPZmZzZXQpIHtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhPcmlnaW4gLSAoeE9yaWdpbiAqIGExMSArIHlPcmlnaW4gKiBhMTIpICsgeE9mZnNldCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5T3JpZ2luIC0gKHhPcmlnaW4gKiBhMjEgKyB5T3JpZ2luICogYTIyKSArIHlPZmZzZXQpO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgLy9UaGUgU1ZHIHNwZWMgZG9lc24ndCBzdXBwb3J0IHBlcmNlbnRhZ2UtYmFzZWQgdHJhbnNsYXRpb24gaW4gdGhlIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCBzbyB3ZSBtZXJnZSBpdCBpbnRvIHRoZSB0cmFuc2xhdGlvbiB0byBzaW11bGF0ZSBpdC5cbiAgICB0ZW1wID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhQZXJjZW50IC8gMTAwICogdGVtcC53aWR0aCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5UGVyY2VudCAvIDEwMCAqIHRlbXAuaGVpZ2h0KTtcbiAgfVxuXG4gIHRlbXAgPSBcIm1hdHJpeChcIiArIGExMSArIFwiLFwiICsgYTIxICsgXCIsXCIgKyBhMTIgKyBcIixcIiArIGEyMiArIFwiLFwiICsgdHggKyBcIixcIiArIHR5ICsgXCIpXCI7XG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdGVtcCk7XG4gIGZvcmNlQ1NTICYmICh0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdGVtcCk7IC8vc29tZSBicm93c2VycyBwcmlvcml0aXplIENTUyB0cmFuc2Zvcm1zIG92ZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUuIFdoZW4gd2Ugc2Vuc2UgdGhhdCB0aGUgdXNlciBoYXMgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCwgd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB0aGlzIHdheSAob3RoZXJ3aXNlIHNvbWUgYnJvd3NlciBzaW1wbHkgd29uJ3QgcmVuZGVyIHRoZSAgdHJhbnNmb3JtIGF0dHJpYnV0ZSBjaGFuZ2VzISlcbn0sXG4gICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSwgcmVsYXRpdmUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IHJlbGF0aXZlID8gZW5kTnVtICogcmVsYXRpdmUgOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgIGZpbmFsVmFsdWUgPSBzdGFydE51bSArIGNoYW5nZSArIFwiZGVnXCIsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBwdDtcblxuICBpZiAoaXNTdHJpbmcpIHtcbiAgICBkaXJlY3Rpb24gPSBlbmRWYWx1ZS5zcGxpdChcIl9cIilbMV07XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcInNob3J0XCIpIHtcbiAgICAgIGNoYW5nZSAlPSBjYXA7XG5cbiAgICAgIGlmIChjaGFuZ2UgIT09IGNoYW5nZSAlIChjYXAgLyAyKSkge1xuICAgICAgICBjaGFuZ2UgKz0gY2hhbmdlIDwgMCA/IGNhcCA6IC1jYXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJjd1wiICYmIGNoYW5nZSA8IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgKyBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFwiY2N3XCIgJiYgY2hhbmdlID4gMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSAtIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9XG4gIH1cblxuICBwbHVnaW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBjaGFuZ2UsIF9yZW5kZXJQcm9wV2l0aEVuZCk7XG4gIHB0LmUgPSBmaW5hbFZhbHVlO1xuICBwdC51ID0gXCJkZWdcIjtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2Fzc2lnbiA9IGZ1bmN0aW9uIF9hc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgZG9lc24ndCBoYXZlIE9iamVjdC5hc3NpZ24oKSwgc28gd2UgcmVjcmVhdGUgaXQgaGVyZS5cbiAgZm9yICh2YXIgcCBpbiBzb3VyY2UpIHtcbiAgICB0YXJnZXRbcF0gPSBzb3VyY2VbcF07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSxcbiAgICBfYWRkUmF3VHJhbnNmb3JtUFRzID0gZnVuY3Rpb24gX2FkZFJhd1RyYW5zZm9ybVBUcyhwbHVnaW4sIHRyYW5zZm9ybXMsIHRhcmdldCkge1xuICAvL2ZvciBoYW5kbGluZyBjYXNlcyB3aGVyZSBzb21lb25lIHBhc3NlcyBpbiBhIHdob2xlIHRyYW5zZm9ybSBzdHJpbmcsIGxpa2UgdHJhbnNmb3JtOiBcInNjYWxlKDIsIDMpIHJvdGF0ZSgyMGRlZykgdHJhbnNsYXRlWSgzMGVtKVwiXG4gIHZhciBzdGFydENhY2hlID0gX2Fzc2lnbih7fSwgdGFyZ2V0Ll9nc2FwKSxcbiAgICAgIGV4Y2x1ZGUgPSBcInBlcnNwZWN0aXZlLGZvcmNlM0QsdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpblwiLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBlbmRDYWNoZSxcbiAgICAgIHAsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGVuZE51bSxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIGVuZFVuaXQ7XG5cbiAgaWYgKHN0YXJ0Q2FjaGUuc3ZnKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG5cbiAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHN0YXJ0VmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0VmFsdWUgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldClbX3RyYW5zZm9ybVByb3BdO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSBzdGFydFZhbHVlO1xuICB9XG5cbiAgZm9yIChwIGluIF90cmFuc2Zvcm1Qcm9wcykge1xuICAgIHN0YXJ0VmFsdWUgPSBzdGFydENhY2hlW3BdO1xuICAgIGVuZFZhbHVlID0gZW5kQ2FjaGVbcF07XG5cbiAgICBpZiAoc3RhcnRWYWx1ZSAhPT0gZW5kVmFsdWUgJiYgZXhjbHVkZS5pbmRleE9mKHApIDwgMCkge1xuICAgICAgLy90d2VlbmluZyB0byBubyBwZXJzcGVjdGl2ZSBnaXZlcyB2ZXJ5IHVuaW50dWl0aXZlIHJlc3VsdHMgLSBqdXN0IGtlZXAgdGhlIHNhbWUgcGVyc3BlY3RpdmUgaW4gdGhhdCBjYXNlLlxuICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZFVuaXQgPSBnZXRVbml0KGVuZFZhbHVlKTtcbiAgICAgIHN0YXJ0TnVtID0gc3RhcnRVbml0ICE9PSBlbmRVbml0ID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSA6IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgIHBsdWdpbi5fcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIGVuZENhY2hlLCBwLCBzdGFydE51bSwgZW5kTnVtIC0gc3RhcnROdW0sIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgIHBsdWdpbi5fcHQudSA9IGVuZFVuaXQgfHwgMDtcblxuICAgICAgcGx1Z2luLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfVxuXG4gIF9hc3NpZ24oZW5kQ2FjaGUsIHN0YXJ0Q2FjaGUpO1xufTsgLy8gaGFuZGxlIHNwbGl0dGluZyBhcGFydCBwYWRkaW5nLCBtYXJnaW4sIGJvcmRlcldpZHRoLCBhbmQgYm9yZGVyUmFkaXVzIGludG8gdGhlaXIgNCBjb21wb25lbnRzLiBGaXJlZm94LCBmb3IgZXhhbXBsZSwgd29uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkgLSBpdCB3aWxsIG9ubHkgZG8gYm9yZGVyVG9wTGVmdFJhZGl1cyBhbmQgdGhlIG90aGVyIGNvcm5lcnMuIFdlIGFsc28gd2FudCB0byBoYW5kbGUgcGFkZGluZ1RvcCwgbWFyZ2luTGVmdCwgYm9yZGVyUmlnaHRXaWR0aCwgZXRjLlxuXG5cbl9mb3JFYWNoTmFtZShcInBhZGRpbmcsbWFyZ2luLFdpZHRoLFJhZGl1c1wiLCBmdW5jdGlvbiAobmFtZSwgaW5kZXgpIHtcbiAgdmFyIHQgPSBcIlRvcFwiLFxuICAgICAgciA9IFwiUmlnaHRcIixcbiAgICAgIGIgPSBcIkJvdHRvbVwiLFxuICAgICAgbCA9IFwiTGVmdFwiLFxuICAgICAgcHJvcHMgPSAoaW5kZXggPCAzID8gW3QsIHIsIGIsIGxdIDogW3QgKyBsLCB0ICsgciwgYiArIHIsIGIgKyBsXSkubWFwKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMiA/IG5hbWUgKyBzaWRlIDogXCJib3JkZXJcIiArIHNpZGUgKyBuYW1lO1xuICB9KTtcblxuICBfc3BlY2lhbFByb3BzW2luZGV4ID4gMSA/IFwiYm9yZGVyXCIgKyBuYW1lIDogbmFtZV0gPSBmdW5jdGlvbiAocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICB2YXIgYSwgdmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkge1xuICAgICAgLy8gZ2V0dGVyLCBwYXNzZWQgdGFyZ2V0LCBwcm9wZXJ0eSwgYW5kIHVuaXQgKGZyb20gX2dldCgpKVxuICAgICAgYSA9IHByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gX2dldChwbHVnaW4sIHByb3AsIHByb3BlcnR5KTtcbiAgICAgIH0pO1xuICAgICAgdmFycyA9IGEuam9pbihcIiBcIik7XG4gICAgICByZXR1cm4gdmFycy5zcGxpdChhWzBdKS5sZW5ndGggPT09IDUgPyBhWzBdIDogdmFycztcbiAgICB9XG5cbiAgICBhID0gKGVuZFZhbHVlICsgXCJcIikuc3BsaXQoXCIgXCIpO1xuICAgIHZhcnMgPSB7fTtcbiAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wLCBpKSB7XG4gICAgICByZXR1cm4gdmFyc1twcm9wXSA9IGFbaV0gPSBhW2ldIHx8IGFbKGkgLSAxKSAvIDIgfCAwXTtcbiAgICB9KTtcbiAgICBwbHVnaW4uaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKTtcbiAgfTtcbn0pO1xuXG5leHBvcnQgdmFyIENTU1BsdWdpbiA9IHtcbiAgbmFtZTogXCJjc3NcIixcbiAgcmVnaXN0ZXI6IF9pbml0Q29yZSxcbiAgdGFyZ2V0VGVzdDogZnVuY3Rpb24gdGFyZ2V0VGVzdCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnN0eWxlICYmIHRhcmdldC5ub2RlVHlwZTtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwcm9wcyA9IHRoaXMuX3Byb3BzLFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgc3RhcnRBdCA9IHR3ZWVuLnZhcnMuc3RhcnRBdCxcbiAgICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgICAgZW5kVmFsdWUsXG4gICAgICAgIGVuZE51bSxcbiAgICAgICAgc3RhcnROdW0sXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHNwZWNpYWxQcm9wLFxuICAgICAgICBwLFxuICAgICAgICBzdGFydFVuaXQsXG4gICAgICAgIGVuZFVuaXQsXG4gICAgICAgIHJlbGF0aXZlLFxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQsXG4gICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbixcbiAgICAgICAgY2FjaGUsXG4gICAgICAgIHNtb290aCxcbiAgICAgICAgaGFzUHJpb3JpdHk7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgaWYgKHAgPT09IFwiYXV0b1JvdW5kXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZFZhbHVlID0gdmFyc1twXTtcblxuICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgLy8gcGx1Z2luc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIHNwZWNpYWxQcm9wID0gX3NwZWNpYWxQcm9wc1twXTtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBfcmVwbGFjZVJhbmRvbShlbmRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGVjaWFsUHJvcCkge1xuICAgICAgICBzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9IGVsc2UgaWYgKHAuc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgICAgLy9DU1MgdmFyaWFibGVcbiAgICAgICAgc3RhcnRWYWx1ZSA9IChnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuZ2V0UHJvcGVydHlWYWx1ZShwKSArIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgZW5kVmFsdWUgKz0gXCJcIjtcbiAgICAgICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKCFfY29sb3JFeHAudGVzdChzdGFydFZhbHVlKSkge1xuICAgICAgICAgIC8vIGNvbG9ycyBkb24ndCBoYXZlIHVuaXRzXG4gICAgICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRVbml0ID8gc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIChzdGFydFZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSArIGVuZFVuaXQpIDogc3RhcnRVbml0ICYmIChlbmRWYWx1ZSArPSBzdGFydFVuaXQpO1xuICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmIChzdGFydEF0ICYmIHAgaW4gc3RhcnRBdCkge1xuICAgICAgICAgIC8vIGluIGNhc2Ugc29tZW9uZSBoYXJkLWNvZGVzIGEgY29tcGxleCB2YWx1ZSBhcyB0aGUgc3RhcnQsIGxpa2UgdG9wOiBcImNhbGMoMnZoIC8gMilcIi4gV2l0aG91dCB0aGlzLCBpdCdkIHVzZSB0aGUgY29tcHV0ZWQgdmFsdWUgKGFsd2F5cyBpbiBweClcbiAgICAgICAgICBzdGFydFZhbHVlID0gdHlwZW9mIHN0YXJ0QXRbcF0gPT09IFwiZnVuY3Rpb25cIiA/IHN0YXJ0QXRbcF0uY2FsbCh0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiBzdGFydEF0W3BdO1xuICAgICAgICAgIHAgaW4gX2NvbmZpZy51bml0cyAmJiAhZ2V0VW5pdChzdGFydFZhbHVlKSAmJiAoc3RhcnRWYWx1ZSArPSBfY29uZmlnLnVuaXRzW3BdKTsgLy8gZm9yIGNhc2VzIHdoZW4gc29tZW9uZSBwYXNzZXMgaW4gYSB1bml0bGVzcyB2YWx1ZSBsaWtlIHt4OiAxMDB9OyBpZiB3ZSB0cnkgc2V0dGluZyB0cmFuc2xhdGUoMTAwLCAwcHgpIGl0IHdvbid0IHdvcmsuXG5cbiAgICAgICAgICAoc3RhcnRWYWx1ZSArIFwiXCIpLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCkpOyAvLyBjYW4ndCB3b3JrIHdpdGggcmVsYXRpdmUgdmFsdWVzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgICAgcmVsYXRpdmUgPSB0eXBlID09PSBcInN0cmluZ1wiICYmIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyArKGVuZFZhbHVlLmNoYXJBdCgwKSArIFwiMVwiKSA6IDA7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwICE9PSBcInNjYWxlXCIgJiYgcCAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wczsgLy8tLS0gVFJBTlNGT1JNLVJFTEFURUQgLS0tXG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgIGlmICghdHJhbnNmb3JtUHJvcFR3ZWVuKSB7XG4gICAgICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgICAgICAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSAmJiAhdmFycy5wYXJzZVRyYW5zZm9ybSB8fCBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB2YXJzLnBhcnNlVHJhbnNmb3JtKTsgLy8gaWYsIGZvciBleGFtcGxlLCBnc2FwLnNldCguLi4ge3RyYW5zZm9ybTpcInRyYW5zbGF0ZVgoNTB2dylcIn0pLCB0aGUgX2dldCgpIGNhbGwgZG9lc24ndCBwYXJzZSB0aGUgdHJhbnNmb3JtLCB0aHVzIGNhY2hlLnJlbmRlclRyYW5zZm9ybSB3b24ndCBiZSBzZXQgeWV0IHNvIGZvcmNlIHRoZSBwYXJzaW5nIG9mIHRoZSB0cmFuc2Zvcm0gaGVyZS5cblxuICAgICAgICAgICAgc21vb3RoID0gdmFycy5zbW9vdGhPcmlnaW4gIT09IGZhbHNlICYmIGNhY2hlLnNtb290aDtcbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbiA9IHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgc3R5bGUsIF90cmFuc2Zvcm1Qcm9wLCAwLCAxLCBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0sIGNhY2hlLCAwLCAtMSk7IC8vdGhlIGZpcnN0IHRpbWUgdGhyb3VnaCwgY3JlYXRlIHRoZSByZW5kZXJpbmcgUHJvcFR3ZWVuIHNvIHRoYXQgaXQgcnVucyBMQVNUIChpbiB0aGUgbGlua2VkIGxpc3QsIHdlIGtlZXAgYWRkaW5nIHRvIHRoZSBiZWdpbm5pbmcpXG5cbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2Vlbi5kZXAgPSAxOyAvL2ZsYWcgaXQgYXMgZGVwZW5kZW50IHNvIHRoYXQgaWYgdGhpbmdzIGdldCBraWxsZWQvb3ZlcndyaXR0ZW4gYW5kIHRoaXMgaXMgdGhlIG9ubHkgUHJvcFR3ZWVuIGxlZnQsIHdlIGNhbiBzYWZlbHkga2lsbCB0aGUgd2hvbGUgdHdlZW4uXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHAgPT09IFwic2NhbGVcIikge1xuICAgICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBjYWNoZSwgXCJzY2FsZVlcIiwgY2FjaGUuc2NhbGVZLCAocmVsYXRpdmUgPyByZWxhdGl2ZSAqIGVuZE51bSA6IGVuZE51bSAtIGNhY2hlLnNjYWxlWSkgfHwgMCk7XG4gICAgICAgICAgICBwcm9wcy5wdXNoKFwic2NhbGVZXCIsIHApO1xuICAgICAgICAgICAgcCArPSBcIlhcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIGVuZFZhbHVlLCByZWxhdGl2ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCByZWxhdGl2ZSA/IHJlbGF0aXZlICogZW5kTnVtIDogZW5kTnVtIC0gc3RhcnROdW0sICFpc1RyYW5zZm9ybVJlbGF0ZWQgJiYgKGVuZFVuaXQgPT09IFwicHhcIiB8fCBwID09PSBcInpJbmRleFwiKSAmJiB2YXJzLmF1dG9Sb3VuZCAhPT0gZmFsc2UgPyBfcmVuZGVyUm91bmRlZENTU1Byb3AgOiBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgdGhpcy5fcHQudSA9IGVuZFVuaXQgfHwgMDtcblxuICAgICAgICAgIGlmIChzdGFydFVuaXQgIT09IGVuZFVuaXQpIHtcbiAgICAgICAgICAgIC8vd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcsIHdlIG5lZWQgdG8gcmV2ZXJ0IGl0IHRvIHRoZSBPTEQvT1JJR0lOQUwgdmFsdWUgKHdpdGggdGhvc2UgdW5pdHMpLiBXZSByZWNvcmQgdGhhdCBhcyBhIFwiYlwiIChiZWdpbm5pbmcpIHByb3BlcnR5IGFuZCBwb2ludCB0byBhIHJlbmRlciBtZXRob2QgdGhhdCBoYW5kbGVzIHRoYXQuIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgICAgICAgICB0aGlzLl9wdC5iID0gc3RhcnRWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnIgPSBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBpZiAocCBpbiB0YXJnZXQpIHtcbiAgICAgICAgICAgIC8vbWF5YmUgaXQncyBub3QgYSBzdHlsZSAtIGl0IGNvdWxkIGJlIGEgcHJvcGVydHkgYWRkZWQgZGlyZWN0bHkgdG8gYW4gZWxlbWVudCBpbiB3aGljaCBjYXNlIHdlJ2xsIHRyeSB0byBhbmltYXRlIHRoYXQuXG4gICAgICAgICAgICB0aGlzLmFkZCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfbWlzc2luZ1BsdWdpbihwLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwodGhpcywgdGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5cbihmdW5jdGlvbiAocG9zaXRpb25BbmRTY2FsZSwgcm90YXRpb24sIG90aGVycywgYWxpYXNlcykge1xuICB2YXIgYWxsID0gX2ZvckVhY2hOYW1lKHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uICsgXCIsXCIgKyBvdGhlcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RyYW5zZm9ybVByb3BzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX2ZvckVhY2hOYW1lKHJvdGF0aW9uLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9jb25maWcudW5pdHNbbmFtZV0gPSBcImRlZ1wiO1xuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9wcm9wZXJ0eUFsaWFzZXNbYWxsWzEzXV0gPSBwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbjtcblxuICBfZm9yRWFjaE5hbWUoYWxpYXNlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3BsaXQgPSBuYW1lLnNwbGl0KFwiOlwiKTtcbiAgICBfcHJvcGVydHlBbGlhc2VzW3NwbGl0WzFdXSA9IGFsbFtzcGxpdFswXV07XG4gIH0pO1xufSkoXCJ4LHkseixzY2FsZSxzY2FsZVgsc2NhbGVZLHhQZXJjZW50LHlQZXJjZW50XCIsIFwicm90YXRpb24scm90YXRpb25YLHJvdGF0aW9uWSxza2V3WCxza2V3WVwiLCBcInRyYW5zZm9ybSx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luLGZvcmNlM0Qsc21vb3RoT3JpZ2luLHRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsIFwiMDp0cmFuc2xhdGVYLDE6dHJhbnNsYXRlWSwyOnRyYW5zbGF0ZVosODpyb3RhdGUsODpyb3RhdGlvblosODpyb3RhdGVaLDk6cm90YXRlWCwxMDpyb3RhdGVZXCIpO1xuXG5fZm9yRWFjaE5hbWUoXCJ4LHkseix0b3AscmlnaHQsYm90dG9tLGxlZnQsd2lkdGgsaGVpZ2h0LGZvbnRTaXplLHBhZGRpbmcsbWFyZ2luLHBlcnNwZWN0aXZlXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIF9jb25maWcudW5pdHNbbmFtZV0gPSBcInB4XCI7XG59KTtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pO1xuZXhwb3J0IHsgQ1NTUGx1Z2luIGFzIGRlZmF1bHQsIF9nZXRCQm94LCBfY3JlYXRlRWxlbWVudCwgX2NoZWNrUHJvcFByZWZpeCBhcyBjaGVja1ByZWZpeCB9OyIsIi8qIVxuICogQ1NTUnVsZVBsdWdpbiAzLjcuMVxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgQ1NTUGx1Z2luLFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgX3dpbmRvd0V4aXN0cygpICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX2NoZWNrUmVnaXN0ZXIgPSBmdW5jdGlvbiBfY2hlY2tSZWdpc3RlcigpIHtcbiAgaWYgKCFfY29yZUluaXR0ZWQpIHtcbiAgICBfaW5pdENvcmUoKTtcblxuICAgIGlmICghQ1NTUGx1Z2luKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4sIENTU1J1bGVQbHVnaW4pXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29yZUluaXR0ZWQ7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZShjb3JlKSB7XG4gIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG5cbiAgaWYgKF93aW5kb3dFeGlzdHMoKSkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IGRvY3VtZW50O1xuICB9XG5cbiAgaWYgKGdzYXApIHtcbiAgICBDU1NQbHVnaW4gPSBnc2FwLnBsdWdpbnMuY3NzO1xuXG4gICAgaWYgKENTU1BsdWdpbikge1xuICAgICAgX2NvcmVJbml0dGVkID0gMTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgQ1NTUnVsZVBsdWdpbiA9IHtcbiAgdmVyc2lvbjogXCIzLjcuMVwiLFxuICBuYW1lOiBcImNzc1J1bGVcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICBpZiAoIV9jaGVja1JlZ2lzdGVyKCkgfHwgdHlwZW9mIHRhcmdldC5jc3NUZXh0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGRpdiA9IHRhcmdldC5fZ3NQcm94eSA9IHRhcmdldC5fZ3NQcm94eSB8fCBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICB0aGlzLnNzID0gdGFyZ2V0O1xuICAgIHRoaXMuc3R5bGUgPSBkaXYuc3R5bGU7XG4gICAgZGl2LnN0eWxlLmNzc1RleHQgPSB0YXJnZXQuY3NzVGV4dDtcbiAgICBDU1NQbHVnaW4ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzLCBkaXYsIHZhbHVlLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpOyAvL3dlIGp1c3Qgb2ZmbG9hZCBhbGwgdGhlIHdvcmsgdG8gdGhlIHJlZ3VsYXIgQ1NTUGx1Z2luIGFuZCB0aGVuIGNvcHkgdGhlIGNzc1RleHQgYmFjayBvdmVyIHRvIHRoZSBydWxlIGluIHRoZSByZW5kZXIoKSBtZXRob2QuIFRoaXMgYWxsb3dzIHVzIHRvIGhhdmUgYWxsIG9mIHRoZSB1cGRhdGVzIHRvIENTU1BsdWdpbiBhdXRvbWF0aWNhbGx5IGZsb3cgdGhyb3VnaCB0byBDU1NSdWxlUGx1Z2luIGluc3RlYWQgb2YgaGF2aW5nIHRvIG1haW50YWluIGJvdGhcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgcHQgPSBkYXRhLl9wdCxcbiAgICAgICAgc3R5bGUgPSBkYXRhLnN0eWxlLFxuICAgICAgICBzcyA9IGRhdGEuc3MsXG4gICAgICAgIGk7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICBpID0gc3R5bGUubGVuZ3RoO1xuXG4gICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICBzc1tzdHlsZVtpXV0gPSBzdHlsZVtzdHlsZVtpXV07XG4gICAgfVxuICB9LFxuICBnZXRSdWxlOiBmdW5jdGlvbiBnZXRSdWxlKHNlbGVjdG9yKSB7XG4gICAgX2NoZWNrUmVnaXN0ZXIoKTtcblxuICAgIHZhciBydWxlUHJvcCA9IF9kb2MuYWxsID8gXCJydWxlc1wiIDogXCJjc3NSdWxlc1wiLFxuICAgICAgICBzdHlsZVNoZWV0cyA9IF9kb2Muc3R5bGVTaGVldHMsXG4gICAgICAgIGkgPSBzdHlsZVNoZWV0cy5sZW5ndGgsXG4gICAgICAgIHBzZXVkbyA9IHNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gXCI6XCIsXG4gICAgICAgIGosXG4gICAgICAgIGN1clNTLFxuICAgICAgICBjcyxcbiAgICAgICAgYTtcbiAgICBzZWxlY3RvciA9IChwc2V1ZG8gPyBcIlwiIDogXCIsXCIpICsgc2VsZWN0b3Iuc3BsaXQoXCI6OlwiKS5qb2luKFwiOlwiKS50b0xvd2VyQ2FzZSgpICsgXCIsXCI7IC8vbm90ZTogb2xkIHZlcnNpb25zIG9mIElFIHJlcG9ydCB0YWcgbmFtZSBzZWxlY3RvcnMgYXMgdXBwZXIgY2FzZSwgc28gd2UganVzdCBjaGFuZ2UgZXZlcnl0aGluZyB0byBsb3dlcmNhc2UuXG5cbiAgICBpZiAocHNldWRvKSB7XG4gICAgICBhID0gW107XG4gICAgfVxuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgLy9GaXJlZm94IG1heSB0aHJvdyBpbnNlY3VyZSBvcGVyYXRpb24gZXJyb3JzIHdoZW4gY3NzIGlzIGxvYWRlZCBmcm9tIG90aGVyIGRvbWFpbnMsIHNvIHRyeS9jYXRjaC5cbiAgICAgIHRyeSB7XG4gICAgICAgIGN1clNTID0gc3R5bGVTaGVldHNbaV1bcnVsZVByb3BdO1xuXG4gICAgICAgIGlmICghY3VyU1MpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGogPSBjdXJTUy5sZW5ndGg7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgtLWogPiAtMSkge1xuICAgICAgICBjcyA9IGN1clNTW2pdO1xuXG4gICAgICAgIGlmIChjcy5zZWxlY3RvclRleHQgJiYgKFwiLFwiICsgY3Muc2VsZWN0b3JUZXh0LnNwbGl0KFwiOjpcIikuam9pbihcIjpcIikudG9Mb3dlckNhc2UoKSArIFwiLFwiKS5pbmRleE9mKHNlbGVjdG9yKSAhPT0gLTEpIHtcbiAgICAgICAgICAvL25vdGU6IElFIGFkZHMgYW4gZXh0cmEgXCI6XCIgdG8gcHNldWRvIHNlbGVjdG9ycywgc28gLm15Q2xhc3M6YWZ0ZXIgYmVjb21lcyAubXlDbGFzczo6YWZ0ZXIsIHNvIHdlIG5lZWQgdG8gc3RyaXAgdGhlIGV4dHJhIG9uZSBvdXQuXG4gICAgICAgICAgaWYgKHBzZXVkbykge1xuICAgICAgICAgICAgYS5wdXNoKGNzLnN0eWxlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNzLnN0eWxlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9LFxuICByZWdpc3RlcjogX2luaXRDb3JlXG59O1xuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1J1bGVQbHVnaW4pO1xuZXhwb3J0IHsgQ1NTUnVsZVBsdWdpbiBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIERyYWdnYWJsZSAzLjcuMVxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBnZXRHbG9iYWxNYXRyaXgsIE1hdHJpeDJEIH0gZnJvbSBcIi4vdXRpbHMvbWF0cml4LmpzXCI7XG5cbnZhciBnc2FwLFxuICAgIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfYm9keSxcbiAgICBfdGVtcERpdixcbiAgICBfcGxhY2Vob2xkZXJEaXYsXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9jaGVja1ByZWZpeCxcbiAgICBfdG9BcnJheSxcbiAgICBfc3VwcG9ydHNQYXNzaXZlLFxuICAgIF9pc1RvdWNoRGV2aWNlLFxuICAgIF90b3VjaEV2ZW50TG9va3VwLFxuICAgIF9kcmFnQ291bnQsXG4gICAgX2lzTXVsdGlUb3VjaGluZyxcbiAgICBfaXNBbmRyb2lkLFxuICAgIEluZXJ0aWFQbHVnaW4sXG4gICAgX2RlZmF1bHRDdXJzb3IsXG4gICAgX3N1cHBvcnRzUG9pbnRlcixcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gIHJldHVybiBnc2FwIHx8IF93aW5kb3dFeGlzdHMoKSAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gZmFsc2U7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IFwidHJhbnNmb3JtT3JpZ2luXCIsXG4gICAgX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDApIC8gMTAwMDA7XG59LFxuICAgIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50KHR5cGUsIG5zKSB7XG4gIHZhciBlID0gX2RvYy5jcmVhdGVFbGVtZW50TlMgPyBfZG9jLmNyZWF0ZUVsZW1lbnROUygobnMgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIpLnJlcGxhY2UoL15odHRwcy8sIFwiaHR0cFwiKSwgdHlwZSkgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBzZXJ2ZXJzIHN3YXAgaW4gaHR0cHMgZm9yIGh0dHAgaW4gdGhlIG5hbWVzcGFjZSB3aGljaCBjYW4gYnJlYWsgdGhpbmdzLCBtYWtpbmcgXCJzdHlsZVwiIGluYWNjZXNzaWJsZS5cblxuICByZXR1cm4gZS5zdHlsZSA/IGUgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBlbnZpcm9ubWVudHMgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgd2hlbiBjcmVhdGVkIHdpdGggYSBuYW1lc3BhY2UgaW4gd2hpY2ggY2FzZSB3ZSBkZWZhdWx0IHRvIHRoZSBzdGFuZGFyZCBjcmVhdGVFbGVtZW50KCkgdG8gd29yayBhcm91bmQgdGhlIGlzc3VlLiBBbHNvIG5vdGUgdGhhdCB3aGVuIEdTQVAgaXMgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIGFuIFNWRyBmaWxlLCBjcmVhdGVFbGVtZW50KCkgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBzdHlsZSBvYmplY3QgaW4gRmlyZWZveCAoc2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAyMTUtcHJvYmxlbS11c2luZy10d2Vlbm1heC1pbi1zdGFuZGFsb25lLXNlbGYtY29udGFpbmluZy1zdmctZmlsZS1lcnItY2Fubm90LXNldC1wcm9wZXJ0eS1jc3N0ZXh0LW9mLXVuZGVmaW5lZC8pLlxufSxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX2JpZ051bSA9IDFlMjAsXG4gICAgX2lkZW50aXR5TWF0cml4ID0gbmV3IE1hdHJpeDJEKCksXG4gICAgX2dldFRpbWUgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbn0sXG4gICAgX3JlbmRlclF1ZXVlID0gW10sXG4gICAgX2xvb2t1cCA9IHt9LFxuICAgIC8vd2hlbiBhIERyYWdnYWJsZSBpcyBjcmVhdGVkLCB0aGUgdGFyZ2V0IGdldHMgYSB1bmlxdWUgX2dzRHJhZ0lEIHByb3BlcnR5IHRoYXQgYWxsb3dzIGdldHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBEcmFnZ2FibGUgaW5zdGFuY2UgZm9yIHF1aWNrIGxvb2t1cHMgaW4gRHJhZ2dhYmxlLmdldCgpLiBUaGlzIGF2b2lkcyBjaXJjdWxhciByZWZlcmVuY2VzIHRoYXQgY291bGQgY2F1c2UgZ2MgcHJvYmxlbXMuXG5fbG9va3VwQ291bnQgPSAwLFxuICAgIF9jbGlja2FibGVUYWdFeHAgPSAvXig/OmF8aW5wdXR8dGV4dGFyZWF8YnV0dG9ufHNlbGVjdCkkL2ksXG4gICAgX2xhc3REcmFnVGltZSA9IDAsXG4gICAgX3RlbXAxID0ge30sXG4gICAgLy8gYSBzaW1wbGUgb2JqZWN0IHdlIHJldXNlIGFuZCBwb3B1bGF0ZSAodXN1YWxseSB4L3kgcHJvcGVydGllcykgdG8gY29uc2VydmUgbWVtb3J5IGFuZCBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuX3dpbmRvd1Byb3h5ID0ge30sXG4gICAgLy9tZW1vcnkvcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIC0gd2UgcmV1c2UgdGhpcyBvYmplY3QgZHVyaW5nIGF1dG9TY3JvbGwgdG8gc3RvcmUgd2luZG93LXJlbGF0ZWQgYm91bmRzL29mZnNldHMuXG5fY29weSA9IGZ1bmN0aW9uIF9jb3B5KG9iaiwgZmFjdG9yKSB7XG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBvYmopIHtcbiAgICBjb3B5W3BdID0gZmFjdG9yID8gb2JqW3BdICogZmFjdG9yIDogb2JqW3BdO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9leHRlbmQgPSBmdW5jdGlvbiBfZXh0ZW5kKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIGlmICghKHAgaW4gb2JqKSkge1xuICAgICAgb2JqW3BdID0gZGVmYXVsdHNbcF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldFRvdWNoQWN0aW9uRm9yQWxsRGVzY2VuZGFudHMgPSBmdW5jdGlvbiBfc2V0VG91Y2hBY3Rpb25Gb3JBbGxEZXNjZW5kYW50cyhlbGVtZW50cywgdmFsdWUpIHtcbiAgdmFyIGkgPSBlbGVtZW50cy5sZW5ndGgsXG4gICAgICBjaGlsZHJlbjtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFsdWUgPyBlbGVtZW50c1tpXS5zdHlsZS50b3VjaEFjdGlvbiA9IHZhbHVlIDogZWxlbWVudHNbaV0uc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0b3VjaC1hY3Rpb25cIik7XG4gICAgY2hpbGRyZW4gPSBlbGVtZW50c1tpXS5jaGlsZHJlbjtcbiAgICBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggJiYgX3NldFRvdWNoQWN0aW9uRm9yQWxsRGVzY2VuZGFudHMoY2hpbGRyZW4sIHZhbHVlKTtcbiAgfVxufSxcbiAgICBfcmVuZGVyUXVldWVUaWNrID0gZnVuY3Rpb24gX3JlbmRlclF1ZXVlVGljaygpIHtcbiAgcmV0dXJuIF9yZW5kZXJRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmMoKTtcbiAgfSk7XG59LFxuICAgIF9hZGRUb1JlbmRlclF1ZXVlID0gZnVuY3Rpb24gX2FkZFRvUmVuZGVyUXVldWUoZnVuYykge1xuICBfcmVuZGVyUXVldWUucHVzaChmdW5jKTtcblxuICBpZiAoX3JlbmRlclF1ZXVlLmxlbmd0aCA9PT0gMSkge1xuICAgIGdzYXAudGlja2VyLmFkZChfcmVuZGVyUXVldWVUaWNrKTtcbiAgfVxufSxcbiAgICBfcmVuZGVyUXVldWVUaW1lb3V0ID0gZnVuY3Rpb24gX3JlbmRlclF1ZXVlVGltZW91dCgpIHtcbiAgcmV0dXJuICFfcmVuZGVyUXVldWUubGVuZ3RoICYmIGdzYXAudGlja2VyLnJlbW92ZShfcmVuZGVyUXVldWVUaWNrKTtcbn0sXG4gICAgX3JlbW92ZUZyb21SZW5kZXJRdWV1ZSA9IGZ1bmN0aW9uIF9yZW1vdmVGcm9tUmVuZGVyUXVldWUoZnVuYykge1xuICB2YXIgaSA9IF9yZW5kZXJRdWV1ZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChfcmVuZGVyUXVldWVbaV0gPT09IGZ1bmMpIHtcbiAgICAgIF9yZW5kZXJRdWV1ZS5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG5cbiAgZ3NhcC50byhfcmVuZGVyUXVldWVUaW1lb3V0LCB7XG4gICAgb3ZlcndyaXRlOiB0cnVlLFxuICAgIGRlbGF5OiAxNSxcbiAgICBkdXJhdGlvbjogMCxcbiAgICBvbkNvbXBsZXRlOiBfcmVuZGVyUXVldWVUaW1lb3V0LFxuICAgIGRhdGE6IFwiX2RyYWdnYWJsZVwiXG4gIH0pOyAvL3JlbW92ZSB0aGUgXCJ0aWNrXCIgbGlzdGVuZXIgb25seSBhZnRlciB0aGUgcmVuZGVyIHF1ZXVlIGlzIGVtcHR5IGZvciAxNSBzZWNvbmRzICh0byBpbXByb3ZlIHBlcmZvcm1hbmNlKS4gQWRkaW5nL3JlbW92aW5nIGl0IGNvbnN0YW50bHkgZm9yIGV2ZXJ5IGNsaWNrL3RvdWNoIHdvdWxkbid0IGRlbGl2ZXIgb3B0aW1hbCBzcGVlZCwgYW5kIHdlIGFsc28gZG9uJ3Qgd2FudCB0aGUgdGlja2VyIHRvIGtlZXAgY2FsbGluZyB0aGUgcmVuZGVyIG1ldGhvZCB3aGVuIHRoaW5ncyBhcmUgaWRsZSBmb3IgbG9uZyBwZXJpb2RzIG9mIHRpbWUgKHdlIHdhbnQgdG8gaW1wcm92ZSBiYXR0ZXJ5IGxpZmUgb24gbW9iaWxlIGRldmljZXMpLlxufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgaWYgKCEocCBpbiBvYmopKSB7XG4gICAgICBvYmpbcF0gPSBkZWZhdWx0c1twXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgY2FwdHVyZSkge1xuICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgdmFyIHRvdWNoVHlwZSA9IF90b3VjaEV2ZW50TG9va3VwW3R5cGVdO1xuICAgIGNhcHR1cmUgPSBjYXB0dXJlIHx8IChfc3VwcG9ydHNQYXNzaXZlID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9IDogbnVsbCk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoVHlwZSB8fCB0eXBlLCBmdW5jLCBjYXB0dXJlKTtcbiAgICB0b3VjaFR5cGUgJiYgdHlwZSAhPT0gdG91Y2hUeXBlICYmIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCBjYXB0dXJlKTsgLy9zb21lIGJyb3dzZXJzIGFjdHVhbGx5IHN1cHBvcnQgYm90aCwgc28gbXVzdCB3ZS4gQnV0IHBvaW50ZXIgZXZlbnRzIGNvdmVyIGFsbC5cbiAgfVxufSxcbiAgICBfcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiBfcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYykge1xuICBpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgdmFyIHRvdWNoVHlwZSA9IF90b3VjaEV2ZW50TG9va3VwW3R5cGVdO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaFR5cGUgfHwgdHlwZSwgZnVuYyk7XG4gICAgdG91Y2hUeXBlICYmIHR5cGUgIT09IHRvdWNoVHlwZSAmJiBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYyk7XG4gIH1cbn0sXG4gICAgX3ByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gX3ByZXZlbnREZWZhdWx0KGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnByZXZlbnRNYW5pcHVsYXRpb24gJiYgZXZlbnQucHJldmVudE1hbmlwdWxhdGlvbigpOyAvL2ZvciBzb21lIE1pY3Jvc29mdCBicm93c2Vyc1xufSxcbiAgICBfaGFzVG91Y2hJRCA9IGZ1bmN0aW9uIF9oYXNUb3VjaElEKGxpc3QsIElEKSB7XG4gIHZhciBpID0gbGlzdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChsaXN0W2ldLmlkZW50aWZpZXIgPT09IElEKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX29uTXVsdGlUb3VjaERvY3VtZW50RW5kID0gZnVuY3Rpb24gX29uTXVsdGlUb3VjaERvY3VtZW50RW5kKGV2ZW50KSB7XG4gIF9pc011bHRpVG91Y2hpbmcgPSBldmVudC50b3VjaGVzICYmIF9kcmFnQ291bnQgPCBldmVudC50b3VjaGVzLmxlbmd0aDtcblxuICBfcmVtb3ZlTGlzdGVuZXIoZXZlbnQudGFyZ2V0LCBcInRvdWNoZW5kXCIsIF9vbk11bHRpVG91Y2hEb2N1bWVudEVuZCk7XG59LFxuICAgIF9vbk11bHRpVG91Y2hEb2N1bWVudCA9IGZ1bmN0aW9uIF9vbk11bHRpVG91Y2hEb2N1bWVudChldmVudCkge1xuICBfaXNNdWx0aVRvdWNoaW5nID0gZXZlbnQudG91Y2hlcyAmJiBfZHJhZ0NvdW50IDwgZXZlbnQudG91Y2hlcy5sZW5ndGg7XG5cbiAgX2FkZExpc3RlbmVyKGV2ZW50LnRhcmdldCwgXCJ0b3VjaGVuZFwiLCBfb25NdWx0aVRvdWNoRG9jdW1lbnRFbmQpO1xufSxcbiAgICBfZ2V0RG9jU2Nyb2xsVG9wID0gZnVuY3Rpb24gX2dldERvY1Njcm9sbFRvcChkb2MpIHtcbiAgcmV0dXJuIF93aW4ucGFnZVlPZmZzZXQgfHwgZG9jLnNjcm9sbFRvcCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2MuYm9keS5zY3JvbGxUb3AgfHwgMDtcbn0sXG4gICAgX2dldERvY1Njcm9sbExlZnQgPSBmdW5jdGlvbiBfZ2V0RG9jU2Nyb2xsTGVmdChkb2MpIHtcbiAgcmV0dXJuIF93aW4ucGFnZVhPZmZzZXQgfHwgZG9jLnNjcm9sbExlZnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvYy5ib2R5LnNjcm9sbExlZnQgfHwgMDtcbn0sXG4gICAgX2FkZFNjcm9sbExpc3RlbmVyID0gZnVuY3Rpb24gX2FkZFNjcm9sbExpc3RlbmVyKGUsIGNhbGxiYWNrKSB7XG4gIF9hZGRMaXN0ZW5lcihlLCBcInNjcm9sbFwiLCBjYWxsYmFjayk7XG5cbiAgaWYgKCFfaXNSb290KGUucGFyZW50Tm9kZSkpIHtcbiAgICBfYWRkU2Nyb2xsTGlzdGVuZXIoZS5wYXJlbnROb2RlLCBjYWxsYmFjayk7XG4gIH1cbn0sXG4gICAgX3JlbW92ZVNjcm9sbExpc3RlbmVyID0gZnVuY3Rpb24gX3JlbW92ZVNjcm9sbExpc3RlbmVyKGUsIGNhbGxiYWNrKSB7XG4gIF9yZW1vdmVMaXN0ZW5lcihlLCBcInNjcm9sbFwiLCBjYWxsYmFjayk7XG5cbiAgaWYgKCFfaXNSb290KGUucGFyZW50Tm9kZSkpIHtcbiAgICBfcmVtb3ZlU2Nyb2xsTGlzdGVuZXIoZS5wYXJlbnROb2RlLCBjYWxsYmFjayk7XG4gIH1cbn0sXG4gICAgX2lzUm9vdCA9IGZ1bmN0aW9uIF9pc1Jvb3QoZSkge1xuICByZXR1cm4gISEoIWUgfHwgZSA9PT0gX2RvY0VsZW1lbnQgfHwgZS5ub2RlVHlwZSA9PT0gOSB8fCBlID09PSBfZG9jLmJvZHkgfHwgZSA9PT0gX3dpbiB8fCAhZS5ub2RlVHlwZSB8fCAhZS5wYXJlbnROb2RlKTtcbn0sXG4gICAgX2dldE1heFNjcm9sbCA9IGZ1bmN0aW9uIF9nZXRNYXhTY3JvbGwoZWxlbWVudCwgYXhpcykge1xuICB2YXIgZGltID0gYXhpcyA9PT0gXCJ4XCIgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiLFxuICAgICAgc2Nyb2xsID0gXCJzY3JvbGxcIiArIGRpbSxcbiAgICAgIGNsaWVudCA9IFwiY2xpZW50XCIgKyBkaW07XG4gIHJldHVybiBNYXRoLm1heCgwLCBfaXNSb290KGVsZW1lbnQpID8gTWF0aC5tYXgoX2RvY0VsZW1lbnRbc2Nyb2xsXSwgX2JvZHlbc2Nyb2xsXSkgLSAoX3dpbltcImlubmVyXCIgKyBkaW1dIHx8IF9kb2NFbGVtZW50W2NsaWVudF0gfHwgX2JvZHlbY2xpZW50XSkgOiBlbGVtZW50W3Njcm9sbF0gLSBlbGVtZW50W2NsaWVudF0pO1xufSxcbiAgICBfcmVjb3JkTWF4U2Nyb2xscyA9IGZ1bmN0aW9uIF9yZWNvcmRNYXhTY3JvbGxzKGUsIHNraXBDdXJyZW50KSB7XG4gIC8vcmVjb3JkcyBfZ3NNYXhTY3JvbGxYIGFuZCBfZ3NNYXhTY3JvbGxZIHByb3BlcnRpZXMgZm9yIHRoZSBlbGVtZW50IGFuZCBhbGwgYW5jZXN0b3JzIHVwIHRoZSBjaGFpbiBzbyB0aGF0IHdlIGNhbiBjYXAgaXQsIG90aGVyd2lzZSBkcmFnZ2luZyBiZXlvbmQgdGhlIGVkZ2VzIHdpdGggYXV0b1Njcm9sbCBvbiBjYW4gZW5kbGVzc2x5IHNjcm9sbC5cbiAgdmFyIHggPSBfZ2V0TWF4U2Nyb2xsKGUsIFwieFwiKSxcbiAgICAgIHkgPSBfZ2V0TWF4U2Nyb2xsKGUsIFwieVwiKTtcblxuICBpZiAoX2lzUm9vdChlKSkge1xuICAgIGUgPSBfd2luZG93UHJveHk7XG4gIH0gZWxzZSB7XG4gICAgX3JlY29yZE1heFNjcm9sbHMoZS5wYXJlbnROb2RlLCBza2lwQ3VycmVudCk7XG4gIH1cblxuICBlLl9nc01heFNjcm9sbFggPSB4O1xuICBlLl9nc01heFNjcm9sbFkgPSB5O1xuXG4gIGlmICghc2tpcEN1cnJlbnQpIHtcbiAgICBlLl9nc1Njcm9sbFggPSBlLnNjcm9sbExlZnQgfHwgMDtcbiAgICBlLl9nc1Njcm9sbFkgPSBlLnNjcm9sbFRvcCB8fCAwO1xuICB9XG59LFxuICAgIF9zZXRTdHlsZSA9IGZ1bmN0aW9uIF9zZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZTtcblxuICBpZiAoIXN0eWxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKF9pc1VuZGVmaW5lZChzdHlsZVtwcm9wZXJ0eV0pKSB7XG4gICAgcHJvcGVydHkgPSBfY2hlY2tQcmVmaXgocHJvcGVydHksIGVsZW1lbnQpIHx8IHByb3BlcnR5O1xuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eSAmJiBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eS5yZXBsYWNlKC8oW0EtWl0pL2csIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICB9XG59LFxuICAgIF9nZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gX3dpbi5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50ID8gZWxlbWVudCA6IGVsZW1lbnQuaG9zdCB8fCAoZWxlbWVudC5wYXJlbnROb2RlIHx8IHt9KS5ob3N0IHx8IGVsZW1lbnQpO1xufSxcbiAgICAvL3RoZSBcImhvc3RcIiBzdHVmZiBoZWxwcyB0byBhY2NvbW1vZGF0ZSBTaGFkb3dEb20gb2JqZWN0cy5cbl90ZW1wUmVjdCA9IHt9LFxuICAgIC8vcmV1c2UgdG8gcmVkdWNlIGdhcmJhZ2UgY29sbGVjdGlvbiB0YXNrc1xuX3BhcnNlUmVjdCA9IGZ1bmN0aW9uIF9wYXJzZVJlY3QoZSkge1xuICAvL2FjY2VwdHMgYSBET00gZWxlbWVudCwgYSBtb3VzZSBldmVudCwgb3IgYSByZWN0YW5nbGUgb2JqZWN0IGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlY3RhbmdsZSB3aXRoIGxlZnQsIHJpZ2h0LCB3aWR0aCwgaGVpZ2h0LCB0b3AsIGFuZCBib3R0b20gcHJvcGVydGllc1xuICBpZiAoZSA9PT0gX3dpbikge1xuICAgIF90ZW1wUmVjdC5sZWZ0ID0gX3RlbXBSZWN0LnRvcCA9IDA7XG4gICAgX3RlbXBSZWN0LndpZHRoID0gX3RlbXBSZWN0LnJpZ2h0ID0gX2RvY0VsZW1lbnQuY2xpZW50V2lkdGggfHwgZS5pbm5lcldpZHRoIHx8IF9ib2R5LmNsaWVudFdpZHRoIHx8IDA7XG4gICAgX3RlbXBSZWN0LmhlaWdodCA9IF90ZW1wUmVjdC5ib3R0b20gPSAoZS5pbm5lckhlaWdodCB8fCAwKSAtIDIwIDwgX2RvY0VsZW1lbnQuY2xpZW50SGVpZ2h0ID8gX2RvY0VsZW1lbnQuY2xpZW50SGVpZ2h0IDogZS5pbm5lckhlaWdodCB8fCBfYm9keS5jbGllbnRIZWlnaHQgfHwgMDtcbiAgICByZXR1cm4gX3RlbXBSZWN0O1xuICB9XG5cbiAgdmFyIGRvYyA9IGUub3duZXJEb2N1bWVudCB8fCBfZG9jLFxuICAgICAgciA9ICFfaXNVbmRlZmluZWQoZS5wYWdlWCkgPyB7XG4gICAgbGVmdDogZS5wYWdlWCAtIF9nZXREb2NTY3JvbGxMZWZ0KGRvYyksXG4gICAgdG9wOiBlLnBhZ2VZIC0gX2dldERvY1Njcm9sbFRvcChkb2MpLFxuICAgIHJpZ2h0OiBlLnBhZ2VYIC0gX2dldERvY1Njcm9sbExlZnQoZG9jKSArIDEsXG4gICAgYm90dG9tOiBlLnBhZ2VZIC0gX2dldERvY1Njcm9sbFRvcChkb2MpICsgMVxuICB9IDogIWUubm9kZVR5cGUgJiYgIV9pc1VuZGVmaW5lZChlLmxlZnQpICYmICFfaXNVbmRlZmluZWQoZS50b3ApID8gZSA6IF90b0FycmF5KGUpWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGlmIChfaXNVbmRlZmluZWQoci5yaWdodCkgJiYgIV9pc1VuZGVmaW5lZChyLndpZHRoKSkge1xuICAgIHIucmlnaHQgPSByLmxlZnQgKyByLndpZHRoO1xuICAgIHIuYm90dG9tID0gci50b3AgKyByLmhlaWdodDtcbiAgfSBlbHNlIGlmIChfaXNVbmRlZmluZWQoci53aWR0aCkpIHtcbiAgICAvL3NvbWUgYnJvd3NlcnMgZG9uJ3QgaW5jbHVkZSB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXMuIFdlIGNhbid0IGp1c3Qgc2V0IHRoZW0gZGlyZWN0bHkgb24gciBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgdGhyb3cgZXJyb3JzLCBzbyBjcmVhdGUgYSBuZXcgZ2VuZXJpYyBvYmplY3QuXG4gICAgciA9IHtcbiAgICAgIHdpZHRoOiByLnJpZ2h0IC0gci5sZWZ0LFxuICAgICAgaGVpZ2h0OiByLmJvdHRvbSAtIHIudG9wLFxuICAgICAgcmlnaHQ6IHIucmlnaHQsXG4gICAgICBsZWZ0OiByLmxlZnQsXG4gICAgICBib3R0b206IHIuYm90dG9tLFxuICAgICAgdG9wOiByLnRvcFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gcjtcbn0sXG4gICAgX2Rpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiBfZGlzcGF0Y2hFdmVudCh0YXJnZXQsIHR5cGUsIGNhbGxiYWNrTmFtZSkge1xuICB2YXIgdmFycyA9IHRhcmdldC52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2YXJzW2NhbGxiYWNrTmFtZV0sXG4gICAgICBsaXN0ZW5lcnMgPSB0YXJnZXQuX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgIHJlc3VsdDtcblxuICBpZiAoX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgcmVzdWx0ID0gY2FsbGJhY2suYXBwbHkodmFycy5jYWxsYmFja1Njb3BlIHx8IHRhcmdldCwgdmFyc1tjYWxsYmFja05hbWUgKyBcIlBhcmFtc1wiXSB8fCBbdGFyZ2V0LnBvaW50ZXJFdmVudF0pO1xuICB9XG5cbiAgaWYgKGxpc3RlbmVycyAmJiB0YXJnZXQuZGlzcGF0Y2hFdmVudCh0eXBlKSA9PT0gZmFsc2UpIHtcbiAgICByZXN1bHQgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAgIF9nZXRCb3VuZHMgPSBmdW5jdGlvbiBfZ2V0Qm91bmRzKHRhcmdldCwgY29udGV4dCkge1xuICAvL2FjY2VwdHMgYW55IG9mIHRoZSBmb2xsb3dpbmc6IGEgRE9NIGVsZW1lbnQsIGpRdWVyeSBvYmplY3QsIHNlbGVjdG9yIHRleHQsIG9yIGFuIG9iamVjdCBkZWZpbmluZyBib3VuZHMgYXMge3RvcCwgbGVmdCwgd2lkdGgsIGhlaWdodH0gb3Ige21pblgsIG1heFgsIG1pblksIG1heFl9LiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIGxlZnQsIHRvcCwgd2lkdGgsIGFuZCBoZWlnaHQgcHJvcGVydGllcy5cbiAgdmFyIGUgPSBfdG9BcnJheSh0YXJnZXQpWzBdLFxuICAgICAgdG9wLFxuICAgICAgbGVmdCxcbiAgICAgIG9mZnNldDtcblxuICBpZiAoIWUubm9kZVR5cGUgJiYgZSAhPT0gX3dpbikge1xuICAgIGlmICghX2lzVW5kZWZpbmVkKHRhcmdldC5sZWZ0KSkge1xuICAgICAgb2Zmc2V0ID0ge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9OyAvL19nZXRPZmZzZXRUcmFuc2Zvcm1PcmlnaW4oY29udGV4dCk7IC8vdGhlIGJvdW5kcyBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIG9yaWdpblxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiB0YXJnZXQubGVmdCAtIG9mZnNldC54LFxuICAgICAgICB0b3A6IHRhcmdldC50b3AgLSBvZmZzZXQueSxcbiAgICAgICAgd2lkdGg6IHRhcmdldC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0YXJnZXQuaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cblxuICAgIGxlZnQgPSB0YXJnZXQubWluIHx8IHRhcmdldC5taW5YIHx8IHRhcmdldC5taW5Sb3RhdGlvbiB8fCAwO1xuICAgIHRvcCA9IHRhcmdldC5taW4gfHwgdGFyZ2V0Lm1pblkgfHwgMDtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogbGVmdCxcbiAgICAgIHRvcDogdG9wLFxuICAgICAgd2lkdGg6ICh0YXJnZXQubWF4IHx8IHRhcmdldC5tYXhYIHx8IHRhcmdldC5tYXhSb3RhdGlvbiB8fCAwKSAtIGxlZnQsXG4gICAgICBoZWlnaHQ6ICh0YXJnZXQubWF4IHx8IHRhcmdldC5tYXhZIHx8IDApIC0gdG9wXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfZ2V0RWxlbWVudEJvdW5kcyhlLCBjb250ZXh0KTtcbn0sXG4gICAgX3BvaW50MSA9IHt9LFxuICAgIC8vd2UgcmV1c2UgdG8gbWluaW1pemUgZ2FyYmFnZSBjb2xsZWN0aW9uIHRhc2tzLlxuX2dldEVsZW1lbnRCb3VuZHMgPSBmdW5jdGlvbiBfZ2V0RWxlbWVudEJvdW5kcyhlbGVtZW50LCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBfdG9BcnJheShjb250ZXh0KVswXTtcbiAgdmFyIGlzU1ZHID0gZWxlbWVudC5nZXRCQm94ICYmIGVsZW1lbnQub3duZXJTVkdFbGVtZW50LFxuICAgICAgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50IHx8IF9kb2MsXG4gICAgICBsZWZ0LFxuICAgICAgcmlnaHQsXG4gICAgICB0b3AsXG4gICAgICBib3R0b20sXG4gICAgICBtYXRyaXgsXG4gICAgICBwMSxcbiAgICAgIHAyLFxuICAgICAgcDMsXG4gICAgICBwNCxcbiAgICAgIGJib3gsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGNzLFxuICAgICAgY29udGV4dFBhcmVudDtcblxuICBpZiAoZWxlbWVudCA9PT0gX3dpbikge1xuICAgIHRvcCA9IF9nZXREb2NTY3JvbGxUb3AoZG9jKTtcbiAgICBsZWZ0ID0gX2dldERvY1Njcm9sbExlZnQoZG9jKTtcbiAgICByaWdodCA9IGxlZnQgKyAoZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCB8fCBlbGVtZW50LmlubmVyV2lkdGggfHwgZG9jLmJvZHkuY2xpZW50V2lkdGggfHwgMCk7XG4gICAgYm90dG9tID0gdG9wICsgKChlbGVtZW50LmlubmVySGVpZ2h0IHx8IDApIC0gMjAgPCBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA/IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDogZWxlbWVudC5pbm5lckhlaWdodCB8fCBkb2MuYm9keS5jbGllbnRIZWlnaHQgfHwgMCk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBpZ25vcmUgYWJzb2x1dGVseSBwb3NpdGlvbmVkIGVsZW1lbnRzLCBhbmQgY29sbGFwc2UgdGhlIGhlaWdodCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBzbyBpdCBjb3VsZCBiZSA4cHgsIGZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSBqdXN0IGFuIGFic29sdXRlbHkgcG9zaXRpb25lZCBkaXYuIEluIHRoYXQgY2FzZSwgd2UgdXNlIHRoZSBpbm5lckhlaWdodCB0byByZXNvbHZlIHRoaXMuXG4gIH0gZWxzZSBpZiAoY29udGV4dCA9PT0gX3dpbiB8fCBfaXNVbmRlZmluZWQoY29udGV4dCkpIHtcbiAgICByZXR1cm4gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gdG9wID0gMDtcblxuICAgIGlmIChpc1NWRykge1xuICAgICAgYmJveCA9IGVsZW1lbnQuZ2V0QkJveCgpO1xuICAgICAgd2lkdGggPSBiYm94LndpZHRoO1xuICAgICAgaGVpZ2h0ID0gYmJveC5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChlbGVtZW50LnZpZXdCb3ggJiYgKGJib3ggPSBlbGVtZW50LnZpZXdCb3guYmFzZVZhbCkpIHtcbiAgICAgICAgbGVmdCA9IGJib3gueCB8fCAwO1xuICAgICAgICB0b3AgPSBiYm94LnkgfHwgMDtcbiAgICAgICAgd2lkdGggPSBiYm94LndpZHRoO1xuICAgICAgICBoZWlnaHQgPSBiYm94LmhlaWdodDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF3aWR0aCkge1xuICAgICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgICAgICBiYm94ID0gY3MuYm94U2l6aW5nID09PSBcImJvcmRlci1ib3hcIjtcbiAgICAgICAgd2lkdGggPSAocGFyc2VGbG9hdChjcy53aWR0aCkgfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCAwKSArIChiYm94ID8gMCA6IHBhcnNlRmxvYXQoY3MuYm9yZGVyTGVmdFdpZHRoKSArIHBhcnNlRmxvYXQoY3MuYm9yZGVyUmlnaHRXaWR0aCkpO1xuICAgICAgICBoZWlnaHQgPSAocGFyc2VGbG9hdChjcy5oZWlnaHQpIHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IDApICsgKGJib3ggPyAwIDogcGFyc2VGbG9hdChjcy5ib3JkZXJUb3BXaWR0aCkgKyBwYXJzZUZsb2F0KGNzLmJvcmRlckJvdHRvbVdpZHRoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmlnaHQgPSB3aWR0aDtcbiAgICBib3R0b20gPSBoZWlnaHQ7XG4gIH1cblxuICBpZiAoZWxlbWVudCA9PT0gY29udGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgdG9wOiB0b3AsXG4gICAgICB3aWR0aDogcmlnaHQgLSBsZWZ0LFxuICAgICAgaGVpZ2h0OiBib3R0b20gLSB0b3BcbiAgICB9O1xuICB9XG5cbiAgbWF0cml4ID0gZ2V0R2xvYmFsTWF0cml4KGNvbnRleHQsIHRydWUpLm11bHRpcGx5KGdldEdsb2JhbE1hdHJpeChlbGVtZW50KSk7XG4gIHAxID0gbWF0cml4LmFwcGx5KHtcbiAgICB4OiBsZWZ0LFxuICAgIHk6IHRvcFxuICB9KTtcbiAgcDIgPSBtYXRyaXguYXBwbHkoe1xuICAgIHg6IHJpZ2h0LFxuICAgIHk6IHRvcFxuICB9KTtcbiAgcDMgPSBtYXRyaXguYXBwbHkoe1xuICAgIHg6IHJpZ2h0LFxuICAgIHk6IGJvdHRvbVxuICB9KTtcbiAgcDQgPSBtYXRyaXguYXBwbHkoe1xuICAgIHg6IGxlZnQsXG4gICAgeTogYm90dG9tXG4gIH0pO1xuICBsZWZ0ID0gTWF0aC5taW4ocDEueCwgcDIueCwgcDMueCwgcDQueCk7XG4gIHRvcCA9IE1hdGgubWluKHAxLnksIHAyLnksIHAzLnksIHA0LnkpO1xuICBjb250ZXh0UGFyZW50ID0gY29udGV4dC5wYXJlbnROb2RlIHx8IHt9O1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGxlZnQgKyAoY29udGV4dFBhcmVudC5zY3JvbGxMZWZ0IHx8IDApLFxuICAgIHRvcDogdG9wICsgKGNvbnRleHRQYXJlbnQuc2Nyb2xsVG9wIHx8IDApLFxuICAgIHdpZHRoOiBNYXRoLm1heChwMS54LCBwMi54LCBwMy54LCBwNC54KSAtIGxlZnQsXG4gICAgaGVpZ2h0OiBNYXRoLm1heChwMS55LCBwMi55LCBwMy55LCBwNC55KSAtIHRvcFxuICB9O1xufSxcbiAgICBfcGFyc2VJbmVydGlhID0gZnVuY3Rpb24gX3BhcnNlSW5lcnRpYShkcmFnZ2FibGUsIHNuYXAsIG1heCwgbWluLCBmYWN0b3IsIGZvcmNlWmVyb1ZlbG9jaXR5KSB7XG4gIHZhciB2YXJzID0ge30sXG4gICAgICBhLFxuICAgICAgaSxcbiAgICAgIGw7XG5cbiAgaWYgKHNuYXApIHtcbiAgICBpZiAoZmFjdG9yICE9PSAxICYmIHNuYXAgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgLy9zb21lIGRhdGEgbXVzdCBiZSBhbHRlcmVkIHRvIG1ha2Ugc2Vuc2UsIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGFuIGFycmF5IG9mIHJvdGF0aW9uYWwgdmFsdWVzIGluIGRlZ3JlZXMsIHdlIG11c3QgY29udmVydCBpdCB0byByYWRpYW5zLiBPciBmb3Igc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wLCB3ZSBpbnZlcnQgdGhlIHZhbHVlcy5cbiAgICAgIHZhcnMuZW5kID0gYSA9IFtdO1xuICAgICAgbCA9IHNuYXAubGVuZ3RoO1xuXG4gICAgICBpZiAoX2lzT2JqZWN0KHNuYXBbMF0pKSB7XG4gICAgICAgIC8vaWYgdGhlIGFycmF5IGlzIHBvcHVsYXRlZCB3aXRoIG9iamVjdHMsIGxpa2UgcG9pbnRzICh7eDoxMDAsIHk6MjAwfSksIG1ha2UgY29waWVzIGJlZm9yZSBtdWx0aXBseWluZyBieSB0aGUgZmFjdG9yLCBvdGhlcndpc2Ugd2UnbGwgbWVzcyB1cCB0aGUgb3JpZ2luYWxzIGFuZCB0aGUgdXNlciBtYXkgcmV1c2UgaXQgZWxzZXdoZXJlLlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgYVtpXSA9IF9jb3B5KHNuYXBbaV0sIGZhY3Rvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBhW2ldID0gc25hcFtpXSAqIGZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtYXggKz0gMS4xOyAvL2FsbG93IDEuMSBwaXhlbHMgb2Ygd2lnZ2xlIHJvb20gd2hlbiBzbmFwcGluZyBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBzb21lIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIGluIHRoZSB3YXkgYm91bmRzIGFyZSByZXBvcnRlZCB3aGljaCBjYW4gbWFrZSB0aGVtIHJvdWdobHkgYSBwaXhlbCBvZmYuIEZvciBleGFtcGxlLCBpZiBcInNuYXA6Wy0kKCcjbWVudScpLndpZHRoKCksIDBdXCIgd2FzIGRlZmluZWQgYW5kICNtZW51IGhhZCBhIHdyYXBwZXIgdGhhdCB3YXMgdXNlZCBhcyB0aGUgYm91bmRzLCBzb21lIGJyb3dzZXJzIHdvdWxkIGJlIG9uZSBwaXhlbCBvZmYsIG1ha2luZyB0aGUgbWluaW11bSAtNzUyIGZvciBleGFtcGxlIHdoZW4gc25hcCB3YXMgWy03NTMsMF0sIHRodXMgaW5zdGVhZCBvZiBzbmFwcGluZyB0byAtNzUzLCBpdCB3b3VsZCBzbmFwIHRvIDAgc2luY2UgLTc1MyB3YXMgYmVsb3cgdGhlIG1pbmltdW0uXG5cbiAgICAgIG1pbiAtPSAxLjE7XG4gICAgfSBlbHNlIGlmIChfaXNGdW5jdGlvbihzbmFwKSkge1xuICAgICAgdmFycy5lbmQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHNuYXAuY2FsbChkcmFnZ2FibGUsIHZhbHVlKSxcbiAgICAgICAgICAgIGNvcHksXG4gICAgICAgICAgICBwO1xuXG4gICAgICAgIGlmIChmYWN0b3IgIT09IDEpIHtcbiAgICAgICAgICBpZiAoX2lzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGNvcHkgPSB7fTtcblxuICAgICAgICAgICAgZm9yIChwIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICBjb3B5W3BdID0gcmVzdWx0W3BdICogZmFjdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHQgPSBjb3B5O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKj0gZmFjdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7IC8vd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB3ZSBjYW4gc2NvcGUgdGhlIGZ1bmN0aW9uIGNhbGwgdG8gdGhlIERyYWdnYWJsZSBpbnN0YW5jZSBpdHNlbGYgc28gdGhhdCB1c2VycyBjYW4gYWNjZXNzIGltcG9ydGFudCB2YWx1ZXMgbGlrZSBtYXhYLCBtaW5YLCBtYXhZLCBtaW5ZLCB4LCBhbmQgeSBmcm9tIHdpdGhpbiB0aGF0IGZ1bmN0aW9uLlxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFycy5lbmQgPSBzbmFwO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtYXggfHwgbWF4ID09PSAwKSB7XG4gICAgdmFycy5tYXggPSBtYXg7XG4gIH1cblxuICBpZiAobWluIHx8IG1pbiA9PT0gMCkge1xuICAgIHZhcnMubWluID0gbWluO1xuICB9XG5cbiAgaWYgKGZvcmNlWmVyb1ZlbG9jaXR5KSB7XG4gICAgdmFycy52ZWxvY2l0eSA9IDA7XG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2lzQ2xpY2thYmxlID0gZnVuY3Rpb24gX2lzQ2xpY2thYmxlKGVsZW1lbnQpIHtcbiAgLy9zb21ldGltZXMgaXQncyBjb252ZW5pZW50IHRvIG1hcmsgYW4gZWxlbWVudCBhcyBjbGlja2FibGUgYnkgYWRkaW5nIGEgZGF0YS1jbGlja2FibGU9XCJ0cnVlXCIgYXR0cmlidXRlIChpbiB3aGljaCBjYXNlIHdlIHdvbid0IHByZXZlbnREZWZhdWx0KCkgdGhlIG1vdXNlL3RvdWNoIGV2ZW50KS4gVGhpcyBtZXRob2QgY2hlY2tzIGlmIHRoZSBlbGVtZW50IGlzIGFuIDxhPiwgPGlucHV0Piwgb3IgPGJ1dHRvbj4gb3IgaGFzIGFuIG9uY2xpY2sgb3IgaGFzIHRoZSBkYXRhLWNsaWNrYWJsZSBvciBjb250ZW50RWRpdGFibGUgYXR0cmlidXRlIHNldCB0byB0cnVlIChvciBhbnkgb2YgaXRzIHBhcmVudCBlbGVtZW50cykuXG4gIHZhciBkYXRhO1xuICByZXR1cm4gIWVsZW1lbnQgfHwgIWVsZW1lbnQuZ2V0QXR0cmlidXRlIHx8IGVsZW1lbnQgPT09IF9ib2R5ID8gZmFsc2UgOiAoZGF0YSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jbGlja2FibGVcIikpID09PSBcInRydWVcIiB8fCBkYXRhICE9PSBcImZhbHNlXCIgJiYgKGVsZW1lbnQub25jbGljayB8fCBfY2xpY2thYmxlVGFnRXhwLnRlc3QoZWxlbWVudC5ub2RlTmFtZSArIFwiXCIpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY29udGVudEVkaXRhYmxlXCIpID09PSBcInRydWVcIikgPyB0cnVlIDogX2lzQ2xpY2thYmxlKGVsZW1lbnQucGFyZW50Tm9kZSk7XG59LFxuICAgIF9zZXRTZWxlY3RhYmxlID0gZnVuY3Rpb24gX3NldFNlbGVjdGFibGUoZWxlbWVudHMsIHNlbGVjdGFibGUpIHtcbiAgdmFyIGkgPSBlbGVtZW50cy5sZW5ndGgsXG4gICAgICBlO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBlID0gZWxlbWVudHNbaV07XG4gICAgZS5vbmRyYWdzdGFydCA9IGUub25zZWxlY3RzdGFydCA9IHNlbGVjdGFibGUgPyBudWxsIDogX2VtcHR5RnVuYztcbiAgICBnc2FwLnNldChlLCB7XG4gICAgICBsYXp5OiB0cnVlLFxuICAgICAgdXNlclNlbGVjdDogc2VsZWN0YWJsZSA/IFwidGV4dFwiIDogXCJub25lXCJcbiAgICB9KTtcbiAgfVxufSxcbiAgICBfaXNGaXhlZCA9IGZ1bmN0aW9uIF9pc0ZpeGVkKGVsZW1lbnQpIHtcbiAgaWYgKF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSBcImZpeGVkXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgIC8vIGF2b2lkIGRvY3VtZW50IGZyYWdtZW50cyB3aGljaCB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgIHJldHVybiBfaXNGaXhlZChlbGVtZW50KTtcbiAgfVxufSxcbiAgICBfc3VwcG9ydHMzRCxcbiAgICBfYWRkUGFkZGluZ0JSLFxuICAgIC8vVGhlIFNjcm9sbFByb3h5IGNsYXNzIHdyYXBzIGFuIGVsZW1lbnQncyBjb250ZW50cyBpbnRvIGFub3RoZXIgZGl2ICh3ZSBjYWxsIGl0IFwiY29udGVudFwiKSB0aGF0IHdlIGVpdGhlciBhZGQgcGFkZGluZyB3aGVuIG5lY2Vzc2FyeSBvciBhcHBseSBhIHRyYW5zbGF0ZTNkKCkgdHJhbnNmb3JtIGluIG9yZGVyIHRvIG92ZXJzY3JvbGwgKHNjcm9sbCBwYXN0IHRoZSBib3VuZGFyaWVzKS4gVGhpcyBhbGxvd3MgdXMgdG8gc2ltcGx5IHNldCB0aGUgc2Nyb2xsVG9wL3Njcm9sbExlZnQgKG9yIHRvcC9sZWZ0IGZvciBlYXNpZXIgcmV2ZXJzZS1heGlzIG9yaWVudGF0aW9uLCB3aGljaCBpcyB3aGF0IHdlIGRvIGluIERyYWdnYWJsZSkgYW5kIGl0J2xsIGRvIGFsbCB0aGUgd29yayBmb3IgdXMuIEZvciBleGFtcGxlLCBpZiB3ZSB0cmllZCBzZXR0aW5nIHNjcm9sbFRvcCB0byAtMTAwIG9uIGEgbm9ybWFsIERPTSBlbGVtZW50LCBpdCB3b3VsZG4ndCB3b3JrIC0gaXQnZCBsb29rIHRoZSBzYW1lIGFzIHNldHRpbmcgaXQgdG8gMCwgYnV0IGlmIHdlIHNldCBzY3JvbGxUb3Agb2YgYSBTY3JvbGxQcm94eSB0byAtMTAwLCBpdCdsbCBnaXZlIHRoZSBjb3JyZWN0IGFwcGVhcmFuY2UgYnkgZWl0aGVyIHNldHRpbmcgcGFkZGluZ1RvcCBvZiB0aGUgd3JhcHBlciB0byAxMDAgb3IgYXBwbHlpbmcgYSAxMDAtcGl4ZWwgdHJhbnNsYXRlWS5cblNjcm9sbFByb3h5ID0gZnVuY3Rpb24gU2Nyb2xsUHJveHkoZWxlbWVudCwgdmFycykge1xuICBlbGVtZW50ID0gZ3NhcC51dGlscy50b0FycmF5KGVsZW1lbnQpWzBdO1xuICB2YXJzID0gdmFycyB8fCB7fTtcbiAgdmFyIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgc3R5bGUgPSBjb250ZW50LnN0eWxlLFxuICAgICAgbm9kZSA9IGVsZW1lbnQuZmlyc3RDaGlsZCxcbiAgICAgIG9mZnNldFRvcCA9IDAsXG4gICAgICBvZmZzZXRMZWZ0ID0gMCxcbiAgICAgIHByZXZUb3AgPSBlbGVtZW50LnNjcm9sbFRvcCxcbiAgICAgIHByZXZMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgc2Nyb2xsV2lkdGggPSBlbGVtZW50LnNjcm9sbFdpZHRoLFxuICAgICAgc2Nyb2xsSGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQsXG4gICAgICBleHRyYVBhZFJpZ2h0ID0gMCxcbiAgICAgIG1heExlZnQgPSAwLFxuICAgICAgbWF4VG9wID0gMCxcbiAgICAgIGVsZW1lbnRXaWR0aCxcbiAgICAgIGVsZW1lbnRIZWlnaHQsXG4gICAgICBjb250ZW50SGVpZ2h0LFxuICAgICAgbmV4dE5vZGUsXG4gICAgICB0cmFuc2Zvcm1TdGFydCxcbiAgICAgIHRyYW5zZm9ybUVuZDtcblxuICBpZiAoX3N1cHBvcnRzM0QgJiYgdmFycy5mb3JjZTNEICE9PSBmYWxzZSkge1xuICAgIHRyYW5zZm9ybVN0YXJ0ID0gXCJ0cmFuc2xhdGUzZChcIjtcbiAgICB0cmFuc2Zvcm1FbmQgPSBcInB4LDBweClcIjtcbiAgfSBlbHNlIGlmIChfdHJhbnNmb3JtUHJvcCkge1xuICAgIHRyYW5zZm9ybVN0YXJ0ID0gXCJ0cmFuc2xhdGUoXCI7XG4gICAgdHJhbnNmb3JtRW5kID0gXCJweClcIjtcbiAgfVxuXG4gIHRoaXMuc2Nyb2xsVG9wID0gZnVuY3Rpb24gKHZhbHVlLCBmb3JjZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIC10aGlzLnRvcCgpO1xuICAgIH1cblxuICAgIHRoaXMudG9wKC12YWx1ZSwgZm9yY2UpO1xuICB9O1xuXG4gIHRoaXMuc2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICh2YWx1ZSwgZm9yY2UpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAtdGhpcy5sZWZ0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5sZWZ0KC12YWx1ZSwgZm9yY2UpO1xuICB9O1xuXG4gIHRoaXMubGVmdCA9IGZ1bmN0aW9uICh2YWx1ZSwgZm9yY2UpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAtKGVsZW1lbnQuc2Nyb2xsTGVmdCArIG9mZnNldExlZnQpO1xuICAgIH1cblxuICAgIHZhciBkaWYgPSBlbGVtZW50LnNjcm9sbExlZnQgLSBwcmV2TGVmdCxcbiAgICAgICAgb2xkT2Zmc2V0ID0gb2Zmc2V0TGVmdDtcblxuICAgIGlmICgoZGlmID4gMiB8fCBkaWYgPCAtMikgJiYgIWZvcmNlKSB7XG4gICAgICAvL2lmIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIHRoZSBzY3JvbGxiYXIgKG9yIHNvbWV0aGluZyBlbHNlIHNjcm9sbHMgaXQsIGxpa2UgdGhlIG1vdXNlIHdoZWVsKSwgd2Ugc2hvdWxkIGtpbGwgYW55IHR3ZWVucyBvZiB0aGUgU2Nyb2xsUHJveHkuXG4gICAgICBwcmV2TGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgIGdzYXAua2lsbFR3ZWVuc09mKHRoaXMsIHtcbiAgICAgICAgbGVmdDogMSxcbiAgICAgICAgc2Nyb2xsTGVmdDogMVxuICAgICAgfSk7XG4gICAgICB0aGlzLmxlZnQoLXByZXZMZWZ0KTtcblxuICAgICAgaWYgKHZhcnMub25LaWxsKSB7XG4gICAgICAgIHZhcnMub25LaWxsKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IC12YWx1ZTsgLy9pbnZlcnQgYmVjYXVzZSBzY3JvbGxpbmcgd29ya3MgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvblxuXG4gICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgb2Zmc2V0TGVmdCA9IHZhbHVlIC0gMC41IHwgMDtcbiAgICAgIHZhbHVlID0gMDtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID4gbWF4TGVmdCkge1xuICAgICAgb2Zmc2V0TGVmdCA9IHZhbHVlIC0gbWF4TGVmdCB8IDA7XG4gICAgICB2YWx1ZSA9IG1heExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldExlZnQgPSAwO1xuICAgIH1cblxuICAgIGlmIChvZmZzZXRMZWZ0IHx8IG9sZE9mZnNldCkge1xuICAgICAgaWYgKCF0aGlzLl9za2lwKSB7XG4gICAgICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybVN0YXJ0ICsgLW9mZnNldExlZnQgKyBcInB4LFwiICsgLW9mZnNldFRvcCArIHRyYW5zZm9ybUVuZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9mZnNldExlZnQgKyBleHRyYVBhZFJpZ2h0ID49IDApIHtcbiAgICAgICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gb2Zmc2V0TGVmdCArIGV4dHJhUGFkUmlnaHQgKyBcInB4XCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gdmFsdWUgfCAwO1xuICAgIHByZXZMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0OyAvL2Rvbid0IG1lcmdlIHRoaXMgd2l0aCB0aGUgbGluZSBhYm92ZSBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgYWRqdXN0IHRoZSBzY3JvbGxMZWZ0IGFmdGVyIGl0J3Mgc2V0LCBzbyBpbiBvcmRlciB0byBiZSAxMDAlIGFjY3VyYXRlIGluIHRyYWNraW5nIGl0LCB3ZSBuZWVkIHRvIGFzayB0aGUgYnJvd3NlciB0byByZXBvcnQgaXQuXG4gIH07XG5cbiAgdGhpcy50b3AgPSBmdW5jdGlvbiAodmFsdWUsIGZvcmNlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gLShlbGVtZW50LnNjcm9sbFRvcCArIG9mZnNldFRvcCk7XG4gICAgfVxuXG4gICAgdmFyIGRpZiA9IGVsZW1lbnQuc2Nyb2xsVG9wIC0gcHJldlRvcCxcbiAgICAgICAgb2xkT2Zmc2V0ID0gb2Zmc2V0VG9wO1xuXG4gICAgaWYgKChkaWYgPiAyIHx8IGRpZiA8IC0yKSAmJiAhZm9yY2UpIHtcbiAgICAgIC8vaWYgdGhlIHVzZXIgaW50ZXJhY3RzIHdpdGggdGhlIHNjcm9sbGJhciAob3Igc29tZXRoaW5nIGVsc2Ugc2Nyb2xscyBpdCwgbGlrZSB0aGUgbW91c2Ugd2hlZWwpLCB3ZSBzaG91bGQga2lsbCBhbnkgdHdlZW5zIG9mIHRoZSBTY3JvbGxQcm94eS5cbiAgICAgIHByZXZUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgIGdzYXAua2lsbFR3ZWVuc09mKHRoaXMsIHtcbiAgICAgICAgdG9wOiAxLFxuICAgICAgICBzY3JvbGxUb3A6IDFcbiAgICAgIH0pO1xuICAgICAgdGhpcy50b3AoLXByZXZUb3ApO1xuXG4gICAgICBpZiAodmFycy5vbktpbGwpIHtcbiAgICAgICAgdmFycy5vbktpbGwoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhbHVlID0gLXZhbHVlOyAvL2ludmVydCBiZWNhdXNlIHNjcm9sbGluZyB3b3JrcyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uXG5cbiAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICBvZmZzZXRUb3AgPSB2YWx1ZSAtIDAuNSB8IDA7XG4gICAgICB2YWx1ZSA9IDA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+IG1heFRvcCkge1xuICAgICAgb2Zmc2V0VG9wID0gdmFsdWUgLSBtYXhUb3AgfCAwO1xuICAgICAgdmFsdWUgPSBtYXhUb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldFRvcCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldFRvcCB8fCBvbGRPZmZzZXQpIHtcbiAgICAgIGlmICghdGhpcy5fc2tpcCkge1xuICAgICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1TdGFydCArIC1vZmZzZXRMZWZ0ICsgXCJweCxcIiArIC1vZmZzZXRUb3AgKyB0cmFuc2Zvcm1FbmQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWxlbWVudC5zY3JvbGxUb3AgPSB2YWx1ZSB8IDA7XG4gICAgcHJldlRvcCA9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuICB9O1xuXG4gIHRoaXMubWF4U2Nyb2xsVG9wID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYXhUb3A7XG4gIH07XG5cbiAgdGhpcy5tYXhTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYXhMZWZ0O1xuICB9O1xuXG4gIHRoaXMuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBub2RlID0gY29udGVudC5maXJzdENoaWxkO1xuXG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICBub2RlID0gbmV4dE5vZGU7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQgPT09IGNvbnRlbnQucGFyZW50Tm9kZSkge1xuICAgICAgLy9pbiBjYXNlIGRpc2FibGUoKSBpcyBjYWxsZWQgd2hlbiBpdCdzIGFscmVhZHkgZGlzYWJsZWQuXG4gICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGNvbnRlbnQpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBub2RlID0gZWxlbWVudC5maXJzdENoaWxkO1xuXG4gICAgaWYgKG5vZGUgPT09IGNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgY29udGVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICB9XG5cbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgIHRoaXMuY2FsaWJyYXRlKCk7XG4gIH07XG5cbiAgdGhpcy5jYWxpYnJhdGUgPSBmdW5jdGlvbiAoZm9yY2UpIHtcbiAgICB2YXIgd2lkdGhNYXRjaGVzID0gZWxlbWVudC5jbGllbnRXaWR0aCA9PT0gZWxlbWVudFdpZHRoLFxuICAgICAgICBjcyxcbiAgICAgICAgeCxcbiAgICAgICAgeTtcbiAgICBwcmV2VG9wID0gZWxlbWVudC5zY3JvbGxUb3A7XG4gICAgcHJldkxlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG5cbiAgICBpZiAod2lkdGhNYXRjaGVzICYmIGVsZW1lbnQuY2xpZW50SGVpZ2h0ID09PSBlbGVtZW50SGVpZ2h0ICYmIGNvbnRlbnQub2Zmc2V0SGVpZ2h0ID09PSBjb250ZW50SGVpZ2h0ICYmIHNjcm9sbFdpZHRoID09PSBlbGVtZW50LnNjcm9sbFdpZHRoICYmIHNjcm9sbEhlaWdodCA9PT0gZWxlbWVudC5zY3JvbGxIZWlnaHQgJiYgIWZvcmNlKSB7XG4gICAgICByZXR1cm47IC8vbm8gbmVlZCB0byByZWNhbGN1bGF0ZSB0aGluZ3MgaWYgdGhlIHdpZHRoIGFuZCBoZWlnaHQgaGF2ZW4ndCBjaGFuZ2VkLlxuICAgIH1cblxuICAgIGlmIChvZmZzZXRUb3AgfHwgb2Zmc2V0TGVmdCkge1xuICAgICAgeCA9IHRoaXMubGVmdCgpO1xuICAgICAgeSA9IHRoaXMudG9wKCk7XG4gICAgICB0aGlzLmxlZnQoLWVsZW1lbnQuc2Nyb2xsTGVmdCk7XG4gICAgICB0aGlzLnRvcCgtZWxlbWVudC5zY3JvbGxUb3ApO1xuICAgIH1cblxuICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7IC8vZmlyc3QsIHdlIG5lZWQgdG8gcmVtb3ZlIGFueSB3aWR0aCBjb25zdHJhaW50cyB0byBzZWUgaG93IHRoZSBjb250ZW50IG5hdHVyYWxseSBmbG93cyBzbyB0aGF0IHdlIGNhbiBzZWUgaWYgaXQncyB3aWRlciB0aGFuIHRoZSBjb250YWluaW5nIGVsZW1lbnQuIElmIHNvLCB3ZSd2ZSBnb3QgdG8gcmVjb3JkIHRoZSBhbW91bnQgb2Ygb3ZlcmFnZSBzbyB0aGF0IHdlIGNhbiBhcHBseSB0aGF0IGFzIHBhZGRpbmcgaW4gb3JkZXIgZm9yIGJyb3dzZXJzIHRvIGNvcnJlY3RseSBoYW5kbGUgdGhpbmdzLiBUaGVuIHdlIHN3aXRjaCBiYWNrIHRvIGEgd2lkdGggb2YgMTAwJSAod2l0aG91dCB0aGF0LCBzb21lIGJyb3dzZXJzIGRvbid0IGZsb3cgdGhlIGNvbnRlbnQgY29ycmVjdGx5KVxuXG4gICAgaWYgKCF3aWR0aE1hdGNoZXMgfHwgZm9yY2UpIHtcbiAgICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBzdHlsZS53aWR0aCA9IFwiYXV0b1wiO1xuICAgICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCIwcHhcIjtcbiAgICAgIGV4dHJhUGFkUmlnaHQgPSBNYXRoLm1heCgwLCBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aCk7IC8vaWYgdGhlIGNvbnRlbnQgaXMgd2lkZXIgdGhhbiB0aGUgY29udGFpbmVyLCB3ZSBuZWVkIHRvIGFkZCB0aGUgcGFkZGluZ0xlZnQgYW5kIHBhZGRpbmdSaWdodCBpbiBvcmRlciBmb3IgdGhpbmdzIHRvIGJlaGF2ZSBjb3JyZWN0bHkuXG5cbiAgICAgIGlmIChleHRyYVBhZFJpZ2h0KSB7XG4gICAgICAgIGV4dHJhUGFkUmlnaHQgKz0gcGFyc2VGbG9hdChjcy5wYWRkaW5nTGVmdCkgKyAoX2FkZFBhZGRpbmdCUiA/IHBhcnNlRmxvYXQoY3MucGFkZGluZ1JpZ2h0KSA6IDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgIHN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgIHN0eWxlLm92ZXJmbG93ID0gXCJ2aXNpYmxlXCI7XG4gICAgc3R5bGUudmVydGljYWxBbGlnbiA9IFwidG9wXCI7XG4gICAgc3R5bGUuYm94U2l6aW5nID0gXCJjb250ZW50LWJveFwiO1xuICAgIHN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gZXh0cmFQYWRSaWdodCArIFwicHhcIjsgLy9zb21lIGJyb3dzZXJzIG5lZ2xlY3QgdG8gZmFjdG9yIGluIHRoZSBib3R0b20gcGFkZGluZyB3aGVuIGNhbGN1bGF0aW5nIHRoZSBzY3JvbGxIZWlnaHQsIHNvIHdlIG5lZWQgdG8gYWRkIHRoYXQgcGFkZGluZyB0byB0aGUgY29udGVudCB3aGVuIHRoYXQgaGFwcGVucy4gQWxsb3cgYSAycHggbWFyZ2luIGZvciBlcnJvclxuXG4gICAgaWYgKF9hZGRQYWRkaW5nQlIpIHtcbiAgICAgIHN0eWxlLnBhZGRpbmdCb3R0b20gPSBjcy5wYWRkaW5nQm90dG9tO1xuICAgIH1cblxuICAgIGVsZW1lbnRXaWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgZWxlbWVudEhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgIHNjcm9sbFdpZHRoID0gZWxlbWVudC5zY3JvbGxXaWR0aDtcbiAgICBzY3JvbGxIZWlnaHQgPSBlbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICBtYXhMZWZ0ID0gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnRXaWR0aDtcbiAgICBtYXhUb3AgPSBlbGVtZW50LnNjcm9sbEhlaWdodCAtIGVsZW1lbnRIZWlnaHQ7XG4gICAgY29udGVudEhlaWdodCA9IGNvbnRlbnQub2Zmc2V0SGVpZ2h0O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICBpZiAoeCB8fCB5KSB7XG4gICAgICB0aGlzLmxlZnQoeCk7XG4gICAgICB0aGlzLnRvcCh5KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgdGhpcy5fc2tpcCA9IGZhbHNlO1xuICB0aGlzLmVuYWJsZSgpO1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUocmVxdWlyZWQpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiBkb2N1bWVudC5ib2R5KSB7XG4gICAgdmFyIG5hdiA9IHdpbmRvdyAmJiB3aW5kb3cubmF2aWdhdG9yO1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IGRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX2JvZHkgPSBfZG9jLmJvZHk7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBfc3VwcG9ydHNQb2ludGVyID0gISF3aW5kb3cuUG9pbnRlckV2ZW50O1xuICAgIF9wbGFjZWhvbGRlckRpdiA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF9wbGFjZWhvbGRlckRpdi5zdHlsZS5jc3NUZXh0ID0gXCJ2aXNpYmlsaXR5OmhpZGRlbjtoZWlnaHQ6MXB4O3RvcDotMXB4O3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246cmVsYXRpdmU7Y2xlYXI6Ym90aDtjdXJzb3I6Z3JhYlwiO1xuICAgIF9kZWZhdWx0Q3Vyc29yID0gX3BsYWNlaG9sZGVyRGl2LnN0eWxlLmN1cnNvciA9PT0gXCJncmFiXCIgPyBcImdyYWJcIiA6IFwibW92ZVwiO1xuICAgIF9pc0FuZHJvaWQgPSBuYXYgJiYgbmF2LnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJhbmRyb2lkXCIpICE9PSAtMTsgLy9BbmRyb2lkIGhhbmRsZXMgdG91Y2ggZXZlbnRzIGluIGFuIG9kZCB3YXkgYW5kIGl0J3MgdmlydHVhbGx5IGltcG9zc2libGUgdG8gXCJmZWF0dXJlIHRlc3RcIiBzbyB3ZSByZXNvcnQgdG8gVUEgc25pZmZpbmdcblxuICAgIF9pc1RvdWNoRGV2aWNlID0gXCJvbnRvdWNoc3RhcnRcIiBpbiBfZG9jRWxlbWVudCAmJiBcIm9yaWVudGF0aW9uXCIgaW4gX3dpbiB8fCBuYXYgJiYgKG5hdi5NYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2Lm1zTWF4VG91Y2hQb2ludHMgPiAwKTtcblxuICAgIF9hZGRQYWRkaW5nQlIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvL3RoaXMgZnVuY3Rpb24gaXMgaW4gY2hhcmdlIG9mIGFuYWx5emluZyBicm93c2VyIGJlaGF2aW9yIHJlbGF0ZWQgdG8gcGFkZGluZy4gSXQgc2V0cyB0aGUgX2FkZFBhZGRpbmdCUiB0byB0cnVlIGlmIHRoZSBicm93c2VyIGRvZXNuJ3Qgbm9ybWFsbHkgZmFjdG9yIGluIHRoZSBib3R0b20gb3IgcmlnaHQgcGFkZGluZyBvbiB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIHNjcm9sbGluZyBhcmVhLCBhbmQgaXQgc2V0cyBfYWRkUGFkZGluZ0xlZnQgdG8gdHJ1ZSBpZiBpdCdzIGEgYnJvd3NlciB0aGF0IHJlcXVpcmVzIHRoZSBleHRyYSBvZmZzZXQgKG9mZnNldExlZnQpIHRvIGJlIGFkZGVkIHRvIHRoZSBwYWRkaW5nUmlnaHQgKGxpa2UgT3BlcmEpLlxuICAgICAgdmFyIGRpdiA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgICAgIGNoaWxkID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICAgICAgY2hpbGRTdHlsZSA9IGNoaWxkLnN0eWxlLFxuICAgICAgICAgIHBhcmVudCA9IF9ib2R5LFxuICAgICAgICAgIHZhbDtcblxuICAgICAgY2hpbGRTdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcbiAgICAgIGNoaWxkU3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICBkaXYuc3R5bGUuY3NzVGV4dCA9IGNoaWxkLmlubmVySFRNTCA9IFwid2lkdGg6OTBweDtoZWlnaHQ6NDBweDtwYWRkaW5nOjEwcHg7b3ZlcmZsb3c6YXV0bzt2aXNpYmlsaXR5OmhpZGRlblwiO1xuICAgICAgZGl2LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgdmFsID0gY2hpbGQub2Zmc2V0SGVpZ2h0ICsgMTggPiBkaXYuc2Nyb2xsSGVpZ2h0OyAvL2Rpdi5zY3JvbGxIZWlnaHQgc2hvdWxkIGJlIGNoaWxkLm9mZnNldEhlaWdodCArIDIwIGJlY2F1c2Ugb2YgdGhlIDEwcHggb2YgcGFkZGluZyBvbiBlYWNoIHNpZGUsIGJ1dCBzb21lIGJyb3dzZXJzIGlnbm9yZSBvbmUgc2lkZS4gV2UgYWxsb3cgYSAycHggbWFyZ2luIG9mIGVycm9yLlxuXG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSgpO1xuXG4gICAgX3RvdWNoRXZlbnRMb29rdXAgPSBmdW5jdGlvbiAodHlwZXMpIHtcbiAgICAgIC8vd2UgY3JlYXRlIGFuIG9iamVjdCB0aGF0IG1ha2VzIGl0IGVhc3kgdG8gdHJhbnNsYXRlIHRvdWNoIGV2ZW50IHR5cGVzIGludG8gdGhlaXIgXCJwb2ludGVyXCIgY291bnRlcnBhcnRzIGlmIHdlJ3JlIGluIGEgYnJvd3NlciB0aGF0IHVzZXMgdGhvc2UgaW5zdGVhZC4gTGlrZSBJRTEwIHVzZXMgXCJNU1BvaW50ZXJEb3duXCIgaW5zdGVhZCBvZiBcInRvdWNoc3RhcnRcIiwgZm9yIGV4YW1wbGUuXG4gICAgICB2YXIgc3RhbmRhcmQgPSB0eXBlcy5zcGxpdChcIixcIiksXG4gICAgICAgICAgY29udmVydGVkID0gKFwib25wb2ludGVyZG93blwiIGluIF90ZW1wRGl2ID8gXCJwb2ludGVyZG93bixwb2ludGVybW92ZSxwb2ludGVydXAscG9pbnRlcmNhbmNlbFwiIDogXCJvbm1zcG9pbnRlcmRvd25cIiBpbiBfdGVtcERpdiA/IFwiTVNQb2ludGVyRG93bixNU1BvaW50ZXJNb3ZlLE1TUG9pbnRlclVwLE1TUG9pbnRlckNhbmNlbFwiIDogdHlwZXMpLnNwbGl0KFwiLFwiKSxcbiAgICAgICAgICBvYmogPSB7fSxcbiAgICAgICAgICBpID0gNDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIG9ialtzdGFuZGFyZFtpXV0gPSBjb252ZXJ0ZWRbaV07XG4gICAgICAgIG9ialtjb252ZXJ0ZWRbaV1dID0gc3RhbmRhcmRbaV07XG4gICAgICB9IC8vdG8gYXZvaWQgcHJvYmxlbXMgaW4gaU9TIDksIHRlc3QgdG8gc2VlIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBcInBhc3NpdmVcIiBvcHRpb24gb24gYWRkRXZlbnRMaXN0ZW5lcigpLlxuXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIF9kb2NFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG51bGwsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJwYXNzaXZlXCIsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIF9zdXBwb3J0c1Bhc3NpdmUgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9KFwidG91Y2hzdGFydCx0b3VjaG1vdmUsdG91Y2hlbmQsdG91Y2hjYW5jZWxcIik7XG5cbiAgICBfYWRkTGlzdGVuZXIoX2RvYywgXCJ0b3VjaGNhbmNlbFwiLCBfZW1wdHlGdW5jKTsgLy9zb21lIG9sZGVyIEFuZHJvaWQgZGV2aWNlcyBpbnRlcm1pdHRlbnRseSBzdG9wIGRpc3BhdGNoaW5nIFwidG91Y2htb3ZlXCIgZXZlbnRzIGlmIHdlIGRvbid0IGxpc3RlbiBmb3IgXCJ0b3VjaGNhbmNlbFwiIG9uIHRoZSBkb2N1bWVudC4gVmVyeSBzdHJhbmdlIGluZGVlZC5cblxuXG4gICAgX2FkZExpc3RlbmVyKF93aW4sIFwidG91Y2htb3ZlXCIsIF9lbXB0eUZ1bmMpOyAvL3dvcmtzIGFyb3VuZCBTYWZhcmkgYnVncyB0aGF0IHN0aWxsIGFsbG93IHRoZSBwYWdlIHRvIHNjcm9sbCBldmVuIHdoZW4gd2UgcHJldmVudERlZmF1bHQoKSBvbiB0aGUgdG91Y2htb3ZlIGV2ZW50LlxuXG5cbiAgICBfYm9keSAmJiBfYm9keS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBfZW1wdHlGdW5jKTsgLy93b3JrcyBhcm91bmQgU2FmYXJpIGJ1ZzogaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMTQ1MC1kcmFnZ2FibGUtaW4taWZyYW1lLW9uLW1vYmlsZS1pcy1idWdneS9cblxuICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcImNvbnRleHRtZW51XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIHAgaW4gX2xvb2t1cCkge1xuICAgICAgICBpZiAoX2xvb2t1cFtwXS5pc1ByZXNzZWQpIHtcbiAgICAgICAgICBfbG9va3VwW3BdLmVuZERyYWcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZ3NhcCA9IF9jb3JlSW5pdHRlZCA9IF9nZXRHU0FQKCk7XG4gIH1cblxuICBpZiAoZ3NhcCkge1xuICAgIEluZXJ0aWFQbHVnaW4gPSBnc2FwLnBsdWdpbnMuaW5lcnRpYTtcbiAgICBfY2hlY2tQcmVmaXggPSBnc2FwLnV0aWxzLmNoZWNrUHJlZml4O1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF9jaGVja1ByZWZpeChfdHJhbnNmb3JtT3JpZ2luUHJvcCk7XG4gICAgX3RvQXJyYXkgPSBnc2FwLnV0aWxzLnRvQXJyYXk7XG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1ByZWZpeChcInBlcnNwZWN0aXZlXCIpO1xuICB9IGVsc2UgaWYgKHJlcXVpcmVkKSB7XG4gICAgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oRHJhZ2dhYmxlKVwiKTtcbiAgfVxufTtcblxudmFyIEV2ZW50RGlzcGF0Y2hlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV2ZW50RGlzcGF0Y2hlcih0YXJnZXQpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldCB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGxpc3QgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV0gfHwgKHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcblxuICAgIGlmICghfmxpc3QuaW5kZXhPZihjYWxsYmFjaykpIHtcbiAgICAgIGxpc3QucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBsaXN0ID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gbGlzdCAmJiBsaXN0LmluZGV4T2YoY2FsbGJhY2spIHx8IC0xO1xuICAgIGkgPiAtMSAmJiBsaXN0LnNwbGljZShpLCAxKTtcbiAgfTtcblxuICBfcHJvdG8uZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQodHlwZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgcmVzdWx0O1xuICAgICh0aGlzLl9saXN0ZW5lcnNbdHlwZV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChfdGhpcywge1xuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICB0YXJnZXQ6IF90aGlzLnRhcmdldFxuICAgICAgfSkgPT09IGZhbHNlICYmIChyZXN1bHQgPSBmYWxzZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDsgLy9pZiBhbnkgb2YgdGhlIGNhbGxiYWNrcyByZXR1cm4gZmFsc2UsIHBhc3MgdGhhdCBhbG9uZy5cbiAgfTtcblxuICByZXR1cm4gRXZlbnREaXNwYXRjaGVyO1xufSgpO1xuXG5leHBvcnQgdmFyIERyYWdnYWJsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0V2ZW50RGlzcGF0Y2hlcikge1xuICBfaW5oZXJpdHNMb29zZShEcmFnZ2FibGUsIF9FdmVudERpc3BhdGNoZXIpO1xuXG4gIGZ1bmN0aW9uIERyYWdnYWJsZSh0YXJnZXQsIHZhcnMpIHtcbiAgICB2YXIgX3RoaXMyO1xuXG4gICAgX3RoaXMyID0gX0V2ZW50RGlzcGF0Y2hlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgX2NvcmVJbml0dGVkIHx8IF9pbml0Q29yZSgxKTtcbiAgICB0YXJnZXQgPSBfdG9BcnJheSh0YXJnZXQpWzBdOyAvL2luIGNhc2UgdGhlIHRhcmdldCBpcyBhIHNlbGVjdG9yIG9iamVjdCBvciBzZWxlY3RvciB0ZXh0XG5cbiAgICBpZiAoIUluZXJ0aWFQbHVnaW4pIHtcbiAgICAgIEluZXJ0aWFQbHVnaW4gPSBnc2FwLnBsdWdpbnMuaW5lcnRpYTtcbiAgICB9XG5cbiAgICBfdGhpczIudmFycyA9IHZhcnMgPSBfY29weSh2YXJzIHx8IHt9KTtcbiAgICBfdGhpczIudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIF90aGlzMi54ID0gX3RoaXMyLnkgPSBfdGhpczIucm90YXRpb24gPSAwO1xuICAgIF90aGlzMi5kcmFnUmVzaXN0YW5jZSA9IHBhcnNlRmxvYXQodmFycy5kcmFnUmVzaXN0YW5jZSkgfHwgMDtcbiAgICBfdGhpczIuZWRnZVJlc2lzdGFuY2UgPSBpc05hTih2YXJzLmVkZ2VSZXNpc3RhbmNlKSA/IDEgOiBwYXJzZUZsb2F0KHZhcnMuZWRnZVJlc2lzdGFuY2UpIHx8IDA7XG4gICAgX3RoaXMyLmxvY2tBeGlzID0gdmFycy5sb2NrQXhpcztcbiAgICBfdGhpczIuYXV0b1Njcm9sbCA9IHZhcnMuYXV0b1Njcm9sbCB8fCAwO1xuICAgIF90aGlzMi5sb2NrZWRBeGlzID0gbnVsbDtcbiAgICBfdGhpczIuYWxsb3dFdmVudERlZmF1bHQgPSAhIXZhcnMuYWxsb3dFdmVudERlZmF1bHQ7XG4gICAgZ3NhcC5nZXRQcm9wZXJ0eSh0YXJnZXQsIFwieFwiKTsgLy8gdG8gZW5zdXJlIHRoYXQgdHJhbnNmb3JtcyBhcmUgaW5zdGFudGlhdGVkLlxuXG4gICAgdmFyIHR5cGUgPSAodmFycy50eXBlIHx8IFwieCx5XCIpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIHh5TW9kZSA9IH50eXBlLmluZGV4T2YoXCJ4XCIpIHx8IH50eXBlLmluZGV4T2YoXCJ5XCIpLFxuICAgICAgICByb3RhdGlvbk1vZGUgPSB0eXBlLmluZGV4T2YoXCJyb3RhdGlvblwiKSAhPT0gLTEsXG4gICAgICAgIHhQcm9wID0gcm90YXRpb25Nb2RlID8gXCJyb3RhdGlvblwiIDogeHlNb2RlID8gXCJ4XCIgOiBcImxlZnRcIixcbiAgICAgICAgeVByb3AgPSB4eU1vZGUgPyBcInlcIiA6IFwidG9wXCIsXG4gICAgICAgIGFsbG93WCA9ICEhKH50eXBlLmluZGV4T2YoXCJ4XCIpIHx8IH50eXBlLmluZGV4T2YoXCJsZWZ0XCIpIHx8IHR5cGUgPT09IFwic2Nyb2xsXCIpLFxuICAgICAgICBhbGxvd1kgPSAhISh+dHlwZS5pbmRleE9mKFwieVwiKSB8fCB+dHlwZS5pbmRleE9mKFwidG9wXCIpIHx8IHR5cGUgPT09IFwic2Nyb2xsXCIpLFxuICAgICAgICBtaW5pbXVtTW92ZW1lbnQgPSB2YXJzLm1pbmltdW1Nb3ZlbWVudCB8fCAyLFxuICAgICAgICBzZWxmID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLFxuICAgICAgICB0cmlnZ2VycyA9IF90b0FycmF5KHZhcnMudHJpZ2dlciB8fCB2YXJzLmhhbmRsZSB8fCB0YXJnZXQpLFxuICAgICAgICBraWxsUHJvcHMgPSB7fSxcbiAgICAgICAgZHJhZ0VuZFRpbWUgPSAwLFxuICAgICAgICBjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSBmYWxzZSxcbiAgICAgICAgYXV0b1Njcm9sbE1hcmdpblRvcCA9IHZhcnMuYXV0b1Njcm9sbE1hcmdpblRvcCB8fCA0MCxcbiAgICAgICAgYXV0b1Njcm9sbE1hcmdpblJpZ2h0ID0gdmFycy5hdXRvU2Nyb2xsTWFyZ2luUmlnaHQgfHwgNDAsXG4gICAgICAgIGF1dG9TY3JvbGxNYXJnaW5Cb3R0b20gPSB2YXJzLmF1dG9TY3JvbGxNYXJnaW5Cb3R0b20gfHwgNDAsXG4gICAgICAgIGF1dG9TY3JvbGxNYXJnaW5MZWZ0ID0gdmFycy5hdXRvU2Nyb2xsTWFyZ2luTGVmdCB8fCA0MCxcbiAgICAgICAgaXNDbGlja2FibGUgPSB2YXJzLmNsaWNrYWJsZVRlc3QgfHwgX2lzQ2xpY2thYmxlLFxuICAgICAgICBjbGlja1RpbWUgPSAwLFxuICAgICAgICBnc0NhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgICBpc0ZpeGVkID0gX2lzRml4ZWQodGFyZ2V0KSxcbiAgICAgICAgZ2V0UHJvcEFzTnVtID0gZnVuY3Rpb24gZ2V0UHJvcEFzTnVtKHByb3BlcnR5LCB1bml0KSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChnc0NhY2hlLmdldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0KSk7XG4gICAgfSxcbiAgICAgICAgb3duZXJEb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBfZG9jLFxuICAgICAgICBlbmFibGVkLFxuICAgICAgICBzY3JvbGxQcm94eSxcbiAgICAgICAgc3RhcnRQb2ludGVyWCxcbiAgICAgICAgc3RhcnRQb2ludGVyWSxcbiAgICAgICAgc3RhcnRFbGVtZW50WCxcbiAgICAgICAgc3RhcnRFbGVtZW50WSxcbiAgICAgICAgaGFzQm91bmRzLFxuICAgICAgICBoYXNEcmFnQ2FsbGJhY2ssXG4gICAgICAgIGhhc01vdmVDYWxsYmFjayxcbiAgICAgICAgbWF4WCxcbiAgICAgICAgbWluWCxcbiAgICAgICAgbWF4WSxcbiAgICAgICAgbWluWSxcbiAgICAgICAgdG91Y2gsXG4gICAgICAgIHRvdWNoSUQsXG4gICAgICAgIHJvdGF0aW9uT3JpZ2luLFxuICAgICAgICBkaXJ0eSxcbiAgICAgICAgb2xkLFxuICAgICAgICBzbmFwWCxcbiAgICAgICAgc25hcFksXG4gICAgICAgIHNuYXBYWSxcbiAgICAgICAgaXNDbGlja2luZyxcbiAgICAgICAgdG91Y2hFdmVudFRhcmdldCxcbiAgICAgICAgbWF0cml4LFxuICAgICAgICBpbnRlcnJ1cHRlZCxcbiAgICAgICAgYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyxcbiAgICAgICAgdG91Y2hEcmFnQXhpcyxcbiAgICAgICAgaXNEaXNwYXRjaGluZyxcbiAgICAgICAgY2xpY2tEaXNwYXRjaCxcbiAgICAgICAgdHJ1c3RlZENsaWNrRGlzcGF0Y2gsXG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQsXG4gICAgICAgIGlubmVyTWF0cml4LFxuICAgICAgICBvbkNvbnRleHRNZW51ID0gZnVuY3Rpb24gb25Db250ZXh0TWVudShlKSB7XG4gICAgICAvL3VzZWQgdG8gcHJldmVudCBsb25nLXRvdWNoIGZyb20gdHJpZ2dlcmluZyBhIGNvbnRleHQgbWVudS5cbiAgICAgIC8vIChzZWxmLmlzUHJlc3NlZCAmJiBlLndoaWNoIDwgMikgJiYgc2VsZi5lbmREcmFnKCkgLy8gcHJldmlvdXNseSBlbmRlZCBkcmFnIHdoZW4gY29udGV4dCBtZW51IHdhcyB0cmlnZ2VyZWQsIGJ1dCBpbnN0ZWFkIHdlIHNob3VsZCBqdXN0IHN0b3AgcHJvcGFnYXRpb24gYW5kIHByZXZlbnQgdGhlIGRlZmF1bHQgZXZlbnQgYmVoYXZpb3IuXG4gICAgICBfcHJldmVudERlZmF1bHQoZSk7XG5cbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICAgICAgLy90aGlzIG1ldGhvZCBnZXRzIGNhbGxlZCBvbiBldmVyeSB0aWNrIG9mIFR3ZWVuTGl0ZS50aWNrZXIgd2hpY2ggYWxsb3dzIHVzIHRvIHN5bmNocm9uaXplIHRoZSByZW5kZXJzIHRvIHRoZSBjb3JlIGVuZ2luZSAod2hpY2ggaXMgdHlwaWNhbGx5IHN5bmNocm9uaXplZCB3aXRoIHRoZSBkaXNwbGF5IHJlZnJlc2ggdmlhIHJlcXVlc3RBbmltYXRpb25GcmFtZSkuIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIC0gaXQncyBiZXR0ZXIgdGhhbiBhcHBseWluZyB0aGUgdmFsdWVzIGluc2lkZSB0aGUgXCJtb3VzZW1vdmVcIiBvciBcInRvdWNobW92ZVwiIGV2ZW50IGhhbmRsZXIgd2hpY2ggbWF5IGdldCBjYWxsZWQgbWFueSB0aW1lcyBpbmJldHdlZW4gcmVmcmVzaGVzLlxuICAgIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihzdXBwcmVzc0V2ZW50cykge1xuICAgICAgaWYgKHNlbGYuYXV0b1Njcm9sbCAmJiBzZWxmLmlzRHJhZ2dpbmcgJiYgKGNoZWNrQXV0b1Njcm9sbEJvdW5kcyB8fCBkaXJ0eSkpIHtcbiAgICAgICAgdmFyIGUgPSB0YXJnZXQsXG4gICAgICAgICAgICBhdXRvU2Nyb2xsRmFjdG9yID0gc2VsZi5hdXRvU2Nyb2xsICogMTUsXG4gICAgICAgICAgICAvL211bHRpcGx5aW5nIGJ5IDE1IGp1c3QgZ2l2ZXMgdXMgYSBiZXR0ZXIgXCJmZWVsXCIgc3BlZWQtd2lzZS5cbiAgICAgICAgcGFyZW50LFxuICAgICAgICAgICAgaXNSb290LFxuICAgICAgICAgICAgcmVjdCxcbiAgICAgICAgICAgIHBvaW50ZXJYLFxuICAgICAgICAgICAgcG9pbnRlclksXG4gICAgICAgICAgICBjaGFuZ2VYLFxuICAgICAgICAgICAgY2hhbmdlWSxcbiAgICAgICAgICAgIGdhcDtcbiAgICAgICAgY2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gZmFsc2U7XG4gICAgICAgIF93aW5kb3dQcm94eS5zY3JvbGxUb3AgPSBfd2luLnBhZ2VZT2Zmc2V0ICE9IG51bGwgPyBfd2luLnBhZ2VZT2Zmc2V0IDogb3duZXJEb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCAhPSBudWxsID8gb3duZXJEb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IG93bmVyRG9jLmJvZHkuc2Nyb2xsVG9wO1xuICAgICAgICBfd2luZG93UHJveHkuc2Nyb2xsTGVmdCA9IF93aW4ucGFnZVhPZmZzZXQgIT0gbnVsbCA/IF93aW4ucGFnZVhPZmZzZXQgOiBvd25lckRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCAhPSBudWxsID8gb3duZXJEb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgOiBvd25lckRvYy5ib2R5LnNjcm9sbExlZnQ7XG4gICAgICAgIHBvaW50ZXJYID0gc2VsZi5wb2ludGVyWCAtIF93aW5kb3dQcm94eS5zY3JvbGxMZWZ0O1xuICAgICAgICBwb2ludGVyWSA9IHNlbGYucG9pbnRlclkgLSBfd2luZG93UHJveHkuc2Nyb2xsVG9wO1xuXG4gICAgICAgIHdoaWxlIChlICYmICFpc1Jvb3QpIHtcbiAgICAgICAgICAvL3dhbGsgdXAgdGhlIGNoYWluIGFuZCBzZW5zZSB3aGVyZXZlciB0aGUgcG9pbnRlciBpcyB3aXRoaW4gNDBweCBvZiBhbiBlZGdlIHRoYXQncyBzY3JvbGxhYmxlLlxuICAgICAgICAgIGlzUm9vdCA9IF9pc1Jvb3QoZS5wYXJlbnROb2RlKTtcbiAgICAgICAgICBwYXJlbnQgPSBpc1Jvb3QgPyBfd2luZG93UHJveHkgOiBlLnBhcmVudE5vZGU7XG4gICAgICAgICAgcmVjdCA9IGlzUm9vdCA/IHtcbiAgICAgICAgICAgIGJvdHRvbTogTWF0aC5tYXgoX2RvY0VsZW1lbnQuY2xpZW50SGVpZ2h0LCBfd2luLmlubmVySGVpZ2h0IHx8IDApLFxuICAgICAgICAgICAgcmlnaHQ6IE1hdGgubWF4KF9kb2NFbGVtZW50LmNsaWVudFdpZHRoLCBfd2luLmlubmVyV2lkdGggfHwgMCksXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiAwXG4gICAgICAgICAgfSA6IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBjaGFuZ2VYID0gY2hhbmdlWSA9IDA7XG5cbiAgICAgICAgICBpZiAoYWxsb3dZKSB7XG4gICAgICAgICAgICBnYXAgPSBwYXJlbnQuX2dzTWF4U2Nyb2xsWSAtIHBhcmVudC5zY3JvbGxUb3A7XG5cbiAgICAgICAgICAgIGlmIChnYXAgPCAwKSB7XG4gICAgICAgICAgICAgIGNoYW5nZVkgPSBnYXA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvaW50ZXJZID4gcmVjdC5ib3R0b20gLSBhdXRvU2Nyb2xsTWFyZ2luQm90dG9tICYmIGdhcCkge1xuICAgICAgICAgICAgICBjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSB0cnVlO1xuICAgICAgICAgICAgICBjaGFuZ2VZID0gTWF0aC5taW4oZ2FwLCBhdXRvU2Nyb2xsRmFjdG9yICogKDEgLSBNYXRoLm1heCgwLCByZWN0LmJvdHRvbSAtIHBvaW50ZXJZKSAvIGF1dG9TY3JvbGxNYXJnaW5Cb3R0b20pIHwgMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvaW50ZXJZIDwgcmVjdC50b3AgKyBhdXRvU2Nyb2xsTWFyZ2luVG9wICYmIHBhcmVudC5zY3JvbGxUb3ApIHtcbiAgICAgICAgICAgICAgY2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlWSA9IC1NYXRoLm1pbihwYXJlbnQuc2Nyb2xsVG9wLCBhdXRvU2Nyb2xsRmFjdG9yICogKDEgLSBNYXRoLm1heCgwLCBwb2ludGVyWSAtIHJlY3QudG9wKSAvIGF1dG9TY3JvbGxNYXJnaW5Ub3ApIHwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaGFuZ2VZKSB7XG4gICAgICAgICAgICAgIHBhcmVudC5zY3JvbGxUb3AgKz0gY2hhbmdlWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYWxsb3dYKSB7XG4gICAgICAgICAgICBnYXAgPSBwYXJlbnQuX2dzTWF4U2Nyb2xsWCAtIHBhcmVudC5zY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgICBpZiAoZ2FwIDwgMCkge1xuICAgICAgICAgICAgICBjaGFuZ2VYID0gZ2FwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyWCA+IHJlY3QucmlnaHQgLSBhdXRvU2Nyb2xsTWFyZ2luUmlnaHQgJiYgZ2FwKSB7XG4gICAgICAgICAgICAgIGNoZWNrQXV0b1Njcm9sbEJvdW5kcyA9IHRydWU7XG4gICAgICAgICAgICAgIGNoYW5nZVggPSBNYXRoLm1pbihnYXAsIGF1dG9TY3JvbGxGYWN0b3IgKiAoMSAtIE1hdGgubWF4KDAsIHJlY3QucmlnaHQgLSBwb2ludGVyWCkgLyBhdXRvU2Nyb2xsTWFyZ2luUmlnaHQpIHwgMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvaW50ZXJYIDwgcmVjdC5sZWZ0ICsgYXV0b1Njcm9sbE1hcmdpbkxlZnQgJiYgcGFyZW50LnNjcm9sbExlZnQpIHtcbiAgICAgICAgICAgICAgY2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlWCA9IC1NYXRoLm1pbihwYXJlbnQuc2Nyb2xsTGVmdCwgYXV0b1Njcm9sbEZhY3RvciAqICgxIC0gTWF0aC5tYXgoMCwgcG9pbnRlclggLSByZWN0LmxlZnQpIC8gYXV0b1Njcm9sbE1hcmdpbkxlZnQpIHwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaGFuZ2VYKSB7XG4gICAgICAgICAgICAgIHBhcmVudC5zY3JvbGxMZWZ0ICs9IGNoYW5nZVg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzUm9vdCAmJiAoY2hhbmdlWCB8fCBjaGFuZ2VZKSkge1xuICAgICAgICAgICAgX3dpbi5zY3JvbGxUbyhwYXJlbnQuc2Nyb2xsTGVmdCwgcGFyZW50LnNjcm9sbFRvcCk7XG5cbiAgICAgICAgICAgIHNldFBvaW50ZXJQb3NpdGlvbihzZWxmLnBvaW50ZXJYICsgY2hhbmdlWCwgc2VsZi5wb2ludGVyWSArIGNoYW5nZVkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGUgPSBwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgIHZhciB4ID0gc2VsZi54LFxuICAgICAgICAgICAgeSA9IHNlbGYueTtcblxuICAgICAgICBpZiAocm90YXRpb25Nb2RlKSB7XG4gICAgICAgICAgc2VsZi5kZWx0YVggPSB4IC0gcGFyc2VGbG9hdChnc0NhY2hlLnJvdGF0aW9uKTtcbiAgICAgICAgICBzZWxmLnJvdGF0aW9uID0geDtcbiAgICAgICAgICBnc0NhY2hlLnJvdGF0aW9uID0geCArIFwiZGVnXCI7XG4gICAgICAgICAgZ3NDYWNoZS5yZW5kZXJUcmFuc2Zvcm0oMSwgZ3NDYWNoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNjcm9sbFByb3h5KSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dZKSB7XG4gICAgICAgICAgICAgIHNlbGYuZGVsdGFZID0geSAtIHNjcm9sbFByb3h5LnRvcCgpO1xuICAgICAgICAgICAgICBzY3JvbGxQcm94eS50b3AoeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbGxvd1gpIHtcbiAgICAgICAgICAgICAgc2VsZi5kZWx0YVggPSB4IC0gc2Nyb2xsUHJveHkubGVmdCgpO1xuICAgICAgICAgICAgICBzY3JvbGxQcm94eS5sZWZ0KHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoeHlNb2RlKSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dZKSB7XG4gICAgICAgICAgICAgIHNlbGYuZGVsdGFZID0geSAtIHBhcnNlRmxvYXQoZ3NDYWNoZS55KTtcbiAgICAgICAgICAgICAgZ3NDYWNoZS55ID0geSArIFwicHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFsbG93WCkge1xuICAgICAgICAgICAgICBzZWxmLmRlbHRhWCA9IHggLSBwYXJzZUZsb2F0KGdzQ2FjaGUueCk7XG4gICAgICAgICAgICAgIGdzQ2FjaGUueCA9IHggKyBcInB4XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdzQ2FjaGUucmVuZGVyVHJhbnNmb3JtKDEsIGdzQ2FjaGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dZKSB7XG4gICAgICAgICAgICAgIHNlbGYuZGVsdGFZID0geSAtIHBhcnNlRmxvYXQodGFyZ2V0LnN0eWxlLnRvcCB8fCAwKTtcbiAgICAgICAgICAgICAgdGFyZ2V0LnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbGxvd1gpIHtcbiAgICAgICAgICAgICAgc2VsZi5kZWx0YVggPSB4IC0gcGFyc2VGbG9hdCh0YXJnZXQuc3R5bGUubGVmdCB8fCAwKTtcbiAgICAgICAgICAgICAgdGFyZ2V0LnN0eWxlLmxlZnQgPSB4ICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNEcmFnQ2FsbGJhY2sgJiYgIXN1cHByZXNzRXZlbnRzICYmICFpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7IC8vaW4gY2FzZSBvbkRyYWcgaGFzIGFuIHVwZGF0ZSgpIGNhbGwgKGF2b2lkIGVuZGxlc3MgbG9vcClcblxuICAgICAgICAgIGlmIChfZGlzcGF0Y2hFdmVudChzZWxmLCBcImRyYWdcIiwgXCJvbkRyYWdcIikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dYKSB7XG4gICAgICAgICAgICAgIHNlbGYueCAtPSBzZWxmLmRlbHRhWDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFsbG93WSkge1xuICAgICAgICAgICAgICBzZWxmLnkgLT0gc2VsZi5kZWx0YVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlcih0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICB9LFxuICAgICAgICAvL2NvcGllcyB0aGUgeC95IGZyb20gdGhlIGVsZW1lbnQgKHdoZXRoZXIgdGhhdCBiZSB0cmFuc2Zvcm1zLCB0b3AvbGVmdCwgb3IgU2Nyb2xsUHJveHkncyB0b3AvbGVmdCkgdG8gdGhlIERyYWdnYWJsZSdzIHggYW5kIHkgKGFuZCByb3RhdGlvbiBpZiBuZWNlc3NhcnkpIHByb3BlcnRpZXMgc28gdGhhdCB0aGV5IHJlZmxlY3QgcmVhbGl0eSBhbmQgaXQgYWxzbyAob3B0aW9uYWxseSkgYXBwbGllcyBhbnkgc25hcHBpbmcgbmVjZXNzYXJ5LiBUaGlzIGlzIHVzZWQgYnkgdGhlIEluZXJ0aWFQbHVnaW4gdHdlZW4gaW4gYW4gb25VcGRhdGUgdG8gZW5zdXJlIHRoaW5ncyBhcmUgc3luY2VkIGFuZCBzbmFwcGVkLlxuICAgIHN5bmNYWSA9IGZ1bmN0aW9uIHN5bmNYWShza2lwT25VcGRhdGUsIHNraXBTbmFwKSB7XG4gICAgICB2YXIgeCA9IHNlbGYueCxcbiAgICAgICAgICB5ID0gc2VsZi55LFxuICAgICAgICAgIHNuYXBwZWRWYWx1ZSxcbiAgICAgICAgICBjcztcblxuICAgICAgaWYgKCF0YXJnZXQuX2dzYXApIHtcbiAgICAgICAgLy9qdXN0IGluIGNhc2UgdGhlIF9nc2FwIGNhY2hlIGdvdCB3aXBlZCwgbGlrZSBpZiB0aGUgdXNlciBjYWxsZWQgY2xlYXJQcm9wcyBvbiB0aGUgdHJhbnNmb3JtIG9yIHNvbWV0aGluZyAodmVyeSByYXJlKS5cbiAgICAgICAgZ3NDYWNoZSA9IGdzYXAuY29yZS5nZXRDYWNoZSh0YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBnc0NhY2hlLnVuY2FjaGUgJiYgZ3NhcC5nZXRQcm9wZXJ0eSh0YXJnZXQsIFwieFwiKTsgLy8gdHJpZ2dlciBhIHJlLWNhY2hlXG5cbiAgICAgIGlmICh4eU1vZGUpIHtcbiAgICAgICAgc2VsZi54ID0gcGFyc2VGbG9hdChnc0NhY2hlLngpO1xuICAgICAgICBzZWxmLnkgPSBwYXJzZUZsb2F0KGdzQ2FjaGUueSk7XG4gICAgICB9IGVsc2UgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICBzZWxmLnggPSBzZWxmLnJvdGF0aW9uID0gcGFyc2VGbG9hdChnc0NhY2hlLnJvdGF0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsUHJveHkpIHtcbiAgICAgICAgc2VsZi55ID0gc2Nyb2xsUHJveHkudG9wKCk7XG4gICAgICAgIHNlbGYueCA9IHNjcm9sbFByb3h5LmxlZnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYueSA9IHBhcnNlRmxvYXQodGFyZ2V0LnN0eWxlLnRvcCB8fCAoY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpKSAmJiBjcy50b3ApIHx8IDA7XG4gICAgICAgIHNlbGYueCA9IHBhcnNlRmxvYXQodGFyZ2V0LnN0eWxlLmxlZnQgfHwgKGNzIHx8IHt9KS5sZWZ0KSB8fCAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHNuYXBYIHx8IHNuYXBZIHx8IHNuYXBYWSkgJiYgIXNraXBTbmFwICYmIChzZWxmLmlzRHJhZ2dpbmcgfHwgc2VsZi5pc1Rocm93aW5nKSkge1xuICAgICAgICBpZiAoc25hcFhZKSB7XG4gICAgICAgICAgX3RlbXAxLnggPSBzZWxmLng7XG4gICAgICAgICAgX3RlbXAxLnkgPSBzZWxmLnk7XG4gICAgICAgICAgc25hcHBlZFZhbHVlID0gc25hcFhZKF90ZW1wMSk7XG5cbiAgICAgICAgICBpZiAoc25hcHBlZFZhbHVlLnggIT09IHNlbGYueCkge1xuICAgICAgICAgICAgc2VsZi54ID0gc25hcHBlZFZhbHVlLng7XG4gICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNuYXBwZWRWYWx1ZS55ICE9PSBzZWxmLnkpIHtcbiAgICAgICAgICAgIHNlbGYueSA9IHNuYXBwZWRWYWx1ZS55O1xuICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzbmFwWCkge1xuICAgICAgICAgIHNuYXBwZWRWYWx1ZSA9IHNuYXBYKHNlbGYueCk7XG5cbiAgICAgICAgICBpZiAoc25hcHBlZFZhbHVlICE9PSBzZWxmLngpIHtcbiAgICAgICAgICAgIHNlbGYueCA9IHNuYXBwZWRWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgICAgICBzZWxmLnJvdGF0aW9uID0gc25hcHBlZFZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNuYXBZKSB7XG4gICAgICAgICAgc25hcHBlZFZhbHVlID0gc25hcFkoc2VsZi55KTtcblxuICAgICAgICAgIGlmIChzbmFwcGVkVmFsdWUgIT09IHNlbGYueSkge1xuICAgICAgICAgICAgc2VsZi55ID0gc25hcHBlZFZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkaXJ0eSAmJiByZW5kZXIodHJ1ZSk7XG5cbiAgICAgIGlmICghc2tpcE9uVXBkYXRlKSB7XG4gICAgICAgIHNlbGYuZGVsdGFYID0gc2VsZi54IC0geDtcbiAgICAgICAgc2VsZi5kZWx0YVkgPSBzZWxmLnkgLSB5O1xuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwidGhyb3d1cGRhdGVcIiwgXCJvblRocm93VXBkYXRlXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgICAgIGJ1aWxkU25hcEZ1bmMgPSBmdW5jdGlvbiBidWlsZFNuYXBGdW5jKHNuYXAsIG1pbiwgbWF4LCBmYWN0b3IpIHtcbiAgICAgIGlmIChtaW4gPT0gbnVsbCkge1xuICAgICAgICBtaW4gPSAtX2JpZ051bTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICAgIG1heCA9IF9iaWdOdW07XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihzbmFwKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICB2YXIgZWRnZVRvbGVyYW5jZSA9ICFzZWxmLmlzUHJlc3NlZCA/IDEgOiAxIC0gc2VsZi5lZGdlUmVzaXN0YW5jZTsgLy9pZiB3ZSdyZSB0d2VlbmluZywgZGlzYWJsZSB0aGUgZWRnZVRvbGVyYW5jZSBiZWNhdXNlIGl0J3MgYWxyZWFkeSBmYWN0b3JlZCBpbnRvIHRoZSB0d2VlbmluZyB2YWx1ZXMgKHdlIGRvbid0IHdhbnQgdG8gYXBwbHkgaXQgbXVsdGlwbGUgdGltZXMpXG5cbiAgICAgICAgICByZXR1cm4gc25hcC5jYWxsKHNlbGYsIG4gPiBtYXggPyBtYXggKyAobiAtIG1heCkgKiBlZGdlVG9sZXJhbmNlIDogbiA8IG1pbiA/IG1pbiArIChuIC0gbWluKSAqIGVkZ2VUb2xlcmFuY2UgOiBuKSAqIGZhY3RvcjtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc0FycmF5KHNuYXApKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHZhciBpID0gc25hcC5sZW5ndGgsXG4gICAgICAgICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICAgICAgICBhYnNEaWYgPSBfYmlnTnVtLFxuICAgICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICAgIGRpZjtcblxuICAgICAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICAgICAgdmFsID0gc25hcFtpXTtcbiAgICAgICAgICAgIGRpZiA9IHZhbCAtIG47XG5cbiAgICAgICAgICAgIGlmIChkaWYgPCAwKSB7XG4gICAgICAgICAgICAgIGRpZiA9IC1kaWY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaWYgPCBhYnNEaWYgJiYgdmFsID49IG1pbiAmJiB2YWwgPD0gbWF4KSB7XG4gICAgICAgICAgICAgIGNsb3Nlc3QgPSBpO1xuICAgICAgICAgICAgICBhYnNEaWYgPSBkaWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHNuYXBbY2xvc2VzdF07XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc05hTihzbmFwKSA/IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiBuO1xuICAgICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNuYXAgKiBmYWN0b3I7XG4gICAgICB9O1xuICAgIH0sXG4gICAgICAgIGJ1aWxkUG9pbnRTbmFwRnVuYyA9IGZ1bmN0aW9uIGJ1aWxkUG9pbnRTbmFwRnVuYyhzbmFwLCBtaW5YLCBtYXhYLCBtaW5ZLCBtYXhZLCByYWRpdXMsIGZhY3Rvcikge1xuICAgICAgcmFkaXVzID0gcmFkaXVzICYmIHJhZGl1cyA8IF9iaWdOdW0gPyByYWRpdXMgKiByYWRpdXMgOiBfYmlnTnVtOyAvL3NvIHdlIGRvbid0IGhhdmUgdG8gTWF0aC5zcXJ0KCkgaW4gdGhlIGZ1bmN0aW9ucy4gUGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oc25hcCkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAgIHZhciBlZGdlVG9sZXJhbmNlID0gIXNlbGYuaXNQcmVzc2VkID8gMSA6IDEgLSBzZWxmLmVkZ2VSZXNpc3RhbmNlLFxuICAgICAgICAgICAgICB4ID0gcG9pbnQueCxcbiAgICAgICAgICAgICAgeSA9IHBvaW50LnksXG4gICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgZHgsXG4gICAgICAgICAgICAgIGR5OyAvL2lmIHdlJ3JlIHR3ZWVuaW5nLCBkaXNhYmxlIHRoZSBlZGdlVG9sZXJhbmNlIGJlY2F1c2UgaXQncyBhbHJlYWR5IGZhY3RvcmVkIGludG8gdGhlIHR3ZWVuaW5nIHZhbHVlcyAod2UgZG9uJ3Qgd2FudCB0byBhcHBseSBpdCBtdWx0aXBsZSB0aW1lcylcblxuICAgICAgICAgIHBvaW50LnggPSB4ID0geCA+IG1heFggPyBtYXhYICsgKHggLSBtYXhYKSAqIGVkZ2VUb2xlcmFuY2UgOiB4IDwgbWluWCA/IG1pblggKyAoeCAtIG1pblgpICogZWRnZVRvbGVyYW5jZSA6IHg7XG4gICAgICAgICAgcG9pbnQueSA9IHkgPSB5ID4gbWF4WSA/IG1heFkgKyAoeSAtIG1heFkpICogZWRnZVRvbGVyYW5jZSA6IHkgPCBtaW5ZID8gbWluWSArICh5IC0gbWluWSkgKiBlZGdlVG9sZXJhbmNlIDogeTtcbiAgICAgICAgICByZXN1bHQgPSBzbmFwLmNhbGwoc2VsZiwgcG9pbnQpO1xuXG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gcG9pbnQpIHtcbiAgICAgICAgICAgIHBvaW50LnggPSByZXN1bHQueDtcbiAgICAgICAgICAgIHBvaW50LnkgPSByZXN1bHQueTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZmFjdG9yICE9PSAxKSB7XG4gICAgICAgICAgICBwb2ludC54ICo9IGZhY3RvcjtcbiAgICAgICAgICAgIHBvaW50LnkgKj0gZmFjdG9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyYWRpdXMgPCBfYmlnTnVtKSB7XG4gICAgICAgICAgICBkeCA9IHBvaW50LnggLSB4O1xuICAgICAgICAgICAgZHkgPSBwb2ludC55IC0geTtcblxuICAgICAgICAgICAgaWYgKGR4ICogZHggKyBkeSAqIGR5ID4gcmFkaXVzKSB7XG4gICAgICAgICAgICAgIHBvaW50LnggPSB4O1xuICAgICAgICAgICAgICBwb2ludC55ID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNBcnJheShzbmFwKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICB2YXIgaSA9IHNuYXAubGVuZ3RoLFxuICAgICAgICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgICAgICAgbWluRGlzdCA9IF9iaWdOdW0sXG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgIHBvaW50LFxuICAgICAgICAgICAgICBkaXN0O1xuXG4gICAgICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgICAgICBwb2ludCA9IHNuYXBbaV07XG4gICAgICAgICAgICB4ID0gcG9pbnQueCAtIHAueDtcbiAgICAgICAgICAgIHkgPSBwb2ludC55IC0gcC55O1xuICAgICAgICAgICAgZGlzdCA9IHggKiB4ICsgeSAqIHk7XG5cbiAgICAgICAgICAgIGlmIChkaXN0IDwgbWluRGlzdCkge1xuICAgICAgICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgICAgICAgICAgbWluRGlzdCA9IGRpc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG1pbkRpc3QgPD0gcmFkaXVzID8gc25hcFtjbG9zZXN0XSA6IHA7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbjtcbiAgICAgIH07XG4gICAgfSxcbiAgICAgICAgY2FsY3VsYXRlQm91bmRzID0gZnVuY3Rpb24gY2FsY3VsYXRlQm91bmRzKCkge1xuICAgICAgdmFyIGJvdW5kcywgdGFyZ2V0Qm91bmRzLCBzbmFwLCBzbmFwSXNSYXc7XG4gICAgICBoYXNCb3VuZHMgPSBmYWxzZTtcblxuICAgICAgaWYgKHNjcm9sbFByb3h5KSB7XG4gICAgICAgIHNjcm9sbFByb3h5LmNhbGlicmF0ZSgpO1xuICAgICAgICBzZWxmLm1pblggPSBtaW5YID0gLXNjcm9sbFByb3h5Lm1heFNjcm9sbExlZnQoKTtcbiAgICAgICAgc2VsZi5taW5ZID0gbWluWSA9IC1zY3JvbGxQcm94eS5tYXhTY3JvbGxUb3AoKTtcbiAgICAgICAgc2VsZi5tYXhYID0gbWF4WCA9IHNlbGYubWF4WSA9IG1heFkgPSAwO1xuICAgICAgICBoYXNCb3VuZHMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghIXZhcnMuYm91bmRzKSB7XG4gICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHModmFycy5ib3VuZHMsIHRhcmdldC5wYXJlbnROb2RlKTsgLy9jb3VsZCBiZSBhIHNlbGVjdG9yL2pRdWVyeSBvYmplY3Qgb3IgYSBET00gZWxlbWVudCBvciBhIGdlbmVyaWMgb2JqZWN0IGxpa2Uge3RvcDowLCBsZWZ0OjEwMCwgd2lkdGg6MTAwMCwgaGVpZ2h0OjgwMH0gb3Ige21pblg6MTAwLCBtYXhYOjExMDAsIG1pblk6MCwgbWF4WTo4MDB9XG5cbiAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIHNlbGYubWluWCA9IG1pblggPSBib3VuZHMubGVmdDtcbiAgICAgICAgICBzZWxmLm1heFggPSBtYXhYID0gYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGg7XG4gICAgICAgICAgc2VsZi5taW5ZID0gbWluWSA9IHNlbGYubWF4WSA9IG1heFkgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKCFfaXNVbmRlZmluZWQodmFycy5ib3VuZHMubWF4WCkgfHwgIV9pc1VuZGVmaW5lZCh2YXJzLmJvdW5kcy5tYXhZKSkge1xuICAgICAgICAgIGJvdW5kcyA9IHZhcnMuYm91bmRzO1xuICAgICAgICAgIHNlbGYubWluWCA9IG1pblggPSBib3VuZHMubWluWDtcbiAgICAgICAgICBzZWxmLm1pblkgPSBtaW5ZID0gYm91bmRzLm1pblk7XG4gICAgICAgICAgc2VsZi5tYXhYID0gbWF4WCA9IGJvdW5kcy5tYXhYO1xuICAgICAgICAgIHNlbGYubWF4WSA9IG1heFkgPSBib3VuZHMubWF4WTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRCb3VuZHMgPSBfZ2V0Qm91bmRzKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUpO1xuICAgICAgICAgIHNlbGYubWluWCA9IG1pblggPSBNYXRoLnJvdW5kKGdldFByb3BBc051bSh4UHJvcCwgXCJweFwiKSArIGJvdW5kcy5sZWZ0IC0gdGFyZ2V0Qm91bmRzLmxlZnQgLSAwLjUpO1xuICAgICAgICAgIHNlbGYubWluWSA9IG1pblkgPSBNYXRoLnJvdW5kKGdldFByb3BBc051bSh5UHJvcCwgXCJweFwiKSArIGJvdW5kcy50b3AgLSB0YXJnZXRCb3VuZHMudG9wIC0gMC41KTtcbiAgICAgICAgICBzZWxmLm1heFggPSBtYXhYID0gTWF0aC5yb3VuZChtaW5YICsgKGJvdW5kcy53aWR0aCAtIHRhcmdldEJvdW5kcy53aWR0aCkpO1xuICAgICAgICAgIHNlbGYubWF4WSA9IG1heFkgPSBNYXRoLnJvdW5kKG1pblkgKyAoYm91bmRzLmhlaWdodCAtIHRhcmdldEJvdW5kcy5oZWlnaHQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW5YID4gbWF4WCkge1xuICAgICAgICAgIHNlbGYubWluWCA9IG1heFg7XG4gICAgICAgICAgc2VsZi5tYXhYID0gbWF4WCA9IG1pblg7XG4gICAgICAgICAgbWluWCA9IHNlbGYubWluWDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW5ZID4gbWF4WSkge1xuICAgICAgICAgIHNlbGYubWluWSA9IG1heFk7XG4gICAgICAgICAgc2VsZi5tYXhZID0gbWF4WSA9IG1pblk7XG4gICAgICAgICAgbWluWSA9IHNlbGYubWluWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICBzZWxmLm1pblJvdGF0aW9uID0gbWluWDtcbiAgICAgICAgICBzZWxmLm1heFJvdGF0aW9uID0gbWF4WDtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhc0JvdW5kcyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YXJzLmxpdmVTbmFwKSB7XG4gICAgICAgIHNuYXAgPSB2YXJzLmxpdmVTbmFwID09PSB0cnVlID8gdmFycy5zbmFwIHx8IHt9IDogdmFycy5saXZlU25hcDtcbiAgICAgICAgc25hcElzUmF3ID0gX2lzQXJyYXkoc25hcCkgfHwgX2lzRnVuY3Rpb24oc25hcCk7XG5cbiAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIHNuYXBYID0gYnVpbGRTbmFwRnVuYyhzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5yb3RhdGlvbiwgbWluWCwgbWF4WCwgMSk7XG4gICAgICAgICAgc25hcFkgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzbmFwLnBvaW50cykge1xuICAgICAgICAgICAgc25hcFhZID0gYnVpbGRQb2ludFNuYXBGdW5jKHNuYXBJc1JhdyA/IHNuYXAgOiBzbmFwLnBvaW50cywgbWluWCwgbWF4WCwgbWluWSwgbWF4WSwgc25hcC5yYWRpdXMsIHNjcm9sbFByb3h5ID8gLTEgOiAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFsbG93WCkge1xuICAgICAgICAgICAgICBzbmFwWCA9IGJ1aWxkU25hcEZ1bmMoc25hcElzUmF3ID8gc25hcCA6IHNuYXAueCB8fCBzbmFwLmxlZnQgfHwgc25hcC5zY3JvbGxMZWZ0LCBtaW5YLCBtYXhYLCBzY3JvbGxQcm94eSA/IC0xIDogMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbGxvd1kpIHtcbiAgICAgICAgICAgICAgc25hcFkgPSBidWlsZFNuYXBGdW5jKHNuYXBJc1JhdyA/IHNuYXAgOiBzbmFwLnkgfHwgc25hcC50b3AgfHwgc25hcC5zY3JvbGxUb3AsIG1pblksIG1heFksIHNjcm9sbFByb3h5ID8gLTEgOiAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICAgICBvblRocm93Q29tcGxldGUgPSBmdW5jdGlvbiBvblRocm93Q29tcGxldGUoKSB7XG4gICAgICBzZWxmLmlzVGhyb3dpbmcgPSBmYWxzZTtcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJ0aHJvd2NvbXBsZXRlXCIsIFwib25UaHJvd0NvbXBsZXRlXCIpO1xuICAgIH0sXG4gICAgICAgIG9uVGhyb3dJbnRlcnJ1cHQgPSBmdW5jdGlvbiBvblRocm93SW50ZXJydXB0KCkge1xuICAgICAgc2VsZi5pc1Rocm93aW5nID0gZmFsc2U7XG4gICAgfSxcbiAgICAgICAgYW5pbWF0ZSA9IGZ1bmN0aW9uIGFuaW1hdGUoaW5lcnRpYSwgZm9yY2VaZXJvVmVsb2NpdHkpIHtcbiAgICAgIHZhciBzbmFwLCBzbmFwSXNSYXcsIHR3ZWVuLCBvdmVyc2hvb3RUb2xlcmFuY2U7XG5cbiAgICAgIGlmIChpbmVydGlhICYmIEluZXJ0aWFQbHVnaW4pIHtcbiAgICAgICAgaWYgKGluZXJ0aWEgPT09IHRydWUpIHtcbiAgICAgICAgICBzbmFwID0gdmFycy5zbmFwIHx8IHZhcnMubGl2ZVNuYXAgfHwge307XG4gICAgICAgICAgc25hcElzUmF3ID0gX2lzQXJyYXkoc25hcCkgfHwgX2lzRnVuY3Rpb24oc25hcCk7XG4gICAgICAgICAgaW5lcnRpYSA9IHtcbiAgICAgICAgICAgIHJlc2lzdGFuY2U6ICh2YXJzLnRocm93UmVzaXN0YW5jZSB8fCB2YXJzLnJlc2lzdGFuY2UgfHwgMTAwMCkgLyAocm90YXRpb25Nb2RlID8gMTAgOiAxKVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocm90YXRpb25Nb2RlKSB7XG4gICAgICAgICAgICBpbmVydGlhLnJvdGF0aW9uID0gX3BhcnNlSW5lcnRpYShzZWxmLCBzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5yb3RhdGlvbiwgbWF4WCwgbWluWCwgMSwgZm9yY2VaZXJvVmVsb2NpdHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dYKSB7XG4gICAgICAgICAgICAgIGluZXJ0aWFbeFByb3BdID0gX3BhcnNlSW5lcnRpYShzZWxmLCBzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5wb2ludHMgfHwgc25hcC54IHx8IHNuYXAubGVmdCwgbWF4WCwgbWluWCwgc2Nyb2xsUHJveHkgPyAtMSA6IDEsIGZvcmNlWmVyb1ZlbG9jaXR5IHx8IHNlbGYubG9ja2VkQXhpcyA9PT0gXCJ4XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWxsb3dZKSB7XG4gICAgICAgICAgICAgIGluZXJ0aWFbeVByb3BdID0gX3BhcnNlSW5lcnRpYShzZWxmLCBzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5wb2ludHMgfHwgc25hcC55IHx8IHNuYXAudG9wLCBtYXhZLCBtaW5ZLCBzY3JvbGxQcm94eSA/IC0xIDogMSwgZm9yY2VaZXJvVmVsb2NpdHkgfHwgc2VsZi5sb2NrZWRBeGlzID09PSBcInlcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzbmFwLnBvaW50cyB8fCBfaXNBcnJheShzbmFwKSAmJiBfaXNPYmplY3Qoc25hcFswXSkpIHtcbiAgICAgICAgICAgICAgaW5lcnRpYS5saW5rZWRQcm9wcyA9IHhQcm9wICsgXCIsXCIgKyB5UHJvcDtcbiAgICAgICAgICAgICAgaW5lcnRpYS5yYWRpdXMgPSBzbmFwLnJhZGl1czsgLy9ub3RlOiB3ZSBhbHNvIGRpc2FibGUgbGl2ZVNuYXBwaW5nIHdoaWxlIHRocm93aW5nIGlmIHRoZXJlJ3MgYSBcInJhZGl1c1wiIGRlZmluZWQsIG90aGVyd2lzZSBpdCBsb29rcyB3ZWlyZCB0byBoYXZlIHRoZSBpdGVtIHRocm93biBwYXN0IGEgc25hcHBpbmcgcG9pbnQgYnV0IGxpdmUtc25hcHBpbmcgbWlkLXR3ZWVuLiBXZSBkbyB0aGlzIGJ5IGFsdGVyaW5nIHRoZSBvblVwZGF0ZVBhcmFtcyBzbyB0aGF0IFwic2tpcFNuYXBcIiBwYXJhbWV0ZXIgaXMgdHJ1ZSBmb3Igc3luY1hZLlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaXNUaHJvd2luZyA9IHRydWU7XG4gICAgICAgIG92ZXJzaG9vdFRvbGVyYW5jZSA9ICFpc05hTih2YXJzLm92ZXJzaG9vdFRvbGVyYW5jZSkgPyB2YXJzLm92ZXJzaG9vdFRvbGVyYW5jZSA6IHZhcnMuZWRnZVJlc2lzdGFuY2UgPT09IDEgPyAwIDogMSAtIHNlbGYuZWRnZVJlc2lzdGFuY2UgKyAwLjI7XG5cbiAgICAgICAgaWYgKCFpbmVydGlhLmR1cmF0aW9uKSB7XG4gICAgICAgICAgaW5lcnRpYS5kdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIG1heDogTWF0aC5tYXgodmFycy5taW5EdXJhdGlvbiB8fCAwLCBcIm1heER1cmF0aW9uXCIgaW4gdmFycyA/IHZhcnMubWF4RHVyYXRpb24gOiAyKSxcbiAgICAgICAgICAgIG1pbjogIWlzTmFOKHZhcnMubWluRHVyYXRpb24pID8gdmFycy5taW5EdXJhdGlvbiA6IG92ZXJzaG9vdFRvbGVyYW5jZSA9PT0gMCB8fCBfaXNPYmplY3QoaW5lcnRpYSkgJiYgaW5lcnRpYS5yZXNpc3RhbmNlID4gMTAwMCA/IDAgOiAwLjUsXG4gICAgICAgICAgICBvdmVyc2hvb3Q6IG92ZXJzaG9vdFRvbGVyYW5jZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnR3ZWVuID0gdHdlZW4gPSBnc2FwLnRvKHNjcm9sbFByb3h5IHx8IHRhcmdldCwge1xuICAgICAgICAgIGluZXJ0aWE6IGluZXJ0aWEsXG4gICAgICAgICAgZGF0YTogXCJfZHJhZ2dhYmxlXCIsXG4gICAgICAgICAgb25Db21wbGV0ZTogb25UaHJvd0NvbXBsZXRlLFxuICAgICAgICAgIG9uSW50ZXJydXB0OiBvblRocm93SW50ZXJydXB0LFxuICAgICAgICAgIG9uVXBkYXRlOiB2YXJzLmZhc3RNb2RlID8gX2Rpc3BhdGNoRXZlbnQgOiBzeW5jWFksXG4gICAgICAgICAgb25VcGRhdGVQYXJhbXM6IHZhcnMuZmFzdE1vZGUgPyBbc2VsZiwgXCJvbnRocm93dXBkYXRlXCIsIFwib25UaHJvd1VwZGF0ZVwiXSA6IHNuYXAgJiYgc25hcC5yYWRpdXMgPyBbZmFsc2UsIHRydWVdIDogW11cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF2YXJzLmZhc3RNb2RlKSB7XG4gICAgICAgICAgaWYgKHNjcm9sbFByb3h5KSB7XG4gICAgICAgICAgICBzY3JvbGxQcm94eS5fc2tpcCA9IHRydWU7IC8vIE1pY3Jvc29mdCBicm93c2VycyBoYXZlIGEgYnVnIHRoYXQgY2F1c2VzIHRoZW0gdG8gYnJpZWZseSByZW5kZXIgdGhlIHBvc2l0aW9uIGluY29ycmVjdGx5IChpdCBmbGFzaGVzIHRvIHRoZSBlbmQgc3RhdGUgd2hlbiB3ZSBzZWVrKCkgdGhlIHR3ZWVuIGV2ZW4gdGhvdWdoIHdlIGp1bXAgcmlnaHQgYmFjayB0byB0aGUgY3VycmVudCBwb3NpdGlvbiwgYW5kIHRoaXMgb25seSBzZWVtcyB0byBoYXBwZW4gd2hlbiB3ZSdyZSBhZmZlY3RpbmcgYm90aCB0b3AgYW5kIGxlZnQpLCBzbyB3ZSBzZXQgYSBfc3VzcGVuZFRyYW5zZm9ybXMgZmxhZyB0byBwcmV2ZW50IGl0IGZyb20gYWN0dWFsbHkgYXBwbHlpbmcgdGhlIHZhbHVlcyBpbiB0aGUgU2Nyb2xsUHJveHkuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHdlZW4ucmVuZGVyKDFlOSwgdHJ1ZSwgdHJ1ZSk7IC8vIGZvcmNlIHRvIHRoZSBlbmQuIFJlbWVtYmVyLCB0aGUgZHVyYXRpb24gd2lsbCBsaWtlbHkgY2hhbmdlIHVwb24gaW5pdHRpbmcgYmVjYXVzZSB0aGF0J3Mgd2hlbiBJbmVydGlhUGx1Z2luIGNhbGN1bGF0ZXMgaXQuXG5cbiAgICAgICAgICBzeW5jWFkodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc2VsZi5lbmRYID0gc2VsZi54O1xuICAgICAgICAgIHNlbGYuZW5kWSA9IHNlbGYueTtcblxuICAgICAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICAgIHNlbGYuZW5kUm90YXRpb24gPSBzZWxmLng7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHdlZW4ucGxheSgwKTtcbiAgICAgICAgICBzeW5jWFkodHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICBpZiAoc2Nyb2xsUHJveHkpIHtcbiAgICAgICAgICAgIHNjcm9sbFByb3h5Ll9za2lwID0gZmFsc2U7IC8vTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBidWcgdGhhdCBjYXVzZXMgdGhlbSB0byBicmllZmx5IHJlbmRlciB0aGUgcG9zaXRpb24gaW5jb3JyZWN0bHkgKGl0IGZsYXNoZXMgdG8gdGhlIGVuZCBzdGF0ZSB3aGVuIHdlIHNlZWsoKSB0aGUgdHdlZW4gZXZlbiB0aG91Z2ggd2UganVtcCByaWdodCBiYWNrIHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uLCBhbmQgdGhpcyBvbmx5IHNlZW1zIHRvIGhhcHBlbiB3aGVuIHdlJ3JlIGFmZmVjdGluZyBib3RoIHRvcCBhbmQgbGVmdCksIHNvIHdlIHNldCBhIF9zdXNwZW5kVHJhbnNmb3JtcyBmbGFnIHRvIHByZXZlbnQgaXQgZnJvbSBhY3R1YWxseSBhcHBseWluZyB0aGUgdmFsdWVzIGluIHRoZSBTY3JvbGxQcm94eS5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaGFzQm91bmRzKSB7XG4gICAgICAgIHNlbGYuYXBwbHlCb3VuZHMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICB1cGRhdGVNYXRyaXggPSBmdW5jdGlvbiB1cGRhdGVNYXRyaXgoc2hpZnRTdGFydCkge1xuICAgICAgdmFyIHN0YXJ0ID0gbWF0cml4LFxuICAgICAgICAgIHA7XG4gICAgICBtYXRyaXggPSBnZXRHbG9iYWxNYXRyaXgodGFyZ2V0LnBhcmVudE5vZGUsIHRydWUpO1xuXG4gICAgICBpZiAoc2hpZnRTdGFydCAmJiBzZWxmLmlzUHJlc3NlZCAmJiAhbWF0cml4LmVxdWFscyhzdGFydCB8fCBuZXcgTWF0cml4MkQoKSkpIHtcbiAgICAgICAgLy9pZiB0aGUgbWF0cml4IGNoYW5nZXMgV0hJTEUgdGhlIGVsZW1lbnQgaXMgcHJlc3NlZCwgd2UgbXVzdCBhZGp1c3QgdGhlIHN0YXJ0UG9pbnRlclggYW5kIHN0YXJ0UG9pbnRlclkgYWNjb3JkaW5nbHksIHNvIHdlIGludmVydCB0aGUgb3JpZ2luYWwgbWF0cml4IGFuZCBmaWd1cmUgb3V0IHdoZXJlIHRoZSBwb2ludGVyWCBhbmQgcG9pbnRlclkgd2VyZSBpbiB0aGUgZ2xvYmFsIHNwYWNlLCB0aGVuIGFwcGx5IHRoZSBuZXcgbWF0cml4IHRvIGdldCB0aGUgdXBkYXRlZCBjb29yZGluYXRlcy5cbiAgICAgICAgcCA9IHN0YXJ0LmludmVyc2UoKS5hcHBseSh7XG4gICAgICAgICAgeDogc3RhcnRQb2ludGVyWCxcbiAgICAgICAgICB5OiBzdGFydFBvaW50ZXJZXG4gICAgICAgIH0pO1xuICAgICAgICBtYXRyaXguYXBwbHkocCwgcCk7XG4gICAgICAgIHN0YXJ0UG9pbnRlclggPSBwLng7XG4gICAgICAgIHN0YXJ0UG9pbnRlclkgPSBwLnk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRyaXguZXF1YWxzKF9pZGVudGl0eU1hdHJpeCkpIHtcbiAgICAgICAgLy9pZiB0aGVyZSBhcmUgbm8gdHJhbnNmb3Jtcywgd2UgY2FuIG9wdGltaXplIHBlcmZvcm1hbmNlIGJ5IG5vdCBmYWN0b3JpbmcgaW4gdGhlIG1hdHJpeFxuICAgICAgICBtYXRyaXggPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgICAgIHJlY29yZFN0YXJ0UG9zaXRpb25zID0gZnVuY3Rpb24gcmVjb3JkU3RhcnRQb3NpdGlvbnMoKSB7XG4gICAgICB2YXIgZWRnZVRvbGVyYW5jZSA9IDEgLSBzZWxmLmVkZ2VSZXNpc3RhbmNlLFxuICAgICAgICAgIG9mZnNldFggPSBpc0ZpeGVkID8gX2dldERvY1Njcm9sbExlZnQob3duZXJEb2MpIDogMCxcbiAgICAgICAgICBvZmZzZXRZID0gaXNGaXhlZCA/IF9nZXREb2NTY3JvbGxUb3Aob3duZXJEb2MpIDogMCxcbiAgICAgICAgICBwYXJzZWRPcmlnaW4sXG4gICAgICAgICAgeCxcbiAgICAgICAgICB5O1xuICAgICAgdXBkYXRlTWF0cml4KGZhbHNlKTtcbiAgICAgIF9wb2ludDEueCA9IHNlbGYucG9pbnRlclggLSBvZmZzZXRYO1xuICAgICAgX3BvaW50MS55ID0gc2VsZi5wb2ludGVyWSAtIG9mZnNldFk7XG4gICAgICBtYXRyaXggJiYgbWF0cml4LmFwcGx5KF9wb2ludDEsIF9wb2ludDEpO1xuICAgICAgc3RhcnRQb2ludGVyWCA9IF9wb2ludDEueDsgLy90cmFuc2xhdGUgdG8gbG9jYWwgY29vcmRpbmF0ZSBzeXN0ZW1cblxuICAgICAgc3RhcnRQb2ludGVyWSA9IF9wb2ludDEueTtcblxuICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgIHNldFBvaW50ZXJQb3NpdGlvbihzZWxmLnBvaW50ZXJYLCBzZWxmLnBvaW50ZXJZKTtcbiAgICAgICAgcmVuZGVyKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpbm5lck1hdHJpeCA9IGdldEdsb2JhbE1hdHJpeCh0YXJnZXQpO1xuXG4gICAgICBpZiAoc2Nyb2xsUHJveHkpIHtcbiAgICAgICAgY2FsY3VsYXRlQm91bmRzKCk7XG4gICAgICAgIHN0YXJ0RWxlbWVudFkgPSBzY3JvbGxQcm94eS50b3AoKTtcbiAgICAgICAgc3RhcnRFbGVtZW50WCA9IHNjcm9sbFByb3h5LmxlZnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vaWYgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIHByb2Nlc3Mgb2YgdHdlZW5pbmcsIGRvbid0IGZvcmNlIHNuYXBwaW5nIHRvIG9jY3VyIGJlY2F1c2UgaXQgY291bGQgbWFrZSBpdCBqdW1wLiBJbWFnaW5lIHRoZSB1c2VyIHRocm93aW5nLCB0aGVuIGJlZm9yZSBpdCdzIGRvbmUsIGNsaWNraW5nIG9uIHRoZSBlbGVtZW50IGluIGl0cyBpbmJldHdlZW4gc3RhdGUuXG4gICAgICAgIGlmIChpc1R3ZWVuaW5nKCkpIHtcbiAgICAgICAgICBzeW5jWFkodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgY2FsY3VsYXRlQm91bmRzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5hcHBseUJvdW5kcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIHBhcnNlZE9yaWdpbiA9IHRhcmdldC5vd25lclNWR0VsZW1lbnQgPyBbZ3NDYWNoZS54T3JpZ2luIC0gdGFyZ2V0LmdldEJCb3goKS54LCBnc0NhY2hlLnlPcmlnaW4gLSB0YXJnZXQuZ2V0QkJveCgpLnldIDogKF9nZXRDb21wdXRlZFN0eWxlKHRhcmdldClbX3RyYW5zZm9ybU9yaWdpblByb3BdIHx8IFwiMCAwXCIpLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICByb3RhdGlvbk9yaWdpbiA9IHNlbGYucm90YXRpb25PcmlnaW4gPSBnZXRHbG9iYWxNYXRyaXgodGFyZ2V0KS5hcHBseSh7XG4gICAgICAgICAgICB4OiBwYXJzZUZsb2F0KHBhcnNlZE9yaWdpblswXSkgfHwgMCxcbiAgICAgICAgICAgIHk6IHBhcnNlRmxvYXQocGFyc2VkT3JpZ2luWzFdKSB8fCAwXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3luY1hZKHRydWUsIHRydWUpO1xuICAgICAgICAgIHggPSBzZWxmLnBvaW50ZXJYIC0gcm90YXRpb25PcmlnaW4ueCAtIG9mZnNldFg7XG4gICAgICAgICAgeSA9IHJvdGF0aW9uT3JpZ2luLnkgLSBzZWxmLnBvaW50ZXJZICsgb2Zmc2V0WTtcbiAgICAgICAgICBzdGFydEVsZW1lbnRYID0gc2VsZi54OyAvL3N0YXJ0aW5nIHJvdGF0aW9uICh4IGFsd2F5cyByZWZlcnMgdG8gcm90YXRpb24gaW4gdHlwZTpcInJvdGF0aW9uXCIsIG1lYXN1cmVkIGluIGRlZ3JlZXMpXG5cbiAgICAgICAgICBzdGFydEVsZW1lbnRZID0gc2VsZi55ID0gTWF0aC5hdGFuMih5LCB4KSAqIF9SQUQyREVHO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vcGFyZW50ID0gIWlzRml4ZWQgJiYgdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgICAgLy9zdGFydFNjcm9sbFRvcCA9IHBhcmVudCA/IHBhcmVudC5zY3JvbGxUb3AgfHwgMCA6IDA7XG4gICAgICAgICAgLy9zdGFydFNjcm9sbExlZnQgPSBwYXJlbnQgPyBwYXJlbnQuc2Nyb2xsTGVmdCB8fCAwIDogMDtcbiAgICAgICAgICBzdGFydEVsZW1lbnRZID0gZ2V0UHJvcEFzTnVtKHlQcm9wLCBcInB4XCIpOyAvL3JlY29yZCB0aGUgc3RhcnRpbmcgdG9wIGFuZCBsZWZ0IHZhbHVlcyBzbyB0aGF0IHdlIGNhbiBqdXN0IGFkZCB0aGUgbW91c2UncyBtb3ZlbWVudCB0byB0aGVtIGxhdGVyLlxuXG4gICAgICAgICAgc3RhcnRFbGVtZW50WCA9IGdldFByb3BBc051bSh4UHJvcCwgXCJweFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzQm91bmRzICYmIGVkZ2VUb2xlcmFuY2UpIHtcbiAgICAgICAgaWYgKHN0YXJ0RWxlbWVudFggPiBtYXhYKSB7XG4gICAgICAgICAgc3RhcnRFbGVtZW50WCA9IG1heFggKyAoc3RhcnRFbGVtZW50WCAtIG1heFgpIC8gZWRnZVRvbGVyYW5jZTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGFydEVsZW1lbnRYIDwgbWluWCkge1xuICAgICAgICAgIHN0YXJ0RWxlbWVudFggPSBtaW5YIC0gKG1pblggLSBzdGFydEVsZW1lbnRYKSAvIGVkZ2VUb2xlcmFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIGlmIChzdGFydEVsZW1lbnRZID4gbWF4WSkge1xuICAgICAgICAgICAgc3RhcnRFbGVtZW50WSA9IG1heFkgKyAoc3RhcnRFbGVtZW50WSAtIG1heFkpIC8gZWRnZVRvbGVyYW5jZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0RWxlbWVudFkgPCBtaW5ZKSB7XG4gICAgICAgICAgICBzdGFydEVsZW1lbnRZID0gbWluWSAtIChtaW5ZIC0gc3RhcnRFbGVtZW50WSkgLyBlZGdlVG9sZXJhbmNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLnN0YXJ0WCA9IHN0YXJ0RWxlbWVudFggPSBfcm91bmQoc3RhcnRFbGVtZW50WCk7XG4gICAgICBzZWxmLnN0YXJ0WSA9IHN0YXJ0RWxlbWVudFkgPSBfcm91bmQoc3RhcnRFbGVtZW50WSk7XG4gICAgfSxcbiAgICAgICAgaXNUd2VlbmluZyA9IGZ1bmN0aW9uIGlzVHdlZW5pbmcoKSB7XG4gICAgICByZXR1cm4gc2VsZi50d2VlbiAmJiBzZWxmLnR3ZWVuLmlzQWN0aXZlKCk7XG4gICAgfSxcbiAgICAgICAgcmVtb3ZlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiByZW1vdmVQbGFjZWhvbGRlcigpIHtcbiAgICAgIGlmIChfcGxhY2Vob2xkZXJEaXYucGFyZW50Tm9kZSAmJiAhaXNUd2VlbmluZygpICYmICFzZWxmLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgLy9fcGxhY2Vob2xkZXJEaXYganVzdCBwcm9wcyBvcGVuIGF1dG8tc2Nyb2xsaW5nIGNvbnRhaW5lcnMgc28gdGhleSBkb24ndCBjb2xsYXBzZSBhcyB0aGUgdXNlciBkcmFncyBsZWZ0L3VwLiBXZSByZW1vdmUgaXQgYWZ0ZXIgZHJhZ2dpbmcgKGFuZCB0aHJvd2luZywgaWYgbmVjZXNzYXJ5KSBmaW5pc2hlcy5cbiAgICAgICAgX3BsYWNlaG9sZGVyRGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX3BsYWNlaG9sZGVyRGl2KTtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICAvL2NhbGxlZCB3aGVuIHRoZSBtb3VzZSBpcyBwcmVzc2VkIChvciB0b3VjaCBzdGFydHMpXG4gICAgb25QcmVzcyA9IGZ1bmN0aW9uIG9uUHJlc3MoZSwgZm9yY2UpIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBpZiAoIWVuYWJsZWQgfHwgc2VsZi5pc1ByZXNzZWQgfHwgIWUgfHwgKGUudHlwZSA9PT0gXCJtb3VzZWRvd25cIiB8fCBlLnR5cGUgPT09IFwicG9pbnRlcmRvd25cIikgJiYgIWZvcmNlICYmIF9nZXRUaW1lKCkgLSBjbGlja1RpbWUgPCAzMCAmJiBfdG91Y2hFdmVudExvb2t1cFtzZWxmLnBvaW50ZXJFdmVudC50eXBlXSkge1xuICAgICAgICAvL3doZW4gd2UgRE9OJ1QgcHJldmVudERlZmF1bHQoKSBpbiBvcmRlciB0byBhY2NvbW1vZGF0ZSB0b3VjaC1zY3JvbGxpbmcgYW5kIHRoZSB1c2VyIGp1c3QgdGFwcywgbWFueSBicm93c2VycyBhbHNvIGZpcmUgYSBtb3VzZWRvd24vbW91c2V1cCBzZXF1ZW5jZSBBRlRFUiB0aGUgdG91Y2hzdGFydC90b3VjaGVuZCBzZXF1ZW5jZSwgdGh1cyBpdCdkIHJlc3VsdCBpbiB0d28gcXVpY2sgXCJjbGlja1wiIGV2ZW50cyBiZWluZyBkaXNwYXRjaGVkLiBUaGlzIGxpbmUgc2Vuc2VzIHRoYXQgY29uZGl0aW9uIGFuZCBoYWx0cyBpdCBvbiB0aGUgc3Vic2VxdWVudCBtb3VzZWRvd24uXG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgJiYgZSAmJiBlbmFibGVkICYmIF9wcmV2ZW50RGVmYXVsdChlKTsgLy8gaW4gc29tZSBicm93c2Vycywgd2UgbXVzdCBsaXN0ZW4gZm9yIG11bHRpcGxlIGV2ZW50IHR5cGVzIGxpa2UgdG91Y2hzdGFydCwgcG9pbnRlcmRvd24sIG1vdXNlZG93bi4gVGhlIGZpcnN0IHRpbWUgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQsIHdlIHJlY29yZCB3aGV0aGVyIG9yIG5vdCB3ZSBfcHJldmVudERlZmF1bHQoKSBzbyB0aGF0IG9uIGR1cGxpY2F0ZSBjYWxscywgd2UgY2FuIGRvIHRoZSBzYW1lIGlmIG5lY2Vzc2FyeS5cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGludGVycnVwdGVkID0gaXNUd2VlbmluZygpO1xuICAgICAgc2VsZi5wb2ludGVyRXZlbnQgPSBlO1xuXG4gICAgICBpZiAoX3RvdWNoRXZlbnRMb29rdXBbZS50eXBlXSkge1xuICAgICAgICAvL25vdGU6IG9uIGlPUywgQk9USCB0b3VjaG1vdmUgYW5kIG1vdXNlbW92ZSBhcmUgZGlzcGF0Y2hlZCwgYnV0IHRoZSBtb3VzZW1vdmUgaGFzIHBhZ2VZIGFuZCBwYWdlWCBvZiAwIHdoaWNoIHdvdWxkIG1lc3MgdXAgdGhlIGNhbGN1bGF0aW9ucyBhbmQgbmVlZGxlc3NseSBodXJ0IHBlcmZvcm1hbmNlLlxuICAgICAgICB0b3VjaEV2ZW50VGFyZ2V0ID0gfmUudHlwZS5pbmRleE9mKFwidG91Y2hcIikgPyBlLmN1cnJlbnRUYXJnZXQgfHwgZS50YXJnZXQgOiBvd25lckRvYzsgLy9wb2ludGVyLWJhc2VkIHRvdWNoZXMgKGZvciBNaWNyb3NvZnQgYnJvd3NlcnMpIGRvbid0IHJlbWFpbiBsb2NrZWQgdG8gdGhlIG9yaWdpbmFsIHRhcmdldCBsaWtlIG90aGVyIGJyb3dzZXJzLCBzbyB3ZSBtdXN0IHVzZSB0aGUgZG9jdW1lbnQgaW5zdGVhZC4gVGhlIGV2ZW50IHR5cGUgd291bGQgYmUgXCJNU1BvaW50ZXJEb3duXCIgb3IgXCJwb2ludGVyZG93blwiLlxuXG4gICAgICAgIF9hZGRMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNoZW5kXCIsIG9uUmVsZWFzZSk7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2htb3ZlXCIsIG9uTW92ZSk7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2hjYW5jZWxcIiwgb25SZWxlYXNlKTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwidG91Y2hzdGFydFwiLCBfb25NdWx0aVRvdWNoRG9jdW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG91Y2hFdmVudFRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcIm1vdXNlbW92ZVwiLCBvbk1vdmUpOyAvL2F0dGFjaCB0aGVzZSB0byB0aGUgZG9jdW1lbnQgaW5zdGVhZCBvZiB0aGUgYm94IGl0c2VsZiBzbyB0aGF0IGlmIHRoZSB1c2VyJ3MgbW91c2UgbW92ZXMgdG9vIHF1aWNrbHkgKGFuZCBvZmYgb2YgdGhlIGJveCksIHRoaW5ncyBzdGlsbCB3b3JrLlxuXG4gICAgICB9XG5cbiAgICAgIHRvdWNoRHJhZ0F4aXMgPSBudWxsO1xuXG4gICAgICBpZiAoIV9zdXBwb3J0c1BvaW50ZXIgfHwgIXRvdWNoRXZlbnRUYXJnZXQpIHtcbiAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcIm1vdXNldXBcIiwgb25SZWxlYXNlKTtcblxuICAgICAgICBlICYmIGUudGFyZ2V0ICYmIF9hZGRMaXN0ZW5lcihlLnRhcmdldCwgXCJtb3VzZXVwXCIsIG9uUmVsZWFzZSk7IC8vd2UgYWxzbyBoYXZlIHRvIGxpc3RlbiBkaXJlY3RseSBvbiB0aGUgZWxlbWVudCBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgZG9uJ3QgYnViYmxlIHVwIHRoZSBldmVudCB0byB0aGUgX2RvYyBvbiBlbGVtZW50cyB3aXRoIGNvbnRlbnRFZGl0YWJsZT1cInRydWVcIlxuICAgICAgfVxuXG4gICAgICBpc0NsaWNraW5nID0gaXNDbGlja2FibGUuY2FsbChzZWxmLCBlLnRhcmdldCkgJiYgdmFycy5kcmFnQ2xpY2thYmxlcyA9PT0gZmFsc2UgJiYgIWZvcmNlO1xuXG4gICAgICBpZiAoaXNDbGlja2luZykge1xuICAgICAgICBfYWRkTGlzdGVuZXIoZS50YXJnZXQsIFwiY2hhbmdlXCIsIG9uUmVsZWFzZSk7IC8vaW4gc29tZSBicm93c2Vycywgd2hlbiB5b3UgbW91c2Vkb3duIG9uIGEgPHNlbGVjdD4gZWxlbWVudCwgbm8gbW91c2V1cCBnZXRzIGRpc3BhdGNoZWQhIFNvIHdlIGxpc3RlbiBmb3IgYSBcImNoYW5nZVwiIGV2ZW50IGluc3RlYWQuXG5cblxuICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInByZXNzSW5pdFwiLCBcIm9uUHJlc3NJbml0XCIpO1xuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwicHJlc3NcIiwgXCJvblByZXNzXCIpO1xuXG4gICAgICAgIF9zZXRTZWxlY3RhYmxlKHRyaWdnZXJzLCB0cnVlKTsgLy9hY2NvbW1vZGF0ZXMgdGhpbmdzIGxpa2UgaW5wdXRzIGFuZCBlbGVtZW50cyB3aXRoIGNvbnRlbnRFZGl0YWJsZT1cInRydWVcIiAob3RoZXJ3aXNlIHVzZXIgY291bGRuJ3QgZHJhZyB0byBzZWxlY3QgdGV4dClcblxuXG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nID0gIXRvdWNoRXZlbnRUYXJnZXQgfHwgYWxsb3dYID09PSBhbGxvd1kgfHwgc2VsZi52YXJzLmFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgPT09IGZhbHNlIHx8IHNlbGYudmFycy5hbGxvd0NvbnRleHRNZW51ICYmIGUgJiYgKGUuY3RybEtleSB8fCBlLndoaWNoID4gMikgPyBmYWxzZSA6IGFsbG93WCA/IFwieVwiIDogXCJ4XCI7IC8vbm90ZTogaW4gQ2hyb21lLCByaWdodC1jbGlja2luZyAoZm9yIGEgY29udGV4dCBtZW51KSBmaXJlcyBvblByZXNzIGFuZCBpdCBkb2Vzbid0IGhhdmUgdGhlIGV2ZW50LndoaWNoIHNldCBwcm9wZXJseSwgc28gd2UgbXVzdCBsb29rIGZvciBldmVudC5jdHJsS2V5LiBJZiB0aGUgdXNlciB3YW50cyB0byBhbGxvdyBjb250ZXh0IG1lbnVzIHdlIHNob3VsZCBvZiBjb3Vyc2Ugc2Vuc2UgaXQgaGVyZSBhbmQgbm90IGFsbG93IG5hdGl2ZSB0b3VjaCBzY3JvbGxpbmcuXG5cbiAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgPSAhYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyAmJiAhc2VsZi5hbGxvd0V2ZW50RGVmYXVsdDtcblxuICAgICAgaWYgKGlzUHJldmVudGluZ0RlZmF1bHQpIHtcbiAgICAgICAgX3ByZXZlbnREZWZhdWx0KGUpO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfd2luLCBcInRvdWNoZm9yY2VjaGFuZ2VcIiwgX3ByZXZlbnREZWZhdWx0KTsgLy93b3JrcyBhcm91bmQgc2FmYXJpIGJ1ZzogaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMTQ1MC1kcmFnZ2FibGUtaW4taWZyYW1lLW9uLW1vYmlsZS1pcy1idWdneS9cblxuICAgICAgfVxuXG4gICAgICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICAvL3RvdWNoIGV2ZW50cyBzdG9yZSB0aGUgZGF0YSBzbGlnaHRseSBkaWZmZXJlbnRseVxuICAgICAgICBlID0gdG91Y2ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgICB0b3VjaElEID0gZS5pZGVudGlmaWVyO1xuICAgICAgfSBlbHNlIGlmIChlLnBvaW50ZXJJZCkge1xuICAgICAgICB0b3VjaElEID0gZS5wb2ludGVySWQ7IC8vZm9yIHNvbWUgTWljcm9zb2Z0IGJyb3dzZXJzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3VjaCA9IHRvdWNoSUQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBfZHJhZ0NvdW50Kys7XG5cbiAgICAgIF9hZGRUb1JlbmRlclF1ZXVlKHJlbmRlcik7IC8vY2F1c2VzIHRoZSBEcmFnZ2FibGUgdG8gcmVuZGVyIG9uIGVhY2ggXCJ0aWNrXCIgb2YgVHdlZW5MaXRlLnRpY2tlciAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIC0gdXBkYXRpbmcgdmFsdWVzIGluIGEgbW91c2Vtb3ZlIGNhbiBjYXVzZSB0aGVtIHRvIGhhcHBlbiB0b28gZnJlcXVlbnRseSwgbGlrZSBtdWx0aXBsZSB0aW1lcyBiZXR3ZWVuIGZyYW1lIHJlZHJhd3Mgd2hpY2ggaXMgd2FzdGVmdWwsIGFuZCBpdCBhbHNvIHByZXZlbnRzIHZhbHVlcyBmcm9tIHVwZGF0aW5nIHByb3Blcmx5IGluIElFOClcblxuXG4gICAgICBzdGFydFBvaW50ZXJZID0gc2VsZi5wb2ludGVyWSA9IGUucGFnZVk7IC8vcmVjb3JkIHRoZSBzdGFydGluZyB4IGFuZCB5IHNvIHRoYXQgd2UgY2FuIGNhbGN1bGF0ZSB0aGUgbW92ZW1lbnQgZnJvbSB0aGUgb3JpZ2luYWwgaW4gX29uTW91c2VNb3ZlXG5cbiAgICAgIHN0YXJ0UG9pbnRlclggPSBzZWxmLnBvaW50ZXJYID0gZS5wYWdlWDtcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJwcmVzc0luaXRcIiwgXCJvblByZXNzSW5pdFwiKTtcblxuICAgICAgaWYgKGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgfHwgc2VsZi5hdXRvU2Nyb2xsKSB7XG4gICAgICAgIF9yZWNvcmRNYXhTY3JvbGxzKHRhcmdldC5wYXJlbnROb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldC5wYXJlbnROb2RlICYmIHNlbGYuYXV0b1Njcm9sbCAmJiAhc2Nyb2xsUHJveHkgJiYgIXJvdGF0aW9uTW9kZSAmJiB0YXJnZXQucGFyZW50Tm9kZS5fZ3NNYXhTY3JvbGxYICYmICFfcGxhY2Vob2xkZXJEaXYucGFyZW50Tm9kZSAmJiAhdGFyZ2V0LmdldEJCb3gpIHtcbiAgICAgICAgLy9hZGQgYSBwbGFjZWhvbGRlciBkaXYgdG8gcHJldmVudCB0aGUgcGFyZW50IGNvbnRhaW5lciBmcm9tIGNvbGxhcHNpbmcgd2hlbiB0aGUgdXNlciBkcmFncyB0aGUgZWxlbWVudCBsZWZ0LlxuICAgICAgICBfcGxhY2Vob2xkZXJEaXYuc3R5bGUud2lkdGggPSB0YXJnZXQucGFyZW50Tm9kZS5zY3JvbGxXaWR0aCArIFwicHhcIjtcbiAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoX3BsYWNlaG9sZGVyRGl2KTtcbiAgICAgIH1cblxuICAgICAgcmVjb3JkU3RhcnRQb3NpdGlvbnMoKTtcbiAgICAgIHNlbGYudHdlZW4gJiYgc2VsZi50d2Vlbi5raWxsKCk7XG4gICAgICBzZWxmLmlzVGhyb3dpbmcgPSBmYWxzZTtcbiAgICAgIGdzYXAua2lsbFR3ZWVuc09mKHNjcm9sbFByb3h5IHx8IHRhcmdldCwga2lsbFByb3BzLCB0cnVlKTsgLy9pbiBjYXNlIHRoZSB1c2VyIHRyaWVzIHRvIGRyYWcgaXQgYmVmb3JlIHRoZSBsYXN0IHR3ZWVuIGlzIGRvbmUuXG5cbiAgICAgIHNjcm9sbFByb3h5ICYmIGdzYXAua2lsbFR3ZWVuc09mKHRhcmdldCwge1xuICAgICAgICBzY3JvbGxUbzogMVxuICAgICAgfSwgdHJ1ZSk7IC8vanVzdCBpbiBjYXNlIHRoZSBvcmlnaW5hbCB0YXJnZXQncyBzY3JvbGwgcG9zaXRpb24gaXMgYmVpbmcgdHdlZW5lZCBzb21ld2hlcmUgZWxzZS5cblxuICAgICAgc2VsZi50d2VlbiA9IHNlbGYubG9ja2VkQXhpcyA9IG51bGw7XG5cbiAgICAgIGlmICh2YXJzLnpJbmRleEJvb3N0IHx8ICFyb3RhdGlvbk1vZGUgJiYgIXNjcm9sbFByb3h5ICYmIHZhcnMuekluZGV4Qm9vc3QgIT09IGZhbHNlKSB7XG4gICAgICAgIHRhcmdldC5zdHlsZS56SW5kZXggPSBEcmFnZ2FibGUuekluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuaXNQcmVzc2VkID0gdHJ1ZTtcbiAgICAgIGhhc0RyYWdDYWxsYmFjayA9ICEhKHZhcnMub25EcmFnIHx8IHNlbGYuX2xpc3RlbmVycy5kcmFnKTtcbiAgICAgIGhhc01vdmVDYWxsYmFjayA9ICEhKHZhcnMub25Nb3ZlIHx8IHNlbGYuX2xpc3RlbmVycy5tb3ZlKTtcblxuICAgICAgaWYgKHZhcnMuY3Vyc29yICE9PSBmYWxzZSB8fCB2YXJzLmFjdGl2ZUN1cnNvcikge1xuICAgICAgICBpID0gdHJpZ2dlcnMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICAgIGdzYXAuc2V0KHRyaWdnZXJzW2ldLCB7XG4gICAgICAgICAgICBjdXJzb3I6IHZhcnMuYWN0aXZlQ3Vyc29yIHx8IHZhcnMuY3Vyc29yIHx8IChfZGVmYXVsdEN1cnNvciA9PT0gXCJncmFiXCIgPyBcImdyYWJiaW5nXCIgOiBfZGVmYXVsdEN1cnNvcilcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInByZXNzXCIsIFwib25QcmVzc1wiKTtcbiAgICB9LFxuICAgICAgICAvL2NhbGxlZCBldmVyeSB0aW1lIHRoZSBtb3VzZS90b3VjaCBtb3Zlc1xuICAgIG9uTW92ZSA9IGZ1bmN0aW9uIG9uTW92ZShlKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IGUsXG4gICAgICAgICAgdG91Y2hlcyxcbiAgICAgICAgICBwb2ludGVyWCxcbiAgICAgICAgICBwb2ludGVyWSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5O1xuXG4gICAgICBpZiAoIWVuYWJsZWQgfHwgX2lzTXVsdGlUb3VjaGluZyB8fCAhc2VsZi5pc1ByZXNzZWQgfHwgIWUpIHtcbiAgICAgICAgaXNQcmV2ZW50aW5nRGVmYXVsdCAmJiBlICYmIGVuYWJsZWQgJiYgX3ByZXZlbnREZWZhdWx0KGUpOyAvLyBpbiBzb21lIGJyb3dzZXJzLCB3ZSBtdXN0IGxpc3RlbiBmb3IgbXVsdGlwbGUgZXZlbnQgdHlwZXMgbGlrZSB0b3VjaG1vdmUsIHBvaW50ZXJtb3ZlLCBtb3VzZW1vdmUuIFRoZSBmaXJzdCB0aW1lIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCB3ZSByZWNvcmQgd2hldGhlciBvciBub3Qgd2UgX3ByZXZlbnREZWZhdWx0KCkgc28gdGhhdCBvbiBkdXBsaWNhdGUgY2FsbHMsIHdlIGNhbiBkbyB0aGUgc2FtZSBpZiBuZWNlc3NhcnkuXG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnBvaW50ZXJFdmVudCA9IGU7XG4gICAgICB0b3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlcztcblxuICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgLy90b3VjaCBldmVudHMgc3RvcmUgdGhlIGRhdGEgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgICAgICAgZSA9IHRvdWNoZXNbMF07XG5cbiAgICAgICAgaWYgKGUgIT09IHRvdWNoICYmIGUuaWRlbnRpZmllciAhPT0gdG91Y2hJRCkge1xuICAgICAgICAgIC8vVXN1YWxseSBjaGFuZ2VkVG91Y2hlc1swXSB3aWxsIGJlIHdoYXQgd2UncmUgbG9va2luZyBmb3IsIGJ1dCBpbiBjYXNlIGl0J3Mgbm90LCBsb29rIHRocm91Z2ggdGhlIHJlc3Qgb2YgdGhlIGFycmF5Li4uKGFuZCBBbmRyb2lkIGJyb3dzZXJzIGRvbid0IHJldXNlIHRoZSBldmVudCBsaWtlIGlPUylcbiAgICAgICAgICBpID0gdG91Y2hlcy5sZW5ndGg7XG5cbiAgICAgICAgICB3aGlsZSAoLS1pID4gLTEgJiYgKGUgPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyICE9PSB0b3VjaElEICYmIGUudGFyZ2V0ICE9PSB0YXJnZXQpIHt9IC8vIFNvbWUgQW5kcm9pZCBkZXZpY2VzIGRpc3BhdGNoIGEgdG91Y2hzdGFydCBBTkQgcG9pbnRlcmRvd24gaW5pdGlhbGx5LCBhbmQgdGhlbiBvbmx5IHBvaW50ZXJtb3ZlIHRodXMgdGhlIHRvdWNoSUQgbWF5IG5vdCBtYXRjaCBiZWNhdXNlIGl0IHdhcyBncmFiYmVkIGZyb20gdGhlIHRvdWNoc3RhcnQgZXZlbnQgd2hlcmVhcyB0aGUgcG9pbnRlciBldmVudCBpcyB0aGUgb25lIHRoYXQgdGhlIGJyb3dzZXIgZGlzcGF0Y2hlcyBmb3IgbW92ZSwgc28gaWYgdGhlIGV2ZW50IHRhcmdldCBtYXRjaGVzIHRoaXMgRHJhZ2dhYmxlJ3MgdGFyZ2V0LCBsZXQgaXQgdGhyb3VnaC5cblxuXG4gICAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGUucG9pbnRlcklkICYmIHRvdWNoSUQgJiYgZS5wb2ludGVySWQgIT09IHRvdWNoSUQpIHtcbiAgICAgICAgLy9mb3Igc29tZSBNaWNyb3NvZnQgYnJvd3NlcnMsIHdlIG11c3QgYXR0YWNoIHRoZSBsaXN0ZW5lciB0byB0aGUgZG9jIHJhdGhlciB0aGFuIHRoZSB0cmlnZ2VyIHNvIHRoYXQgd2hlbiB0aGUgZmluZ2VyIG1vdmVzIG91dHNpZGUgdGhlIGJvdW5kcyBvZiB0aGUgdHJpZ2dlciwgdGhpbmdzIHN0aWxsIHdvcmsuIFNvIGlmIHRoZSBldmVudCB3ZSdyZSByZWNlaXZpbmcgaGFzIGEgcG9pbnRlcklkIHRoYXQgZG9lc24ndCBtYXRjaCB0aGUgdG91Y2hJRCwgaWdub3JlIGl0IChmb3IgbXVsdGktdG91Y2gpXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRvdWNoRXZlbnRUYXJnZXQgJiYgYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyAmJiAhdG91Y2hEcmFnQXhpcykge1xuICAgICAgICAvL0FuZHJvaWQgYnJvd3NlcnMgZm9yY2UgdXMgdG8gZGVjaWRlIG9uIHRoZSBmaXJzdCBcInRvdWNobW92ZVwiIGV2ZW50IGlmIHdlIHNob3VsZCBhbGxvdyB0aGUgZGVmYXVsdCAoc2Nyb2xsaW5nKSBiZWhhdmlvciBvciBwcmV2ZW50RGVmYXVsdCgpLiBPdGhlcndpc2UsIGEgXCJ0b3VjaGNhbmNlbFwiIHdpbGwgYmUgZmlyZWQgYW5kIHRoZW4gbm8gXCJ0b3VjaG1vdmVcIiBvciBcInRvdWNoZW5kXCIgd2lsbCBmaXJlIGR1cmluZyB0aGUgc2Nyb2xsaW5nIChubyBnb29kKS5cbiAgICAgICAgX3BvaW50MS54ID0gZS5wYWdlWCAtIChpc0ZpeGVkID8gX2dldERvY1Njcm9sbExlZnQob3duZXJEb2MpIDogMCk7XG4gICAgICAgIF9wb2ludDEueSA9IGUucGFnZVkgLSAoaXNGaXhlZCA/IF9nZXREb2NTY3JvbGxUb3Aob3duZXJEb2MpIDogMCk7XG4gICAgICAgIG1hdHJpeCAmJiBtYXRyaXguYXBwbHkoX3BvaW50MSwgX3BvaW50MSk7XG4gICAgICAgIHBvaW50ZXJYID0gX3BvaW50MS54O1xuICAgICAgICBwb2ludGVyWSA9IF9wb2ludDEueTtcbiAgICAgICAgZHggPSBNYXRoLmFicyhwb2ludGVyWCAtIHN0YXJ0UG9pbnRlclgpO1xuICAgICAgICBkeSA9IE1hdGguYWJzKHBvaW50ZXJZIC0gc3RhcnRQb2ludGVyWSk7XG5cbiAgICAgICAgaWYgKGR4ICE9PSBkeSAmJiAoZHggPiBtaW5pbXVtTW92ZW1lbnQgfHwgZHkgPiBtaW5pbXVtTW92ZW1lbnQpIHx8IF9pc0FuZHJvaWQgJiYgYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyA9PT0gdG91Y2hEcmFnQXhpcykge1xuICAgICAgICAgIHRvdWNoRHJhZ0F4aXMgPSBkeCA+IGR5ICYmIGFsbG93WCA/IFwieFwiIDogXCJ5XCI7XG5cbiAgICAgICAgICBpZiAoYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyAmJiB0b3VjaERyYWdBeGlzICE9PSBhbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ0b3VjaGZvcmNlY2hhbmdlXCIsIF9wcmV2ZW50RGVmYXVsdCk7IC8vIHByZXZlbnRzIG5hdGl2ZSB0b3VjaCBzY3JvbGxpbmcgZnJvbSB0YWtpbmcgb3ZlciBpZiB0aGUgdXNlciBzdGFydGVkIGRyYWdnaW5nIGluIHRoZSBvdGhlciBkaXJlY3Rpb24gaW4gaU9TIFNhZmFyaVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYudmFycy5sb2NrQXhpc09uVG91Y2hTY3JvbGwgIT09IGZhbHNlICYmIGFsbG93WCAmJiBhbGxvd1kpIHtcbiAgICAgICAgICAgIHNlbGYubG9ja2VkQXhpcyA9IHRvdWNoRHJhZ0F4aXMgPT09IFwieFwiID8gXCJ5XCIgOiBcInhcIjtcbiAgICAgICAgICAgIF9pc0Z1bmN0aW9uKHNlbGYudmFycy5vbkxvY2tBeGlzKSAmJiBzZWxmLnZhcnMub25Mb2NrQXhpcy5jYWxsKHNlbGYsIG9yaWdpbmFsRXZlbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChfaXNBbmRyb2lkICYmIGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgPT09IHRvdWNoRHJhZ0F4aXMpIHtcbiAgICAgICAgICAgIG9uUmVsZWFzZShvcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxmLmFsbG93RXZlbnREZWZhdWx0ICYmICghYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyB8fCB0b3VjaERyYWdBeGlzICYmIGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgIT09IHRvdWNoRHJhZ0F4aXMpICYmIG9yaWdpbmFsRXZlbnQuY2FuY2VsYWJsZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgX3ByZXZlbnREZWZhdWx0KG9yaWdpbmFsRXZlbnQpO1xuXG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChpc1ByZXZlbnRpbmdEZWZhdWx0KSB7XG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuYXV0b1Njcm9sbCkge1xuICAgICAgICBjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBzZXRQb2ludGVyUG9zaXRpb24oZS5wYWdlWCwgZS5wYWdlWSwgaGFzTW92ZUNhbGxiYWNrKTtcbiAgICB9LFxuICAgICAgICBzZXRQb2ludGVyUG9zaXRpb24gPSBmdW5jdGlvbiBzZXRQb2ludGVyUG9zaXRpb24ocG9pbnRlclgsIHBvaW50ZXJZLCBpbnZva2VPbk1vdmUpIHtcbiAgICAgIHZhciBkcmFnVG9sZXJhbmNlID0gMSAtIHNlbGYuZHJhZ1Jlc2lzdGFuY2UsXG4gICAgICAgICAgZWRnZVRvbGVyYW5jZSA9IDEgLSBzZWxmLmVkZ2VSZXNpc3RhbmNlLFxuICAgICAgICAgIHByZXZQb2ludGVyWCA9IHNlbGYucG9pbnRlclgsXG4gICAgICAgICAgcHJldlBvaW50ZXJZID0gc2VsZi5wb2ludGVyWSxcbiAgICAgICAgICBwcmV2U3RhcnRFbGVtZW50WSA9IHN0YXJ0RWxlbWVudFksXG4gICAgICAgICAgcHJldlggPSBzZWxmLngsXG4gICAgICAgICAgcHJldlkgPSBzZWxmLnksXG4gICAgICAgICAgcHJldkVuZFggPSBzZWxmLmVuZFgsXG4gICAgICAgICAgcHJldkVuZFkgPSBzZWxmLmVuZFksXG4gICAgICAgICAgcHJldkVuZFJvdGF0aW9uID0gc2VsZi5lbmRSb3RhdGlvbixcbiAgICAgICAgICBwcmV2RGlydHkgPSBkaXJ0eSxcbiAgICAgICAgICB4Q2hhbmdlLFxuICAgICAgICAgIHlDaGFuZ2UsXG4gICAgICAgICAgeCxcbiAgICAgICAgICB5LFxuICAgICAgICAgIGRpZixcbiAgICAgICAgICB0ZW1wO1xuICAgICAgc2VsZi5wb2ludGVyWCA9IHBvaW50ZXJYO1xuICAgICAgc2VsZi5wb2ludGVyWSA9IHBvaW50ZXJZO1xuXG4gICAgICBpZiAoaXNGaXhlZCkge1xuICAgICAgICBwb2ludGVyWCAtPSBfZ2V0RG9jU2Nyb2xsTGVmdChvd25lckRvYyk7XG4gICAgICAgIHBvaW50ZXJZIC09IF9nZXREb2NTY3JvbGxUb3Aob3duZXJEb2MpO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25Nb2RlKSB7XG4gICAgICAgIHkgPSBNYXRoLmF0YW4yKHJvdGF0aW9uT3JpZ2luLnkgLSBwb2ludGVyWSwgcG9pbnRlclggLSByb3RhdGlvbk9yaWdpbi54KSAqIF9SQUQyREVHO1xuICAgICAgICBkaWYgPSBzZWxmLnkgLSB5O1xuXG4gICAgICAgIGlmIChkaWYgPiAxODApIHtcbiAgICAgICAgICBzdGFydEVsZW1lbnRZIC09IDM2MDtcbiAgICAgICAgICBzZWxmLnkgPSB5O1xuICAgICAgICB9IGVsc2UgaWYgKGRpZiA8IC0xODApIHtcbiAgICAgICAgICBzdGFydEVsZW1lbnRZICs9IDM2MDtcbiAgICAgICAgICBzZWxmLnkgPSB5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYueCAhPT0gc3RhcnRFbGVtZW50WCB8fCBNYXRoLmFicyhzdGFydEVsZW1lbnRZIC0geSkgPiBtaW5pbXVtTW92ZW1lbnQpIHtcbiAgICAgICAgICBzZWxmLnkgPSB5O1xuICAgICAgICAgIHggPSBzdGFydEVsZW1lbnRYICsgKHN0YXJ0RWxlbWVudFkgLSB5KSAqIGRyYWdUb2xlcmFuY2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeCA9IHN0YXJ0RWxlbWVudFg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgICB0ZW1wID0gcG9pbnRlclggKiBtYXRyaXguYSArIHBvaW50ZXJZICogbWF0cml4LmMgKyBtYXRyaXguZTtcbiAgICAgICAgICBwb2ludGVyWSA9IHBvaW50ZXJYICogbWF0cml4LmIgKyBwb2ludGVyWSAqIG1hdHJpeC5kICsgbWF0cml4LmY7XG4gICAgICAgICAgcG9pbnRlclggPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgeUNoYW5nZSA9IHBvaW50ZXJZIC0gc3RhcnRQb2ludGVyWTtcbiAgICAgICAgeENoYW5nZSA9IHBvaW50ZXJYIC0gc3RhcnRQb2ludGVyWDtcblxuICAgICAgICBpZiAoeUNoYW5nZSA8IG1pbmltdW1Nb3ZlbWVudCAmJiB5Q2hhbmdlID4gLW1pbmltdW1Nb3ZlbWVudCkge1xuICAgICAgICAgIHlDaGFuZ2UgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHhDaGFuZ2UgPCBtaW5pbXVtTW92ZW1lbnQgJiYgeENoYW5nZSA+IC1taW5pbXVtTW92ZW1lbnQpIHtcbiAgICAgICAgICB4Q2hhbmdlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoc2VsZi5sb2NrQXhpcyB8fCBzZWxmLmxvY2tlZEF4aXMpICYmICh4Q2hhbmdlIHx8IHlDaGFuZ2UpKSB7XG4gICAgICAgICAgdGVtcCA9IHNlbGYubG9ja2VkQXhpcztcblxuICAgICAgICAgIGlmICghdGVtcCkge1xuICAgICAgICAgICAgc2VsZi5sb2NrZWRBeGlzID0gdGVtcCA9IGFsbG93WCAmJiBNYXRoLmFicyh4Q2hhbmdlKSA+IE1hdGguYWJzKHlDaGFuZ2UpID8gXCJ5XCIgOiBhbGxvd1kgPyBcInhcIiA6IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0ZW1wICYmIF9pc0Z1bmN0aW9uKHNlbGYudmFycy5vbkxvY2tBeGlzKSkge1xuICAgICAgICAgICAgICBzZWxmLnZhcnMub25Mb2NrQXhpcy5jYWxsKHNlbGYsIHNlbGYucG9pbnRlckV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGVtcCA9PT0gXCJ5XCIpIHtcbiAgICAgICAgICAgIHlDaGFuZ2UgPSAwO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGVtcCA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgIHhDaGFuZ2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHggPSBfcm91bmQoc3RhcnRFbGVtZW50WCArIHhDaGFuZ2UgKiBkcmFnVG9sZXJhbmNlKTtcbiAgICAgICAgeSA9IF9yb3VuZChzdGFydEVsZW1lbnRZICsgeUNoYW5nZSAqIGRyYWdUb2xlcmFuY2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHNuYXBYIHx8IHNuYXBZIHx8IHNuYXBYWSkgJiYgKHNlbGYueCAhPT0geCB8fCBzZWxmLnkgIT09IHkgJiYgIXJvdGF0aW9uTW9kZSkpIHtcbiAgICAgICAgaWYgKHNuYXBYWSkge1xuICAgICAgICAgIF90ZW1wMS54ID0geDtcbiAgICAgICAgICBfdGVtcDEueSA9IHk7XG4gICAgICAgICAgdGVtcCA9IHNuYXBYWShfdGVtcDEpO1xuICAgICAgICAgIHggPSBfcm91bmQodGVtcC54KTtcbiAgICAgICAgICB5ID0gX3JvdW5kKHRlbXAueSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc25hcFgpIHtcbiAgICAgICAgICB4ID0gX3JvdW5kKHNuYXBYKHgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzbmFwWSkge1xuICAgICAgICAgIHkgPSBfcm91bmQoc25hcFkoeSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGhhc0JvdW5kcykge1xuICAgICAgICBpZiAoeCA+IG1heFgpIHtcbiAgICAgICAgICB4ID0gbWF4WCArIE1hdGgucm91bmQoKHggLSBtYXhYKSAqIGVkZ2VUb2xlcmFuY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHggPCBtaW5YKSB7XG4gICAgICAgICAgeCA9IG1pblggKyBNYXRoLnJvdW5kKCh4IC0gbWluWCkgKiBlZGdlVG9sZXJhbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcm90YXRpb25Nb2RlKSB7XG4gICAgICAgICAgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgICAgICB5ID0gTWF0aC5yb3VuZChtYXhZICsgKHkgLSBtYXhZKSAqIGVkZ2VUb2xlcmFuY2UpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICAgIHkgPSBNYXRoLnJvdW5kKG1pblkgKyAoeSAtIG1pblkpICogZWRnZVRvbGVyYW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLnggIT09IHggfHwgc2VsZi55ICE9PSB5ICYmICFyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIHNlbGYuZW5kUm90YXRpb24gPSBzZWxmLnggPSBzZWxmLmVuZFggPSB4O1xuICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWxsb3dZKSB7XG4gICAgICAgICAgICBzZWxmLnkgPSBzZWxmLmVuZFkgPSB5O1xuICAgICAgICAgICAgZGlydHkgPSB0cnVlOyAvL2EgZmxhZyB0aGF0IGluZGljYXRlcyB3ZSBuZWVkIHRvIHJlbmRlciB0aGUgdGFyZ2V0IG5leHQgdGltZSB0aGUgVHdlZW5MaXRlLnRpY2tlciBkaXNwYXRjaGVzIGEgXCJ0aWNrXCIgZXZlbnQgKHR5cGljYWxseSBvbiBhIHJlcXVlc3RBbmltYXRpb25GcmFtZSkgLSB0aGlzIGlzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uICh3ZSBzaG91bGRuJ3QgcmVuZGVyIG9uIGV2ZXJ5IG1vdmUgYmVjYXVzZSBzb21ldGltZXMgbWFueSBtb3ZlIGV2ZW50cyBjYW4gZ2V0IGRpc3BhdGNoZWQgYmV0d2VlbiBzY3JlZW4gcmVmcmVzaGVzLCBhbmQgdGhhdCdkIGJlIHdhc3RlZnVsIHRvIHJlbmRlciBldmVyeSB0aW1lKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbGxvd1gpIHtcbiAgICAgICAgICAgIHNlbGYueCA9IHNlbGYuZW5kWCA9IHg7XG4gICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpbnZva2VPbk1vdmUgfHwgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJtb3ZlXCIsIFwib25Nb3ZlXCIpICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmICghc2VsZi5pc0RyYWdnaW5nICYmIHNlbGYuaXNQcmVzc2VkKSB7XG4gICAgICAgICAgICBzZWxmLmlzRHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcImRyYWdzdGFydFwiLCBcIm9uRHJhZ1N0YXJ0XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL3JldmVydCBiZWNhdXNlIHRoZSBvbk1vdmUgcmV0dXJuZWQgZmFsc2UhXG4gICAgICAgICAgc2VsZi5wb2ludGVyWCA9IHByZXZQb2ludGVyWDtcbiAgICAgICAgICBzZWxmLnBvaW50ZXJZID0gcHJldlBvaW50ZXJZO1xuICAgICAgICAgIHN0YXJ0RWxlbWVudFkgPSBwcmV2U3RhcnRFbGVtZW50WTtcbiAgICAgICAgICBzZWxmLnggPSBwcmV2WDtcbiAgICAgICAgICBzZWxmLnkgPSBwcmV2WTtcbiAgICAgICAgICBzZWxmLmVuZFggPSBwcmV2RW5kWDtcbiAgICAgICAgICBzZWxmLmVuZFkgPSBwcmV2RW5kWTtcbiAgICAgICAgICBzZWxmLmVuZFJvdGF0aW9uID0gcHJldkVuZFJvdGF0aW9uO1xuICAgICAgICAgIGRpcnR5ID0gcHJldkRpcnR5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgLy9jYWxsZWQgd2hlbiB0aGUgbW91c2UvdG91Y2ggaXMgcmVsZWFzZWRcbiAgICBvblJlbGVhc2UgPSBmdW5jdGlvbiBvblJlbGVhc2UoZSwgZm9yY2UpIHtcbiAgICAgIGlmICghZW5hYmxlZCB8fCAhc2VsZi5pc1ByZXNzZWQgfHwgZSAmJiB0b3VjaElEICE9IG51bGwgJiYgIWZvcmNlICYmIChlLnBvaW50ZXJJZCAmJiBlLnBvaW50ZXJJZCAhPT0gdG91Y2hJRCAmJiBlLnRhcmdldCAhPT0gdGFyZ2V0IHx8IGUuY2hhbmdlZFRvdWNoZXMgJiYgIV9oYXNUb3VjaElEKGUuY2hhbmdlZFRvdWNoZXMsIHRvdWNoSUQpKSkge1xuICAgICAgICAvL2ZvciBzb21lIE1pY3Jvc29mdCBicm93c2Vycywgd2UgbXVzdCBhdHRhY2ggdGhlIGxpc3RlbmVyIHRvIHRoZSBkb2MgcmF0aGVyIHRoYW4gdGhlIHRyaWdnZXIgc28gdGhhdCB3aGVuIHRoZSBmaW5nZXIgbW92ZXMgb3V0c2lkZSB0aGUgYm91bmRzIG9mIHRoZSB0cmlnZ2VyLCB0aGluZ3Mgc3RpbGwgd29yay4gU28gaWYgdGhlIGV2ZW50IHdlJ3JlIHJlY2VpdmluZyBoYXMgYSBwb2ludGVySWQgdGhhdCBkb2Vzbid0IG1hdGNoIHRoZSB0b3VjaElELCBpZ25vcmUgaXQgKGZvciBtdWx0aS10b3VjaClcbiAgICAgICAgaXNQcmV2ZW50aW5nRGVmYXVsdCAmJiBlICYmIGVuYWJsZWQgJiYgX3ByZXZlbnREZWZhdWx0KGUpOyAvLyBpbiBzb21lIGJyb3dzZXJzLCB3ZSBtdXN0IGxpc3RlbiBmb3IgbXVsdGlwbGUgZXZlbnQgdHlwZXMgbGlrZSB0b3VjaGVuZCwgcG9pbnRlcnVwLCBtb3VzZXVwLiBUaGUgZmlyc3QgdGltZSB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCwgd2UgcmVjb3JkIHdoZXRoZXIgb3Igbm90IHdlIF9wcmV2ZW50RGVmYXVsdCgpIHNvIHRoYXQgb24gZHVwbGljYXRlIGNhbGxzLCB3ZSBjYW4gZG8gdGhlIHNhbWUgaWYgbmVjZXNzYXJ5LlxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gZSxcbiAgICAgICAgICB3YXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZyxcbiAgICAgICAgICBpc0NvbnRleHRNZW51UmVsZWFzZSA9IHNlbGYudmFycy5hbGxvd0NvbnRleHRNZW51ICYmIGUgJiYgKGUuY3RybEtleSB8fCBlLndoaWNoID4gMiksXG4gICAgICAgICAgcGxhY2Vob2xkZXJEZWxheWVkQ2FsbCA9IGdzYXAuZGVsYXllZENhbGwoMC4wMDEsIHJlbW92ZVBsYWNlaG9sZGVyKSxcbiAgICAgICAgICB0b3VjaGVzLFxuICAgICAgICAgIGksXG4gICAgICAgICAgc3ludGhldGljRXZlbnQsXG4gICAgICAgICAgZXZlbnRUYXJnZXQsXG4gICAgICAgICAgc3ludGhldGljQ2xpY2s7XG5cbiAgICAgIGlmICh0b3VjaEV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNoZW5kXCIsIG9uUmVsZWFzZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2htb3ZlXCIsIG9uTW92ZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2hjYW5jZWxcIiwgb25SZWxlYXNlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwidG91Y2hzdGFydFwiLCBfb25NdWx0aVRvdWNoRG9jdW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcIm1vdXNlbW92ZVwiLCBvbk1vdmUpO1xuICAgICAgfVxuXG4gICAgICBfcmVtb3ZlTGlzdGVuZXIoX3dpbiwgXCJ0b3VjaGZvcmNlY2hhbmdlXCIsIF9wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgIGlmICghX3N1cHBvcnRzUG9pbnRlciB8fCAhdG91Y2hFdmVudFRhcmdldCkge1xuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwibW91c2V1cFwiLCBvblJlbGVhc2UpO1xuXG4gICAgICAgIGUgJiYgZS50YXJnZXQgJiYgX3JlbW92ZUxpc3RlbmVyKGUudGFyZ2V0LCBcIm1vdXNldXBcIiwgb25SZWxlYXNlKTtcbiAgICAgIH1cblxuICAgICAgZGlydHkgPSBmYWxzZTtcblxuICAgICAgaWYgKHdhc0RyYWdnaW5nKSB7XG4gICAgICAgIGRyYWdFbmRUaW1lID0gX2xhc3REcmFnVGltZSA9IF9nZXRUaW1lKCk7XG4gICAgICAgIHNlbGYuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNDbGlja2luZyAmJiAhaXNDb250ZXh0TWVudVJlbGVhc2UpIHtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoZS50YXJnZXQsIFwiY2hhbmdlXCIsIG9uUmVsZWFzZSk7XG5cbiAgICAgICAgICBzZWxmLnBvaW50ZXJFdmVudCA9IG9yaWdpbmFsRXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBfc2V0U2VsZWN0YWJsZSh0cmlnZ2VycywgZmFsc2UpO1xuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwicmVsZWFzZVwiLCBcIm9uUmVsZWFzZVwiKTtcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcImNsaWNrXCIsIFwib25DbGlja1wiKTtcblxuICAgICAgICBpc0NsaWNraW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3JlbW92ZUZyb21SZW5kZXJRdWV1ZShyZW5kZXIpO1xuXG4gICAgICBpID0gdHJpZ2dlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICAgICAgX3NldFN0eWxlKHRyaWdnZXJzW2ldLCBcImN1cnNvclwiLCB2YXJzLmN1cnNvciB8fCAodmFycy5jdXJzb3IgIT09IGZhbHNlID8gX2RlZmF1bHRDdXJzb3IgOiBudWxsKSk7XG4gICAgICB9XG5cbiAgICAgIF9kcmFnQ291bnQtLTtcblxuICAgICAgaWYgKGUpIHtcbiAgICAgICAgdG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXM7XG5cbiAgICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgICAvL3RvdWNoIGV2ZW50cyBzdG9yZSB0aGUgZGF0YSBzbGlnaHRseSBkaWZmZXJlbnRseVxuICAgICAgICAgIGUgPSB0b3VjaGVzWzBdO1xuXG4gICAgICAgICAgaWYgKGUgIT09IHRvdWNoICYmIGUuaWRlbnRpZmllciAhPT0gdG91Y2hJRCkge1xuICAgICAgICAgICAgLy9Vc3VhbGx5IGNoYW5nZWRUb3VjaGVzWzBdIHdpbGwgYmUgd2hhdCB3ZSdyZSBsb29raW5nIGZvciwgYnV0IGluIGNhc2UgaXQncyBub3QsIGxvb2sgdGhyb3VnaCB0aGUgcmVzdCBvZiB0aGUgYXJyYXkuLi4oYW5kIEFuZHJvaWQgYnJvd3NlcnMgZG9uJ3QgcmV1c2UgdGhlIGV2ZW50IGxpa2UgaU9TKVxuICAgICAgICAgICAgaSA9IHRvdWNoZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICB3aGlsZSAoLS1pID4gLTEgJiYgKGUgPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyICE9PSB0b3VjaElEICYmIGUudGFyZ2V0ICE9PSB0YXJnZXQpIHt9XG5cbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5wb2ludGVyRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgICAgICBzZWxmLnBvaW50ZXJYID0gZS5wYWdlWDtcbiAgICAgICAgc2VsZi5wb2ludGVyWSA9IGUucGFnZVk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0NvbnRleHRNZW51UmVsZWFzZSAmJiBvcmlnaW5hbEV2ZW50KSB7XG4gICAgICAgIF9wcmV2ZW50RGVmYXVsdChvcmlnaW5hbEV2ZW50KTtcblxuICAgICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0ID0gdHJ1ZTtcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInJlbGVhc2VcIiwgXCJvblJlbGVhc2VcIik7XG4gICAgICB9IGVsc2UgaWYgKG9yaWdpbmFsRXZlbnQgJiYgIXdhc0RyYWdnaW5nKSB7XG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaW50ZXJydXB0ZWQgJiYgKHZhcnMuc25hcCB8fCB2YXJzLmJvdW5kcykpIHtcbiAgICAgICAgICAvL290aGVyd2lzZSwgaWYgdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBvYmplY3Qgd2hpbGUgaXQncyBhbmltYXRpbmcgdG8gYSBzbmFwcGVkIHBvc2l0aW9uLCBhbmQgdGhlbiByZWxlYXNlcyB3aXRob3V0IG1vdmluZyAzIHBpeGVscywgaXQgd2lsbCBqdXN0IHN0YXkgdGhlcmUgKGl0IHNob3VsZCBhbmltYXRlL3NuYXApXG4gICAgICAgICAgYW5pbWF0ZSh2YXJzLmluZXJ0aWEgfHwgdmFycy50aHJvd1Byb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwicmVsZWFzZVwiLCBcIm9uUmVsZWFzZVwiKTtcblxuICAgICAgICBpZiAoKCFfaXNBbmRyb2lkIHx8IG9yaWdpbmFsRXZlbnQudHlwZSAhPT0gXCJ0b3VjaG1vdmVcIikgJiYgb3JpZ2luYWxFdmVudC50eXBlLmluZGV4T2YoXCJjYW5jZWxcIikgPT09IC0xKSB7XG4gICAgICAgICAgLy90byBhY2NvbW1vZGF0ZSBuYXRpdmUgc2Nyb2xsaW5nIG9uIEFuZHJvaWQgZGV2aWNlcywgd2UgaGF2ZSB0byBpbW1lZGlhdGVseSBjYWxsIG9uUmVsZWFzZSgpIG9uIHRoZSBmaXJzdCB0b3VjaG1vdmUgZXZlbnQsIGJ1dCB0aGF0IHNob3VsZG4ndCB0cmlnZ2VyIGEgXCJjbGlja1wiLlxuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiY2xpY2tcIiwgXCJvbkNsaWNrXCIpO1xuXG4gICAgICAgICAgaWYgKF9nZXRUaW1lKCkgLSBjbGlja1RpbWUgPCAzMDApIHtcbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiZG91YmxlY2xpY2tcIiwgXCJvbkRvdWJsZUNsaWNrXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGV2ZW50VGFyZ2V0ID0gb3JpZ2luYWxFdmVudC50YXJnZXQgfHwgdGFyZ2V0OyAvL29sZCBJRSB1c2VzIHNyY0VsZW1lbnRcblxuICAgICAgICAgIGNsaWNrVGltZSA9IF9nZXRUaW1lKCk7XG5cbiAgICAgICAgICBzeW50aGV0aWNDbGljayA9IGZ1bmN0aW9uIHN5bnRoZXRpY0NsaWNrKCkge1xuICAgICAgICAgICAgLy8gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB3b24ndCB0cnVzdCBzY3JpcHQtZ2VuZXJhdGVkIGNsaWNrcywgc28gaWYgdGhlIHVzZXIgdHJpZXMgdG8gY2xpY2sgb24gYSB2aWRlbyB0byBwbGF5IGl0LCBmb3IgZXhhbXBsZSwgaXQgc2ltcGx5IHdvbid0IHdvcmsuIFNpbmNlIGEgcmVndWxhciBcImNsaWNrXCIgZXZlbnQgd2lsbCBtb3N0IGxpa2VseSBiZSBnZW5lcmF0ZWQgYW55d2F5IChvbmUgdGhhdCBoYXMgaXRzIGlzVHJ1c3RlZCBmbGFnIHNldCB0byB0cnVlKSwgd2UgbXVzdCBzbGlnaHRseSBkZWxheSBvdXIgc2NyaXB0LWdlbmVyYXRlZCBjbGljayBzbyB0aGF0IHRoZSBcInJlYWxcIi90cnVzdGVkIG9uZSBpcyBwcmlvcml0aXplZC4gUmVtZW1iZXIsIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZSBldmVudHMgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgd2Ugc3VwcHJlc3MgYWxsIGJ1dCB0aGUgZmlyc3Qgb25lLiBTb21lIGJyb3dzZXJzIGRvbid0IGV2ZW4gdHJpZ2dlciB0aGUgXCJyZWFsXCIgb25lIGF0IGFsbCwgc28gb3VyIHN5bnRoZXRpYyBvbmUgaXMgYSBzYWZldHkgdmFsdmUgdGhhdCBlbnN1cmVzIHRoYXQgbm8gbWF0dGVyIHdoYXQsIGEgY2xpY2sgZXZlbnQgZG9lcyBnZXQgZGlzcGF0Y2hlZC5cbiAgICAgICAgICAgIGlmIChjbGlja1RpbWUgIT09IGNsaWNrRGlzcGF0Y2ggJiYgc2VsZi5lbmFibGVkKCkgJiYgIXNlbGYuaXNQcmVzc2VkICYmICFvcmlnaW5hbEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGV2ZW50VGFyZ2V0LmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgLy9zb21lIGJyb3dzZXJzIChsaWtlIG1vYmlsZSBTYWZhcmkpIGRvbid0IHByb3Blcmx5IHRyaWdnZXIgdGhlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvd25lckRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgIHN5bnRoZXRpY0V2ZW50ID0gb3duZXJEb2MuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFdmVudC5pbml0TW91c2VFdmVudChcImNsaWNrXCIsIHRydWUsIHRydWUsIF93aW4sIDEsIHNlbGYucG9pbnRlckV2ZW50LnNjcmVlblgsIHNlbGYucG9pbnRlckV2ZW50LnNjcmVlblksIHNlbGYucG9pbnRlclgsIHNlbGYucG9pbnRlclksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgICAgICAgICAgICAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KHN5bnRoZXRpY0V2ZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoIV9pc0FuZHJvaWQgJiYgIW9yaWdpbmFsRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgLy9pT1MgU2FmYXJpIHJlcXVpcmVzIHRoZSBzeW50aGV0aWMgY2xpY2sgdG8gaGFwcGVuIGltbWVkaWF0ZWx5IG9yIGVsc2UgaXQgc2ltcGx5IHdvbid0IHdvcmssIGJ1dCBBbmRyb2lkIGRvZXNuJ3QgcGxheSBuaWNlLlxuICAgICAgICAgICAgZ3NhcC5kZWxheWVkQ2FsbCgwLjA1LCBzeW50aGV0aWNDbGljayk7IC8vaW4gYWRkaXRpb24gdG8gdGhlIGlPUyBidWcgd29ya2Fyb3VuZCwgdGhlcmUncyBhIEZpcmVmb3ggaXNzdWUgd2l0aCBjbGlja2luZyBvbiB0aGluZ3MgbGlrZSBhIHZpZGVvIHRvIHBsYXksIHNvIHdlIG11c3QgZmFrZSBhIGNsaWNrIGV2ZW50IGluIGEgc2xpZ2h0bHkgZGVsYXllZCBmYXNoaW9uLiBQcmV2aW91c2x5LCB3ZSBsaXN0ZW5lZCBmb3IgdGhlIFwiY2xpY2tcIiBldmVudCB3aXRoIFwiY2FwdHVyZVwiIGZhbHNlIHdoaWNoIHNvbHZlZCB0aGUgdmlkZW8tY2xpY2stdG8tcGxheSBpc3N1ZSwgYnV0IGl0IHdvdWxkIGFsbG93IHRoZSBcImNsaWNrXCIgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZCB0d2ljZSBsaWtlIGlmIHlvdSB3ZXJlIHVzaW5nIGEgalF1ZXJ5LmNsaWNrKCkgYmVjYXVzZSB0aGF0IHdhcyBoYW5kbGVkIGluIHRoZSBjYXB0dXJlIHBoYXNlLCB0aHVzIHdlIGhhZCB0byBzd2l0Y2ggdG8gdGhlIGNhcHR1cmUgcGhhc2UgdG8gYXZvaWQgdGhlIGRvdWJsZS1kaXNwYXRjaGluZywgYnV0IGRvIHRoZSBkZWxheWVkIHN5bnRoZXRpYyBjbGljay4gRG9uJ3QgZmlyZSBpdCB0b28gZmFzdCAobGlrZSAwLjAwMDAxKSBiZWNhdXNlIHdlIHdhbnQgdG8gZ2l2ZSB0aGUgbmF0aXZlIGV2ZW50IGEgY2hhbmNlIHRvIGZpcmUgZmlyc3QgYXMgaXQncyBcInRydXN0ZWRcIi5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGUodmFycy5pbmVydGlhIHx8IHZhcnMudGhyb3dQcm9wcyk7IC8vd2lsbCBza2lwIGlmIGluZXJ0aWEvdGhyb3dQcm9wcyBpc24ndCBkZWZpbmVkIG9yIEludGVydGlhUGx1Z2luIGlzbid0IGxvYWRlZC5cblxuICAgICAgICBpZiAoIXNlbGYuYWxsb3dFdmVudERlZmF1bHQgJiYgb3JpZ2luYWxFdmVudCAmJiAodmFycy5kcmFnQ2xpY2thYmxlcyAhPT0gZmFsc2UgfHwgIWlzQ2xpY2thYmxlLmNhbGwoc2VsZiwgb3JpZ2luYWxFdmVudC50YXJnZXQpKSAmJiB3YXNEcmFnZ2luZyAmJiAoIWFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgfHwgdG91Y2hEcmFnQXhpcyAmJiBhbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nID09PSB0b3VjaERyYWdBeGlzKSAmJiBvcmlnaW5hbEV2ZW50LmNhbmNlbGFibGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaXNQcmV2ZW50aW5nRGVmYXVsdCA9IHRydWU7XG5cbiAgICAgICAgICBfcHJldmVudERlZmF1bHQob3JpZ2luYWxFdmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNQcmV2ZW50aW5nRGVmYXVsdCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJyZWxlYXNlXCIsIFwib25SZWxlYXNlXCIpO1xuICAgICAgfVxuXG4gICAgICBpc1R3ZWVuaW5nKCkgJiYgcGxhY2Vob2xkZXJEZWxheWVkQ2FsbC5kdXJhdGlvbihzZWxmLnR3ZWVuLmR1cmF0aW9uKCkpOyAvL3N5bmMgdGhlIHRpbWluZyBzbyB0aGF0IHRoZSBwbGFjZWhvbGRlciBESVYgZ2V0c1xuXG4gICAgICB3YXNEcmFnZ2luZyAmJiBfZGlzcGF0Y2hFdmVudChzZWxmLCBcImRyYWdlbmRcIiwgXCJvbkRyYWdFbmRcIik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgICAgICB1cGRhdGVTY3JvbGwgPSBmdW5jdGlvbiB1cGRhdGVTY3JvbGwoZSkge1xuICAgICAgaWYgKGUgJiYgc2VsZi5pc0RyYWdnaW5nICYmICFzY3JvbGxQcm94eSkge1xuICAgICAgICB2YXIgcGFyZW50ID0gZS50YXJnZXQgfHwgdGFyZ2V0LnBhcmVudE5vZGUsXG4gICAgICAgICAgICBkZWx0YVggPSBwYXJlbnQuc2Nyb2xsTGVmdCAtIHBhcmVudC5fZ3NTY3JvbGxYLFxuICAgICAgICAgICAgZGVsdGFZID0gcGFyZW50LnNjcm9sbFRvcCAtIHBhcmVudC5fZ3NTY3JvbGxZO1xuXG4gICAgICAgIGlmIChkZWx0YVggfHwgZGVsdGFZKSB7XG4gICAgICAgICAgaWYgKG1hdHJpeCkge1xuICAgICAgICAgICAgc3RhcnRQb2ludGVyWCAtPSBkZWx0YVggKiBtYXRyaXguYSArIGRlbHRhWSAqIG1hdHJpeC5jO1xuICAgICAgICAgICAgc3RhcnRQb2ludGVyWSAtPSBkZWx0YVkgKiBtYXRyaXguZCArIGRlbHRhWCAqIG1hdHJpeC5iO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFydFBvaW50ZXJYIC09IGRlbHRhWDtcbiAgICAgICAgICAgIHN0YXJ0UG9pbnRlclkgLT0gZGVsdGFZO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudC5fZ3NTY3JvbGxYICs9IGRlbHRhWDtcbiAgICAgICAgICBwYXJlbnQuX2dzU2Nyb2xsWSArPSBkZWx0YVk7XG4gICAgICAgICAgc2V0UG9pbnRlclBvc2l0aW9uKHNlbGYucG9pbnRlclgsIHNlbGYucG9pbnRlclkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgb25DbGljayA9IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgLy90aGlzIHdhcyBhIGh1Z2UgcGFpbiBpbiB0aGUgbmVjayB0byBhbGlnbiBhbGwgdGhlIHZhcmlvdXMgYnJvd3NlcnMgYW5kIHRoZWlyIGJlaGF2aW9ycy4gQ2hyb21lLCBGaXJlZm94LCBTYWZhcmksIE9wZXJhLCBBbmRyb2lkLCBhbmQgTWljcm9zb2Z0IEVkZ2UgYWxsIGhhbmRsZSBldmVudHMgZGlmZmVyZW50bHkhIFNvbWUgd2lsbCBvbmx5IHRyaWdnZXIgbmF0aXZlIGJlaGF2aW9yIChsaWtlIGNoZWNrYm94IHRvZ2dsaW5nKSBmcm9tIHRydXN0ZWQgZXZlbnRzLiBPdGhlcnMgZG9uJ3QgZXZlbiBzdXBwb3J0IGlzVHJ1c3RlZCwgYnV0IHJlcXVpcmUgMiBldmVudHMgdG8gZmxvdyB0aHJvdWdoIGJlZm9yZSB0cmlnZ2VyaW5nIG5hdGl2ZSBiZWhhdmlvci4gRWRnZSB0cmVhdHMgZXZlcnl0aGluZyBhcyB0cnVzdGVkIGJ1dCBhbHNvIG1hbmRhdGVzIHRoYXQgMiBmbG93IHRocm91Z2ggdG8gdHJpZ2dlciB0aGUgY29ycmVjdCBuYXRpdmUgYmVoYXZpb3IuXG4gICAgICB2YXIgdGltZSA9IF9nZXRUaW1lKCksXG4gICAgICAgICAgcmVjZW50bHlDbGlja2VkID0gdGltZSAtIGNsaWNrVGltZSA8IDQwLFxuICAgICAgICAgIHJlY2VudGx5RHJhZ2dlZCA9IHRpbWUgLSBkcmFnRW5kVGltZSA8IDQwLFxuICAgICAgICAgIGFscmVhZHlEaXNwYXRjaGVkID0gcmVjZW50bHlDbGlja2VkICYmIGNsaWNrRGlzcGF0Y2ggPT09IGNsaWNrVGltZSxcbiAgICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gc2VsZi5wb2ludGVyRXZlbnQgJiYgc2VsZi5wb2ludGVyRXZlbnQuZGVmYXVsdFByZXZlbnRlZCxcbiAgICAgICAgICBhbHJlYWR5RGlzcGF0Y2hlZFRydXN0ZWQgPSByZWNlbnRseUNsaWNrZWQgJiYgdHJ1c3RlZENsaWNrRGlzcGF0Y2ggPT09IGNsaWNrVGltZSxcbiAgICAgICAgICB0cnVzdGVkID0gZS5pc1RydXN0ZWQgfHwgZS5pc1RydXN0ZWQgPT0gbnVsbCAmJiByZWNlbnRseUNsaWNrZWQgJiYgYWxyZWFkeURpc3BhdGNoZWQ7IC8vbm90ZTogU2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCBpc1RydXN0ZWQsIGFuZCBpdCB3b24ndCBwcm9wZXJseSBleGVjdXRlIG5hdGl2ZSBiZWhhdmlvciAobGlrZSB0b2dnbGluZyBjaGVja2JveGVzKSBvbiB0aGUgZmlyc3Qgc3ludGhldGljIFwiY2xpY2tcIiBldmVudCAtIHdlIG11c3Qgd2FpdCBmb3IgdGhlIDJuZCBhbmQgdHJlYXQgaXQgYXMgdHJ1c3RlZCAoYnV0IHN0b3AgcHJvcGFnYXRpb24gYXQgdGhhdCBwb2ludCkuIENvbmZ1c2luZywgSSBrbm93LiBEb24ndCB5b3UgbG92ZSBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHkgY2hhbGxlbmdlcz9cblxuXG4gICAgICBpZiAoKGFscmVhZHlEaXNwYXRjaGVkIHx8IHJlY2VudGx5RHJhZ2dlZCAmJiBzZWxmLnZhcnMuc3VwcHJlc3NDbGlja09uRHJhZyAhPT0gZmFsc2UpICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNlbnRseUNsaWNrZWQgJiYgIShzZWxmLnBvaW50ZXJFdmVudCAmJiBzZWxmLnBvaW50ZXJFdmVudC5kZWZhdWx0UHJldmVudGVkKSAmJiAoIWFscmVhZHlEaXNwYXRjaGVkIHx8IHRydXN0ZWQgJiYgIWFscmVhZHlEaXNwYXRjaGVkVHJ1c3RlZCkpIHtcbiAgICAgICAgLy9sZXQgdGhlIGZpcnN0IGNsaWNrIHBhc3MgdGhyb3VnaCB1bmhpbmRlcmVkLiBMZXQgdGhlIG5leHQgb25lIG9ubHkgaWYgaXQncyB0cnVzdGVkLCB0aGVuIG5vIG1vcmUgKHN0b3AgcXVpY2stc3VjY2Vzc2lvbiBvbmVzKVxuICAgICAgICBpZiAodHJ1c3RlZCAmJiBhbHJlYWR5RGlzcGF0Y2hlZCkge1xuICAgICAgICAgIHRydXN0ZWRDbGlja0Rpc3BhdGNoID0gY2xpY2tUaW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xpY2tEaXNwYXRjaCA9IGNsaWNrVGltZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5pc1ByZXNzZWQgfHwgcmVjZW50bHlEcmFnZ2VkIHx8IHJlY2VudGx5Q2xpY2tlZCkge1xuICAgICAgICBpZiAoIXRydXN0ZWQgfHwgIWUuZGV0YWlsIHx8ICFyZWNlbnRseUNsaWNrZWQgfHwgZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIF9wcmV2ZW50RGVmYXVsdChlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlY2VudGx5Q2xpY2tlZCAmJiAhcmVjZW50bHlEcmFnZ2VkKSB7XG4gICAgICAgIC8vIGZvciBzY3JpcHQtdHJpZ2dlcmVkIGV2ZW50IGRpc3BhdGNoZXMsIGxpa2UgZWxlbWVudC5jbGljaygpXG4gICAgICAgIGUgJiYgZS50YXJnZXQgJiYgKHNlbGYucG9pbnRlckV2ZW50ID0gZSk7XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJjbGlja1wiLCBcIm9uQ2xpY2tcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgbG9jYWxpemVQb2ludCA9IGZ1bmN0aW9uIGxvY2FsaXplUG9pbnQocCkge1xuICAgICAgcmV0dXJuIG1hdHJpeCA/IHtcbiAgICAgICAgeDogcC54ICogbWF0cml4LmEgKyBwLnkgKiBtYXRyaXguYyArIG1hdHJpeC5lLFxuICAgICAgICB5OiBwLnggKiBtYXRyaXguYiArIHAueSAqIG1hdHJpeC5kICsgbWF0cml4LmZcbiAgICAgIH0gOiB7XG4gICAgICAgIHg6IHAueCxcbiAgICAgICAgeTogcC55XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBvbGQgPSBEcmFnZ2FibGUuZ2V0KHRhcmdldCk7XG4gICAgb2xkICYmIG9sZC5raWxsKCk7IC8vIGF2b2lkcyBkdXBsaWNhdGVzIChhbiBlbGVtZW50IGNhbiBvbmx5IGJlIGNvbnRyb2xsZWQgYnkgb25lIERyYWdnYWJsZSlcbiAgICAvL2dpdmUgdGhlIHVzZXIgYWNjZXNzIHRvIHN0YXJ0L3N0b3AgZHJhZ2dpbmcuLi5cblxuICAgIF90aGlzMi5zdGFydERyYWcgPSBmdW5jdGlvbiAoZXZlbnQsIGFsaWduKSB7XG4gICAgICB2YXIgcjEsIHIyLCBwMSwgcDI7XG4gICAgICBvblByZXNzKGV2ZW50IHx8IHNlbGYucG9pbnRlckV2ZW50LCB0cnVlKTsgLy9pZiB0aGUgcG9pbnRlciBpc24ndCBvbiB0b3Agb2YgdGhlIGVsZW1lbnQsIGFkanVzdCB0aGluZ3MgYWNjb3JkaW5nbHlcblxuICAgICAgaWYgKGFsaWduICYmICFzZWxmLmhpdFRlc3QoZXZlbnQgfHwgc2VsZi5wb2ludGVyRXZlbnQpKSB7XG4gICAgICAgIHIxID0gX3BhcnNlUmVjdChldmVudCB8fCBzZWxmLnBvaW50ZXJFdmVudCk7XG4gICAgICAgIHIyID0gX3BhcnNlUmVjdCh0YXJnZXQpO1xuICAgICAgICBwMSA9IGxvY2FsaXplUG9pbnQoe1xuICAgICAgICAgIHg6IHIxLmxlZnQgKyByMS53aWR0aCAvIDIsXG4gICAgICAgICAgeTogcjEudG9wICsgcjEuaGVpZ2h0IC8gMlxuICAgICAgICB9KTtcbiAgICAgICAgcDIgPSBsb2NhbGl6ZVBvaW50KHtcbiAgICAgICAgICB4OiByMi5sZWZ0ICsgcjIud2lkdGggLyAyLFxuICAgICAgICAgIHk6IHIyLnRvcCArIHIyLmhlaWdodCAvIDJcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXJ0UG9pbnRlclggLT0gcDEueCAtIHAyLng7XG4gICAgICAgIHN0YXJ0UG9pbnRlclkgLT0gcDEueSAtIHAyLnk7XG4gICAgICB9XG5cbiAgICAgIGlmICghc2VsZi5pc0RyYWdnaW5nKSB7XG4gICAgICAgIHNlbGYuaXNEcmFnZ2luZyA9IHRydWU7XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJkcmFnc3RhcnRcIiwgXCJvbkRyYWdTdGFydFwiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMyLmRyYWcgPSBvbk1vdmU7XG5cbiAgICBfdGhpczIuZW5kRHJhZyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gb25SZWxlYXNlKGUgfHwgc2VsZi5wb2ludGVyRXZlbnQsIHRydWUpO1xuICAgIH07XG5cbiAgICBfdGhpczIudGltZVNpbmNlRHJhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzZWxmLmlzRHJhZ2dpbmcgPyAwIDogKF9nZXRUaW1lKCkgLSBkcmFnRW5kVGltZSkgLyAxMDAwO1xuICAgIH07XG5cbiAgICBfdGhpczIudGltZVNpbmNlQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKF9nZXRUaW1lKCkgLSBjbGlja1RpbWUpIC8gMTAwMDtcbiAgICB9O1xuXG4gICAgX3RoaXMyLmhpdFRlc3QgPSBmdW5jdGlvbiAodGFyZ2V0LCB0aHJlc2hvbGQpIHtcbiAgICAgIHJldHVybiBEcmFnZ2FibGUuaGl0VGVzdChzZWxmLnRhcmdldCwgdGFyZ2V0LCB0aHJlc2hvbGQpO1xuICAgIH07XG5cbiAgICBfdGhpczIuZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24gKGZyb20sIGRpYWdvbmFsVGhyZXNob2xkKSB7XG4gICAgICAvL2Zyb20gY2FuIGJlIFwic3RhcnRcIiAoZGVmYXVsdCksIFwidmVsb2NpdHlcIiwgb3IgYW4gZWxlbWVudFxuICAgICAgdmFyIG1vZGUgPSBmcm9tID09PSBcInZlbG9jaXR5XCIgJiYgSW5lcnRpYVBsdWdpbiA/IGZyb20gOiBfaXNPYmplY3QoZnJvbSkgJiYgIXJvdGF0aW9uTW9kZSA/IFwiZWxlbWVudFwiIDogXCJzdGFydFwiLFxuICAgICAgICAgIHhDaGFuZ2UsXG4gICAgICAgICAgeUNoYW5nZSxcbiAgICAgICAgICByYXRpbyxcbiAgICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgICAgcjEsXG4gICAgICAgICAgcjI7XG5cbiAgICAgIGlmIChtb2RlID09PSBcImVsZW1lbnRcIikge1xuICAgICAgICByMSA9IF9wYXJzZVJlY3Qoc2VsZi50YXJnZXQpO1xuICAgICAgICByMiA9IF9wYXJzZVJlY3QoZnJvbSk7XG4gICAgICB9XG5cbiAgICAgIHhDaGFuZ2UgPSBtb2RlID09PSBcInN0YXJ0XCIgPyBzZWxmLnggLSBzdGFydEVsZW1lbnRYIDogbW9kZSA9PT0gXCJ2ZWxvY2l0eVwiID8gSW5lcnRpYVBsdWdpbi5nZXRWZWxvY2l0eSh0YXJnZXQsIHhQcm9wKSA6IHIxLmxlZnQgKyByMS53aWR0aCAvIDIgLSAocjIubGVmdCArIHIyLndpZHRoIC8gMik7XG5cbiAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgcmV0dXJuIHhDaGFuZ2UgPCAwID8gXCJjb3VudGVyLWNsb2Nrd2lzZVwiIDogXCJjbG9ja3dpc2VcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpYWdvbmFsVGhyZXNob2xkID0gZGlhZ29uYWxUaHJlc2hvbGQgfHwgMjtcbiAgICAgICAgeUNoYW5nZSA9IG1vZGUgPT09IFwic3RhcnRcIiA/IHNlbGYueSAtIHN0YXJ0RWxlbWVudFkgOiBtb2RlID09PSBcInZlbG9jaXR5XCIgPyBJbmVydGlhUGx1Z2luLmdldFZlbG9jaXR5KHRhcmdldCwgeVByb3ApIDogcjEudG9wICsgcjEuaGVpZ2h0IC8gMiAtIChyMi50b3AgKyByMi5oZWlnaHQgLyAyKTtcbiAgICAgICAgcmF0aW8gPSBNYXRoLmFicyh4Q2hhbmdlIC8geUNoYW5nZSk7XG4gICAgICAgIGRpcmVjdGlvbiA9IHJhdGlvIDwgMSAvIGRpYWdvbmFsVGhyZXNob2xkID8gXCJcIiA6IHhDaGFuZ2UgPCAwID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCI7XG5cbiAgICAgICAgaWYgKHJhdGlvIDwgZGlhZ29uYWxUaHJlc2hvbGQpIHtcbiAgICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBkaXJlY3Rpb24gKz0gXCItXCI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlyZWN0aW9uICs9IHlDaGFuZ2UgPCAwID8gXCJ1cFwiIDogXCJkb3duXCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgICB9O1xuXG4gICAgX3RoaXMyLmFwcGx5Qm91bmRzID0gZnVuY3Rpb24gKG5ld0JvdW5kcywgc3RpY2t5KSB7XG4gICAgICB2YXIgeCwgeSwgZm9yY2VaZXJvVmVsb2NpdHksIGUsIHBhcmVudCwgaXNSb290O1xuXG4gICAgICBpZiAobmV3Qm91bmRzICYmIHZhcnMuYm91bmRzICE9PSBuZXdCb3VuZHMpIHtcbiAgICAgICAgdmFycy5ib3VuZHMgPSBuZXdCb3VuZHM7XG4gICAgICAgIHJldHVybiBzZWxmLnVwZGF0ZSh0cnVlLCBzdGlja3kpO1xuICAgICAgfVxuXG4gICAgICBzeW5jWFkodHJ1ZSk7XG4gICAgICBjYWxjdWxhdGVCb3VuZHMoKTtcblxuICAgICAgaWYgKGhhc0JvdW5kcyAmJiAhaXNUd2VlbmluZygpKSB7XG4gICAgICAgIHggPSBzZWxmLng7XG4gICAgICAgIHkgPSBzZWxmLnk7XG5cbiAgICAgICAgaWYgKHggPiBtYXhYKSB7XG4gICAgICAgICAgeCA9IG1heFg7XG4gICAgICAgIH0gZWxzZSBpZiAoeCA8IG1pblgpIHtcbiAgICAgICAgICB4ID0gbWluWDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh5ID4gbWF4WSkge1xuICAgICAgICAgIHkgPSBtYXhZO1xuICAgICAgICB9IGVsc2UgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgICAgeSA9IG1pblk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi54ICE9PSB4IHx8IHNlbGYueSAhPT0geSkge1xuICAgICAgICAgIGZvcmNlWmVyb1ZlbG9jaXR5ID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLnggPSBzZWxmLmVuZFggPSB4O1xuXG4gICAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgICAgc2VsZi5lbmRSb3RhdGlvbiA9IHg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYueSA9IHNlbGYuZW5kWSA9IHk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgIHJlbmRlcih0cnVlKTtcblxuICAgICAgICAgIGlmIChzZWxmLmF1dG9TY3JvbGwgJiYgIXNlbGYuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgX3JlY29yZE1heFNjcm9sbHModGFyZ2V0LnBhcmVudE5vZGUpO1xuXG4gICAgICAgICAgICBlID0gdGFyZ2V0O1xuICAgICAgICAgICAgX3dpbmRvd1Byb3h5LnNjcm9sbFRvcCA9IF93aW4ucGFnZVlPZmZzZXQgIT0gbnVsbCA/IF93aW4ucGFnZVlPZmZzZXQgOiBvd25lckRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wICE9IG51bGwgPyBvd25lckRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIDogb3duZXJEb2MuYm9keS5zY3JvbGxUb3A7XG4gICAgICAgICAgICBfd2luZG93UHJveHkuc2Nyb2xsTGVmdCA9IF93aW4ucGFnZVhPZmZzZXQgIT0gbnVsbCA/IF93aW4ucGFnZVhPZmZzZXQgOiBvd25lckRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCAhPSBudWxsID8gb3duZXJEb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgOiBvd25lckRvYy5ib2R5LnNjcm9sbExlZnQ7XG5cbiAgICAgICAgICAgIHdoaWxlIChlICYmICFpc1Jvb3QpIHtcbiAgICAgICAgICAgICAgLy93YWxrIHVwIHRoZSBjaGFpbiBhbmQgc2Vuc2Ugd2hlcmV2ZXIgdGhlIHNjcm9sbFRvcC9zY3JvbGxMZWZ0IGV4Y2VlZHMgdGhlIG1heGltdW0uXG4gICAgICAgICAgICAgIGlzUm9vdCA9IF9pc1Jvb3QoZS5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgcGFyZW50ID0gaXNSb290ID8gX3dpbmRvd1Byb3h5IDogZS5wYXJlbnROb2RlO1xuXG4gICAgICAgICAgICAgIGlmIChhbGxvd1kgJiYgcGFyZW50LnNjcm9sbFRvcCA+IHBhcmVudC5fZ3NNYXhTY3JvbGxZKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnNjcm9sbFRvcCA9IHBhcmVudC5fZ3NNYXhTY3JvbGxZO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFsbG93WCAmJiBwYXJlbnQuc2Nyb2xsTGVmdCA+IHBhcmVudC5fZ3NNYXhTY3JvbGxYKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnNjcm9sbExlZnQgPSBwYXJlbnQuX2dzTWF4U2Nyb2xsWDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGUgPSBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuaXNUaHJvd2luZyAmJiAoZm9yY2VaZXJvVmVsb2NpdHkgfHwgc2VsZi5lbmRYID4gbWF4WCB8fCBzZWxmLmVuZFggPCBtaW5YIHx8IHNlbGYuZW5kWSA+IG1heFkgfHwgc2VsZi5lbmRZIDwgbWluWSkpIHtcbiAgICAgICAgICBhbmltYXRlKHZhcnMuaW5lcnRpYSB8fCB2YXJzLnRocm93UHJvcHMsIGZvcmNlWmVyb1ZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuXG4gICAgX3RoaXMyLnVwZGF0ZSA9IGZ1bmN0aW9uIChhcHBseUJvdW5kcywgc3RpY2t5LCBpZ25vcmVFeHRlcm5hbENoYW5nZXMpIHtcbiAgICAgIGlmIChzdGlja3kgJiYgc2VsZi5pc1ByZXNzZWQpIHtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgZWxlbWVudCB3YXMgcmVwb3NpdGlvbmVkIGluIHRoZSBkb2N1bWVudCBmbG93LCB0aHVzIGl0cyB4L3kgbWF5IGJlIGlkZW50aWNhbCBidXQgaXRzIHBvc2l0aW9uIGlzIGFjdHVhbGx5IHF1aXRlIGRpZmZlcmVudC5cbiAgICAgICAgdmFyIG0gPSBnZXRHbG9iYWxNYXRyaXgodGFyZ2V0KSxcbiAgICAgICAgICAgIHAgPSBpbm5lck1hdHJpeC5hcHBseSh7XG4gICAgICAgICAgeDogc2VsZi54IC0gc3RhcnRFbGVtZW50WCxcbiAgICAgICAgICB5OiBzZWxmLnkgLSBzdGFydEVsZW1lbnRZXG4gICAgICAgIH0pLFxuICAgICAgICAgICAgbTIgPSBnZXRHbG9iYWxNYXRyaXgodGFyZ2V0LnBhcmVudE5vZGUsIHRydWUpO1xuICAgICAgICBtMi5hcHBseSh7XG4gICAgICAgICAgeDogbS5lIC0gcC54LFxuICAgICAgICAgIHk6IG0uZiAtIHAueVxuICAgICAgICB9LCBwKTtcbiAgICAgICAgc2VsZi54IC09IHAueCAtIG0yLmU7XG4gICAgICAgIHNlbGYueSAtPSBwLnkgLSBtMi5mO1xuICAgICAgICByZW5kZXIodHJ1ZSk7XG4gICAgICAgIHJlY29yZFN0YXJ0UG9zaXRpb25zKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB4ID0gc2VsZi54LFxuICAgICAgICAgIHkgPSBzZWxmLnk7XG4gICAgICB1cGRhdGVNYXRyaXgoIXN0aWNreSk7XG5cbiAgICAgIGlmIChhcHBseUJvdW5kcykge1xuICAgICAgICBzZWxmLmFwcGx5Qm91bmRzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXJ0eSAmJiBpZ25vcmVFeHRlcm5hbENoYW5nZXMgJiYgcmVuZGVyKHRydWUpO1xuICAgICAgICBzeW5jWFkodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGlja3kpIHtcbiAgICAgICAgc2V0UG9pbnRlclBvc2l0aW9uKHNlbGYucG9pbnRlclgsIHNlbGYucG9pbnRlclkpO1xuICAgICAgICBkaXJ0eSAmJiByZW5kZXIodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmlzUHJlc3NlZCAmJiAhc3RpY2t5ICYmIChhbGxvd1ggJiYgTWF0aC5hYnMoeCAtIHNlbGYueCkgPiAwLjAxIHx8IGFsbG93WSAmJiBNYXRoLmFicyh5IC0gc2VsZi55KSA+IDAuMDEgJiYgIXJvdGF0aW9uTW9kZSkpIHtcbiAgICAgICAgcmVjb3JkU3RhcnRQb3NpdGlvbnMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuYXV0b1Njcm9sbCkge1xuICAgICAgICBfcmVjb3JkTWF4U2Nyb2xscyh0YXJnZXQucGFyZW50Tm9kZSwgc2VsZi5pc0RyYWdnaW5nKTtcblxuICAgICAgICBjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSBzZWxmLmlzRHJhZ2dpbmc7XG4gICAgICAgIHJlbmRlcih0cnVlKTsgLy9pbiBjYXNlIHJlcGFyZW50aW5nIG9jY3VycmVkLlxuXG4gICAgICAgIF9yZW1vdmVTY3JvbGxMaXN0ZW5lcih0YXJnZXQsIHVwZGF0ZVNjcm9sbCk7XG5cbiAgICAgICAgX2FkZFNjcm9sbExpc3RlbmVyKHRhcmdldCwgdXBkYXRlU2Nyb2xsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIF90aGlzMi5lbmFibGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdmFyIHNldFZhcnMgPSB7XG4gICAgICAgIGxhenk6IHRydWVcbiAgICAgIH0sXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgaSxcbiAgICAgICAgICB0cmlnZ2VyO1xuXG4gICAgICBpZiAodmFycy5jdXJzb3IgIT09IGZhbHNlKSB7XG4gICAgICAgIHNldFZhcnMuY3Vyc29yID0gdmFycy5jdXJzb3IgfHwgX2RlZmF1bHRDdXJzb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChnc2FwLnV0aWxzLmNoZWNrUHJlZml4KFwidG91Y2hDYWxsb3V0XCIpKSB7XG4gICAgICAgIHNldFZhcnMudG91Y2hDYWxsb3V0ID0gXCJub25lXCI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlICE9PSBcInNvZnRcIikge1xuICAgICAgICBfc2V0VG91Y2hBY3Rpb25Gb3JBbGxEZXNjZW5kYW50cyh0cmlnZ2VycywgYWxsb3dYID09PSBhbGxvd1kgPyBcIm5vbmVcIiA6IHZhcnMuYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyAmJiB0YXJnZXQuc2Nyb2xsSGVpZ2h0ID09PSB0YXJnZXQuY2xpZW50SGVpZ2h0ID09PSAodGFyZ2V0LnNjcm9sbFdpZHRoID09PSB0YXJnZXQuY2xpZW50SGVpZ2h0KSB8fCB2YXJzLmFsbG93RXZlbnREZWZhdWx0ID8gXCJtYW5pcHVsYXRpb25cIiA6IGFsbG93WCA/IFwicGFuLXlcIiA6IFwicGFuLXhcIik7IC8vIFNvbWUgYnJvd3NlcnMgbGlrZSBJbnRlcm5ldCBFeHBsb3JlciB3aWxsIGZpcmUgYSBwb2ludGVyY2FuY2VsIGV2ZW50IHdoZW4gdGhlIHVzZXIgYXR0ZW1wdHMgdG8gZHJhZyB3aGVuIHRvdWNoQWN0aW9uIGlzIFwibWFuaXB1bGF0ZVwiIGJlY2F1c2UgaXQncyBwZXJjZWl2ZWQgYXMgYSBwYW4uIElmIHRoZSBlbGVtZW50IGhhcyBzY3JvbGxhYmxlIGNvbnRlbnQgaW4gb25seSBvbmUgZGlyZWN0aW9uLCB3ZSBzaG91bGQgdXNlIHBhbi14IG9yIHBhbi15IGFjY29yZGluZ2x5IHNvIHRoYXQgdGhlIHBvaW50ZXJjYW5jZWwgZG9lc24ndCBwcmV2ZW50IGRyYWdnaW5nLlxuXG5cbiAgICAgICAgaSA9IHRyaWdnZXJzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlcnNbaV07XG4gICAgICAgICAgX3N1cHBvcnRzUG9pbnRlciB8fCBfYWRkTGlzdGVuZXIodHJpZ2dlciwgXCJtb3VzZWRvd25cIiwgb25QcmVzcyk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIodHJpZ2dlciwgXCJ0b3VjaHN0YXJ0XCIsIG9uUHJlc3MpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyKHRyaWdnZXIsIFwiY2xpY2tcIiwgb25DbGljaywgdHJ1ZSk7IC8vbm90ZTogdXNlZCB0byBwYXNzIHRydWUgZm9yIGNhcHR1cmUgYnV0IGl0IHByZXZlbnRlZCBjbGljay10by1wbGF5LXZpZGVvIGZ1bmN0aW9uYWxpdHkgaW4gRmlyZWZveC5cblxuXG4gICAgICAgICAgZ3NhcC5zZXQodHJpZ2dlciwgc2V0VmFycyk7XG5cbiAgICAgICAgICBpZiAodHJpZ2dlci5nZXRCQm94ICYmIHRyaWdnZXIub3duZXJTVkdFbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBhIGJ1ZyBpbiBjaHJvbWUgZG9lc24ndCByZXNwZWN0IHRvdWNoLWFjdGlvbiBvbiBTVkcgZWxlbWVudHMgLSBpdCBvbmx5IHdvcmtzIGlmIHdlIHNldCBpdCBvbiB0aGUgcGFyZW50IFNWRy5cbiAgICAgICAgICAgIGdzYXAuc2V0KHRyaWdnZXIub3duZXJTVkdFbGVtZW50LCB7XG4gICAgICAgICAgICAgIHRvdWNoQWN0aW9uOiBhbGxvd1ggPT09IGFsbG93WSA/IFwibm9uZVwiIDogdmFycy5hbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nIHx8IHZhcnMuYWxsb3dFdmVudERlZmF1bHQgPyBcIm1hbmlwdWxhdGlvblwiIDogYWxsb3dYID8gXCJwYW4teVwiIDogXCJwYW4teFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXJzLmFsbG93Q29udGV4dE1lbnUgfHwgX2FkZExpc3RlbmVyKHRyaWdnZXIsIFwiY29udGV4dG1lbnVcIiwgb25Db250ZXh0TWVudSk7XG4gICAgICAgIH1cblxuICAgICAgICBfc2V0U2VsZWN0YWJsZSh0cmlnZ2VycywgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBfYWRkU2Nyb2xsTGlzdGVuZXIodGFyZ2V0LCB1cGRhdGVTY3JvbGwpO1xuXG4gICAgICBlbmFibGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKEluZXJ0aWFQbHVnaW4gJiYgdHlwZSAhPT0gXCJzb2Z0XCIpIHtcbiAgICAgICAgSW5lcnRpYVBsdWdpbi50cmFjayhzY3JvbGxQcm94eSB8fCB0YXJnZXQsIHh5TW9kZSA/IFwieCx5XCIgOiByb3RhdGlvbk1vZGUgPyBcInJvdGF0aW9uXCIgOiBcInRvcCxsZWZ0XCIpO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXQuX2dzRHJhZ0lEID0gaWQgPSBcImRcIiArIF9sb29rdXBDb3VudCsrO1xuICAgICAgX2xvb2t1cFtpZF0gPSBzZWxmO1xuXG4gICAgICBpZiAoc2Nyb2xsUHJveHkpIHtcbiAgICAgICAgc2Nyb2xsUHJveHkuZW5hYmxlKCk7XG4gICAgICAgIHNjcm9sbFByb3h5LmVsZW1lbnQuX2dzRHJhZ0lEID0gaWQ7XG4gICAgICB9XG5cbiAgICAgICh2YXJzLmJvdW5kcyB8fCByb3RhdGlvbk1vZGUpICYmIHJlY29yZFN0YXJ0UG9zaXRpb25zKCk7XG4gICAgICB2YXJzLmJvdW5kcyAmJiBzZWxmLmFwcGx5Qm91bmRzKCk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuXG4gICAgX3RoaXMyLmRpc2FibGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdmFyIGRyYWdnaW5nID0gc2VsZi5pc0RyYWdnaW5nLFxuICAgICAgICAgIGkgPSB0cmlnZ2Vycy5sZW5ndGgsXG4gICAgICAgICAgdHJpZ2dlcjtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIF9zZXRTdHlsZSh0cmlnZ2Vyc1tpXSwgXCJjdXJzb3JcIiwgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlICE9PSBcInNvZnRcIikge1xuICAgICAgICBfc2V0VG91Y2hBY3Rpb25Gb3JBbGxEZXNjZW5kYW50cyh0cmlnZ2VycywgbnVsbCk7XG5cbiAgICAgICAgaSA9IHRyaWdnZXJzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlcnNbaV07XG5cbiAgICAgICAgICBfc2V0U3R5bGUodHJpZ2dlciwgXCJ0b3VjaENhbGxvdXRcIiwgbnVsbCk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodHJpZ2dlciwgXCJtb3VzZWRvd25cIiwgb25QcmVzcyk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodHJpZ2dlciwgXCJ0b3VjaHN0YXJ0XCIsIG9uUHJlc3MpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRyaWdnZXIsIFwiY2xpY2tcIiwgb25DbGljayk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodHJpZ2dlciwgXCJjb250ZXh0bWVudVwiLCBvbkNvbnRleHRNZW51KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9zZXRTZWxlY3RhYmxlKHRyaWdnZXJzLCB0cnVlKTtcblxuICAgICAgICBpZiAodG91Y2hFdmVudFRhcmdldCkge1xuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNoY2FuY2VsXCIsIG9uUmVsZWFzZSk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodG91Y2hFdmVudFRhcmdldCwgXCJ0b3VjaGVuZFwiLCBvblJlbGVhc2UpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2htb3ZlXCIsIG9uTW92ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwibW91c2V1cFwiLCBvblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJtb3VzZW1vdmVcIiwgb25Nb3ZlKTtcbiAgICAgIH1cblxuICAgICAgX3JlbW92ZVNjcm9sbExpc3RlbmVyKHRhcmdldCwgdXBkYXRlU2Nyb2xsKTtcblxuICAgICAgZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgSW5lcnRpYVBsdWdpbiAmJiB0eXBlICE9PSBcInNvZnRcIiAmJiBJbmVydGlhUGx1Z2luLnVudHJhY2soc2Nyb2xsUHJveHkgfHwgdGFyZ2V0LCB4eU1vZGUgPyBcIngseVwiIDogcm90YXRpb25Nb2RlID8gXCJyb3RhdGlvblwiIDogXCJ0b3AsbGVmdFwiKTtcbiAgICAgIHNjcm9sbFByb3h5ICYmIHNjcm9sbFByb3h5LmRpc2FibGUoKTtcblxuICAgICAgX3JlbW92ZUZyb21SZW5kZXJRdWV1ZShyZW5kZXIpO1xuXG4gICAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzUHJlc3NlZCA9IGlzQ2xpY2tpbmcgPSBmYWxzZTtcbiAgICAgIGRyYWdnaW5nICYmIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiZHJhZ2VuZFwiLCBcIm9uRHJhZ0VuZFwiKTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH07XG5cbiAgICBfdGhpczIuZW5hYmxlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB2YWx1ZSA/IHNlbGYuZW5hYmxlKHR5cGUpIDogc2VsZi5kaXNhYmxlKHR5cGUpIDogZW5hYmxlZDtcbiAgICB9O1xuXG4gICAgX3RoaXMyLmtpbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmlzVGhyb3dpbmcgPSBmYWxzZTtcbiAgICAgIHNlbGYudHdlZW4gJiYgc2VsZi50d2Vlbi5raWxsKCk7XG4gICAgICBzZWxmLmRpc2FibGUoKTtcbiAgICAgIGdzYXAuc2V0KHRyaWdnZXJzLCB7XG4gICAgICAgIGNsZWFyUHJvcHM6IFwidXNlclNlbGVjdFwiXG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBfbG9va3VwW3RhcmdldC5fZ3NEcmFnSURdO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIGlmICh+dHlwZS5pbmRleE9mKFwic2Nyb2xsXCIpKSB7XG4gICAgICBzY3JvbGxQcm94eSA9IF90aGlzMi5zY3JvbGxQcm94eSA9IG5ldyBTY3JvbGxQcm94eSh0YXJnZXQsIF9leHRlbmQoe1xuICAgICAgICBvbktpbGw6IGZ1bmN0aW9uIG9uS2lsbCgpIHtcbiAgICAgICAgICAvL1Njcm9sbFByb3h5J3Mgb25LaWxsKCkgZ2V0cyBjYWxsZWQgaWYvd2hlbiB0aGUgU2Nyb2xsUHJveHkgc2Vuc2VzIHRoYXQgdGhlIHVzZXIgaW50ZXJhY3RlZCB3aXRoIHRoZSBzY3JvbGwgcG9zaXRpb24gbWFudWFsbHkgKGxpa2UgdXNpbmcgdGhlIHNjcm9sbGJhcikuIElFOSBkb2Vzbid0IGZpcmUgdGhlIFwibW91c2V1cFwiIHByb3Blcmx5IHdoZW4gdXNlcnMgZHJhZyB0aGUgc2Nyb2xsYmFyIG9mIGFuIGVsZW1lbnQsIHNvIHRoaXMgd29ya3MgYXJvdW5kIHRoYXQgaXNzdWUuXG4gICAgICAgICAgc2VsZi5pc1ByZXNzZWQgJiYgb25SZWxlYXNlKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9LCB2YXJzKSk7IC8vYSBidWcgaW4gbWFueSBBbmRyb2lkIGRldmljZXMnIHN0b2NrIGJyb3dzZXIgY2F1c2VzIHNjcm9sbFRvcCB0byBnZXQgZm9yY2VkIGJhY2sgdG8gMCBhZnRlciBpdCBpcyBhbHRlcmVkIHZpYSBKUywgc28gd2Ugc2V0IG92ZXJmbG93IHRvIFwiaGlkZGVuXCIgb24gbW9iaWxlL3RvdWNoIGRldmljZXMgKHRoZXkgaGlkZSB0aGUgc2Nyb2xsIGJhciBhbnl3YXkpLiBUaGF0IHdvcmtzIGFyb3VuZCB0aGUgYnVnLiAoVGhpcyBidWcgaXMgZGlzY3Vzc2VkIGF0IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvYW5kcm9pZC9pc3N1ZXMvZGV0YWlsP2lkPTE5NjI1KVxuXG4gICAgICB0YXJnZXQuc3R5bGUub3ZlcmZsb3dZID0gYWxsb3dZICYmICFfaXNUb3VjaERldmljZSA/IFwiYXV0b1wiIDogXCJoaWRkZW5cIjtcbiAgICAgIHRhcmdldC5zdHlsZS5vdmVyZmxvd1ggPSBhbGxvd1ggJiYgIV9pc1RvdWNoRGV2aWNlID8gXCJhdXRvXCIgOiBcImhpZGRlblwiO1xuICAgICAgdGFyZ2V0ID0gc2Nyb2xsUHJveHkuY29udGVudDtcbiAgICB9XG5cbiAgICBpZiAocm90YXRpb25Nb2RlKSB7XG4gICAgICBraWxsUHJvcHMucm90YXRpb24gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYWxsb3dYKSB7XG4gICAgICAgIGtpbGxQcm9wc1t4UHJvcF0gPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWxsb3dZKSB7XG4gICAgICAgIGtpbGxQcm9wc1t5UHJvcF0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGdzQ2FjaGUuZm9yY2UzRCA9IFwiZm9yY2UzRFwiIGluIHZhcnMgPyB2YXJzLmZvcmNlM0QgOiB0cnVlOyAvL290aGVyd2lzZSwgbm9ybWFsIGRyYWdnaW5nIHdvdWxkIGJlIGluIDJEIGFuZCB0aGVuIGFzIHNvb24gYXMgaXQncyByZWxlYXNlZCBhbmQgdGhlcmUncyBhbiBpbmVydGlhIHR3ZWVuLCBpdCdkIGp1bXAgdG8gM0Qgd2hpY2ggY2FuIGNyZWF0ZSBhbiBpbml0aWFsIGp1bXAgZHVlIHRvIHRoZSB3b3JrIHRoZSBicm93c2VyIG11c3QgdG8gZG8gbGF5ZXJpemUgaXQuXG5cbiAgICBfdGhpczIuZW5hYmxlKCk7XG5cbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgRHJhZ2dhYmxlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29yZSkge1xuICAgIGdzYXAgPSBjb3JlO1xuXG4gICAgX2luaXRDb3JlKCk7XG4gIH07XG5cbiAgRHJhZ2dhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgX2NvcmVJbml0dGVkIHx8IF9pbml0Q29yZSh0cnVlKTtcbiAgICByZXR1cm4gX3RvQXJyYXkodGFyZ2V0cykubWFwKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBuZXcgRHJhZ2dhYmxlKHRhcmdldCwgdmFycyk7XG4gICAgfSk7XG4gIH07XG5cbiAgRHJhZ2dhYmxlLmdldCA9IGZ1bmN0aW9uIGdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gX2xvb2t1cFsoX3RvQXJyYXkodGFyZ2V0KVswXSB8fCB7fSkuX2dzRHJhZ0lEXTtcbiAgfTtcblxuICBEcmFnZ2FibGUudGltZVNpbmNlRHJhZyA9IGZ1bmN0aW9uIHRpbWVTaW5jZURyYWcoKSB7XG4gICAgcmV0dXJuIChfZ2V0VGltZSgpIC0gX2xhc3REcmFnVGltZSkgLyAxMDAwO1xuICB9O1xuXG4gIERyYWdnYWJsZS5oaXRUZXN0ID0gZnVuY3Rpb24gaGl0VGVzdChvYmoxLCBvYmoyLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAob2JqMSA9PT0gb2JqMikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciByMSA9IF9wYXJzZVJlY3Qob2JqMSksXG4gICAgICAgIHIyID0gX3BhcnNlUmVjdChvYmoyKSxcbiAgICAgICAgdG9wID0gcjEudG9wLFxuICAgICAgICBsZWZ0ID0gcjEubGVmdCxcbiAgICAgICAgcmlnaHQgPSByMS5yaWdodCxcbiAgICAgICAgYm90dG9tID0gcjEuYm90dG9tLFxuICAgICAgICB3aWR0aCA9IHIxLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSByMS5oZWlnaHQsXG4gICAgICAgIGlzT3V0c2lkZSA9IHIyLmxlZnQgPiByaWdodCB8fCByMi5yaWdodCA8IGxlZnQgfHwgcjIudG9wID4gYm90dG9tIHx8IHIyLmJvdHRvbSA8IHRvcCxcbiAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgYXJlYSxcbiAgICAgICAgaXNSYXRpbztcblxuICAgIGlmIChpc091dHNpZGUgfHwgIXRocmVzaG9sZCkge1xuICAgICAgcmV0dXJuICFpc091dHNpZGU7XG4gICAgfVxuXG4gICAgaXNSYXRpbyA9ICh0aHJlc2hvbGQgKyBcIlwiKS5pbmRleE9mKFwiJVwiKSAhPT0gLTE7XG4gICAgdGhyZXNob2xkID0gcGFyc2VGbG9hdCh0aHJlc2hvbGQpIHx8IDA7XG4gICAgb3ZlcmxhcCA9IHtcbiAgICAgIGxlZnQ6IE1hdGgubWF4KGxlZnQsIHIyLmxlZnQpLFxuICAgICAgdG9wOiBNYXRoLm1heCh0b3AsIHIyLnRvcClcbiAgICB9O1xuICAgIG92ZXJsYXAud2lkdGggPSBNYXRoLm1pbihyaWdodCwgcjIucmlnaHQpIC0gb3ZlcmxhcC5sZWZ0O1xuICAgIG92ZXJsYXAuaGVpZ2h0ID0gTWF0aC5taW4oYm90dG9tLCByMi5ib3R0b20pIC0gb3ZlcmxhcC50b3A7XG5cbiAgICBpZiAob3ZlcmxhcC53aWR0aCA8IDAgfHwgb3ZlcmxhcC5oZWlnaHQgPCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzUmF0aW8pIHtcbiAgICAgIHRocmVzaG9sZCAqPSAwLjAxO1xuICAgICAgYXJlYSA9IG92ZXJsYXAud2lkdGggKiBvdmVybGFwLmhlaWdodDtcbiAgICAgIHJldHVybiBhcmVhID49IHdpZHRoICogaGVpZ2h0ICogdGhyZXNob2xkIHx8IGFyZWEgPj0gcjIud2lkdGggKiByMi5oZWlnaHQgKiB0aHJlc2hvbGQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG92ZXJsYXAud2lkdGggPiB0aHJlc2hvbGQgJiYgb3ZlcmxhcC5oZWlnaHQgPiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgcmV0dXJuIERyYWdnYWJsZTtcbn0oRXZlbnREaXNwYXRjaGVyKTtcblxuX3NldERlZmF1bHRzKERyYWdnYWJsZS5wcm90b3R5cGUsIHtcbiAgcG9pbnRlclg6IDAsXG4gIHBvaW50ZXJZOiAwLFxuICBzdGFydFg6IDAsXG4gIHN0YXJ0WTogMCxcbiAgZGVsdGFYOiAwLFxuICBkZWx0YVk6IDAsXG4gIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICBpc1ByZXNzZWQ6IGZhbHNlXG59KTtcblxuRHJhZ2dhYmxlLnpJbmRleCA9IDEwMDA7XG5EcmFnZ2FibGUudmVyc2lvbiA9IFwiMy43LjFcIjtcbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihEcmFnZ2FibGUpO1xuZXhwb3J0IHsgRHJhZ2dhYmxlIGFzIGRlZmF1bHQgfTsiLCIvKiFcbiAqIEVhc2VQYWNrIDMuNy4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIxLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIGdzYXAsXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9yZWdpc3RlckVhc2UsXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9ib29sZWFuID0gZnVuY3Rpb24gX2Jvb2xlYW4odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gISEodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiID8gZGVmYXVsdFZhbHVlIDogdmFsdWUgJiYgIX4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiZmFsc2VcIikpO1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoY29yZSkge1xuICBnc2FwID0gY29yZSB8fCBfZ2V0R1NBUCgpO1xuXG4gIGlmIChnc2FwKSB7XG4gICAgX3JlZ2lzdGVyRWFzZSA9IGdzYXAucmVnaXN0ZXJFYXNlOyAvL2FkZCB3ZWlnaHRlZCBlYXNlIGNhcGFiaWxpdGllcyB0byBzdGFuZGFyZCBlYXNlcyBzbyB1c2VycyBjYW4gZG8gXCJwb3dlcjIuaW5PdXQoMC44KVwiIGZvciBleGFtcGxlIHRvIHB1c2ggZXZlcnl0aGluZyB0b3dhcmQgdGhlIFwib3V0XCIsIG9yICgtMC44KSB0byBwdXNoIGl0IHRvd2FyZCB0aGUgXCJpblwiICgwIGlzIG5ldXRyYWwpXG5cbiAgICB2YXIgZWFzZXMgPSBnc2FwLnBhcnNlRWFzZSgpLFxuICAgICAgICBjcmVhdGVDb25maWcgPSBmdW5jdGlvbiBjcmVhdGVDb25maWcoZWFzZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyYXRpbykge1xuICAgICAgICB2YXIgeSA9IDAuNSArIHJhdGlvIC8gMjtcblxuICAgICAgICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgcmV0dXJuIGVhc2UoMiAqICgxIC0gcCkgKiBwICogeSArIHAgKiBwKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSxcbiAgICAgICAgcDtcblxuICAgIGZvciAocCBpbiBlYXNlcykge1xuICAgICAgaWYgKCFlYXNlc1twXS5jb25maWcpIHtcbiAgICAgICAgY3JlYXRlQ29uZmlnKGVhc2VzW3BdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVnaXN0ZXJFYXNlKFwic2xvd1wiLCBTbG93TW8pO1xuXG4gICAgX3JlZ2lzdGVyRWFzZShcImV4cG9TY2FsZVwiLCBFeHBvU2NhbGVFYXNlKTtcblxuICAgIF9yZWdpc3RlckVhc2UoXCJyb3VnaFwiLCBSb3VnaEVhc2UpO1xuXG4gICAgZm9yIChwIGluIEVhc2VQYWNrKSB7XG4gICAgICBwICE9PSBcInZlcnNpb25cIiAmJiBnc2FwLmNvcmUuZ2xvYmFscyhwLCBFYXNlUGFja1twXSk7XG4gICAgfVxuXG4gICAgX2NvcmVJbml0dGVkID0gMTtcbiAgfVxufSxcbiAgICBfY3JlYXRlU2xvd01vID0gZnVuY3Rpb24gX2NyZWF0ZVNsb3dNbyhsaW5lYXJSYXRpbywgcG93ZXIsIHlveW9Nb2RlKSB7XG4gIGxpbmVhclJhdGlvID0gTWF0aC5taW4oMSwgbGluZWFyUmF0aW8gfHwgMC43KTtcblxuICB2YXIgcG93ID0gbGluZWFyUmF0aW8gPCAxID8gcG93ZXIgfHwgcG93ZXIgPT09IDAgPyBwb3dlciA6IDAuNyA6IDAsXG4gICAgICBwMSA9ICgxIC0gbGluZWFyUmF0aW8pIC8gMixcbiAgICAgIHAzID0gcDEgKyBsaW5lYXJSYXRpbyxcbiAgICAgIGNhbGNFbmQgPSBfYm9vbGVhbih5b3lvTW9kZSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgdmFyIHIgPSBwICsgKDAuNSAtIHApICogcG93O1xuICAgIHJldHVybiBwIDwgcDEgPyBjYWxjRW5kID8gMSAtIChwID0gMSAtIHAgLyBwMSkgKiBwIDogciAtIChwID0gMSAtIHAgLyBwMSkgKiBwICogcCAqIHAgKiByIDogcCA+IHAzID8gY2FsY0VuZCA/IHAgPT09IDEgPyAwIDogMSAtIChwID0gKHAgLSBwMykgLyBwMSkgKiBwIDogciArIChwIC0gcikgKiAocCA9IChwIC0gcDMpIC8gcDEpICogcCAqIHAgKiBwIDogY2FsY0VuZCA/IDEgOiByO1xuICB9O1xufSxcbiAgICBfY3JlYXRlRXhwb1NjYWxlID0gZnVuY3Rpb24gX2NyZWF0ZUV4cG9TY2FsZShzdGFydCwgZW5kLCBlYXNlKSB7XG4gIHZhciBwMSA9IE1hdGgubG9nKGVuZCAvIHN0YXJ0KSxcbiAgICAgIHAyID0gZW5kIC0gc3RhcnQ7XG4gIGVhc2UgJiYgKGVhc2UgPSBnc2FwLnBhcnNlRWFzZShlYXNlKSk7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoc3RhcnQgKiBNYXRoLmV4cChwMSAqIChlYXNlID8gZWFzZShwKSA6IHApKSAtIHN0YXJ0KSAvIHAyO1xuICB9O1xufSxcbiAgICBFYXNlUG9pbnQgPSBmdW5jdGlvbiBFYXNlUG9pbnQodGltZSwgdmFsdWUsIG5leHQpIHtcbiAgdGhpcy50ID0gdGltZTtcbiAgdGhpcy52ID0gdmFsdWU7XG5cbiAgaWYgKG5leHQpIHtcbiAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgIG5leHQucHJldiA9IHRoaXM7XG4gICAgdGhpcy5jID0gbmV4dC52IC0gdmFsdWU7XG4gICAgdGhpcy5nYXAgPSBuZXh0LnQgLSB0aW1lO1xuICB9XG59LFxuICAgIF9jcmVhdGVSb3VnaEVhc2UgPSBmdW5jdGlvbiBfY3JlYXRlUm91Z2hFYXNlKHZhcnMpIHtcbiAgaWYgKHR5cGVvZiB2YXJzICE9PSBcIm9iamVjdFwiKSB7XG4gICAgLy91c2VycyBtYXkgcGFzcyBpbiB2aWEgYSBzdHJpbmcsIGxpa2UgXCJyb3VnaCgzMClcIlxuICAgIHZhcnMgPSB7XG4gICAgICBwb2ludHM6ICt2YXJzIHx8IDIwXG4gICAgfTtcbiAgfVxuXG4gIHZhciB0YXBlciA9IHZhcnMudGFwZXIgfHwgXCJub25lXCIsXG4gICAgICBhID0gW10sXG4gICAgICBjbnQgPSAwLFxuICAgICAgcG9pbnRzID0gKCt2YXJzLnBvaW50cyB8fCAyMCkgfCAwLFxuICAgICAgaSA9IHBvaW50cyxcbiAgICAgIHJhbmRvbWl6ZSA9IF9ib29sZWFuKHZhcnMucmFuZG9taXplLCB0cnVlKSxcbiAgICAgIGNsYW1wID0gX2Jvb2xlYW4odmFycy5jbGFtcCksXG4gICAgICB0ZW1wbGF0ZSA9IGdzYXAgPyBnc2FwLnBhcnNlRWFzZSh2YXJzLnRlbXBsYXRlKSA6IDAsXG4gICAgICBzdHJlbmd0aCA9ICgrdmFycy5zdHJlbmd0aCB8fCAxKSAqIDAuNCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgYnVtcCxcbiAgICAgIGludlgsXG4gICAgICBvYmosXG4gICAgICBwbnQsXG4gICAgICByZWNlbnQ7XG5cbiAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgeCA9IHJhbmRvbWl6ZSA/IE1hdGgucmFuZG9tKCkgOiAxIC8gcG9pbnRzICogaTtcbiAgICB5ID0gdGVtcGxhdGUgPyB0ZW1wbGF0ZSh4KSA6IHg7XG5cbiAgICBpZiAodGFwZXIgPT09IFwibm9uZVwiKSB7XG4gICAgICBidW1wID0gc3RyZW5ndGg7XG4gICAgfSBlbHNlIGlmICh0YXBlciA9PT0gXCJvdXRcIikge1xuICAgICAgaW52WCA9IDEgLSB4O1xuICAgICAgYnVtcCA9IGludlggKiBpbnZYICogc3RyZW5ndGg7XG4gICAgfSBlbHNlIGlmICh0YXBlciA9PT0gXCJpblwiKSB7XG4gICAgICBidW1wID0geCAqIHggKiBzdHJlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHggPCAwLjUpIHtcbiAgICAgIC8vXCJib3RoXCIgKHN0YXJ0KVxuICAgICAgaW52WCA9IHggKiAyO1xuICAgICAgYnVtcCA9IGludlggKiBpbnZYICogMC41ICogc3RyZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vXCJib3RoXCIgKGVuZClcbiAgICAgIGludlggPSAoMSAtIHgpICogMjtcbiAgICAgIGJ1bXAgPSBpbnZYICogaW52WCAqIDAuNSAqIHN0cmVuZ3RoO1xuICAgIH1cblxuICAgIGlmIChyYW5kb21pemUpIHtcbiAgICAgIHkgKz0gTWF0aC5yYW5kb20oKSAqIGJ1bXAgLSBidW1wICogMC41O1xuICAgIH0gZWxzZSBpZiAoaSAlIDIpIHtcbiAgICAgIHkgKz0gYnVtcCAqIDAuNTtcbiAgICB9IGVsc2Uge1xuICAgICAgeSAtPSBidW1wICogMC41O1xuICAgIH1cblxuICAgIGlmIChjbGFtcCkge1xuICAgICAgaWYgKHkgPiAxKSB7XG4gICAgICAgIHkgPSAxO1xuICAgICAgfSBlbHNlIGlmICh5IDwgMCkge1xuICAgICAgICB5ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhW2NudCsrXSA9IHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfTtcbiAgfVxuXG4gIGEuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLnggLSBiLng7XG4gIH0pO1xuICBwbnQgPSBuZXcgRWFzZVBvaW50KDEsIDEsIG51bGwpO1xuICBpID0gcG9pbnRzO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBvYmogPSBhW2ldO1xuICAgIHBudCA9IG5ldyBFYXNlUG9pbnQob2JqLngsIG9iai55LCBwbnQpO1xuICB9XG5cbiAgcmVjZW50ID0gbmV3IEVhc2VQb2ludCgwLCAwLCBwbnQudCA/IHBudCA6IHBudC5uZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgdmFyIHBudCA9IHJlY2VudDtcblxuICAgIGlmIChwID4gcG50LnQpIHtcbiAgICAgIHdoaWxlIChwbnQubmV4dCAmJiBwID49IHBudC50KSB7XG4gICAgICAgIHBudCA9IHBudC5uZXh0O1xuICAgICAgfVxuXG4gICAgICBwbnQgPSBwbnQucHJldjtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKHBudC5wcmV2ICYmIHAgPD0gcG50LnQpIHtcbiAgICAgICAgcG50ID0gcG50LnByZXY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVjZW50ID0gcG50O1xuICAgIHJldHVybiBwbnQudiArIChwIC0gcG50LnQpIC8gcG50LmdhcCAqIHBudC5jO1xuICB9O1xufTtcblxuZXhwb3J0IHZhciBTbG93TW8gPSBfY3JlYXRlU2xvd01vKDAuNyk7XG5TbG93TW8uZWFzZSA9IFNsb3dNbzsgLy9mb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXG5TbG93TW8uY29uZmlnID0gX2NyZWF0ZVNsb3dNbztcbmV4cG9ydCB2YXIgRXhwb1NjYWxlRWFzZSA9IF9jcmVhdGVFeHBvU2NhbGUoMSwgMik7XG5FeHBvU2NhbGVFYXNlLmNvbmZpZyA9IF9jcmVhdGVFeHBvU2NhbGU7XG5leHBvcnQgdmFyIFJvdWdoRWFzZSA9IF9jcmVhdGVSb3VnaEVhc2UoKTtcblJvdWdoRWFzZS5lYXNlID0gUm91Z2hFYXNlOyAvL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cblJvdWdoRWFzZS5jb25maWcgPSBfY3JlYXRlUm91Z2hFYXNlO1xuZXhwb3J0IHZhciBFYXNlUGFjayA9IHtcbiAgU2xvd01vOiBTbG93TW8sXG4gIFJvdWdoRWFzZTogUm91Z2hFYXNlLFxuICBFeHBvU2NhbGVFYXNlOiBFeHBvU2NhbGVFYXNlXG59O1xuXG5mb3IgKHZhciBwIGluIEVhc2VQYWNrKSB7XG4gIEVhc2VQYWNrW3BdLnJlZ2lzdGVyID0gX2luaXRDb3JlO1xuICBFYXNlUGFja1twXS52ZXJzaW9uID0gXCIzLjcuMVwiO1xufVxuXG5fZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2xvd01vKTtcbmV4cG9ydCB7IEVhc2VQYWNrIGFzIGRlZmF1bHQgfTsiLCIvKiFcbiAqIEVhc2VsUGx1Z2luIDMuNy4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIxLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIGdzYXAsXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF93aW4sXG4gICAgX2NyZWF0ZUpTLFxuICAgIF9Db2xvckZpbHRlcixcbiAgICBfQ29sb3JNYXRyaXhGaWx0ZXIsXG4gICAgX2NvbG9yUHJvcHMgPSBcInJlZE11bHRpcGxpZXIsZ3JlZW5NdWx0aXBsaWVyLGJsdWVNdWx0aXBsaWVyLGFscGhhTXVsdGlwbGllcixyZWRPZmZzZXQsZ3JlZW5PZmZzZXQsYmx1ZU9mZnNldCxhbHBoYU9mZnNldFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gIHJldHVybiBnc2FwIHx8IF93aW5kb3dFeGlzdHMoKSAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9nZXRDcmVhdGVKUyA9IGZ1bmN0aW9uIF9nZXRDcmVhdGVKUygpIHtcbiAgcmV0dXJuIF9jcmVhdGVKUyB8fCBfd2luICYmIF93aW4uY3JlYXRlanMgfHwgX3dpbiB8fCB7fTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlKSB7XG4gIHJldHVybiBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59LFxuICAgIF9jYWNoZSA9IGZ1bmN0aW9uIF9jYWNoZSh0YXJnZXQpIHtcbiAgdmFyIGIgPSB0YXJnZXQuZ2V0Qm91bmRzICYmIHRhcmdldC5nZXRCb3VuZHMoKTtcblxuICBpZiAoIWIpIHtcbiAgICBiID0gdGFyZ2V0Lm5vbWluYWxCb3VuZHMgfHwge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogMTAwLFxuICAgICAgaGVpZ2h0OiAxMDBcbiAgICB9O1xuICAgIHRhcmdldC5zZXRCb3VuZHMgJiYgdGFyZ2V0LnNldEJvdW5kcyhiLngsIGIueSwgYi53aWR0aCwgYi5oZWlnaHQpO1xuICB9XG5cbiAgdGFyZ2V0LmNhY2hlICYmIHRhcmdldC5jYWNoZShiLngsIGIueSwgYi53aWR0aCwgYi5oZWlnaHQpO1xuXG4gIF93YXJuKFwiRWFzZWxQbHVnaW46IGZvciBmaWx0ZXJzIHRvIGRpc3BsYXkgaW4gRWFzZWxKUywgeW91IG11c3QgY2FsbCB0aGUgb2JqZWN0J3MgY2FjaGUoKSBtZXRob2QgZmlyc3QuIEdTQVAgYXR0ZW1wdGVkIHRvIHVzZSB0aGUgdGFyZ2V0J3MgZ2V0Qm91bmRzKCkgZm9yIHRoZSBjYWNoZSBidXQgdGhhdCBtYXkgbm90IGJlIGNvbXBsZXRlbHkgYWNjdXJhdGUuIFwiICsgdGFyZ2V0KTtcbn0sXG4gICAgX3BhcnNlQ29sb3JGaWx0ZXIgPSBmdW5jdGlvbiBfcGFyc2VDb2xvckZpbHRlcih0YXJnZXQsIHYsIHBsdWdpbikge1xuICBpZiAoIV9Db2xvckZpbHRlcikge1xuICAgIF9Db2xvckZpbHRlciA9IF9nZXRDcmVhdGVKUygpLkNvbG9yRmlsdGVyO1xuXG4gICAgaWYgKCFfQ29sb3JGaWx0ZXIpIHtcbiAgICAgIF93YXJuKFwiRWFzZWxQbHVnaW4gZXJyb3I6IFRoZSBFYXNlbEpTIENvbG9yRmlsdGVyIEphdmFTY3JpcHQgZmlsZSB3YXNuJ3QgbG9hZGVkLlwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmlsdGVycyA9IHRhcmdldC5maWx0ZXJzIHx8IFtdLFxuICAgICAgaSA9IGZpbHRlcnMubGVuZ3RoLFxuICAgICAgYyxcbiAgICAgIHMsXG4gICAgICBlLFxuICAgICAgYSxcbiAgICAgIHAsXG4gICAgICBwdDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGZpbHRlcnNbaV0gaW5zdGFuY2VvZiBfQ29sb3JGaWx0ZXIpIHtcbiAgICAgIHMgPSBmaWx0ZXJzW2ldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzKSB7XG4gICAgcyA9IG5ldyBfQ29sb3JGaWx0ZXIoKTtcbiAgICBmaWx0ZXJzLnB1c2gocyk7XG4gICAgdGFyZ2V0LmZpbHRlcnMgPSBmaWx0ZXJzO1xuICB9XG5cbiAgZSA9IHMuY2xvbmUoKTtcblxuICBpZiAodi50aW50ICE9IG51bGwpIHtcbiAgICBjID0gZ3NhcC51dGlscy5zcGxpdENvbG9yKHYudGludCk7XG4gICAgYSA9IHYudGludEFtb3VudCAhPSBudWxsID8gK3YudGludEFtb3VudCA6IDE7XG4gICAgZS5yZWRPZmZzZXQgPSArY1swXSAqIGE7XG4gICAgZS5ncmVlbk9mZnNldCA9ICtjWzFdICogYTtcbiAgICBlLmJsdWVPZmZzZXQgPSArY1syXSAqIGE7XG4gICAgZS5yZWRNdWx0aXBsaWVyID0gZS5ncmVlbk11bHRpcGxpZXIgPSBlLmJsdWVNdWx0aXBsaWVyID0gMSAtIGE7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChwIGluIHYpIHtcbiAgICAgIGlmIChwICE9PSBcImV4cG9zdXJlXCIpIGlmIChwICE9PSBcImJyaWdodG5lc3NcIikge1xuICAgICAgICBlW3BdID0gK3ZbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHYuZXhwb3N1cmUgIT0gbnVsbCkge1xuICAgIGUucmVkT2Zmc2V0ID0gZS5ncmVlbk9mZnNldCA9IGUuYmx1ZU9mZnNldCA9IDI1NSAqICgrdi5leHBvc3VyZSAtIDEpO1xuICAgIGUucmVkTXVsdGlwbGllciA9IGUuZ3JlZW5NdWx0aXBsaWVyID0gZS5ibHVlTXVsdGlwbGllciA9IDE7XG4gIH0gZWxzZSBpZiAodi5icmlnaHRuZXNzICE9IG51bGwpIHtcbiAgICBhID0gK3YuYnJpZ2h0bmVzcyAtIDE7XG4gICAgZS5yZWRPZmZzZXQgPSBlLmdyZWVuT2Zmc2V0ID0gZS5ibHVlT2Zmc2V0ID0gYSA+IDAgPyBhICogMjU1IDogMDtcbiAgICBlLnJlZE11bHRpcGxpZXIgPSBlLmdyZWVuTXVsdGlwbGllciA9IGUuYmx1ZU11bHRpcGxpZXIgPSAxIC0gTWF0aC5hYnMoYSk7XG4gIH1cblxuICBpID0gODtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgcCA9IF9jb2xvclByb3BzW2ldO1xuXG4gICAgaWYgKHNbcF0gIT09IGVbcF0pIHtcbiAgICAgIHB0ID0gcGx1Z2luLmFkZChzLCBwLCBzW3BdLCBlW3BdKTtcblxuICAgICAgaWYgKHB0KSB7XG4gICAgICAgIHB0Lm9wID0gXCJlYXNlbF9jb2xvckZpbHRlclwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChcImVhc2VsX2NvbG9yRmlsdGVyXCIpO1xuXG4gIGlmICghdGFyZ2V0LmNhY2hlSUQpIHtcbiAgICBfY2FjaGUodGFyZ2V0KTtcbiAgfVxufSxcbiAgICBfaWRNYXRyaXggPSBbMSwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMSwgMF0sXG4gICAgX2x1bVIgPSAwLjIxMjY3MSxcbiAgICBfbHVtRyA9IDAuNzE1MTYwLFxuICAgIF9sdW1CID0gMC4wNzIxNjksXG4gICAgX2FwcGx5TWF0cml4ID0gZnVuY3Rpb24gX2FwcGx5TWF0cml4KG0sIG0yKSB7XG4gIGlmICghKG0gaW5zdGFuY2VvZiBBcnJheSkgfHwgIShtMiBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIHJldHVybiBtMjtcbiAgfVxuXG4gIHZhciB0ZW1wID0gW10sXG4gICAgICBpID0gMCxcbiAgICAgIHogPSAwLFxuICAgICAgeSxcbiAgICAgIHg7XG5cbiAgZm9yICh5ID0gMDsgeSA8IDQ7IHkrKykge1xuICAgIGZvciAoeCA9IDA7IHggPCA1OyB4KyspIHtcbiAgICAgIHogPSB4ID09PSA0ID8gbVtpICsgNF0gOiAwO1xuICAgICAgdGVtcFtpICsgeF0gPSBtW2ldICogbTJbeF0gKyBtW2kgKyAxXSAqIG0yW3ggKyA1XSArIG1baSArIDJdICogbTJbeCArIDEwXSArIG1baSArIDNdICogbTJbeCArIDE1XSArIHo7XG4gICAgfVxuXG4gICAgaSArPSA1O1xuICB9XG5cbiAgcmV0dXJuIHRlbXA7XG59LFxuICAgIF9zZXRTYXR1cmF0aW9uID0gZnVuY3Rpb24gX3NldFNhdHVyYXRpb24obSwgbikge1xuICBpZiAoaXNOYU4obikpIHtcbiAgICByZXR1cm4gbTtcbiAgfVxuXG4gIHZhciBpbnYgPSAxIC0gbixcbiAgICAgIHIgPSBpbnYgKiBfbHVtUixcbiAgICAgIGcgPSBpbnYgKiBfbHVtRyxcbiAgICAgIGIgPSBpbnYgKiBfbHVtQjtcbiAgcmV0dXJuIF9hcHBseU1hdHJpeChbciArIG4sIGcsIGIsIDAsIDAsIHIsIGcgKyBuLCBiLCAwLCAwLCByLCBnLCBiICsgbiwgMCwgMCwgMCwgMCwgMCwgMSwgMF0sIG0pO1xufSxcbiAgICBfY29sb3JpemUgPSBmdW5jdGlvbiBfY29sb3JpemUobSwgY29sb3IsIGFtb3VudCkge1xuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIGFtb3VudCA9IDE7XG4gIH1cblxuICB2YXIgYyA9IGdzYXAudXRpbHMuc3BsaXRDb2xvcihjb2xvciksXG4gICAgICByID0gY1swXSAvIDI1NSxcbiAgICAgIGcgPSBjWzFdIC8gMjU1LFxuICAgICAgYiA9IGNbMl0gLyAyNTUsXG4gICAgICBpbnYgPSAxIC0gYW1vdW50O1xuICByZXR1cm4gX2FwcGx5TWF0cml4KFtpbnYgKyBhbW91bnQgKiByICogX2x1bVIsIGFtb3VudCAqIHIgKiBfbHVtRywgYW1vdW50ICogciAqIF9sdW1CLCAwLCAwLCBhbW91bnQgKiBnICogX2x1bVIsIGludiArIGFtb3VudCAqIGcgKiBfbHVtRywgYW1vdW50ICogZyAqIF9sdW1CLCAwLCAwLCBhbW91bnQgKiBiICogX2x1bVIsIGFtb3VudCAqIGIgKiBfbHVtRywgaW52ICsgYW1vdW50ICogYiAqIF9sdW1CLCAwLCAwLCAwLCAwLCAwLCAxLCAwXSwgbSk7XG59LFxuICAgIF9zZXRIdWUgPSBmdW5jdGlvbiBfc2V0SHVlKG0sIG4pIHtcbiAgaWYgKGlzTmFOKG4pKSB7XG4gICAgcmV0dXJuIG07XG4gIH1cblxuICBuICo9IE1hdGguUEkgLyAxODA7XG4gIHZhciBjID0gTWF0aC5jb3MobiksXG4gICAgICBzID0gTWF0aC5zaW4obik7XG4gIHJldHVybiBfYXBwbHlNYXRyaXgoW19sdW1SICsgYyAqICgxIC0gX2x1bVIpICsgcyAqIC1fbHVtUiwgX2x1bUcgKyBjICogLV9sdW1HICsgcyAqIC1fbHVtRywgX2x1bUIgKyBjICogLV9sdW1CICsgcyAqICgxIC0gX2x1bUIpLCAwLCAwLCBfbHVtUiArIGMgKiAtX2x1bVIgKyBzICogMC4xNDMsIF9sdW1HICsgYyAqICgxIC0gX2x1bUcpICsgcyAqIDAuMTQsIF9sdW1CICsgYyAqIC1fbHVtQiArIHMgKiAtMC4yODMsIDAsIDAsIF9sdW1SICsgYyAqIC1fbHVtUiArIHMgKiAtKDEgLSBfbHVtUiksIF9sdW1HICsgYyAqIC1fbHVtRyArIHMgKiBfbHVtRywgX2x1bUIgKyBjICogKDEgLSBfbHVtQikgKyBzICogX2x1bUIsIDAsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDAsIDFdLCBtKTtcbn0sXG4gICAgX3NldENvbnRyYXN0ID0gZnVuY3Rpb24gX3NldENvbnRyYXN0KG0sIG4pIHtcbiAgaWYgKGlzTmFOKG4pKSB7XG4gICAgcmV0dXJuIG07XG4gIH1cblxuICBuICs9IDAuMDE7XG4gIHJldHVybiBfYXBwbHlNYXRyaXgoW24sIDAsIDAsIDAsIDEyOCAqICgxIC0gbiksIDAsIG4sIDAsIDAsIDEyOCAqICgxIC0gbiksIDAsIDAsIG4sIDAsIDEyOCAqICgxIC0gbiksIDAsIDAsIDAsIDEsIDBdLCBtKTtcbn0sXG4gICAgX3BhcnNlQ29sb3JNYXRyaXhGaWx0ZXIgPSBmdW5jdGlvbiBfcGFyc2VDb2xvck1hdHJpeEZpbHRlcih0YXJnZXQsIHYsIHBsdWdpbikge1xuICBpZiAoIV9Db2xvck1hdHJpeEZpbHRlcikge1xuICAgIF9Db2xvck1hdHJpeEZpbHRlciA9IF9nZXRDcmVhdGVKUygpLkNvbG9yTWF0cml4RmlsdGVyO1xuXG4gICAgaWYgKCFfQ29sb3JNYXRyaXhGaWx0ZXIpIHtcbiAgICAgIF93YXJuKFwiRWFzZWxQbHVnaW46IFRoZSBFYXNlbEpTIENvbG9yTWF0cml4RmlsdGVyIEphdmFTY3JpcHQgZmlsZSB3YXNuJ3QgbG9hZGVkLlwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmlsdGVycyA9IHRhcmdldC5maWx0ZXJzIHx8IFtdLFxuICAgICAgaSA9IGZpbHRlcnMubGVuZ3RoLFxuICAgICAgbWF0cml4LFxuICAgICAgc3RhcnRNYXRyaXgsXG4gICAgICBzLFxuICAgICAgcGc7XG5cbiAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgaWYgKGZpbHRlcnNbaV0gaW5zdGFuY2VvZiBfQ29sb3JNYXRyaXhGaWx0ZXIpIHtcbiAgICAgIHMgPSBmaWx0ZXJzW2ldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzKSB7XG4gICAgcyA9IG5ldyBfQ29sb3JNYXRyaXhGaWx0ZXIoX2lkTWF0cml4LnNsaWNlKCkpO1xuICAgIGZpbHRlcnMucHVzaChzKTtcbiAgICB0YXJnZXQuZmlsdGVycyA9IGZpbHRlcnM7XG4gIH1cblxuICBzdGFydE1hdHJpeCA9IHMubWF0cml4O1xuICBtYXRyaXggPSBfaWRNYXRyaXguc2xpY2UoKTtcblxuICBpZiAodi5jb2xvcml6ZSAhPSBudWxsKSB7XG4gICAgbWF0cml4ID0gX2NvbG9yaXplKG1hdHJpeCwgdi5jb2xvcml6ZSwgTnVtYmVyKHYuY29sb3JpemVBbW91bnQpKTtcbiAgfVxuXG4gIGlmICh2LmNvbnRyYXN0ICE9IG51bGwpIHtcbiAgICBtYXRyaXggPSBfc2V0Q29udHJhc3QobWF0cml4LCBOdW1iZXIodi5jb250cmFzdCkpO1xuICB9XG5cbiAgaWYgKHYuaHVlICE9IG51bGwpIHtcbiAgICBtYXRyaXggPSBfc2V0SHVlKG1hdHJpeCwgTnVtYmVyKHYuaHVlKSk7XG4gIH1cblxuICBpZiAodi5zYXR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBtYXRyaXggPSBfc2V0U2F0dXJhdGlvbihtYXRyaXgsIE51bWJlcih2LnNhdHVyYXRpb24pKTtcbiAgfVxuXG4gIGkgPSBtYXRyaXgubGVuZ3RoO1xuXG4gIHdoaWxlICgtLWkgPiAtMSkge1xuICAgIGlmIChtYXRyaXhbaV0gIT09IHN0YXJ0TWF0cml4W2ldKSB7XG4gICAgICBwZyA9IHBsdWdpbi5hZGQoc3RhcnRNYXRyaXgsIGksIHN0YXJ0TWF0cml4W2ldLCBtYXRyaXhbaV0pO1xuXG4gICAgICBpZiAocGcpIHtcbiAgICAgICAgcGcub3AgPSBcImVhc2VsX2NvbG9yTWF0cml4RmlsdGVyXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKFwiZWFzZWxfY29sb3JNYXRyaXhGaWx0ZXJcIik7XG5cbiAgaWYgKCF0YXJnZXQuY2FjaGVJRCkge1xuICAgIF9jYWNoZSgpO1xuICB9XG5cbiAgcGx1Z2luLl9tYXRyaXggPSBzdGFydE1hdHJpeDtcbn0sXG4gICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKGNvcmUpIHtcbiAgZ3NhcCA9IGNvcmUgfHwgX2dldEdTQVAoKTtcblxuICBpZiAoX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgfVxuXG4gIGlmIChnc2FwKSB7XG4gICAgX2NvcmVJbml0dGVkID0gMTtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBFYXNlbFBsdWdpbiA9IHtcbiAgdmVyc2lvbjogXCIzLjcuMVwiLFxuICBuYW1lOiBcImVhc2VsXCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgaWYgKCFfY29yZUluaXR0ZWQpIHtcbiAgICAgIF9pbml0Q29yZSgpO1xuXG4gICAgICBpZiAoIWdzYXApIHtcbiAgICAgICAgX3dhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihFYXNlbFBsdWdpbilcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdmFyIHAsIHB0LCB0aW50LCBjb2xvck1hdHJpeCwgZW5kLCBsYWJlbHMsIGk7XG5cbiAgICBmb3IgKHAgaW4gdmFsdWUpIHtcbiAgICAgIGVuZCA9IHZhbHVlW3BdO1xuXG4gICAgICBpZiAocCA9PT0gXCJjb2xvckZpbHRlclwiIHx8IHAgPT09IFwidGludFwiIHx8IHAgPT09IFwidGludEFtb3VudFwiIHx8IHAgPT09IFwiZXhwb3N1cmVcIiB8fCBwID09PSBcImJyaWdodG5lc3NcIikge1xuICAgICAgICBpZiAoIXRpbnQpIHtcbiAgICAgICAgICBfcGFyc2VDb2xvckZpbHRlcih0YXJnZXQsIHZhbHVlLmNvbG9yRmlsdGVyIHx8IHZhbHVlLCB0aGlzKTtcblxuICAgICAgICAgIHRpbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IFwic2F0dXJhdGlvblwiIHx8IHAgPT09IFwiY29udHJhc3RcIiB8fCBwID09PSBcImh1ZVwiIHx8IHAgPT09IFwiY29sb3JpemVcIiB8fCBwID09PSBcImNvbG9yaXplQW1vdW50XCIpIHtcbiAgICAgICAgaWYgKCFjb2xvck1hdHJpeCkge1xuICAgICAgICAgIF9wYXJzZUNvbG9yTWF0cml4RmlsdGVyKHRhcmdldCwgdmFsdWUuY29sb3JNYXRyaXhGaWx0ZXIgfHwgdmFsdWUsIHRoaXMpO1xuXG4gICAgICAgICAgY29sb3JNYXRyaXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZnJhbWVcIikge1xuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gXCJzdHJpbmdcIiAmJiBlbmQuY2hhckF0KDEpICE9PSBcIj1cIiAmJiAobGFiZWxzID0gdGFyZ2V0LmxhYmVscykpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobGFiZWxzW2ldLmxhYmVsID09PSBlbmQpIHtcbiAgICAgICAgICAgICAgZW5kID0gbGFiZWxzW2ldLnBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcImdvdG9BbmRTdG9wXCIsIHRhcmdldC5jdXJyZW50RnJhbWUsIGVuZCwgaW5kZXgsIHRhcmdldHMsIE1hdGgucm91bmQpO1xuXG4gICAgICAgIGlmIChwdCkge1xuICAgICAgICAgIHB0Lm9wID0gcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXRbcF0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmFkZCh0YXJnZXQsIHAsIFwiZ2V0XCIsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEudGFyZ2V0LmNhY2hlSUQpIHtcbiAgICAgIGRhdGEudGFyZ2V0LnVwZGF0ZUNhY2hlKCk7XG4gICAgfVxuICB9LFxuICByZWdpc3RlcjogX2luaXRDb3JlXG59O1xuXG5FYXNlbFBsdWdpbi5yZWdpc3RlckNyZWF0ZUpTID0gZnVuY3Rpb24gKGNyZWF0ZWpzKSB7XG4gIF9jcmVhdGVKUyA9IGNyZWF0ZWpzO1xufTtcblxuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKEVhc2VsUGx1Z2luKTtcbmV4cG9ydCB7IEVhc2VsUGx1Z2luIGFzIGRlZmF1bHQgfTsiLCIvKiFcbiAqIE1vdGlvblBhdGhQbHVnaW4gMy43LjFcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjEsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBnZXRSYXdQYXRoLCBjYWNoZVJhd1BhdGhNZWFzdXJlbWVudHMsIGdldFBvc2l0aW9uT25QYXRoLCBwb2ludHNUb1NlZ21lbnQsIGZsYXRQb2ludHNUb1NlZ21lbnQsIHNsaWNlUmF3UGF0aCwgc3RyaW5nVG9SYXdQYXRoLCByYXdQYXRoVG9TdHJpbmcsIHRyYW5zZm9ybVJhd1BhdGgsIGNvbnZlcnRUb1BhdGggYXMgX2NvbnZlcnRUb1BhdGggfSBmcm9tIFwiLi91dGlscy9wYXRocy5qc1wiO1xuaW1wb3J0IHsgZ2V0R2xvYmFsTWF0cml4IH0gZnJvbSBcIi4vdXRpbHMvbWF0cml4LmpzXCI7XG5cbnZhciBfeFByb3BzID0gXCJ4LHRyYW5zbGF0ZVgsbGVmdCxtYXJnaW5MZWZ0LHhQZXJjZW50XCIuc3BsaXQoXCIsXCIpLFxuICAgIF95UHJvcHMgPSBcInksdHJhbnNsYXRlWSx0b3AsbWFyZ2luVG9wLHlQZXJjZW50XCIuc3BsaXQoXCIsXCIpLFxuICAgIF9ERUcyUkFEID0gTWF0aC5QSSAvIDE4MCxcbiAgICBnc2FwLFxuICAgIFByb3BUd2VlbixcbiAgICBfZ2V0VW5pdCxcbiAgICBfdG9BcnJheSxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX3BvcHVsYXRlU2VnbWVudEZyb21BcnJheSA9IGZ1bmN0aW9uIF9wb3B1bGF0ZVNlZ21lbnRGcm9tQXJyYXkoc2VnbWVudCwgdmFsdWVzLCBwcm9wZXJ0eSwgbW9kZSkge1xuICAvL21vZGU6IDAgPSB4IGJ1dCBkb24ndCBmaWxsIHkgeWV0LCAxID0geSwgMiA9IHggYW5kIGZpbGwgeSB3aXRoIDAuXG4gIHZhciBsID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIHNpID0gbW9kZSA9PT0gMiA/IDAgOiBtb2RlLFxuICAgICAgaSA9IDAsXG4gICAgICB2O1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgc2VnbWVudFtzaV0gPSB2ID0gcGFyc2VGbG9hdCh2YWx1ZXNbaV1bcHJvcGVydHldKTtcbiAgICBtb2RlID09PSAyICYmIChzZWdtZW50W3NpICsgMV0gPSAwKTtcbiAgICBzaSArPSAyO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnQ7XG59LFxuICAgIF9nZXRQcm9wTnVtID0gZnVuY3Rpb24gX2dldFByb3BOdW0odGFyZ2V0LCBwcm9wLCB1bml0KSB7XG4gIHJldHVybiBwYXJzZUZsb2F0KHRhcmdldC5fZ3NhcC5nZXQodGFyZ2V0LCBwcm9wLCB1bml0IHx8IFwicHhcIikpIHx8IDA7XG59LFxuICAgIF9yZWxhdGl2aXplID0gZnVuY3Rpb24gX3JlbGF0aXZpemUoc2VnbWVudCkge1xuICB2YXIgeCA9IHNlZ21lbnRbMF0sXG4gICAgICB5ID0gc2VnbWVudFsxXSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMjsgaSA8IHNlZ21lbnQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB4ID0gc2VnbWVudFtpXSArPSB4O1xuICAgIHkgPSBzZWdtZW50W2kgKyAxXSArPSB5O1xuICB9XG59LFxuICAgIF9zZWdtZW50VG9SYXdQYXRoID0gZnVuY3Rpb24gX3NlZ21lbnRUb1Jhd1BhdGgocGx1Z2luLCBzZWdtZW50LCB0YXJnZXQsIHgsIHksIHNsaWNlciwgdmFycywgdW5pdFgsIHVuaXRZKSB7XG4gIGlmICh2YXJzLnR5cGUgPT09IFwiY3ViaWNcIikge1xuICAgIHNlZ21lbnQgPSBbc2VnbWVudF07XG4gIH0gZWxzZSB7XG4gICAgdmFycy5mcm9tQ3VycmVudCAhPT0gZmFsc2UgJiYgc2VnbWVudC51bnNoaWZ0KF9nZXRQcm9wTnVtKHRhcmdldCwgeCwgdW5pdFgpLCB5ID8gX2dldFByb3BOdW0odGFyZ2V0LCB5LCB1bml0WSkgOiAwKTtcbiAgICB2YXJzLnJlbGF0aXZlICYmIF9yZWxhdGl2aXplKHNlZ21lbnQpO1xuICAgIHZhciBwb2ludEZ1bmMgPSB5ID8gcG9pbnRzVG9TZWdtZW50IDogZmxhdFBvaW50c1RvU2VnbWVudDtcbiAgICBzZWdtZW50ID0gW3BvaW50RnVuYyhzZWdtZW50LCB2YXJzLmN1cnZpbmVzcyldO1xuICB9XG5cbiAgc2VnbWVudCA9IHNsaWNlcihfYWxpZ24oc2VnbWVudCwgdGFyZ2V0LCB2YXJzKSk7XG5cbiAgX2FkZERpbWVuc2lvbmFsUHJvcFR3ZWVuKHBsdWdpbiwgdGFyZ2V0LCB4LCBzZWdtZW50LCBcInhcIiwgdW5pdFgpO1xuXG4gIHkgJiYgX2FkZERpbWVuc2lvbmFsUHJvcFR3ZWVuKHBsdWdpbiwgdGFyZ2V0LCB5LCBzZWdtZW50LCBcInlcIiwgdW5pdFkpO1xuICByZXR1cm4gY2FjaGVSYXdQYXRoTWVhc3VyZW1lbnRzKHNlZ21lbnQsIHZhcnMucmVzb2x1dGlvbiB8fCAodmFycy5jdXJ2aW5lc3MgPT09IDAgPyAyMCA6IDEyKSk7IC8vd2hlbiBjdXJ2aW5lc3MgaXMgMCwgaXQgY3JlYXRlcyBjb250cm9sIHBvaW50cyByaWdodCBvbiB0b3Agb2YgdGhlIGFuY2hvcnMgd2hpY2ggbWFrZXMgaXQgbW9yZSBzZW5zaXRpdmUgdG8gcmVzb2x1dGlvbiwgdGh1cyB3ZSBjaGFuZ2UgdGhlIGRlZmF1bHQgYWNjb3JkaW5nbHkuXG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKHYpIHtcbiAgcmV0dXJuIHY7XG59LFxuICAgIF9udW1FeHAgPSAvWy0rXFwuXSpcXGQrW1xcLmVcXC1cXCtdKlxcZCpbZVxcLVxcK10qXFxkKi9nLFxuICAgIF9vcmlnaW5Ub1BvaW50ID0gZnVuY3Rpb24gX29yaWdpblRvUG9pbnQoZWxlbWVudCwgb3JpZ2luLCBwYXJlbnRNYXRyaXgpIHtcbiAgLy8gb3JpZ2luIGlzIGFuIGFycmF5IG9mIG5vcm1hbGl6ZWQgdmFsdWVzICgwLTEpIGluIHJlbGF0aW9uIHRvIHRoZSB3aWR0aC9oZWlnaHQsIHNvIFswLjUsIDAuNV0gd291bGQgYmUgdGhlIGNlbnRlci4gSXQgY2FuIGFsc28gYmUgXCJhdXRvXCIgaW4gd2hpY2ggY2FzZSBpdCB3aWxsIGJlIHRoZSB0b3AgbGVmdCB1bmxlc3MgaXQncyBhIDxwYXRoPiwgd2hlbiBpdCB3aWxsIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhdGggaXRzZWxmLlxuICB2YXIgbSA9IGdldEdsb2JhbE1hdHJpeChlbGVtZW50KSxcbiAgICAgIHN2ZyxcbiAgICAgIHgsXG4gICAgICB5O1xuXG4gIGlmICgoZWxlbWVudC50YWdOYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIikge1xuICAgIHN2ZyA9IGVsZW1lbnQudmlld0JveC5iYXNlVmFsO1xuICAgIHggPSBzdmcueDtcbiAgICB5ID0gc3ZnLnk7XG4gICAgc3ZnLndpZHRoIHx8IChzdmcgPSB7XG4gICAgICB3aWR0aDogK2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwid2lkdGhcIiksXG4gICAgICBoZWlnaHQ6ICtlbGVtZW50LmdldEF0dHJpYnV0ZShcImhlaWdodFwiKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHN2ZyA9IG9yaWdpbiAmJiBlbGVtZW50LmdldEJCb3ggJiYgZWxlbWVudC5nZXRCQm94KCk7XG4gICAgeCA9IHkgPSAwO1xuICB9XG5cbiAgaWYgKG9yaWdpbiAmJiBvcmlnaW4gIT09IFwiYXV0b1wiKSB7XG4gICAgeCArPSBvcmlnaW4ucHVzaCA/IG9yaWdpblswXSAqIChzdmcgPyBzdmcud2lkdGggOiBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDApIDogb3JpZ2luLng7XG4gICAgeSArPSBvcmlnaW4ucHVzaCA/IG9yaWdpblsxXSAqIChzdmcgPyBzdmcuaGVpZ2h0IDogZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMCkgOiBvcmlnaW4ueTtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnRNYXRyaXguYXBwbHkoeCB8fCB5ID8gbS5hcHBseSh7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IG0uZSxcbiAgICB5OiBtLmZcbiAgfSk7XG59LFxuICAgIF9nZXRBbGlnbk1hdHJpeCA9IGZ1bmN0aW9uIF9nZXRBbGlnbk1hdHJpeChmcm9tRWxlbWVudCwgdG9FbGVtZW50LCBmcm9tT3JpZ2luLCB0b09yaWdpbikge1xuICB2YXIgcGFyZW50TWF0cml4ID0gZ2V0R2xvYmFsTWF0cml4KGZyb21FbGVtZW50LnBhcmVudE5vZGUsIHRydWUsIHRydWUpLFxuICAgICAgbSA9IHBhcmVudE1hdHJpeC5jbG9uZSgpLm11bHRpcGx5KGdldEdsb2JhbE1hdHJpeCh0b0VsZW1lbnQpKSxcbiAgICAgIGZyb21Qb2ludCA9IF9vcmlnaW5Ub1BvaW50KGZyb21FbGVtZW50LCBmcm9tT3JpZ2luLCBwYXJlbnRNYXRyaXgpLFxuICAgICAgX29yaWdpblRvUG9pbnQyID0gX29yaWdpblRvUG9pbnQodG9FbGVtZW50LCB0b09yaWdpbiwgcGFyZW50TWF0cml4KSxcbiAgICAgIHggPSBfb3JpZ2luVG9Qb2ludDIueCxcbiAgICAgIHkgPSBfb3JpZ2luVG9Qb2ludDIueSxcbiAgICAgIHA7XG5cbiAgbS5lID0gbS5mID0gMDtcblxuICBpZiAodG9PcmlnaW4gPT09IFwiYXV0b1wiICYmIHRvRWxlbWVudC5nZXRUb3RhbExlbmd0aCAmJiB0b0VsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInBhdGhcIikge1xuICAgIHAgPSB0b0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZFwiKS5tYXRjaChfbnVtRXhwKSB8fCBbXTtcbiAgICBwID0gbS5hcHBseSh7XG4gICAgICB4OiArcFswXSxcbiAgICAgIHk6ICtwWzFdXG4gICAgfSk7XG4gICAgeCArPSBwLng7XG4gICAgeSArPSBwLnk7XG4gIH1cblxuICBpZiAocCB8fCB0b0VsZW1lbnQuZ2V0QkJveCAmJiBmcm9tRWxlbWVudC5nZXRCQm94ICYmIHRvRWxlbWVudC5vd25lclNWR0VsZW1lbnQgPT09IGZyb21FbGVtZW50Lm93bmVyU1ZHRWxlbWVudCkge1xuICAgIHAgPSBtLmFwcGx5KHRvRWxlbWVudC5nZXRCQm94KCkpO1xuICAgIHggLT0gcC54O1xuICAgIHkgLT0gcC55O1xuICB9XG5cbiAgbS5lID0geCAtIGZyb21Qb2ludC54O1xuICBtLmYgPSB5IC0gZnJvbVBvaW50Lnk7XG4gIHJldHVybiBtO1xufSxcbiAgICBfYWxpZ24gPSBmdW5jdGlvbiBfYWxpZ24ocmF3UGF0aCwgdGFyZ2V0LCBfcmVmKSB7XG4gIHZhciBhbGlnbiA9IF9yZWYuYWxpZ24sXG4gICAgICBtYXRyaXggPSBfcmVmLm1hdHJpeCxcbiAgICAgIG9mZnNldFggPSBfcmVmLm9mZnNldFgsXG4gICAgICBvZmZzZXRZID0gX3JlZi5vZmZzZXRZLFxuICAgICAgYWxpZ25PcmlnaW4gPSBfcmVmLmFsaWduT3JpZ2luO1xuXG4gIHZhciB4ID0gcmF3UGF0aFswXVswXSxcbiAgICAgIHkgPSByYXdQYXRoWzBdWzFdLFxuICAgICAgY3VyWCA9IF9nZXRQcm9wTnVtKHRhcmdldCwgXCJ4XCIpLFxuICAgICAgY3VyWSA9IF9nZXRQcm9wTnVtKHRhcmdldCwgXCJ5XCIpLFxuICAgICAgYWxpZ25UYXJnZXQsXG4gICAgICBtLFxuICAgICAgcDtcblxuICBpZiAoIXJhd1BhdGggfHwgIXJhd1BhdGgubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGdldFJhd1BhdGgoXCJNMCwwTDAsMFwiKTtcbiAgfVxuXG4gIGlmIChhbGlnbikge1xuICAgIGlmIChhbGlnbiA9PT0gXCJzZWxmXCIgfHwgKGFsaWduVGFyZ2V0ID0gX3RvQXJyYXkoYWxpZ24pWzBdIHx8IHRhcmdldCkgPT09IHRhcmdldCkge1xuICAgICAgdHJhbnNmb3JtUmF3UGF0aChyYXdQYXRoLCAxLCAwLCAwLCAxLCBjdXJYIC0geCwgY3VyWSAtIHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYWxpZ25PcmlnaW4gJiYgYWxpZ25PcmlnaW5bMl0gIT09IGZhbHNlKSB7XG4gICAgICAgIGdzYXAuc2V0KHRhcmdldCwge1xuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogYWxpZ25PcmlnaW5bMF0gKiAxMDAgKyBcIiUgXCIgKyBhbGlnbk9yaWdpblsxXSAqIDEwMCArIFwiJVwiXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ25PcmlnaW4gPSBbX2dldFByb3BOdW0odGFyZ2V0LCBcInhQZXJjZW50XCIpIC8gLTEwMCwgX2dldFByb3BOdW0odGFyZ2V0LCBcInlQZXJjZW50XCIpIC8gLTEwMF07XG4gICAgICB9XG5cbiAgICAgIG0gPSBfZ2V0QWxpZ25NYXRyaXgodGFyZ2V0LCBhbGlnblRhcmdldCwgYWxpZ25PcmlnaW4sIFwiYXV0b1wiKTtcbiAgICAgIHAgPSBtLmFwcGx5KHtcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfSk7XG4gICAgICB0cmFuc2Zvcm1SYXdQYXRoKHJhd1BhdGgsIG0uYSwgbS5iLCBtLmMsIG0uZCwgY3VyWCArIG0uZSAtIChwLnggLSBtLmUpLCBjdXJZICsgbS5mIC0gKHAueSAtIG0uZikpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtYXRyaXgpIHtcbiAgICB0cmFuc2Zvcm1SYXdQYXRoKHJhd1BhdGgsIG1hdHJpeC5hLCBtYXRyaXguYiwgbWF0cml4LmMsIG1hdHJpeC5kLCBtYXRyaXguZSwgbWF0cml4LmYpO1xuICB9IGVsc2UgaWYgKG9mZnNldFggfHwgb2Zmc2V0WSkge1xuICAgIHRyYW5zZm9ybVJhd1BhdGgocmF3UGF0aCwgMSwgMCwgMCwgMSwgb2Zmc2V0WCB8fCAwLCBvZmZzZXRZIHx8IDApO1xuICB9XG5cbiAgcmV0dXJuIHJhd1BhdGg7XG59LFxuICAgIF9hZGREaW1lbnNpb25hbFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGREaW1lbnNpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHJhd1BhdGgsIHBhdGhQcm9wZXJ0eSwgZm9yY2VVbml0KSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIGhhcm5lc3MgPSBjYWNoZS5oYXJuZXNzLFxuICAgICAgYWxpYXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyAmJiBoYXJuZXNzLmFsaWFzZXNbcHJvcGVydHldLFxuICAgICAgcHJvcCA9IGFsaWFzICYmIGFsaWFzLmluZGV4T2YoXCIsXCIpIDwgMCA/IGFsaWFzIDogcHJvcGVydHksXG4gICAgICBwdCA9IHBsdWdpbi5fcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMCwgX2VtcHR5RnVuYywgMCwgY2FjaGUuc2V0KHRhcmdldCwgcHJvcCwgcGx1Z2luKSk7XG4gIHB0LnUgPSBfZ2V0VW5pdChjYWNoZS5nZXQodGFyZ2V0LCBwcm9wLCBmb3JjZVVuaXQpKSB8fCAwO1xuICBwdC5wYXRoID0gcmF3UGF0aDtcbiAgcHQucHAgPSBwYXRoUHJvcGVydHk7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3ApO1xufSxcbiAgICBfc2xpY2VNb2RpZmllciA9IGZ1bmN0aW9uIF9zbGljZU1vZGlmaWVyKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChyYXdQYXRoKSB7XG4gICAgcmV0dXJuIHN0YXJ0IHx8IGVuZCAhPT0gMSA/IHNsaWNlUmF3UGF0aChyYXdQYXRoLCBzdGFydCwgZW5kKSA6IHJhd1BhdGg7XG4gIH07XG59O1xuXG5leHBvcnQgdmFyIE1vdGlvblBhdGhQbHVnaW4gPSB7XG4gIHZlcnNpb246IFwiMy43LjFcIixcbiAgbmFtZTogXCJtb3Rpb25QYXRoXCIsXG4gIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3Rlcihjb3JlLCBQbHVnaW4sIHByb3BUd2Vlbikge1xuICAgIGdzYXAgPSBjb3JlO1xuICAgIF9nZXRVbml0ID0gZ3NhcC51dGlscy5nZXRVbml0O1xuICAgIF90b0FycmF5ID0gZ3NhcC51dGlscy50b0FycmF5O1xuICAgIFByb3BUd2VlbiA9IHByb3BUd2VlbjtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMpIHtcbiAgICBpZiAoIWdzYXApIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKE1vdGlvblBhdGhQbHVnaW4pXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghKHR5cGVvZiB2YXJzID09PSBcIm9iamVjdFwiICYmICF2YXJzLnN0eWxlKSB8fCAhdmFycy5wYXRoKSB7XG4gICAgICB2YXJzID0ge1xuICAgICAgICBwYXRoOiB2YXJzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciByYXdQYXRocyA9IFtdLFxuICAgICAgICBfdmFycyA9IHZhcnMsXG4gICAgICAgIHBhdGggPSBfdmFycy5wYXRoLFxuICAgICAgICBhdXRvUm90YXRlID0gX3ZhcnMuYXV0b1JvdGF0ZSxcbiAgICAgICAgdW5pdFggPSBfdmFycy51bml0WCxcbiAgICAgICAgdW5pdFkgPSBfdmFycy51bml0WSxcbiAgICAgICAgeCA9IF92YXJzLngsXG4gICAgICAgIHkgPSBfdmFycy55LFxuICAgICAgICBmaXJzdE9iaiA9IHBhdGhbMF0sXG4gICAgICAgIHNsaWNlciA9IF9zbGljZU1vZGlmaWVyKHZhcnMuc3RhcnQsIFwiZW5kXCIgaW4gdmFycyA/IHZhcnMuZW5kIDogMSksXG4gICAgICAgIHJhd1BhdGgsXG4gICAgICAgIHA7XG5cbiAgICB0aGlzLnJhd1BhdGhzID0gcmF3UGF0aHM7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG5cbiAgICBpZiAodGhpcy5yb3RhdGUgPSBhdXRvUm90YXRlIHx8IGF1dG9Sb3RhdGUgPT09IDApIHtcbiAgICAgIC8vZ2V0IHRoZSByb3RhdGlvbmFsIGRhdGEgRklSU1Qgc28gdGhhdCB0aGUgc2V0VHJhbnNmb3JtKCkgbWV0aG9kIGlzIGNhbGxlZCBpbiB0aGUgY29ycmVjdCBvcmRlciBpbiB0aGUgcmVuZGVyKCkgbG9vcCAtIHJvdGF0aW9uIGdldHMgc2V0IGxhc3QuXG4gICAgICB0aGlzLnJPZmZzZXQgPSBwYXJzZUZsb2F0KGF1dG9Sb3RhdGUpIHx8IDA7XG4gICAgICB0aGlzLnJhZGlhbnMgPSAhIXZhcnMudXNlUmFkaWFucztcbiAgICAgIHRoaXMuclByb3AgPSB2YXJzLnJvdGF0aW9uIHx8IFwicm90YXRpb25cIjsgLy8gcm90YXRpb24gcHJvcGVydHlcblxuICAgICAgdGhpcy5yU2V0ID0gdGFyZ2V0Ll9nc2FwLnNldCh0YXJnZXQsIHRoaXMuclByb3AsIHRoaXMpOyAvLyByb3RhdGlvbiBzZXR0ZXJcblxuICAgICAgdGhpcy5ydSA9IF9nZXRVbml0KHRhcmdldC5fZ3NhcC5nZXQodGFyZ2V0LCB0aGlzLnJQcm9wKSkgfHwgMDsgLy8gcm90YXRpb24gdW5pdHNcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSAmJiAhKFwiY2xvc2VkXCIgaW4gcGF0aCkgJiYgdHlwZW9mIGZpcnN0T2JqICE9PSBcIm51bWJlclwiKSB7XG4gICAgICBmb3IgKHAgaW4gZmlyc3RPYmopIHtcbiAgICAgICAgaWYgKCF4ICYmIH5feFByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICB4ID0gcDtcbiAgICAgICAgfSBlbHNlIGlmICgheSAmJiB+X3lQcm9wcy5pbmRleE9mKHApKSB7XG4gICAgICAgICAgeSA9IHA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHggJiYgeSkge1xuICAgICAgICAvL2NvcnJlbGF0ZWQgdmFsdWVzXG4gICAgICAgIHJhd1BhdGhzLnB1c2goX3NlZ21lbnRUb1Jhd1BhdGgodGhpcywgX3BvcHVsYXRlU2VnbWVudEZyb21BcnJheShfcG9wdWxhdGVTZWdtZW50RnJvbUFycmF5KFtdLCBwYXRoLCB4LCAwKSwgcGF0aCwgeSwgMSksIHRhcmdldCwgeCwgeSwgc2xpY2VyLCB2YXJzLCB1bml0WCB8fCBfZ2V0VW5pdChwYXRoWzBdW3hdKSwgdW5pdFkgfHwgX2dldFVuaXQocGF0aFswXVt5XSkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB5ID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChwIGluIGZpcnN0T2JqKSB7XG4gICAgICAgIHAgIT09IHggJiYgcCAhPT0geSAmJiByYXdQYXRocy5wdXNoKF9zZWdtZW50VG9SYXdQYXRoKHRoaXMsIF9wb3B1bGF0ZVNlZ21lbnRGcm9tQXJyYXkoW10sIHBhdGgsIHAsIDIpLCB0YXJnZXQsIHAsIDAsIHNsaWNlciwgdmFycywgX2dldFVuaXQocGF0aFswXVtwXSkpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmF3UGF0aCA9IHNsaWNlcihfYWxpZ24oZ2V0UmF3UGF0aCh2YXJzLnBhdGgpLCB0YXJnZXQsIHZhcnMpKTtcbiAgICAgIGNhY2hlUmF3UGF0aE1lYXN1cmVtZW50cyhyYXdQYXRoLCB2YXJzLnJlc29sdXRpb24pO1xuICAgICAgcmF3UGF0aHMucHVzaChyYXdQYXRoKTtcblxuICAgICAgX2FkZERpbWVuc2lvbmFsUHJvcFR3ZWVuKHRoaXMsIHRhcmdldCwgdmFycy54IHx8IFwieFwiLCByYXdQYXRoLCBcInhcIiwgdmFycy51bml0WCB8fCBcInB4XCIpO1xuXG4gICAgICBfYWRkRGltZW5zaW9uYWxQcm9wVHdlZW4odGhpcywgdGFyZ2V0LCB2YXJzLnkgfHwgXCJ5XCIsIHJhd1BhdGgsIFwieVwiLCB2YXJzLnVuaXRZIHx8IFwicHhcIik7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIHZhciByYXdQYXRocyA9IGRhdGEucmF3UGF0aHMsXG4gICAgICAgIGkgPSByYXdQYXRocy5sZW5ndGgsXG4gICAgICAgIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICBpZiAocmF0aW8gPiAxKSB7XG4gICAgICByYXRpbyA9IDE7XG4gICAgfSBlbHNlIGlmIChyYXRpbyA8IDApIHtcbiAgICAgIHJhdGlvID0gMDtcbiAgICB9XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBnZXRQb3NpdGlvbk9uUGF0aChyYXdQYXRoc1tpXSwgcmF0aW8sICFpICYmIGRhdGEucm90YXRlLCByYXdQYXRoc1tpXSk7XG4gICAgfVxuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5zZXQocHQudCwgcHQucCwgcHQucGF0aFtwdC5wcF0gKyBwdC51LCBwdC5kLCByYXRpbyk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIGRhdGEucm90YXRlICYmIGRhdGEuclNldChkYXRhLnRhcmdldCwgZGF0YS5yUHJvcCwgcmF3UGF0aHNbMF0uYW5nbGUgKiAoZGF0YS5yYWRpYW5zID8gX0RFRzJSQUQgOiAxKSArIGRhdGEuck9mZnNldCArIGRhdGEucnUsIGRhdGEsIHJhdGlvKTtcbiAgfSxcbiAgZ2V0TGVuZ3RoOiBmdW5jdGlvbiBnZXRMZW5ndGgocGF0aCkge1xuICAgIHJldHVybiBjYWNoZVJhd1BhdGhNZWFzdXJlbWVudHMoZ2V0UmF3UGF0aChwYXRoKSkudG90YWxMZW5ndGg7XG4gIH0sXG4gIHNsaWNlUmF3UGF0aDogc2xpY2VSYXdQYXRoLFxuICBnZXRSYXdQYXRoOiBnZXRSYXdQYXRoLFxuICBwb2ludHNUb1NlZ21lbnQ6IHBvaW50c1RvU2VnbWVudCxcbiAgc3RyaW5nVG9SYXdQYXRoOiBzdHJpbmdUb1Jhd1BhdGgsXG4gIHJhd1BhdGhUb1N0cmluZzogcmF3UGF0aFRvU3RyaW5nLFxuICB0cmFuc2Zvcm1SYXdQYXRoOiB0cmFuc2Zvcm1SYXdQYXRoLFxuICBnZXRHbG9iYWxNYXRyaXg6IGdldEdsb2JhbE1hdHJpeCxcbiAgZ2V0UG9zaXRpb25PblBhdGg6IGdldFBvc2l0aW9uT25QYXRoLFxuICBjYWNoZVJhd1BhdGhNZWFzdXJlbWVudHM6IGNhY2hlUmF3UGF0aE1lYXN1cmVtZW50cyxcbiAgY29udmVydFRvUGF0aDogZnVuY3Rpb24gY29udmVydFRvUGF0aCh0YXJnZXRzLCBzd2FwKSB7XG4gICAgcmV0dXJuIF90b0FycmF5KHRhcmdldHMpLm1hcChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gX2NvbnZlcnRUb1BhdGgodGFyZ2V0LCBzd2FwICE9PSBmYWxzZSk7XG4gICAgfSk7XG4gIH0sXG4gIGNvbnZlcnRDb29yZGluYXRlczogZnVuY3Rpb24gY29udmVydENvb3JkaW5hdGVzKGZyb21FbGVtZW50LCB0b0VsZW1lbnQsIHBvaW50KSB7XG4gICAgdmFyIG0gPSBnZXRHbG9iYWxNYXRyaXgodG9FbGVtZW50LCB0cnVlLCB0cnVlKS5tdWx0aXBseShnZXRHbG9iYWxNYXRyaXgoZnJvbUVsZW1lbnQpKTtcbiAgICByZXR1cm4gcG9pbnQgPyBtLmFwcGx5KHBvaW50KSA6IG07XG4gIH0sXG4gIGdldEFsaWduTWF0cml4OiBfZ2V0QWxpZ25NYXRyaXgsXG4gIGdldFJlbGF0aXZlUG9zaXRpb246IGZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZnJvbUVsZW1lbnQsIHRvRWxlbWVudCwgZnJvbU9yaWdpbiwgdG9PcmlnaW4pIHtcbiAgICB2YXIgbSA9IF9nZXRBbGlnbk1hdHJpeChmcm9tRWxlbWVudCwgdG9FbGVtZW50LCBmcm9tT3JpZ2luLCB0b09yaWdpbik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgeDogbS5lLFxuICAgICAgeTogbS5mXG4gICAgfTtcbiAgfSxcbiAgYXJyYXlUb1Jhd1BhdGg6IGZ1bmN0aW9uIGFycmF5VG9SYXdQYXRoKHZhbHVlLCB2YXJzKSB7XG4gICAgdmFycyA9IHZhcnMgfHwge307XG5cbiAgICB2YXIgc2VnbWVudCA9IF9wb3B1bGF0ZVNlZ21lbnRGcm9tQXJyYXkoX3BvcHVsYXRlU2VnbWVudEZyb21BcnJheShbXSwgdmFsdWUsIHZhcnMueCB8fCBcInhcIiwgMCksIHZhbHVlLCB2YXJzLnkgfHwgXCJ5XCIsIDEpO1xuXG4gICAgdmFycy5yZWxhdGl2ZSAmJiBfcmVsYXRpdml6ZShzZWdtZW50KTtcbiAgICByZXR1cm4gW3ZhcnMudHlwZSA9PT0gXCJjdWJpY1wiID8gc2VnbWVudCA6IHBvaW50c1RvU2VnbWVudChzZWdtZW50LCB2YXJzLmN1cnZpbmVzcyldO1xuICB9XG59O1xuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKE1vdGlvblBhdGhQbHVnaW4pO1xuZXhwb3J0IHsgTW90aW9uUGF0aFBsdWdpbiBhcyBkZWZhdWx0IH07IiwiLyohXG4gKiBQaXhpUGx1Z2luIDMuNy4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIxLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIGdzYXAsXG4gICAgX3dpbixcbiAgICBfc3BsaXRDb2xvcixcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX1BJWEksXG4gICAgUHJvcFR3ZWVuLFxuICAgIF9nZXRTZXR0ZXIsXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCBfd2luZG93RXhpc3RzKCkgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlKSB7XG4gIHJldHVybiBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59LFxuICAgIF9pZE1hdHJpeCA9IFsxLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAxLCAwXSxcbiAgICBfbHVtUiA9IDAuMjEyNjcxLFxuICAgIF9sdW1HID0gMC43MTUxNjAsXG4gICAgX2x1bUIgPSAwLjA3MjE2OSxcbiAgICBfYXBwbHlNYXRyaXggPSBmdW5jdGlvbiBfYXBwbHlNYXRyaXgobSwgbTIpIHtcbiAgdmFyIHRlbXAgPSBbXSxcbiAgICAgIGkgPSAwLFxuICAgICAgeiA9IDAsXG4gICAgICB5LFxuICAgICAgeDtcblxuICBmb3IgKHkgPSAwOyB5IDwgNDsgeSsrKSB7XG4gICAgZm9yICh4ID0gMDsgeCA8IDU7IHgrKykge1xuICAgICAgeiA9IHggPT09IDQgPyBtW2kgKyA0XSA6IDA7XG4gICAgICB0ZW1wW2kgKyB4XSA9IG1baV0gKiBtMlt4XSArIG1baSArIDFdICogbTJbeCArIDVdICsgbVtpICsgMl0gKiBtMlt4ICsgMTBdICsgbVtpICsgM10gKiBtMlt4ICsgMTVdICsgejtcbiAgICB9XG5cbiAgICBpICs9IDU7XG4gIH1cblxuICByZXR1cm4gdGVtcDtcbn0sXG4gICAgX3NldFNhdHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0U2F0dXJhdGlvbihtLCBuKSB7XG4gIHZhciBpbnYgPSAxIC0gbixcbiAgICAgIHIgPSBpbnYgKiBfbHVtUixcbiAgICAgIGcgPSBpbnYgKiBfbHVtRyxcbiAgICAgIGIgPSBpbnYgKiBfbHVtQjtcbiAgcmV0dXJuIF9hcHBseU1hdHJpeChbciArIG4sIGcsIGIsIDAsIDAsIHIsIGcgKyBuLCBiLCAwLCAwLCByLCBnLCBiICsgbiwgMCwgMCwgMCwgMCwgMCwgMSwgMF0sIG0pO1xufSxcbiAgICBfY29sb3JpemUgPSBmdW5jdGlvbiBfY29sb3JpemUobSwgY29sb3IsIGFtb3VudCkge1xuICB2YXIgYyA9IF9zcGxpdENvbG9yKGNvbG9yKSxcbiAgICAgIHIgPSBjWzBdIC8gMjU1LFxuICAgICAgZyA9IGNbMV0gLyAyNTUsXG4gICAgICBiID0gY1syXSAvIDI1NSxcbiAgICAgIGludiA9IDEgLSBhbW91bnQ7XG5cbiAgcmV0dXJuIF9hcHBseU1hdHJpeChbaW52ICsgYW1vdW50ICogciAqIF9sdW1SLCBhbW91bnQgKiByICogX2x1bUcsIGFtb3VudCAqIHIgKiBfbHVtQiwgMCwgMCwgYW1vdW50ICogZyAqIF9sdW1SLCBpbnYgKyBhbW91bnQgKiBnICogX2x1bUcsIGFtb3VudCAqIGcgKiBfbHVtQiwgMCwgMCwgYW1vdW50ICogYiAqIF9sdW1SLCBhbW91bnQgKiBiICogX2x1bUcsIGludiArIGFtb3VudCAqIGIgKiBfbHVtQiwgMCwgMCwgMCwgMCwgMCwgMSwgMF0sIG0pO1xufSxcbiAgICBfc2V0SHVlID0gZnVuY3Rpb24gX3NldEh1ZShtLCBuKSB7XG4gIG4gKj0gTWF0aC5QSSAvIDE4MDtcbiAgdmFyIGMgPSBNYXRoLmNvcyhuKSxcbiAgICAgIHMgPSBNYXRoLnNpbihuKTtcbiAgcmV0dXJuIF9hcHBseU1hdHJpeChbX2x1bVIgKyBjICogKDEgLSBfbHVtUikgKyBzICogLV9sdW1SLCBfbHVtRyArIGMgKiAtX2x1bUcgKyBzICogLV9sdW1HLCBfbHVtQiArIGMgKiAtX2x1bUIgKyBzICogKDEgLSBfbHVtQiksIDAsIDAsIF9sdW1SICsgYyAqIC1fbHVtUiArIHMgKiAwLjE0MywgX2x1bUcgKyBjICogKDEgLSBfbHVtRykgKyBzICogMC4xNCwgX2x1bUIgKyBjICogLV9sdW1CICsgcyAqIC0wLjI4MywgMCwgMCwgX2x1bVIgKyBjICogLV9sdW1SICsgcyAqIC0oMSAtIF9sdW1SKSwgX2x1bUcgKyBjICogLV9sdW1HICsgcyAqIF9sdW1HLCBfbHVtQiArIGMgKiAoMSAtIF9sdW1CKSArIHMgKiBfbHVtQiwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMV0sIG0pO1xufSxcbiAgICBfc2V0Q29udHJhc3QgPSBmdW5jdGlvbiBfc2V0Q29udHJhc3QobSwgbikge1xuICByZXR1cm4gX2FwcGx5TWF0cml4KFtuLCAwLCAwLCAwLCAwLjUgKiAoMSAtIG4pLCAwLCBuLCAwLCAwLCAwLjUgKiAoMSAtIG4pLCAwLCAwLCBuLCAwLCAwLjUgKiAoMSAtIG4pLCAwLCAwLCAwLCAxLCAwXSwgbSk7XG59LFxuICAgIF9nZXRGaWx0ZXIgPSBmdW5jdGlvbiBfZ2V0RmlsdGVyKHRhcmdldCwgdHlwZSkge1xuICB2YXIgZmlsdGVyQ2xhc3MgPSBfUElYSS5maWx0ZXJzW3R5cGVdLFxuICAgICAgZmlsdGVycyA9IHRhcmdldC5maWx0ZXJzIHx8IFtdLFxuICAgICAgaSA9IGZpbHRlcnMubGVuZ3RoLFxuICAgICAgZmlsdGVyO1xuXG4gIGlmICghZmlsdGVyQ2xhc3MpIHtcbiAgICBfd2Fybih0eXBlICsgXCIgbm90IGZvdW5kLiBQaXhpUGx1Z2luLnJlZ2lzdGVyUElYSShQSVhJKVwiKTtcbiAgfVxuXG4gIHdoaWxlICgtLWkgPiAtMSkge1xuICAgIGlmIChmaWx0ZXJzW2ldIGluc3RhbmNlb2YgZmlsdGVyQ2xhc3MpIHtcbiAgICAgIHJldHVybiBmaWx0ZXJzW2ldO1xuICAgIH1cbiAgfVxuXG4gIGZpbHRlciA9IG5ldyBmaWx0ZXJDbGFzcygpO1xuXG4gIGlmICh0eXBlID09PSBcIkJsdXJGaWx0ZXJcIikge1xuICAgIGZpbHRlci5ibHVyID0gMDtcbiAgfVxuXG4gIGZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB0YXJnZXQuZmlsdGVycyA9IGZpbHRlcnM7XG4gIHJldHVybiBmaWx0ZXI7XG59LFxuICAgIF9hZGRDb2xvck1hdHJpeEZpbHRlckNhY2hlVHdlZW4gPSBmdW5jdGlvbiBfYWRkQ29sb3JNYXRyaXhGaWx0ZXJDYWNoZVR3ZWVuKHAsIHBsdWdpbiwgY2FjaGUsIHZhcnMpIHtcbiAgLy93ZSBjYWNoZSB0aGUgQ29sb3JNYXRyaXhGaWx0ZXIgY29tcG9uZW50cyBpbiBhIF9nc0NvbG9yTWF0cml4RmlsdGVyIG9iamVjdCBhdHRhY2hlZCB0byB0aGUgdGFyZ2V0IG9iamVjdCBzbyB0aGF0IGl0J3MgZWFzeSB0byBncmFiIHRoZSBjdXJyZW50IHZhbHVlIGF0IGFueSB0aW1lLlxuICBwbHVnaW4uYWRkKGNhY2hlLCBwLCBjYWNoZVtwXSwgdmFyc1twXSk7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHApO1xufSxcbiAgICBfYXBwbHlCcmlnaHRuZXNzVG9NYXRyaXggPSBmdW5jdGlvbiBfYXBwbHlCcmlnaHRuZXNzVG9NYXRyaXgoYnJpZ2h0bmVzcywgbWF0cml4KSB7XG4gIHZhciB0ZW1wID0gbmV3IF9QSVhJLmZpbHRlcnMuQ29sb3JNYXRyaXhGaWx0ZXIoKTtcbiAgdGVtcC5tYXRyaXggPSBtYXRyaXg7XG4gIHRlbXAuYnJpZ2h0bmVzcyhicmlnaHRuZXNzLCB0cnVlKTtcbiAgcmV0dXJuIHRlbXAubWF0cml4O1xufSxcbiAgICBfY29weSA9IGZ1bmN0aW9uIF9jb3B5KG9iaikge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgY29weVtwXSA9IG9ialtwXTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfQ01GZGVmYXVsdHMgPSB7XG4gIGNvbnRyYXN0OiAxLFxuICBzYXR1cmF0aW9uOiAxLFxuICBjb2xvcml6ZUFtb3VudDogMCxcbiAgY29sb3JpemU6IFwicmdiKDI1NSwyNTUsMjU1KVwiLFxuICBodWU6IDAsXG4gIGJyaWdodG5lc3M6IDFcbn0sXG4gICAgX3BhcnNlQ29sb3JNYXRyaXhGaWx0ZXIgPSBmdW5jdGlvbiBfcGFyc2VDb2xvck1hdHJpeEZpbHRlcih0YXJnZXQsIHYsIHBnKSB7XG4gIHZhciBmaWx0ZXIgPSBfZ2V0RmlsdGVyKHRhcmdldCwgXCJDb2xvck1hdHJpeEZpbHRlclwiKSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc0NvbG9yTWF0cml4RmlsdGVyID0gdGFyZ2V0Ll9nc0NvbG9yTWF0cml4RmlsdGVyIHx8IF9jb3B5KF9DTUZkZWZhdWx0cyksXG4gICAgICBjb21iaW5lID0gdi5jb21iaW5lQ01GICYmICEoXCJjb2xvck1hdHJpeEZpbHRlclwiIGluIHYgJiYgIXYuY29sb3JNYXRyaXhGaWx0ZXIpLFxuICAgICAgaSxcbiAgICAgIG1hdHJpeCxcbiAgICAgIHN0YXJ0TWF0cml4O1xuXG4gIHN0YXJ0TWF0cml4ID0gZmlsdGVyLm1hdHJpeDtcblxuICBpZiAodi5yZXNvbHV0aW9uKSB7XG4gICAgZmlsdGVyLnJlc29sdXRpb24gPSB2LnJlc29sdXRpb247XG4gIH1cblxuICBpZiAodi5tYXRyaXggJiYgdi5tYXRyaXgubGVuZ3RoID09PSBzdGFydE1hdHJpeC5sZW5ndGgpIHtcbiAgICBtYXRyaXggPSB2Lm1hdHJpeDtcblxuICAgIGlmIChjYWNoZS5jb250cmFzdCAhPT0gMSkge1xuICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcImNvbnRyYXN0XCIsIHBnLCBjYWNoZSwgX0NNRmRlZmF1bHRzKTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuaHVlKSB7XG4gICAgICBfYWRkQ29sb3JNYXRyaXhGaWx0ZXJDYWNoZVR3ZWVuKFwiaHVlXCIsIHBnLCBjYWNoZSwgX0NNRmRlZmF1bHRzKTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuYnJpZ2h0bmVzcyAhPT0gMSkge1xuICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcImJyaWdodG5lc3NcIiwgcGcsIGNhY2hlLCBfQ01GZGVmYXVsdHMpO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5jb2xvcml6ZUFtb3VudCkge1xuICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcImNvbG9yaXplXCIsIHBnLCBjYWNoZSwgX0NNRmRlZmF1bHRzKTtcblxuICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcImNvbG9yaXplQW1vdW50XCIsIHBnLCBjYWNoZSwgX0NNRmRlZmF1bHRzKTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc2F0dXJhdGlvbiAhPT0gMSkge1xuICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcInNhdHVyYXRpb25cIiwgcGcsIGNhY2hlLCBfQ01GZGVmYXVsdHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXRyaXggPSBfaWRNYXRyaXguc2xpY2UoKTtcblxuICAgIGlmICh2LmNvbnRyYXN0ICE9IG51bGwpIHtcbiAgICAgIG1hdHJpeCA9IF9zZXRDb250cmFzdChtYXRyaXgsICt2LmNvbnRyYXN0KTtcblxuICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcImNvbnRyYXN0XCIsIHBnLCBjYWNoZSwgdik7XG4gICAgfSBlbHNlIGlmIChjYWNoZS5jb250cmFzdCAhPT0gMSkge1xuICAgICAgaWYgKGNvbWJpbmUpIHtcbiAgICAgICAgbWF0cml4ID0gX3NldENvbnRyYXN0KG1hdHJpeCwgY2FjaGUuY29udHJhc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcImNvbnRyYXN0XCIsIHBnLCBjYWNoZSwgX0NNRmRlZmF1bHRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodi5odWUgIT0gbnVsbCkge1xuICAgICAgbWF0cml4ID0gX3NldEh1ZShtYXRyaXgsICt2Lmh1ZSk7XG5cbiAgICAgIF9hZGRDb2xvck1hdHJpeEZpbHRlckNhY2hlVHdlZW4oXCJodWVcIiwgcGcsIGNhY2hlLCB2KTtcbiAgICB9IGVsc2UgaWYgKGNhY2hlLmh1ZSkge1xuICAgICAgaWYgKGNvbWJpbmUpIHtcbiAgICAgICAgbWF0cml4ID0gX3NldEh1ZShtYXRyaXgsIGNhY2hlLmh1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfYWRkQ29sb3JNYXRyaXhGaWx0ZXJDYWNoZVR3ZWVuKFwiaHVlXCIsIHBnLCBjYWNoZSwgX0NNRmRlZmF1bHRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodi5icmlnaHRuZXNzICE9IG51bGwpIHtcbiAgICAgIG1hdHJpeCA9IF9hcHBseUJyaWdodG5lc3NUb01hdHJpeCgrdi5icmlnaHRuZXNzLCBtYXRyaXgpO1xuXG4gICAgICBfYWRkQ29sb3JNYXRyaXhGaWx0ZXJDYWNoZVR3ZWVuKFwiYnJpZ2h0bmVzc1wiLCBwZywgY2FjaGUsIHYpO1xuICAgIH0gZWxzZSBpZiAoY2FjaGUuYnJpZ2h0bmVzcyAhPT0gMSkge1xuICAgICAgaWYgKGNvbWJpbmUpIHtcbiAgICAgICAgbWF0cml4ID0gX2FwcGx5QnJpZ2h0bmVzc1RvTWF0cml4KGNhY2hlLmJyaWdodG5lc3MsIG1hdHJpeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfYWRkQ29sb3JNYXRyaXhGaWx0ZXJDYWNoZVR3ZWVuKFwiYnJpZ2h0bmVzc1wiLCBwZywgY2FjaGUsIF9DTUZkZWZhdWx0cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHYuY29sb3JpemUgIT0gbnVsbCkge1xuICAgICAgdi5jb2xvcml6ZUFtb3VudCA9IFwiY29sb3JpemVBbW91bnRcIiBpbiB2ID8gK3YuY29sb3JpemVBbW91bnQgOiAxO1xuICAgICAgbWF0cml4ID0gX2NvbG9yaXplKG1hdHJpeCwgdi5jb2xvcml6ZSwgdi5jb2xvcml6ZUFtb3VudCk7XG5cbiAgICAgIF9hZGRDb2xvck1hdHJpeEZpbHRlckNhY2hlVHdlZW4oXCJjb2xvcml6ZVwiLCBwZywgY2FjaGUsIHYpO1xuXG4gICAgICBfYWRkQ29sb3JNYXRyaXhGaWx0ZXJDYWNoZVR3ZWVuKFwiY29sb3JpemVBbW91bnRcIiwgcGcsIGNhY2hlLCB2KTtcbiAgICB9IGVsc2UgaWYgKGNhY2hlLmNvbG9yaXplQW1vdW50KSB7XG4gICAgICBpZiAoY29tYmluZSkge1xuICAgICAgICBtYXRyaXggPSBfY29sb3JpemUobWF0cml4LCBjYWNoZS5jb2xvcml6ZSwgY2FjaGUuY29sb3JpemVBbW91bnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcImNvbG9yaXplXCIsIHBnLCBjYWNoZSwgX0NNRmRlZmF1bHRzKTtcblxuICAgICAgICBfYWRkQ29sb3JNYXRyaXhGaWx0ZXJDYWNoZVR3ZWVuKFwiY29sb3JpemVBbW91bnRcIiwgcGcsIGNhY2hlLCBfQ01GZGVmYXVsdHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2LnNhdHVyYXRpb24gIT0gbnVsbCkge1xuICAgICAgbWF0cml4ID0gX3NldFNhdHVyYXRpb24obWF0cml4LCArdi5zYXR1cmF0aW9uKTtcblxuICAgICAgX2FkZENvbG9yTWF0cml4RmlsdGVyQ2FjaGVUd2VlbihcInNhdHVyYXRpb25cIiwgcGcsIGNhY2hlLCB2KTtcbiAgICB9IGVsc2UgaWYgKGNhY2hlLnNhdHVyYXRpb24gIT09IDEpIHtcbiAgICAgIGlmIChjb21iaW5lKSB7XG4gICAgICAgIG1hdHJpeCA9IF9zZXRTYXR1cmF0aW9uKG1hdHJpeCwgY2FjaGUuc2F0dXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfYWRkQ29sb3JNYXRyaXhGaWx0ZXJDYWNoZVR3ZWVuKFwic2F0dXJhdGlvblwiLCBwZywgY2FjaGUsIF9DTUZkZWZhdWx0cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaSA9IG1hdHJpeC5sZW5ndGg7XG5cbiAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgaWYgKG1hdHJpeFtpXSAhPT0gc3RhcnRNYXRyaXhbaV0pIHtcbiAgICAgIHBnLmFkZChzdGFydE1hdHJpeCwgaSwgc3RhcnRNYXRyaXhbaV0sIG1hdHJpeFtpXSwgXCJjb2xvck1hdHJpeEZpbHRlclwiKTtcbiAgICB9XG4gIH1cblxuICBwZy5fcHJvcHMucHVzaChcImNvbG9yTWF0cml4RmlsdGVyXCIpO1xufSxcbiAgICBfcmVuZGVyQ29sb3IgPSBmdW5jdGlvbiBfcmVuZGVyQ29sb3IocmF0aW8sIF9yZWYpIHtcbiAgdmFyIHQgPSBfcmVmLnQsXG4gICAgICBwID0gX3JlZi5wLFxuICAgICAgY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgc2V0ID0gX3JlZi5zZXQ7XG4gIHNldCh0LCBwLCBjb2xvclswXSA8PCAxNiB8IGNvbG9yWzFdIDw8IDggfCBjb2xvclsyXSk7XG59LFxuICAgIF9yZW5kZXJEaXJ0eUNhY2hlID0gZnVuY3Rpb24gX3JlbmRlckRpcnR5Q2FjaGUocmF0aW8sIF9yZWYyKSB7XG4gIHZhciBnID0gX3JlZjIuZztcblxuICBpZiAoZykge1xuICAgIC8vaW4gb3JkZXIgZm9yIFBpeGlKUyB0byBhY3R1YWxseSByZWRyYXcgR3JhcGhpY3NEYXRhLCB3ZSd2ZSBnb3R0YSBpbmNyZW1lbnQgdGhlIFwiZGlydHlcIiBhbmQgXCJjbGVhckRpcnR5XCIgdmFsdWVzLiBJZiB3ZSBkb24ndCBkbyB0aGlzLCB0aGUgdmFsdWVzIHdpbGwgYmUgdHdlZW4gcHJvcGVybHksIGJ1dCBub3QgcmVuZGVyZWQuXG4gICAgZy5kaXJ0eSsrO1xuICAgIGcuY2xlYXJEaXJ0eSsrO1xuICB9XG59LFxuICAgIF9yZW5kZXJBdXRvQWxwaGEgPSBmdW5jdGlvbiBfcmVuZGVyQXV0b0FscGhhKHJhdGlvLCBkYXRhKSB7XG4gIGRhdGEudC52aXNpYmxlID0gISFkYXRhLnQuYWxwaGE7XG59LFxuICAgIF9hZGRDb2xvclR3ZWVuID0gZnVuY3Rpb24gX2FkZENvbG9yVHdlZW4odGFyZ2V0LCBwLCB2YWx1ZSwgcGx1Z2luKSB7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcF0sXG4gICAgICBzdGFydENvbG9yID0gX3NwbGl0Q29sb3IoX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IHRhcmdldFtwLmluZGV4T2YoXCJzZXRcIikgfHwgIV9pc0Z1bmN0aW9uKHRhcmdldFtcImdldFwiICsgcC5zdWJzdHIoMyldKSA/IHAgOiBcImdldFwiICsgcC5zdWJzdHIoMyldKCkgOiBjdXJyZW50VmFsdWUpLFxuICAgICAgZW5kQ29sb3IgPSBfc3BsaXRDb2xvcih2YWx1ZSk7XG5cbiAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwLCAwLCAwLCBfcmVuZGVyQ29sb3IsIHtcbiAgICB0OiB0YXJnZXQsXG4gICAgcDogcCxcbiAgICBjb2xvcjogc3RhcnRDb2xvcixcbiAgICBzZXQ6IF9nZXRTZXR0ZXIodGFyZ2V0LCBwKVxuICB9KTtcbiAgcGx1Z2luLmFkZChzdGFydENvbG9yLCAwLCBzdGFydENvbG9yWzBdLCBlbmRDb2xvclswXSk7XG4gIHBsdWdpbi5hZGQoc3RhcnRDb2xvciwgMSwgc3RhcnRDb2xvclsxXSwgZW5kQ29sb3JbMV0pO1xuICBwbHVnaW4uYWRkKHN0YXJ0Q29sb3IsIDIsIHN0YXJ0Q29sb3JbMl0sIGVuZENvbG9yWzJdKTtcbn0sXG4gICAgX2NvbG9yUHJvcHMgPSB7XG4gIHRpbnQ6IDEsXG4gIGxpbmVDb2xvcjogMSxcbiAgZmlsbENvbG9yOiAxXG59LFxuICAgIF94eUNvbnRleHRzID0gXCJwb3NpdGlvbixzY2FsZSxza2V3LHBpdm90LGFuY2hvcix0aWxlUG9zaXRpb24sdGlsZVNjYWxlXCIuc3BsaXQoXCIsXCIpLFxuICAgIF9jb250ZXh0cyA9IHtcbiAgeDogXCJwb3NpdGlvblwiLFxuICB5OiBcInBvc2l0aW9uXCIsXG4gIHRpbGVYOiBcInRpbGVQb3NpdGlvblwiLFxuICB0aWxlWTogXCJ0aWxlUG9zaXRpb25cIlxufSxcbiAgICBfY29sb3JNYXRyaXhGaWx0ZXJQcm9wcyA9IHtcbiAgY29sb3JNYXRyaXhGaWx0ZXI6IDEsXG4gIHNhdHVyYXRpb246IDEsXG4gIGNvbnRyYXN0OiAxLFxuICBodWU6IDEsXG4gIGNvbG9yaXplOiAxLFxuICBjb2xvcml6ZUFtb3VudDogMSxcbiAgYnJpZ2h0bmVzczogMSxcbiAgY29tYmluZUNNRjogMVxufSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9kZWdyZWVzVG9SYWRpYW5zID0gZnVuY3Rpb24gX2RlZ3JlZXNUb1JhZGlhbnModmFsdWUpIHtcbiAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiA/IHZhbHVlLnN1YnN0cigwLCAyKSArIHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDIpKSAqIF9ERUcyUkFEIDogdmFsdWUgKiBfREVHMlJBRDtcbn0sXG4gICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMDApIC8gMTAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSwgcmFkaWFucykge1xuICB2YXIgY2FwID0gMzYwICogKHJhZGlhbnMgPyBfREVHMlJBRCA6IDEpLFxuICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgcmVsYXRpdmUgPSBpc1N0cmluZyAmJiBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiID8gKyhlbmRWYWx1ZS5jaGFyQXQoMCkgKyBcIjFcIikgOiAwLFxuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChyZWxhdGl2ZSA/IGVuZFZhbHVlLnN1YnN0cigyKSA6IGVuZFZhbHVlKSAqIChyYWRpYW5zID8gX0RFRzJSQUQgOiAxKSxcbiAgICAgIGNoYW5nZSA9IHJlbGF0aXZlID8gZW5kTnVtICogcmVsYXRpdmUgOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgIGZpbmFsVmFsdWUgPSBzdGFydE51bSArIGNoYW5nZSxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIDFlMTApICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogMWUxMCkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKCkge1xuICBpZiAoX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBnc2FwID0gX2NvcmVJbml0dGVkID0gX2dldEdTQVAoKTtcbiAgICBfUElYSSA9IF9QSVhJIHx8IF93aW4uUElYSTtcblxuICAgIF9zcGxpdENvbG9yID0gZnVuY3Rpb24gX3NwbGl0Q29sb3IoY29sb3IpIHtcbiAgICAgIHJldHVybiBnc2FwLnV0aWxzLnNwbGl0Q29sb3IoKGNvbG9yICsgXCJcIikuc3Vic3RyKDAsIDIpID09PSBcIjB4XCIgPyBcIiNcIiArIGNvbG9yLnN1YnN0cigyKSA6IGNvbG9yKTtcbiAgICB9OyAvLyBzb21lIGNvbG9ycyBpbiBQSVhJIGFyZSByZXBvcnRlZCBhcyBcIjB4RkY0NDIxXCIgaW5zdGVhZCBvZiBcIiNGRjQ0MjFcIi5cblxuICB9XG59LFxuICAgIGksXG4gICAgcDsgLy9jb250ZXh0IHNldHVwLi4uXG5cblxuZm9yIChpID0gMDsgaSA8IF94eUNvbnRleHRzLmxlbmd0aDsgaSsrKSB7XG4gIHAgPSBfeHlDb250ZXh0c1tpXTtcbiAgX2NvbnRleHRzW3AgKyBcIlhcIl0gPSBwO1xuICBfY29udGV4dHNbcCArIFwiWVwiXSA9IHA7XG59XG5cbmV4cG9ydCB2YXIgUGl4aVBsdWdpbiA9IHtcbiAgdmVyc2lvbjogXCIzLjcuMVwiLFxuICBuYW1lOiBcInBpeGlcIixcbiAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvcmUsIFBsdWdpbiwgcHJvcFR3ZWVuKSB7XG4gICAgZ3NhcCA9IGNvcmU7XG4gICAgUHJvcFR3ZWVuID0gcHJvcFR3ZWVuO1xuICAgIF9nZXRTZXR0ZXIgPSBQbHVnaW4uZ2V0U2V0dGVyO1xuXG4gICAgX2luaXRDb3JlKCk7XG4gIH0sXG4gIHJlZ2lzdGVyUElYSTogZnVuY3Rpb24gcmVnaXN0ZXJQSVhJKHBpeGkpIHtcbiAgICBfUElYSSA9IHBpeGk7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZXMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIGlmICghX1BJWEkpIHtcbiAgICAgIF9pbml0Q29yZSgpO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0IGluc3RhbmNlb2YgX1BJWEkuRGlzcGxheU9iamVjdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBpc1Y0ID0gX1BJWEkuVkVSU0lPTi5jaGFyQXQoMCkgPT09IFwiNFwiLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBheGlzLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgY29sb3JNYXRyaXgsXG4gICAgICAgIGZpbHRlcixcbiAgICAgICAgcCxcbiAgICAgICAgcGFkZGluZyxcbiAgICAgICAgaSxcbiAgICAgICAgZGF0YTtcblxuICAgIGZvciAocCBpbiB2YWx1ZXMpIHtcbiAgICAgIGNvbnRleHQgPSBfY29udGV4dHNbcF07XG4gICAgICB2YWx1ZSA9IHZhbHVlc1twXTtcblxuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgYXhpcyA9IH5wLmNoYXJBdChwLmxlbmd0aCAtIDEpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcInhcIikgPyBcInhcIiA6IFwieVwiO1xuICAgICAgICB0aGlzLmFkZCh0YXJnZXRbY29udGV4dF0sIGF4aXMsIHRhcmdldFtjb250ZXh0XVtheGlzXSwgY29udGV4dCA9PT0gXCJza2V3XCIgPyBfZGVncmVlc1RvUmFkaWFucyh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IFwic2NhbGVcIiB8fCBwID09PSBcImFuY2hvclwiIHx8IHAgPT09IFwicGl2b3RcIiB8fCBwID09PSBcInRpbGVTY2FsZVwiKSB7XG4gICAgICAgIHRoaXMuYWRkKHRhcmdldFtwXSwgXCJ4XCIsIHRhcmdldFtwXS54LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuYWRkKHRhcmdldFtwXSwgXCJ5XCIsIHRhcmdldFtwXS55LCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IFwicm90YXRpb25cIiB8fCBwID09PSBcImFuZ2xlXCIpIHtcbiAgICAgICAgLy9QSVhJIGV4cGVjdHMgcm90YXRpb24gaW4gcmFkaWFucywgYnV0IGFzIGEgY29udmVuaWVuY2Ugd2UgbGV0IGZvbGtzIGRlZmluZSBpdCBpbiBkZWdyZWVzIGFuZCB3ZSBkbyB0aGUgY29udmVyc2lvbi5cbiAgICAgICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4odGhpcywgdGFyZ2V0LCBwLCB0YXJnZXRbcF0sIHZhbHVlLCBwID09PSBcInJvdGF0aW9uXCIpO1xuICAgICAgfSBlbHNlIGlmIChfY29sb3JNYXRyaXhGaWx0ZXJQcm9wc1twXSkge1xuICAgICAgICBpZiAoIWNvbG9yTWF0cml4KSB7XG4gICAgICAgICAgX3BhcnNlQ29sb3JNYXRyaXhGaWx0ZXIodGFyZ2V0LCB2YWx1ZXMuY29sb3JNYXRyaXhGaWx0ZXIgfHwgdmFsdWVzLCB0aGlzKTtcblxuICAgICAgICAgIGNvbG9yTWF0cml4ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwID09PSBcImJsdXJcIiB8fCBwID09PSBcImJsdXJYXCIgfHwgcCA9PT0gXCJibHVyWVwiIHx8IHAgPT09IFwiYmx1clBhZGRpbmdcIikge1xuICAgICAgICBmaWx0ZXIgPSBfZ2V0RmlsdGVyKHRhcmdldCwgXCJCbHVyRmlsdGVyXCIpO1xuICAgICAgICB0aGlzLmFkZChmaWx0ZXIsIHAsIGZpbHRlcltwXSwgdmFsdWUpO1xuXG4gICAgICAgIGlmICh2YWx1ZXMuYmx1clBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgICBwYWRkaW5nID0gdmFsdWVzLmJsdXJQYWRkaW5nIHx8IE1hdGgubWF4KGZpbHRlcltwXSwgdmFsdWUpICogMjtcbiAgICAgICAgICBpID0gdGFyZ2V0LmZpbHRlcnMubGVuZ3RoO1xuXG4gICAgICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgICAgICB0YXJnZXQuZmlsdGVyc1tpXS5wYWRkaW5nID0gTWF0aC5tYXgodGFyZ2V0LmZpbHRlcnNbaV0ucGFkZGluZywgcGFkZGluZyk7IC8vaWYgd2UgZG9uJ3QgZXhwYW5kIHRoZSBwYWRkaW5nIG9uIGFsbCB0aGUgZmlsdGVycywgaXQgY2FuIGxvb2sgY2xpcHBlZC5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoX2NvbG9yUHJvcHNbcF0pIHtcbiAgICAgICAgaWYgKChwID09PSBcImxpbmVDb2xvclwiIHx8IHAgPT09IFwiZmlsbENvbG9yXCIpICYmIHRhcmdldCBpbnN0YW5jZW9mIF9QSVhJLkdyYXBoaWNzKSB7XG4gICAgICAgICAgZGF0YSA9ICh0YXJnZXQuZ2VvbWV0cnkgfHwgdGFyZ2V0KS5ncmFwaGljc0RhdGE7IC8vXCJnZW9tZXRyeVwiIHdhcyBpbnRyb2R1Y2VkIGluIFBJWEkgdmVyc2lvbiA1XG5cbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcCwgMCwgMCwgX3JlbmRlckRpcnR5Q2FjaGUsIHtcbiAgICAgICAgICAgIGc6IHRhcmdldC5nZW9tZXRyeSB8fCB0YXJnZXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpID0gZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICAgICAgICAgIF9hZGRDb2xvclR3ZWVuKGlzVjQgPyBkYXRhW2ldIDogZGF0YVtpXVtwLnN1YnN0cigwLCA0KSArIFwiU3R5bGVcIl0sIGlzVjQgPyBwIDogXCJjb2xvclwiLCB2YWx1ZSwgdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9hZGRDb2xvclR3ZWVuKHRhcmdldCwgcCwgdmFsdWUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IFwiYXV0b0FscGhhXCIpIHtcbiAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIFwidmlzaWJsZVwiLCAwLCAwLCBfcmVuZGVyQXV0b0FscGhhKTtcbiAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBcImFscGhhXCIsIHRhcmdldC5hbHBoYSwgdmFsdWUpO1xuXG4gICAgICAgIHRoaXMuX3Byb3BzLnB1c2goXCJhbHBoYVwiLCBcInZpc2libGVcIik7XG4gICAgICB9IGVsc2UgaWYgKHAgIT09IFwicmVzb2x1dGlvblwiKSB7XG4gICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgXCJnZXRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfVxufTtcbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihQaXhpUGx1Z2luKTtcbmV4cG9ydCB7IFBpeGlQbHVnaW4gYXMgZGVmYXVsdCB9OyIsIi8qIVxuICogU2Nyb2xsVG9QbHVnaW4gMy43LjFcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjEsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgZ3NhcCxcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX3dpbmRvdyxcbiAgICBfZG9jRWwsXG4gICAgX2JvZHksXG4gICAgX3RvQXJyYXksXG4gICAgX2NvbmZpZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gIHJldHVybiBnc2FwIHx8IF93aW5kb3dFeGlzdHMoKSAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX21heCA9IGZ1bmN0aW9uIF9tYXgoZWxlbWVudCwgYXhpcykge1xuICB2YXIgZGltID0gYXhpcyA9PT0gXCJ4XCIgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiLFxuICAgICAgc2Nyb2xsID0gXCJzY3JvbGxcIiArIGRpbSxcbiAgICAgIGNsaWVudCA9IFwiY2xpZW50XCIgKyBkaW07XG4gIHJldHVybiBlbGVtZW50ID09PSBfd2luZG93IHx8IGVsZW1lbnQgPT09IF9kb2NFbCB8fCBlbGVtZW50ID09PSBfYm9keSA/IE1hdGgubWF4KF9kb2NFbFtzY3JvbGxdLCBfYm9keVtzY3JvbGxdKSAtIChfd2luZG93W1wiaW5uZXJcIiArIGRpbV0gfHwgX2RvY0VsW2NsaWVudF0gfHwgX2JvZHlbY2xpZW50XSkgOiBlbGVtZW50W3Njcm9sbF0gLSBlbGVtZW50W1wib2Zmc2V0XCIgKyBkaW1dO1xufSxcbiAgICBfYnVpbGRHZXR0ZXIgPSBmdW5jdGlvbiBfYnVpbGRHZXR0ZXIoZSwgYXhpcykge1xuICAvL3Bhc3MgaW4gYW4gZWxlbWVudCBhbmQgYW4gYXhpcyAoXCJ4XCIgb3IgXCJ5XCIpIGFuZCBpdCdsbCByZXR1cm4gYSBnZXR0ZXIgZnVuY3Rpb24gZm9yIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhhdCBlbGVtZW50IChsaWtlIHNjcm9sbFRvcCBvciBzY3JvbGxMZWZ0LCBhbHRob3VnaCBpZiB0aGUgZWxlbWVudCBpcyB0aGUgd2luZG93LCBpdCdsbCB1c2UgdGhlIHBhZ2VYT2Zmc2V0L3BhZ2VZT2Zmc2V0IG9yIHRoZSBkb2N1bWVudEVsZW1lbnQncyBzY3JvbGxUb3Avc2Nyb2xsTGVmdCBvciBkb2N1bWVudC5ib2R5J3MuIEJhc2ljYWxseSB0aGlzIHN0cmVhbWxpbmVzIHRoaW5ncyBhbmQgbWFrZXMgYSB2ZXJ5IGZhc3QgZ2V0dGVyIGFjcm9zcyBicm93c2Vycy5cbiAgdmFyIHAgPSBcInNjcm9sbFwiICsgKGF4aXMgPT09IFwieFwiID8gXCJMZWZ0XCIgOiBcIlRvcFwiKTtcblxuICBpZiAoZSA9PT0gX3dpbmRvdykge1xuICAgIGlmIChlLnBhZ2VYT2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgIHAgPSBcInBhZ2VcIiArIGF4aXMudG9VcHBlckNhc2UoKSArIFwiT2Zmc2V0XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUgPSBfZG9jRWxbcF0gIT0gbnVsbCA/IF9kb2NFbCA6IF9ib2R5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVbcF07XG4gIH07XG59LFxuICAgIF9jbGVhbiA9IGZ1bmN0aW9uIF9jbGVhbih2YWx1ZSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICBfaXNGdW5jdGlvbih2YWx1ZSkgJiYgKHZhbHVlID0gdmFsdWUoaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZSAhPT0gXCJtYXhcIiAmJiB2YWx1ZS5jaGFyQXQoMSkgIT09IFwiPVwiID8ge1xuICAgICAgeDogdmFsdWUsXG4gICAgICB5OiB2YWx1ZVxuICAgIH0gOiB7XG4gICAgICB5OiB2YWx1ZVxuICAgIH07IC8vaWYgd2UgZG9uJ3QgcmVjZWl2ZSBhbiBvYmplY3QgYXMgdGhlIHBhcmFtZXRlciwgYXNzdW1lIHRoZSB1c2VyIGludGVuZHMgXCJ5XCIuXG4gIH0gZWxzZSBpZiAodmFsdWUubm9kZVR5cGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeTogdmFsdWUsXG4gICAgICB4OiB2YWx1ZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9LFxuICAgICAgICBwO1xuXG4gICAgZm9yIChwIGluIHZhbHVlKSB7XG4gICAgICByZXN1bHRbcF0gPSBwICE9PSBcIm9uQXV0b0tpbGxcIiAmJiBfaXNGdW5jdGlvbih2YWx1ZVtwXSkgPyB2YWx1ZVtwXShpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHZhbHVlW3BdO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0sXG4gICAgX2dldE9mZnNldCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXQoZWxlbWVudCwgY29udGFpbmVyKSB7XG4gIGVsZW1lbnQgPSBfdG9BcnJheShlbGVtZW50KVswXTtcblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgcmV0dXJuIGNvbnNvbGUud2FybihcInNjcm9sbFRvIHRhcmdldCBkb2Vzbid0IGV4aXN0LiBVc2luZyAwXCIpIHx8IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGlzUm9vdCA9ICFjb250YWluZXIgfHwgY29udGFpbmVyID09PSBfd2luZG93IHx8IGNvbnRhaW5lciA9PT0gX2JvZHksXG4gICAgICBjUmVjdCA9IGlzUm9vdCA/IHtcbiAgICB0b3A6IF9kb2NFbC5jbGllbnRUb3AgLSAoX3dpbmRvdy5wYWdlWU9mZnNldCB8fCBfZG9jRWwuc2Nyb2xsVG9wIHx8IF9ib2R5LnNjcm9sbFRvcCB8fCAwKSxcbiAgICBsZWZ0OiBfZG9jRWwuY2xpZW50TGVmdCAtIChfd2luZG93LnBhZ2VYT2Zmc2V0IHx8IF9kb2NFbC5zY3JvbGxMZWZ0IHx8IF9ib2R5LnNjcm9sbExlZnQgfHwgMClcbiAgfSA6IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgeDogcmVjdC5sZWZ0IC0gY1JlY3QubGVmdCxcbiAgICB5OiByZWN0LnRvcCAtIGNSZWN0LnRvcFxuICB9O1xuXG4gIGlmICghaXNSb290ICYmIGNvbnRhaW5lcikge1xuICAgIC8vb25seSBhZGQgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGlmIGl0J3Mgbm90IHRoZSB3aW5kb3cvYm9keS5cbiAgICBvZmZzZXRzLnggKz0gX2J1aWxkR2V0dGVyKGNvbnRhaW5lciwgXCJ4XCIpKCk7XG4gICAgb2Zmc2V0cy55ICs9IF9idWlsZEdldHRlcihjb250YWluZXIsIFwieVwiKSgpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59LFxuICAgIF9wYXJzZVZhbCA9IGZ1bmN0aW9uIF9wYXJzZVZhbCh2YWx1ZSwgdGFyZ2V0LCBheGlzLCBjdXJyZW50VmFsLCBvZmZzZXQpIHtcbiAgcmV0dXJuICFpc05hTih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiID8gcGFyc2VGbG9hdCh2YWx1ZSkgLSBvZmZzZXQgOiBfaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigyKSkgKiAodmFsdWUuY2hhckF0KDApID09PSBcIi1cIiA/IC0xIDogMSkgKyBjdXJyZW50VmFsIC0gb2Zmc2V0IDogdmFsdWUgPT09IFwibWF4XCIgPyBfbWF4KHRhcmdldCwgYXhpcykgLSBvZmZzZXQgOiBNYXRoLm1pbihfbWF4KHRhcmdldCwgYXhpcyksIF9nZXRPZmZzZXQodmFsdWUsIHRhcmdldClbYXhpc10gLSBvZmZzZXQpO1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGdzYXAgPSBfZ2V0R1NBUCgpO1xuXG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgZ3NhcCAmJiBkb2N1bWVudC5ib2R5KSB7XG4gICAgX3dpbmRvdyA9IHdpbmRvdztcbiAgICBfYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgX2RvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90b0FycmF5ID0gZ3NhcC51dGlscy50b0FycmF5O1xuICAgIGdzYXAuY29uZmlnKHtcbiAgICAgIGF1dG9LaWxsVGhyZXNob2xkOiA3XG4gICAgfSk7XG4gICAgX2NvbmZpZyA9IGdzYXAuY29uZmlnKCk7XG4gICAgX2NvcmVJbml0dGVkID0gMTtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBTY3JvbGxUb1BsdWdpbiA9IHtcbiAgdmVyc2lvbjogXCIzLjcuMVwiLFxuICBuYW1lOiBcInNjcm9sbFRvXCIsXG4gIHJhd1ZhcnM6IDEsXG4gIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3Rlcihjb3JlKSB7XG4gICAgZ3NhcCA9IGNvcmU7XG5cbiAgICBfaW5pdENvcmUoKTtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICBfY29yZUluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG4gICAgdmFyIGRhdGEgPSB0aGlzLFxuICAgICAgICBzbmFwVHlwZSA9IGdzYXAuZ2V0UHJvcGVydHkodGFyZ2V0LCBcInNjcm9sbFNuYXBUeXBlXCIpO1xuICAgIGRhdGEuaXNXaW4gPSB0YXJnZXQgPT09IF93aW5kb3c7XG4gICAgZGF0YS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgZGF0YS50d2VlbiA9IHR3ZWVuO1xuICAgIHZhbHVlID0gX2NsZWFuKHZhbHVlLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICBkYXRhLnZhcnMgPSB2YWx1ZTtcbiAgICBkYXRhLmF1dG9LaWxsID0gISF2YWx1ZS5hdXRvS2lsbDtcbiAgICBkYXRhLmdldFggPSBfYnVpbGRHZXR0ZXIodGFyZ2V0LCBcInhcIik7XG4gICAgZGF0YS5nZXRZID0gX2J1aWxkR2V0dGVyKHRhcmdldCwgXCJ5XCIpO1xuICAgIGRhdGEueCA9IGRhdGEueFByZXYgPSBkYXRhLmdldFgoKTtcbiAgICBkYXRhLnkgPSBkYXRhLnlQcmV2ID0gZGF0YS5nZXRZKCk7XG5cbiAgICBpZiAoc25hcFR5cGUgJiYgc25hcFR5cGUgIT09IFwibm9uZVwiKSB7XG4gICAgICAvLyBkaXNhYmxlIHNjcm9sbCBzbmFwcGluZyB0byBhdm9pZCBzdHJhbmdlIGJlaGF2aW9yXG4gICAgICBkYXRhLnNuYXAgPSAxO1xuICAgICAgZGF0YS5zbmFwSW5saW5lID0gdGFyZ2V0LnN0eWxlLnNjcm9sbFNuYXBUeXBlO1xuICAgICAgdGFyZ2V0LnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gXCJub25lXCI7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLnggIT0gbnVsbCkge1xuICAgICAgZGF0YS5hZGQoZGF0YSwgXCJ4XCIsIGRhdGEueCwgX3BhcnNlVmFsKHZhbHVlLngsIHRhcmdldCwgXCJ4XCIsIGRhdGEueCwgdmFsdWUub2Zmc2V0WCB8fCAwKSwgaW5kZXgsIHRhcmdldHMpO1xuXG4gICAgICBkYXRhLl9wcm9wcy5wdXNoKFwic2Nyb2xsVG9feFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5za2lwWCA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLnkgIT0gbnVsbCkge1xuICAgICAgZGF0YS5hZGQoZGF0YSwgXCJ5XCIsIGRhdGEueSwgX3BhcnNlVmFsKHZhbHVlLnksIHRhcmdldCwgXCJ5XCIsIGRhdGEueSwgdmFsdWUub2Zmc2V0WSB8fCAwKSwgaW5kZXgsIHRhcmdldHMpO1xuXG4gICAgICBkYXRhLl9wcm9wcy5wdXNoKFwic2Nyb2xsVG9feVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5za2lwWSA9IDE7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIHZhciBwdCA9IGRhdGEuX3B0LFxuICAgICAgICB0YXJnZXQgPSBkYXRhLnRhcmdldCxcbiAgICAgICAgdHdlZW4gPSBkYXRhLnR3ZWVuLFxuICAgICAgICBhdXRvS2lsbCA9IGRhdGEuYXV0b0tpbGwsXG4gICAgICAgIHhQcmV2ID0gZGF0YS54UHJldixcbiAgICAgICAgeVByZXYgPSBkYXRhLnlQcmV2LFxuICAgICAgICBpc1dpbiA9IGRhdGEuaXNXaW4sXG4gICAgICAgIHNuYXAgPSBkYXRhLnNuYXAsXG4gICAgICAgIHNuYXBJbmxpbmUgPSBkYXRhLnNuYXBJbmxpbmUsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHlEaWYsXG4gICAgICAgIHhEaWYsXG4gICAgICAgIHRocmVzaG9sZDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHggPSBpc1dpbiB8fCAhZGF0YS5za2lwWCA/IGRhdGEuZ2V0WCgpIDogeFByZXY7XG4gICAgeSA9IGlzV2luIHx8ICFkYXRhLnNraXBZID8gZGF0YS5nZXRZKCkgOiB5UHJldjtcbiAgICB5RGlmID0geSAtIHlQcmV2O1xuICAgIHhEaWYgPSB4IC0geFByZXY7XG4gICAgdGhyZXNob2xkID0gX2NvbmZpZy5hdXRvS2lsbFRocmVzaG9sZDtcblxuICAgIGlmIChkYXRhLnggPCAwKSB7XG4gICAgICAvL2Nhbid0IHNjcm9sbCB0byBhIHBvc2l0aW9uIGxlc3MgdGhhbiAwISBNaWdodCBoYXBwZW4gaWYgc29tZW9uZSB1c2VzIGEgQmFjay5lYXNlT3V0IG9yIEVsYXN0aWMuZWFzZU91dCB3aGVuIHNjcm9sbGluZyBiYWNrIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2UgKGZvciBleGFtcGxlKVxuICAgICAgZGF0YS54ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS55IDwgMCkge1xuICAgICAgZGF0YS55ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoYXV0b0tpbGwpIHtcbiAgICAgIC8vbm90ZTogaU9TIGhhcyBhIGJ1ZyB0aGF0IHRocm93cyBvZmYgdGhlIHNjcm9sbCBieSBzZXZlcmFsIHBpeGVscywgc28gd2UgbmVlZCB0byBjaGVjayBpZiBpdCdzIHdpdGhpbiA3IHBpeGVscyBvZiB0aGUgcHJldmlvdXMgb25lIHRoYXQgd2Ugc2V0IGluc3RlYWQgb2YganVzdCBsb29raW5nIGZvciBhbiBleGFjdCBtYXRjaC5cbiAgICAgIGlmICghZGF0YS5za2lwWCAmJiAoeERpZiA+IHRocmVzaG9sZCB8fCB4RGlmIDwgLXRocmVzaG9sZCkgJiYgeCA8IF9tYXgodGFyZ2V0LCBcInhcIikpIHtcbiAgICAgICAgZGF0YS5za2lwWCA9IDE7IC8vaWYgdGhlIHVzZXIgc2Nyb2xscyBzZXBhcmF0ZWx5LCB3ZSBzaG91bGQgc3RvcCB0d2VlbmluZyFcbiAgICAgIH1cblxuICAgICAgaWYgKCFkYXRhLnNraXBZICYmICh5RGlmID4gdGhyZXNob2xkIHx8IHlEaWYgPCAtdGhyZXNob2xkKSAmJiB5IDwgX21heCh0YXJnZXQsIFwieVwiKSkge1xuICAgICAgICBkYXRhLnNraXBZID0gMTsgLy9pZiB0aGUgdXNlciBzY3JvbGxzIHNlcGFyYXRlbHksIHdlIHNob3VsZCBzdG9wIHR3ZWVuaW5nIVxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5za2lwWCAmJiBkYXRhLnNraXBZKSB7XG4gICAgICAgIHR3ZWVuLmtpbGwoKTtcbiAgICAgICAgZGF0YS52YXJzLm9uQXV0b0tpbGwgJiYgZGF0YS52YXJzLm9uQXV0b0tpbGwuYXBwbHkodHdlZW4sIGRhdGEudmFycy5vbkF1dG9LaWxsUGFyYW1zIHx8IFtdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNXaW4pIHtcbiAgICAgIF93aW5kb3cuc2Nyb2xsVG8oIWRhdGEuc2tpcFggPyBkYXRhLnggOiB4LCAhZGF0YS5za2lwWSA/IGRhdGEueSA6IHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnNraXBZIHx8ICh0YXJnZXQuc2Nyb2xsVG9wID0gZGF0YS55KTtcbiAgICAgIGRhdGEuc2tpcFggfHwgKHRhcmdldC5zY3JvbGxMZWZ0ID0gZGF0YS54KTtcbiAgICB9XG5cbiAgICBpZiAoc25hcCAmJiAocmF0aW8gPT09IDEgfHwgcmF0aW8gPT09IDApKSB7XG4gICAgICB5ID0gdGFyZ2V0LnNjcm9sbFRvcDtcbiAgICAgIHggPSB0YXJnZXQuc2Nyb2xsTGVmdDtcbiAgICAgIHNuYXBJbmxpbmUgPyB0YXJnZXQuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSBzbmFwSW5saW5lIDogdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwic2Nyb2xsLXNuYXAtdHlwZVwiKTtcbiAgICAgIHRhcmdldC5zY3JvbGxUb3AgPSB5ICsgMTsgLy8gYnVnIGluIFNhZmFyaSBjYXVzZXMgdGhlIGVsZW1lbnQgdG8gdG90YWxseSByZXNldCBpdHMgc2Nyb2xsIHBvc2l0aW9uIHdoZW4gc2Nyb2xsLXNuYXAtdHlwZSBjaGFuZ2VzLCBzbyB3ZSBuZWVkIHRvIHNldCBpdCB0byBhIHNsaWdodGx5IGRpZmZlcmVudCB2YWx1ZSBhbmQgdGhlbiBiYWNrIGFnYWluIHRvIHdvcmsgYXJvdW5kIHRoaXMgYnVnLlxuXG4gICAgICB0YXJnZXQuc2Nyb2xsTGVmdCA9IHggKyAxO1xuICAgICAgdGFyZ2V0LnNjcm9sbFRvcCA9IHk7XG4gICAgICB0YXJnZXQuc2Nyb2xsTGVmdCA9IHg7XG4gICAgfVxuXG4gICAgZGF0YS54UHJldiA9IGRhdGEueDtcbiAgICBkYXRhLnlQcmV2ID0gZGF0YS55O1xuICB9LFxuICBraWxsOiBmdW5jdGlvbiBraWxsKHByb3BlcnR5KSB7XG4gICAgdmFyIGJvdGggPSBwcm9wZXJ0eSA9PT0gXCJzY3JvbGxUb1wiO1xuXG4gICAgaWYgKGJvdGggfHwgcHJvcGVydHkgPT09IFwic2Nyb2xsVG9feFwiKSB7XG4gICAgICB0aGlzLnNraXBYID0gMTtcbiAgICB9XG5cbiAgICBpZiAoYm90aCB8fCBwcm9wZXJ0eSA9PT0gXCJzY3JvbGxUb195XCIpIHtcbiAgICAgIHRoaXMuc2tpcFkgPSAxO1xuICAgIH1cbiAgfVxufTtcblNjcm9sbFRvUGx1Z2luLm1heCA9IF9tYXg7XG5TY3JvbGxUb1BsdWdpbi5nZXRPZmZzZXQgPSBfZ2V0T2Zmc2V0O1xuU2Nyb2xsVG9QbHVnaW4uYnVpbGRHZXR0ZXIgPSBfYnVpbGRHZXR0ZXI7XG5fZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVG9QbHVnaW4pO1xuZXhwb3J0IHsgU2Nyb2xsVG9QbHVnaW4gYXMgZGVmYXVsdCB9OyIsIi8qIVxuICogU2Nyb2xsVHJpZ2dlciAzLjcuMVxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsLFxuICAgIF9ib2R5LFxuICAgIF9yb290LFxuICAgIF9yZXNpemVEZWxheSxcbiAgICBfcmFmLFxuICAgIF9yZXF1ZXN0LFxuICAgIF90b0FycmF5LFxuICAgIF9jbGFtcCxcbiAgICBfdGltZTIsXG4gICAgX3N5bmNJbnRlcnZhbCxcbiAgICBfcmVmcmVzaGluZyxcbiAgICBfcG9pbnRlcklzRG93bixcbiAgICBfdHJhbnNmb3JtUHJvcCxcbiAgICBfaSxcbiAgICBfcHJldldpZHRoLFxuICAgIF9wcmV2SGVpZ2h0LFxuICAgIF9hdXRvUmVmcmVzaCxcbiAgICBfc29ydCxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9pZ25vcmVSZXNpemUsXG4gICAgX2xpbWl0Q2FsbGJhY2tzLFxuICAgIC8vIGlmIHRydWUsIHdlJ2xsIG9ubHkgdHJpZ2dlciBjYWxsYmFja3MgaWYgdGhlIGFjdGl2ZSBzdGF0ZSB0b2dnbGVzLCBzbyBpZiB5b3Ugc2Nyb2xsIGltbWVkaWF0ZWx5IHBhc3QgYm90aCB0aGUgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbnMgb2YgYSBTY3JvbGxUcmlnZ2VyICh0aHVzIGluYWN0aXZlIHRvIGluYWN0aXZlKSwgbmVpdGhlciBpdHMgb25FbnRlciBub3Igb25MZWF2ZSB3aWxsIGJlIGNhbGxlZC4gVGhpcyBpcyB1c2VmdWwgZHVyaW5nIHN0YXJ0dXAuXG5fc3RhcnR1cCA9IDEsXG4gICAgX3Byb3hpZXMgPSBbXSxcbiAgICBfc2Nyb2xsZXJzID0gW10sXG4gICAgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICBfdGltZTEgPSBfZ2V0VGltZSgpLFxuICAgIF9sYXN0U2Nyb2xsVGltZSA9IDAsXG4gICAgX2VuYWJsZWQgPSAxLFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaCh2KSB7XG4gIHJldHVybiB2O1xufSxcbiAgICBfcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgX3dpbmRvd0V4aXN0cygpICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX2lzVmlld3BvcnQgPSBmdW5jdGlvbiBfaXNWaWV3cG9ydChlKSB7XG4gIHJldHVybiAhIX5fcm9vdC5pbmRleE9mKGUpO1xufSxcbiAgICBfZ2V0UHJveHlQcm9wID0gZnVuY3Rpb24gX2dldFByb3h5UHJvcChlbGVtZW50LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgJiYgX3Byb3hpZXNbX3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSArIDFdW3Byb3BlcnR5XTtcbn0sXG4gICAgX2dldFNjcm9sbEZ1bmMgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsRnVuYyhlbGVtZW50LCBfcmVmKSB7XG4gIHZhciBzID0gX3JlZi5zLFxuICAgICAgc2MgPSBfcmVmLnNjO1xuXG4gIC8vIHdlIHN0b3JlIHRoZSBzY3JvbGxlciBmdW5jdGlvbnMgaW4gYSBhbHRlcm5hdGluZyBzZXF1ZW5jZWQgQXJyYXkgbGlrZSBbZWxlbWVudCwgdmVydGljYWxTY3JvbGxGdW5jLCBob3Jpem9udGFsU2Nyb2xsRnVuYywgLi4uXSBzbyB0aGF0IHdlIGNhbiBtaW5pbWl6ZSBtZW1vcnksIG1heGltaXplIHBlcmZvcm1hbmNlLCBhbmQgd2UgYWxzbyByZWNvcmQgdGhlIGxhc3QgcG9zaXRpb24gYXMgYSBcIi5yZWNcIiBwcm9wZXJ0eSBpbiBvcmRlciB0byByZXZlcnQgdG8gdGhhdCBhZnRlciByZWZyZXNoaW5nIHRvIGVuc3VyZSB0aGluZ3MgZG9uJ3Qgc2hpZnQgYXJvdW5kLlxuICB2YXIgaSA9IF9zY3JvbGxlcnMuaW5kZXhPZihlbGVtZW50KSxcbiAgICAgIG9mZnNldCA9IHNjID09PSBfdmVydGljYWwuc2MgPyAxIDogMjtcblxuICAhfmkgJiYgKGkgPSBfc2Nyb2xsZXJzLnB1c2goZWxlbWVudCkgLSAxKTtcbiAgcmV0dXJuIF9zY3JvbGxlcnNbaSArIG9mZnNldF0gfHwgKF9zY3JvbGxlcnNbaSArIG9mZnNldF0gPSBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHMpIHx8IChfaXNWaWV3cG9ydChlbGVtZW50KSA/IHNjIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBlbGVtZW50W3NdID0gdmFsdWUgOiBlbGVtZW50W3NdO1xuICB9KSk7XG59LFxuICAgIF9nZXRCb3VuZHNGdW5jID0gZnVuY3Rpb24gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkge1xuICByZXR1cm4gX2dldFByb3h5UHJvcChlbGVtZW50LCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBmdW5jdGlvbiAoKSB7XG4gICAgX3dpbk9mZnNldHMud2lkdGggPSBfd2luLmlubmVyV2lkdGg7XG4gICAgX3dpbk9mZnNldHMuaGVpZ2h0ID0gX3dpbi5pbm5lckhlaWdodDtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gIH0pO1xufSxcbiAgICBfZ2V0U2l6ZUZ1bmMgPSBmdW5jdGlvbiBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIF9yZWYyKSB7XG4gIHZhciBkID0gX3JlZjIuZCxcbiAgICAgIGQyID0gX3JlZjIuZDIsXG4gICAgICBhID0gX3JlZjIuYTtcbiAgcmV0dXJuIChhID0gX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIikpID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhKClbZF07XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChpc1ZpZXdwb3J0ID8gX3dpbltcImlubmVyXCIgKyBkMl0gOiBzY3JvbGxlcltcImNsaWVudFwiICsgZDJdKSB8fCAwO1xuICB9O1xufSxcbiAgICBfZ2V0T2Zmc2V0c0Z1bmMgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0c0Z1bmMoZWxlbWVudCwgaXNWaWV3cG9ydCkge1xuICByZXR1cm4gIWlzVmlld3BvcnQgfHwgfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgPyBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH07XG59LFxuICAgIF9tYXhTY3JvbGwgPSBmdW5jdGlvbiBfbWF4U2Nyb2xsKGVsZW1lbnQsIF9yZWYzKSB7XG4gIHZhciBzID0gX3JlZjMucyxcbiAgICAgIGQyID0gX3JlZjMuZDIsXG4gICAgICBkID0gX3JlZjMuZCxcbiAgICAgIGEgPSBfcmVmMy5hO1xuICByZXR1cm4gKHMgPSBcInNjcm9sbFwiICsgZDIpICYmIChhID0gX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSkgPyBhKCkgLSBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSgpW2RdIDogX2lzVmlld3BvcnQoZWxlbWVudCkgPyBNYXRoLm1heChfZG9jRWxbc10sIF9ib2R5W3NdKSAtIChfd2luW1wiaW5uZXJcIiArIGQyXSB8fCBfZG9jRWxbXCJjbGllbnRcIiArIGQyXSB8fCBfYm9keVtcImNsaWVudFwiICsgZDJdKSA6IGVsZW1lbnRbc10gLSBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl07XG59LFxuICAgIF9pdGVyYXRlQXV0b1JlZnJlc2ggPSBmdW5jdGlvbiBfaXRlcmF0ZUF1dG9SZWZyZXNoKGZ1bmMsIGV2ZW50cykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IF9hdXRvUmVmcmVzaC5sZW5ndGg7IGkgKz0gMykge1xuICAgICghZXZlbnRzIHx8IH5ldmVudHMuaW5kZXhPZihfYXV0b1JlZnJlc2hbaSArIDFdKSkgJiYgZnVuYyhfYXV0b1JlZnJlc2hbaV0sIF9hdXRvUmVmcmVzaFtpICsgMV0sIF9hdXRvUmVmcmVzaFtpICsgMl0pO1xuICB9XG59LFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfY2FsbElmRnVuYyA9IGZ1bmN0aW9uIF9jYWxsSWZGdW5jKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgJiYgdmFsdWUoKTtcbn0sXG4gICAgX2NvbWJpbmVGdW5jID0gZnVuY3Rpb24gX2NvbWJpbmVGdW5jKGYxLCBmMikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQxID0gX2NhbGxJZkZ1bmMoZjEpLFxuICAgICAgICByZXN1bHQyID0gX2NhbGxJZkZ1bmMoZjIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9jYWxsSWZGdW5jKHJlc3VsdDEpO1xuXG4gICAgICBfY2FsbElmRnVuYyhyZXN1bHQyKTtcbiAgICB9O1xuICB9O1xufSxcbiAgICBfYWJzID0gTWF0aC5hYnMsXG4gICAgX3Njcm9sbExlZnQgPSBcInNjcm9sbExlZnRcIixcbiAgICBfc2Nyb2xsVG9wID0gXCJzY3JvbGxUb3BcIixcbiAgICBfbGVmdCA9IFwibGVmdFwiLFxuICAgIF90b3AgPSBcInRvcFwiLFxuICAgIF9yaWdodCA9IFwicmlnaHRcIixcbiAgICBfYm90dG9tID0gXCJib3R0b21cIixcbiAgICBfd2lkdGggPSBcIndpZHRoXCIsXG4gICAgX2hlaWdodCA9IFwiaGVpZ2h0XCIsXG4gICAgX1JpZ2h0ID0gXCJSaWdodFwiLFxuICAgIF9MZWZ0ID0gXCJMZWZ0XCIsXG4gICAgX1RvcCA9IFwiVG9wXCIsXG4gICAgX0JvdHRvbSA9IFwiQm90dG9tXCIsXG4gICAgX3BhZGRpbmcgPSBcInBhZGRpbmdcIixcbiAgICBfbWFyZ2luID0gXCJtYXJnaW5cIixcbiAgICBfV2lkdGggPSBcIldpZHRoXCIsXG4gICAgX0hlaWdodCA9IFwiSGVpZ2h0XCIsXG4gICAgX3B4ID0gXCJweFwiLFxuICAgIF9ob3Jpem9udGFsID0ge1xuICBzOiBfc2Nyb2xsTGVmdCxcbiAgcDogX2xlZnQsXG4gIHAyOiBfTGVmdCxcbiAgb3M6IF9yaWdodCxcbiAgb3MyOiBfUmlnaHQsXG4gIGQ6IF93aWR0aCxcbiAgZDI6IF9XaWR0aCxcbiAgYTogXCJ4XCIsXG4gIHNjOiBmdW5jdGlvbiBzYyh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3dpbi5zY3JvbGxUbyh2YWx1ZSwgX3ZlcnRpY2FsLnNjKCkpIDogX3dpbi5wYWdlWE9mZnNldCB8fCBfZG9jW19zY3JvbGxMZWZ0XSB8fCBfZG9jRWxbX3Njcm9sbExlZnRdIHx8IF9ib2R5W19zY3JvbGxMZWZ0XSB8fCAwO1xuICB9XG59LFxuICAgIF92ZXJ0aWNhbCA9IHtcbiAgczogX3Njcm9sbFRvcCxcbiAgcDogX3RvcCxcbiAgcDI6IF9Ub3AsXG4gIG9zOiBfYm90dG9tLFxuICBvczI6IF9Cb3R0b20sXG4gIGQ6IF9oZWlnaHQsXG4gIGQyOiBfSGVpZ2h0LFxuICBhOiBcInlcIixcbiAgb3A6IF9ob3Jpem9udGFsLFxuICBzYzogZnVuY3Rpb24gc2ModmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8oX2hvcml6b250YWwuc2MoKSwgdmFsdWUpIDogX3dpbi5wYWdlWU9mZnNldCB8fCBfZG9jW19zY3JvbGxUb3BdIHx8IF9kb2NFbFtfc2Nyb2xsVG9wXSB8fCBfYm9keVtfc2Nyb2xsVG9wXSB8fCAwO1xuICB9XG59LFxuICAgIF9nZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gX3dpbi5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSxcbiAgICBfbWFrZVBvc2l0aW9uYWJsZSA9IGZ1bmN0aW9uIF9tYWtlUG9zaXRpb25hYmxlKGVsZW1lbnQpIHtcbiAgLy8gaWYgdGhlIGVsZW1lbnQgYWxyZWFkeSBoYXMgcG9zaXRpb246IGFic29sdXRlIG9yIGZpeGVkLCBsZWF2ZSB0aGF0LCBvdGhlcndpc2UgbWFrZSBpdCBwb3NpdGlvbjogcmVsYXRpdmVcbiAgdmFyIHBvc2l0aW9uID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb247XG5cbiAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiA/IHBvc2l0aW9uIDogXCJyZWxhdGl2ZVwiO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIC8vX2lzSW5WaWV3cG9ydCA9IGVsZW1lbnQgPT4gKGVsZW1lbnQgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpKSAmJiAhKGVsZW1lbnQudG9wID4gKF93aW4uaW5uZXJIZWlnaHQgfHwgX2RvY0VsLmNsaWVudEhlaWdodCkgfHwgZWxlbWVudC5ib3R0b20gPCAwIHx8IGVsZW1lbnQubGVmdCA+IChfd2luLmlubmVyV2lkdGggfHwgX2RvY0VsLmNsaWVudFdpZHRoKSB8fCBlbGVtZW50LnJpZ2h0IDwgMCkgJiYgZWxlbWVudCxcbl9nZXRCb3VuZHMgPSBmdW5jdGlvbiBfZ2V0Qm91bmRzKGVsZW1lbnQsIHdpdGhvdXRUcmFuc2Zvcm1zKSB7XG4gIHZhciB0d2VlbiA9IHdpdGhvdXRUcmFuc2Zvcm1zICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW190cmFuc2Zvcm1Qcm9wXSAhPT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiAmJiBnc2FwLnRvKGVsZW1lbnQsIHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgeFBlcmNlbnQ6IDAsXG4gICAgeVBlcmNlbnQ6IDAsXG4gICAgcm90YXRpb246IDAsXG4gICAgcm90YXRpb25YOiAwLFxuICAgIHJvdGF0aW9uWTogMCxcbiAgICBzY2FsZTogMSxcbiAgICBza2V3WDogMCxcbiAgICBza2V3WTogMFxuICB9KS5wcm9ncmVzcygxKSxcbiAgICAgIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHR3ZWVuICYmIHR3ZWVuLnByb2dyZXNzKDApLmtpbGwoKTtcbiAgcmV0dXJuIGJvdW5kcztcbn0sXG4gICAgX2dldFNpemUgPSBmdW5jdGlvbiBfZ2V0U2l6ZShlbGVtZW50LCBfcmVmNCkge1xuICB2YXIgZDIgPSBfcmVmNC5kMjtcbiAgcmV0dXJuIGVsZW1lbnRbXCJvZmZzZXRcIiArIGQyXSB8fCBlbGVtZW50W1wiY2xpZW50XCIgKyBkMl0gfHwgMDtcbn0sXG4gICAgX2dldExhYmVsUmF0aW9BcnJheSA9IGZ1bmN0aW9uIF9nZXRMYWJlbFJhdGlvQXJyYXkodGltZWxpbmUpIHtcbiAgdmFyIGEgPSBbXSxcbiAgICAgIGxhYmVscyA9IHRpbWVsaW5lLmxhYmVscyxcbiAgICAgIGR1cmF0aW9uID0gdGltZWxpbmUuZHVyYXRpb24oKSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGEucHVzaChsYWJlbHNbcF0gLyBkdXJhdGlvbik7XG4gIH1cblxuICByZXR1cm4gYTtcbn0sXG4gICAgX2dldENsb3Nlc3RMYWJlbCA9IGZ1bmN0aW9uIF9nZXRDbG9zZXN0TGFiZWwoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZ3NhcC51dGlscy5zbmFwKF9nZXRMYWJlbFJhdGlvQXJyYXkoYW5pbWF0aW9uKSwgdmFsdWUpO1xuICB9O1xufSxcbiAgICBfZ2V0TGFiZWxBdERpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEF0RGlyZWN0aW9uKHRpbWVsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIHN0KSB7XG4gICAgdmFyIGEgPSBfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSxcbiAgICAgICAgaTtcblxuICAgIGEuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH0pO1xuXG4gICAgaWYgKHN0LmRpcmVjdGlvbiA+IDApIHtcbiAgICAgIHZhbHVlIC09IDFlLTQ7IC8vIHRvIGF2b2lkIHJvdW5kaW5nIGVycm9ycy4gSWYgd2UncmUgdG9vIHN0cmljdCwgaXQgbWlnaHQgc25hcCBmb3J3YXJkLCB0aGVuIGltbWVkaWF0ZWx5IGFnYWluLCBhbmQgYWdhaW4uXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldID49IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGFbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGEucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGkgPSBhLmxlbmd0aDtcbiAgICAgIHZhbHVlICs9IDFlLTQ7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGFbaV0gPD0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYVtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhWzBdO1xuICB9O1xufSxcbiAgICBfbXVsdGlMaXN0ZW5lciA9IGZ1bmN0aW9uIF9tdWx0aUxpc3RlbmVyKGZ1bmMsIGVsZW1lbnQsIHR5cGVzLCBjYWxsYmFjaykge1xuICByZXR1cm4gdHlwZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuYyhlbGVtZW50LCB0eXBlLCBjYWxsYmFjayk7XG4gIH0pO1xufSxcbiAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYykge1xuICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xufSxcbiAgICBfcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiBfcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYykge1xuICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMpO1xufSxcbiAgICBfbWFya2VyRGVmYXVsdHMgPSB7XG4gIHN0YXJ0Q29sb3I6IFwiZ3JlZW5cIixcbiAgZW5kQ29sb3I6IFwicmVkXCIsXG4gIGluZGVudDogMCxcbiAgZm9udFNpemU6IFwiMTZweFwiLFxuICBmb250V2VpZ2h0OiBcIm5vcm1hbFwiXG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgdG9nZ2xlQWN0aW9uczogXCJwbGF5XCIsXG4gIGFudGljaXBhdGVQaW46IDBcbn0sXG4gICAgX2tleXdvcmRzID0ge1xuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIGNlbnRlcjogMC41LFxuICBib3R0b206IDEsXG4gIHJpZ2h0OiAxXG59LFxuICAgIF9vZmZzZXRUb1B4ID0gZnVuY3Rpb24gX29mZnNldFRvUHgodmFsdWUsIHNpemUpIHtcbiAgaWYgKF9pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgZXFJbmRleCA9IHZhbHVlLmluZGV4T2YoXCI9XCIpLFxuICAgICAgICByZWxhdGl2ZSA9IH5lcUluZGV4ID8gKyh2YWx1ZS5jaGFyQXQoZXFJbmRleCAtIDEpICsgMSkgKiBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cihlcUluZGV4ICsgMSkpIDogMDtcblxuICAgIGlmICh+ZXFJbmRleCkge1xuICAgICAgdmFsdWUuaW5kZXhPZihcIiVcIikgPiBlcUluZGV4ICYmIChyZWxhdGl2ZSAqPSBzaXplIC8gMTAwKTtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDAsIGVxSW5kZXggLSAxKTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHJlbGF0aXZlICsgKHZhbHVlIGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1t2YWx1ZV0gKiBzaXplIDogfnZhbHVlLmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdCh2YWx1ZSkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59LFxuICAgIF9jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiBfY3JlYXRlTWFya2VyKHR5cGUsIG5hbWUsIGNvbnRhaW5lciwgZGlyZWN0aW9uLCBfcmVmNSwgb2Zmc2V0LCBtYXRjaFdpZHRoRWwpIHtcbiAgdmFyIHN0YXJ0Q29sb3IgPSBfcmVmNS5zdGFydENvbG9yLFxuICAgICAgZW5kQ29sb3IgPSBfcmVmNS5lbmRDb2xvcixcbiAgICAgIGZvbnRTaXplID0gX3JlZjUuZm9udFNpemUsXG4gICAgICBpbmRlbnQgPSBfcmVmNS5pbmRlbnQsXG4gICAgICBmb250V2VpZ2h0ID0gX3JlZjUuZm9udFdlaWdodDtcblxuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgIHVzZUZpeGVkUG9zaXRpb24gPSBfaXNWaWV3cG9ydChjb250YWluZXIpIHx8IF9nZXRQcm94eVByb3AoY29udGFpbmVyLCBcInBpblR5cGVcIikgPT09IFwiZml4ZWRcIixcbiAgICAgIGlzU2Nyb2xsZXIgPSB0eXBlLmluZGV4T2YoXCJzY3JvbGxlclwiKSAhPT0gLTEsXG4gICAgICBwYXJlbnQgPSB1c2VGaXhlZFBvc2l0aW9uID8gX2JvZHkgOiBjb250YWluZXIsXG4gICAgICBpc1N0YXJ0ID0gdHlwZS5pbmRleE9mKFwic3RhcnRcIikgIT09IC0xLFxuICAgICAgY29sb3IgPSBpc1N0YXJ0ID8gc3RhcnRDb2xvciA6IGVuZENvbG9yLFxuICAgICAgY3NzID0gXCJib3JkZXItY29sb3I6XCIgKyBjb2xvciArIFwiO2ZvbnQtc2l6ZTpcIiArIGZvbnRTaXplICsgXCI7Y29sb3I6XCIgKyBjb2xvciArIFwiO2ZvbnQtd2VpZ2h0OlwiICsgZm9udFdlaWdodCArIFwiO3BvaW50ZXItZXZlbnRzOm5vbmU7d2hpdGUtc3BhY2U6bm93cmFwO2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWYsQXJpYWw7ei1pbmRleDoxMDAwO3BhZGRpbmc6NHB4IDhweDtib3JkZXItd2lkdGg6MDtib3JkZXItc3R5bGU6c29saWQ7XCI7XG5cbiAgY3NzICs9IFwicG9zaXRpb246XCIgKyAoaXNTY3JvbGxlciAmJiB1c2VGaXhlZFBvc2l0aW9uID8gXCJmaXhlZDtcIiA6IFwiYWJzb2x1dGU7XCIpO1xuICAoaXNTY3JvbGxlciB8fCAhdXNlRml4ZWRQb3NpdGlvbikgJiYgKGNzcyArPSAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfcmlnaHQgOiBfYm90dG9tKSArIFwiOlwiICsgKG9mZnNldCArIHBhcnNlRmxvYXQoaW5kZW50KSkgKyBcInB4O1wiKTtcbiAgbWF0Y2hXaWR0aEVsICYmIChjc3MgKz0gXCJib3gtc2l6aW5nOmJvcmRlci1ib3g7dGV4dC1hbGlnbjpsZWZ0O3dpZHRoOlwiICsgbWF0Y2hXaWR0aEVsLm9mZnNldFdpZHRoICsgXCJweDtcIik7XG4gIGUuX2lzU3RhcnQgPSBpc1N0YXJ0O1xuICBlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ3NhcC1tYXJrZXItXCIgKyB0eXBlKTtcbiAgZS5zdHlsZS5jc3NUZXh0ID0gY3NzO1xuICBlLmlubmVyVGV4dCA9IG5hbWUgfHwgbmFtZSA9PT0gMCA/IHR5cGUgKyBcIi1cIiArIG5hbWUgOiB0eXBlO1xuICBwYXJlbnQuY2hpbGRyZW5bMF0gPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGUsIHBhcmVudC5jaGlsZHJlblswXSkgOiBwYXJlbnQuYXBwZW5kQ2hpbGQoZSk7XG4gIGUuX29mZnNldCA9IGVbXCJvZmZzZXRcIiArIGRpcmVjdGlvbi5vcC5kMl07XG5cbiAgX3Bvc2l0aW9uTWFya2VyKGUsIDAsIGRpcmVjdGlvbiwgaXNTdGFydCk7XG5cbiAgcmV0dXJuIGU7XG59LFxuICAgIF9wb3NpdGlvbk1hcmtlciA9IGZ1bmN0aW9uIF9wb3NpdGlvbk1hcmtlcihtYXJrZXIsIHN0YXJ0LCBkaXJlY3Rpb24sIGZsaXBwZWQpIHtcbiAgdmFyIHZhcnMgPSB7XG4gICAgZGlzcGxheTogXCJibG9ja1wiXG4gIH0sXG4gICAgICBzaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcIm9zMlwiIDogXCJwMlwiXSxcbiAgICAgIG9wcG9zaXRlU2lkZSA9IGRpcmVjdGlvbltmbGlwcGVkID8gXCJwMlwiIDogXCJvczJcIl07XG4gIG1hcmtlci5faXNGbGlwcGVkID0gZmxpcHBlZDtcbiAgdmFyc1tkaXJlY3Rpb24uYSArIFwiUGVyY2VudFwiXSA9IGZsaXBwZWQgPyAtMTAwIDogMDtcbiAgdmFyc1tkaXJlY3Rpb24uYV0gPSBmbGlwcGVkID8gXCIxcHhcIiA6IDA7XG4gIHZhcnNbXCJib3JkZXJcIiArIHNpZGUgKyBfV2lkdGhdID0gMTtcbiAgdmFyc1tcImJvcmRlclwiICsgb3Bwb3NpdGVTaWRlICsgX1dpZHRoXSA9IDA7XG4gIHZhcnNbZGlyZWN0aW9uLnBdID0gc3RhcnQgKyBcInB4XCI7XG4gIGdzYXAuc2V0KG1hcmtlciwgdmFycyk7XG59LFxuICAgIF90cmlnZ2VycyA9IFtdLFxuICAgIF9pZHMgPSB7fSxcbiAgICBfc3luYyA9IGZ1bmN0aW9uIF9zeW5jKCkge1xuICByZXR1cm4gX3JlcXVlc3QgfHwgKF9yZXF1ZXN0ID0gX3JhZihfdXBkYXRlQWxsKSk7XG59LFxuICAgIF9vblNjcm9sbCA9IGZ1bmN0aW9uIF9vblNjcm9sbCgpIHtcbiAgaWYgKCFfcmVxdWVzdCkge1xuICAgIF9yZXF1ZXN0ID0gX3JhZihfdXBkYXRlQWxsKTtcbiAgICBfbGFzdFNjcm9sbFRpbWUgfHwgX2Rpc3BhdGNoKFwic2Nyb2xsU3RhcnRcIik7XG4gICAgX2xhc3RTY3JvbGxUaW1lID0gX2dldFRpbWUoKTtcbiAgfVxufSxcbiAgICBfb25SZXNpemUgPSBmdW5jdGlvbiBfb25SZXNpemUoKSB7XG4gIHJldHVybiAhX3JlZnJlc2hpbmcgJiYgIV9pZ25vcmVSZXNpemUgJiYgIV9kb2MuZnVsbHNjcmVlbkVsZW1lbnQgJiYgX3Jlc2l6ZURlbGF5LnJlc3RhcnQodHJ1ZSk7XG59LFxuICAgIC8vIGlnbm9yZSByZXNpemVzIHRyaWdnZXJlZCBieSByZWZyZXNoKClcbl9saXN0ZW5lcnMgPSB7fSxcbiAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgIF9tZWRpYSA9IFtdLFxuICAgIF9jcmVhdGluZ01lZGlhLFxuICAgIC8vIHdoZW4gU2Nyb2xsVHJpZ2dlci5tYXRjaE1lZGlhKCkgaXMgY2FsbGVkLCB3ZSByZWNvcmQgdGhlIGN1cnJlbnQgbWVkaWEga2V5IGhlcmUgKGxpa2UgXCIobWluLXdpZHRoOiA4MDBweClcIikgc28gdGhhdCB3ZSBjYW4gYXNzaWduIGl0IHRvIGV2ZXJ5dGhpbmcgdGhhdCdzIGNyZWF0ZWQgZHVyaW5nIHRoYXQgY2FsbC4gVGhlbiB3ZSBjYW4gcmV2ZXJ0IGp1c3QgdGhvc2Ugd2hlbiBuZWNlc3NhcnkuIEluIHRoZSBTY3JvbGxUcmlnZ2VyJ3MgaW5pdCgpIGNhbGwsIHRoZSBfY3JlYXRpbmdNZWRpYSBpcyByZWNvcmRlZCBhcyBhIFwibWVkaWFcIiBwcm9wZXJ0eSBvbiB0aGUgaW5zdGFuY2UuXG5fbGFzdE1lZGlhVGljayxcbiAgICBfb25NZWRpYUNoYW5nZSA9IGZ1bmN0aW9uIF9vbk1lZGlhQ2hhbmdlKGUpIHtcbiAgdmFyIHRpY2sgPSBnc2FwLnRpY2tlci5mcmFtZSxcbiAgICAgIG1hdGNoZXMgPSBbXSxcbiAgICAgIGkgPSAwLFxuICAgICAgaW5kZXg7XG5cbiAgaWYgKF9sYXN0TWVkaWFUaWNrICE9PSB0aWNrIHx8IF9zdGFydHVwKSB7XG4gICAgX3JldmVydEFsbCgpO1xuXG4gICAgZm9yICg7IGkgPCBfbWVkaWEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIGluZGV4ID0gX3dpbi5tYXRjaE1lZGlhKF9tZWRpYVtpXSkubWF0Y2hlcztcblxuICAgICAgaWYgKGluZGV4ICE9PSBfbWVkaWFbaSArIDNdKSB7XG4gICAgICAgIC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMgZmlyZSB0aGUgbWF0Y2hNZWRpYSBldmVudCBtdWx0aXBsZSB0aW1lcywgbGlrZSB3aGVuIGdvaW5nIGZ1bGwgc2NyZWVuLCBzbyB3ZSBzaG91bGRuJ3QgY2FsbCB0aGUgZnVuY3Rpb24gbXVsdGlwbGUgdGltZXMuIENoZWNrIHRvIHNlZSBpZiBpdCdzIGFscmVhZHkgbWF0Y2hlZC5cbiAgICAgICAgX21lZGlhW2kgKyAzXSA9IGluZGV4O1xuICAgICAgICBpbmRleCA/IG1hdGNoZXMucHVzaChpKSA6IF9yZXZlcnRBbGwoMSwgX21lZGlhW2ldKSB8fCBfaXNGdW5jdGlvbihfbWVkaWFbaSArIDJdKSAmJiBfbWVkaWFbaSArIDJdKCk7IC8vIEZpcmVmb3ggZG9lc24ndCB1cGRhdGUgdGhlIFwibWF0Y2hlc1wiIHByb3BlcnR5IG9mIHRoZSBNZWRpYVF1ZXJ5TGlzdCBvYmplY3QgY29ycmVjdGx5IC0gaXQgb25seSBkb2VzIHNvIGFzIGl0IGNhbGxzIGl0cyBjaGFuZ2UgaGFuZGxlciAtIHNvIHdlIG11c3QgcmUtY3JlYXRlIGEgbWVkaWEgcXVlcnkgaGVyZSB0byBlbnN1cmUgaXQncyBhY2N1cmF0ZS5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfcmV2ZXJ0UmVjb3JkZWQoKTsgLy8gaW4gY2FzZSBraWxsaW5nL3JldmVydGluZyBhbnkgb2YgdGhlIGFuaW1hdGlvbnMgYWN0dWFsbHkgYWRkZWQgaW5saW5lIHN0eWxlcyBiYWNrLlxuXG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaW5kZXggPSBtYXRjaGVzW2ldO1xuICAgICAgX2NyZWF0aW5nTWVkaWEgPSBfbWVkaWFbaW5kZXhdO1xuICAgICAgX21lZGlhW2luZGV4ICsgMl0gPSBfbWVkaWFbaW5kZXggKyAxXShlKTtcbiAgICB9XG5cbiAgICBfY3JlYXRpbmdNZWRpYSA9IDA7XG4gICAgX2NvcmVJbml0dGVkICYmIF9yZWZyZXNoQWxsKDAsIDEpO1xuICAgIF9sYXN0TWVkaWFUaWNrID0gdGljaztcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gIH1cbn0sXG4gICAgX3NvZnRSZWZyZXNoID0gZnVuY3Rpb24gX3NvZnRSZWZyZXNoKCkge1xuICByZXR1cm4gX3JlbW92ZUxpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCkgfHwgX3JlZnJlc2hBbGwodHJ1ZSk7XG59LFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzW3R5cGVdICYmIF9saXN0ZW5lcnNbdHlwZV0ubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSkgfHwgX2VtcHR5QXJyYXk7XG59LFxuICAgIF9zYXZlZFN0eWxlcyA9IFtdLFxuICAgIC8vIHdoZW4gU2Nyb2xsVHJpZ2dlci5zYXZlU3R5bGVzKCkgaXMgY2FsbGVkLCB0aGUgaW5saW5lIHN0eWxlcyBhcmUgcmVjb3JkZWQgaW4gdGhpcyBBcnJheSBpbiBhIHNlcXVlbnRpYWwgZm9ybWF0IGxpa2UgW2VsZW1lbnQsIGNzc1RleHQsIGdzQ2FjaGUsIG1lZGlhXS4gVGhpcyBrZWVwcyBpdCB2ZXJ5IG1lbW9yeS1lZmZpY2llbnQgYW5kIGZhc3QgdG8gaXRlcmF0ZSB0aHJvdWdoLlxuX3JldmVydFJlY29yZGVkID0gZnVuY3Rpb24gX3JldmVydFJlY29yZGVkKG1lZGlhKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgX3NhdmVkU3R5bGVzLmxlbmd0aDsgaSArPSA1KSB7XG4gICAgaWYgKCFtZWRpYSB8fCBfc2F2ZWRTdHlsZXNbaSArIDRdID09PSBtZWRpYSkge1xuICAgICAgX3NhdmVkU3R5bGVzW2ldLnN0eWxlLmNzc1RleHQgPSBfc2F2ZWRTdHlsZXNbaSArIDFdO1xuICAgICAgX3NhdmVkU3R5bGVzW2ldLmdldEJCb3ggJiYgX3NhdmVkU3R5bGVzW2ldLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBfc2F2ZWRTdHlsZXNbaSArIDJdIHx8IFwiXCIpO1xuICAgICAgX3NhdmVkU3R5bGVzW2kgKyAzXS51bmNhY2hlID0gMTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3JldmVydEFsbCA9IGZ1bmN0aW9uIF9yZXZlcnRBbGwoa2lsbCwgbWVkaWEpIHtcbiAgdmFyIHRyaWdnZXI7XG5cbiAgZm9yIChfaSA9IDA7IF9pIDwgX3RyaWdnZXJzLmxlbmd0aDsgX2krKykge1xuICAgIHRyaWdnZXIgPSBfdHJpZ2dlcnNbX2ldO1xuXG4gICAgaWYgKCFtZWRpYSB8fCB0cmlnZ2VyLm1lZGlhID09PSBtZWRpYSkge1xuICAgICAgaWYgKGtpbGwpIHtcbiAgICAgICAgdHJpZ2dlci5raWxsKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJpZ2dlci5yZXZlcnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtZWRpYSAmJiBfcmV2ZXJ0UmVjb3JkZWQobWVkaWEpO1xuICBtZWRpYSB8fCBfZGlzcGF0Y2goXCJyZXZlcnRcIik7XG59LFxuICAgIF9yZWZyZXNoaW5nQWxsLFxuICAgIF9yZWZyZXNoQWxsID0gZnVuY3Rpb24gX3JlZnJlc2hBbGwoZm9yY2UsIHNraXBSZXZlcnQpIHtcbiAgaWYgKF9sYXN0U2Nyb2xsVGltZSAmJiAhZm9yY2UpIHtcbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIF9yZWZyZXNoaW5nQWxsID0gdHJ1ZTtcblxuICB2YXIgcmVmcmVzaEluaXRzID0gX2Rpc3BhdGNoKFwicmVmcmVzaEluaXRcIik7XG5cbiAgX3NvcnQgJiYgU2Nyb2xsVHJpZ2dlci5zb3J0KCk7XG4gIHNraXBSZXZlcnQgfHwgX3JldmVydEFsbCgpO1xuXG4gIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQucmVmcmVzaCgpO1xuICB9KTsgLy8gZG9uJ3QgbG9vcCB3aXRoIF9pIGJlY2F1c2UgZHVyaW5nIGEgcmVmcmVzaCgpIHNvbWVvbmUgY291bGQgY2FsbCBTY3JvbGxUcmlnZ2VyLnVwZGF0ZSgpIHdoaWNoIHdvdWxkIGl0ZXJhdGUgdGhyb3VnaCBfaSByZXN1bHRpbmcgaW4gYSBza2lwLlxuXG5cbiAgcmVmcmVzaEluaXRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnJlbmRlciAmJiByZXN1bHQucmVuZGVyKC0xKTtcbiAgfSk7IC8vIGlmIHRoZSBvblJlZnJlc2hJbml0KCkgcmV0dXJucyBhbiBhbmltYXRpb24gKHR5cGljYWxseSBhIGdzYXAuc2V0KCkpLCByZXZlcnQgaXQuIFRoaXMgbWFrZXMgaXQgZWFzeSB0byBwdXQgdGhpbmdzIGluIGEgY2VydGFpbiBzcG90IGJlZm9yZSByZWZyZXNoaW5nIGZvciBtZWFzdXJlbWVudCBwdXJwb3NlcywgYW5kIHRoZW4gcHV0IHRoaW5ncyBiYWNrLlxuXG4gIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiAob2JqLnJlYyA9IDApO1xuICB9KTsgLy8gemVyby1vdXQgYWxsIHRoZSByZWNvcmRlZCBzY3JvbGwgcG9zaXRpb25zLiBEb24ndCB1c2UgX3RyaWdnZXJzIGJlY2F1c2UgaWYsIGZvciBleGFtcGxlLCAubWF0Y2hNZWRpYSgpIGlzIHVzZWQgdG8gY3JlYXRlIHNvbWUgU2Nyb2xsVHJpZ2dlcnMgYW5kIHRoZW4gdGhlIHVzZXIgcmVzaXplcyBhbmQgaXQgcmVtb3ZlcyBBTEwgU2Nyb2xsVHJpZ2dlcnMsIGFuZCB0aGVuIGdvIGJhY2sgdG8gYSBzaXplIHdoZXJlIHRoZXJlIGFyZSBTY3JvbGxUcmlnZ2VycywgaXQgd291bGQgaGF2ZSBrZXB0IHRoZSBwb3NpdGlvbihzKSBzYXZlZCBmcm9tIHRoZSBpbml0aWFsIHN0YXRlLlxuXG5cbiAgX3Jlc2l6ZURlbGF5LnBhdXNlKCk7XG5cbiAgX3JlZnJlc2hpbmdBbGwgPSBmYWxzZTtcblxuICBfZGlzcGF0Y2goXCJyZWZyZXNoXCIpO1xufSxcbiAgICBfbGFzdFNjcm9sbCA9IDAsXG4gICAgX2RpcmVjdGlvbiA9IDEsXG4gICAgX3VwZGF0ZUFsbCA9IGZ1bmN0aW9uIF91cGRhdGVBbGwoKSB7XG4gIGlmICghX3JlZnJlc2hpbmdBbGwpIHtcbiAgICB2YXIgbCA9IF90cmlnZ2Vycy5sZW5ndGgsXG4gICAgICAgIHRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgICByZWNvcmRWZWxvY2l0eSA9IHRpbWUgLSBfdGltZTEgPj0gNTAsXG4gICAgICAgIHNjcm9sbCA9IGwgJiYgX3RyaWdnZXJzWzBdLnNjcm9sbCgpO1xuXG4gICAgX2RpcmVjdGlvbiA9IF9sYXN0U2Nyb2xsID4gc2Nyb2xsID8gLTEgOiAxO1xuICAgIF9sYXN0U2Nyb2xsID0gc2Nyb2xsO1xuXG4gICAgaWYgKHJlY29yZFZlbG9jaXR5KSB7XG4gICAgICBpZiAoX2xhc3RTY3JvbGxUaW1lICYmICFfcG9pbnRlcklzRG93biAmJiB0aW1lIC0gX2xhc3RTY3JvbGxUaW1lID4gMjAwKSB7XG4gICAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IDA7XG5cbiAgICAgICAgX2Rpc3BhdGNoKFwic2Nyb2xsRW5kXCIpO1xuICAgICAgfVxuXG4gICAgICBfdGltZTIgPSBfdGltZTE7XG4gICAgICBfdGltZTEgPSB0aW1lO1xuICAgIH1cblxuICAgIGlmIChfZGlyZWN0aW9uIDwgMCkge1xuICAgICAgX2kgPSBsO1xuXG4gICAgICB3aGlsZSAoX2ktLSA+IDApIHtcbiAgICAgICAgX3RyaWdnZXJzW19pXSAmJiBfdHJpZ2dlcnNbX2ldLnVwZGF0ZSgwLCByZWNvcmRWZWxvY2l0eSk7XG4gICAgICB9XG5cbiAgICAgIF9kaXJlY3Rpb24gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBsOyBfaSsrKSB7XG4gICAgICAgIF90cmlnZ2Vyc1tfaV0gJiYgX3RyaWdnZXJzW19pXS51cGRhdGUoMCwgcmVjb3JkVmVsb2NpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9yZXF1ZXN0ID0gMDtcbiAgfVxufSxcbiAgICBfcHJvcE5hbWVzVG9Db3B5ID0gW19sZWZ0LCBfdG9wLCBfYm90dG9tLCBfcmlnaHQsIF9tYXJnaW4gKyBfQm90dG9tLCBfbWFyZ2luICsgX1JpZ2h0LCBfbWFyZ2luICsgX1RvcCwgX21hcmdpbiArIF9MZWZ0LCBcImRpc3BsYXlcIiwgXCJmbGV4U2hyaW5rXCIsIFwiZmxvYXRcIiwgXCJ6SW5kZXhcIiwgXCJncmlkLWNvbHVtbi1zdGFydFwiLCBcImdyaWQtY29sdW1uLWVuZFwiLCBcImdyaWQtcm93LXN0YXJ0XCIsIFwiZ3JpZC1yb3ctZW5kXCIsIFwiZ3JpZC1hcmVhXCIsIFwianVzdGlmeS1zZWxmXCIsIFwiYWxpZ24tc2VsZlwiLCBcInBsYWNlLXNlbGZcIl0sXG4gICAgX3N0YXRlUHJvcHMgPSBfcHJvcE5hbWVzVG9Db3B5LmNvbmNhdChbX3dpZHRoLCBfaGVpZ2h0LCBcImJveFNpemluZ1wiLCBcIm1heFwiICsgX1dpZHRoLCBcIm1heFwiICsgX0hlaWdodCwgXCJwb3NpdGlvblwiLCBfbWFyZ2luLCBfcGFkZGluZywgX3BhZGRpbmcgKyBfVG9wLCBfcGFkZGluZyArIF9SaWdodCwgX3BhZGRpbmcgKyBfQm90dG9tLCBfcGFkZGluZyArIF9MZWZ0XSksXG4gICAgX3N3YXBQaW5PdXQgPSBmdW5jdGlvbiBfc3dhcFBpbk91dChwaW4sIHNwYWNlciwgc3RhdGUpIHtcbiAgX3NldFN0YXRlKHN0YXRlKTtcblxuICBpZiAocGluLnBhcmVudE5vZGUgPT09IHNwYWNlcikge1xuICAgIHZhciBwYXJlbnQgPSBzcGFjZXIucGFyZW50Tm9kZTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocGluLCBzcGFjZXIpO1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHNwYWNlcik7XG4gICAgfVxuICB9XG59LFxuICAgIF9zd2FwUGluSW4gPSBmdW5jdGlvbiBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcywgc3BhY2VyU3RhdGUpIHtcbiAgaWYgKHBpbi5wYXJlbnROb2RlICE9PSBzcGFjZXIpIHtcbiAgICB2YXIgaSA9IF9wcm9wTmFtZXNUb0NvcHkubGVuZ3RoLFxuICAgICAgICBzcGFjZXJTdHlsZSA9IHNwYWNlci5zdHlsZSxcbiAgICAgICAgcGluU3R5bGUgPSBwaW4uc3R5bGUsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwID0gX3Byb3BOYW1lc1RvQ29weVtpXTtcbiAgICAgIHNwYWNlclN0eWxlW3BdID0gY3NbcF07XG4gICAgfVxuXG4gICAgc3BhY2VyU3R5bGUucG9zaXRpb24gPSBjcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiID8gXCJhYnNvbHV0ZVwiIDogXCJyZWxhdGl2ZVwiO1xuICAgIGNzLmRpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgKHNwYWNlclN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiKTtcbiAgICBwaW5TdHlsZVtfYm90dG9tXSA9IHBpblN0eWxlW19yaWdodF0gPSBcImF1dG9cIjtcbiAgICBzcGFjZXJTdHlsZS5vdmVyZmxvdyA9IFwidmlzaWJsZVwiO1xuICAgIHNwYWNlclN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuICAgIHNwYWNlclN0eWxlW193aWR0aF0gPSBfZ2V0U2l6ZShwaW4sIF9ob3Jpem9udGFsKSArIF9weDtcbiAgICBzcGFjZXJTdHlsZVtfaGVpZ2h0XSA9IF9nZXRTaXplKHBpbiwgX3ZlcnRpY2FsKSArIF9weDtcbiAgICBzcGFjZXJTdHlsZVtfcGFkZGluZ10gPSBwaW5TdHlsZVtfbWFyZ2luXSA9IHBpblN0eWxlW190b3BdID0gcGluU3R5bGVbX2xlZnRdID0gXCIwXCI7XG5cbiAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuXG4gICAgcGluU3R5bGVbX3dpZHRoXSA9IHBpblN0eWxlW1wibWF4XCIgKyBfV2lkdGhdID0gY3NbX3dpZHRoXTtcbiAgICBwaW5TdHlsZVtfaGVpZ2h0XSA9IHBpblN0eWxlW1wibWF4XCIgKyBfSGVpZ2h0XSA9IGNzW19oZWlnaHRdO1xuICAgIHBpblN0eWxlW19wYWRkaW5nXSA9IGNzW19wYWRkaW5nXTtcbiAgICBwaW4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3BhY2VyLCBwaW4pO1xuICAgIHNwYWNlci5hcHBlbmRDaGlsZChwaW4pO1xuICB9XG59LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfc2V0U3RhdGUgPSBmdW5jdGlvbiBfc2V0U3RhdGUoc3RhdGUpIHtcbiAgaWYgKHN0YXRlKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUudC5zdHlsZSxcbiAgICAgICAgbCA9IHN0YXRlLmxlbmd0aCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHAsXG4gICAgICAgIHZhbHVlO1xuICAgIChzdGF0ZS50Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZShzdGF0ZS50KSkudW5jYWNoZSA9IDE7IC8vIG90aGVyd2lzZSB0cmFuc2Zvcm1zIG1heSBiZSBvZmZcblxuICAgIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICB2YWx1ZSA9IHN0YXRlW2kgKyAxXTtcbiAgICAgIHAgPSBzdGF0ZVtpXTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHN0eWxlW3BdID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlW3BdKSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KHAucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdGF0ZSA9IGZ1bmN0aW9uIF9nZXRTdGF0ZShlbGVtZW50KSB7XG4gIC8vIHJldHVybnMgYW4gQXJyYXkgd2l0aCBhbHRlcm5hdGluZyB2YWx1ZXMgbGlrZSBbcHJvcGVydHksIHZhbHVlLCBwcm9wZXJ0eSwgdmFsdWVdIGFuZCBhIFwidFwiIHByb3BlcnR5IHBvaW50aW5nIHRvIHRoZSB0YXJnZXQgKGVsZW1lbnQpLiBNYWtlcyBpdCBmYXN0IGFuZCBjaGVhcC5cbiAgdmFyIGwgPSBfc3RhdGVQcm9wcy5sZW5ndGgsXG4gICAgICBzdHlsZSA9IGVsZW1lbnQuc3R5bGUsXG4gICAgICBzdGF0ZSA9IFtdLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICBzdGF0ZS5wdXNoKF9zdGF0ZVByb3BzW2ldLCBzdHlsZVtfc3RhdGVQcm9wc1tpXV0pO1xuICB9XG5cbiAgc3RhdGUudCA9IGVsZW1lbnQ7XG4gIHJldHVybiBzdGF0ZTtcbn0sXG4gICAgX2NvcHlTdGF0ZSA9IGZ1bmN0aW9uIF9jb3B5U3RhdGUoc3RhdGUsIG92ZXJyaWRlLCBvbWl0T2Zmc2V0cykge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICBsID0gc3RhdGUubGVuZ3RoLFxuICAgICAgaSA9IG9taXRPZmZzZXRzID8gOCA6IDAsXG4gICAgICAvLyBza2lwIHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSBpZiBvbWl0T2Zmc2V0cyBpcyB0cnVlXG4gIHA7XG5cbiAgZm9yICg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICBwID0gc3RhdGVbaV07XG4gICAgcmVzdWx0LnB1c2gocCwgcCBpbiBvdmVycmlkZSA/IG92ZXJyaWRlW3BdIDogc3RhdGVbaSArIDFdKTtcbiAgfVxuXG4gIHJlc3VsdC50ID0gc3RhdGUudDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX3dpbk9mZnNldHMgPSB7XG4gIGxlZnQ6IDAsXG4gIHRvcDogMFxufSxcbiAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKHZhbHVlLCB0cmlnZ2VyLCBzY3JvbGxlclNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsLCBtYXJrZXIsIG1hcmtlclNjcm9sbGVyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIHNjcm9sbGVyTWF4KSB7XG4gIF9pc0Z1bmN0aW9uKHZhbHVlKSAmJiAodmFsdWUgPSB2YWx1ZShzZWxmKSk7XG5cbiAgaWYgKF9pc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUuc3Vic3RyKDAsIDMpID09PSBcIm1heFwiKSB7XG4gICAgdmFsdWUgPSBzY3JvbGxlck1heCArICh2YWx1ZS5jaGFyQXQoNCkgPT09IFwiPVwiID8gX29mZnNldFRvUHgoXCIwXCIgKyB2YWx1ZS5zdWJzdHIoMyksIHNjcm9sbGVyU2l6ZSkgOiAwKTtcbiAgfVxuXG4gIGlmICghX2lzTnVtYmVyKHZhbHVlKSkge1xuICAgIF9pc0Z1bmN0aW9uKHRyaWdnZXIpICYmICh0cmlnZ2VyID0gdHJpZ2dlcihzZWxmKSk7XG5cbiAgICB2YXIgZWxlbWVudCA9IF90b0FycmF5KHRyaWdnZXIpWzBdIHx8IF9ib2R5LFxuICAgICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpIHx8IHt9LFxuICAgICAgICBvZmZzZXRzID0gdmFsdWUuc3BsaXQoXCIgXCIpLFxuICAgICAgICBsb2NhbE9mZnNldCxcbiAgICAgICAgZ2xvYmFsT2Zmc2V0LFxuICAgICAgICBkaXNwbGF5O1xuXG4gICAgaWYgKCghYm91bmRzIHx8ICFib3VuZHMubGVmdCAmJiAhYm91bmRzLnRvcCkgJiYgX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICAgIC8vIGlmIGRpc3BsYXkgaXMgXCJub25lXCIsIGl0IHdvbid0IHJlcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBwcm9wZXJseVxuICAgICAgZGlzcGxheSA9IGVsZW1lbnQuc3R5bGUuZGlzcGxheTtcbiAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgICBkaXNwbGF5ID8gZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheSA6IGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgIH1cblxuICAgIGxvY2FsT2Zmc2V0ID0gX29mZnNldFRvUHgob2Zmc2V0c1swXSwgYm91bmRzW2RpcmVjdGlvbi5kXSk7XG4gICAgZ2xvYmFsT2Zmc2V0ID0gX29mZnNldFRvUHgob2Zmc2V0c1sxXSB8fCBcIjBcIiwgc2Nyb2xsZXJTaXplKTtcbiAgICB2YWx1ZSA9IGJvdW5kc1tkaXJlY3Rpb24ucF0gLSBzY3JvbGxlckJvdW5kc1tkaXJlY3Rpb24ucF0gLSBib3JkZXJXaWR0aCArIGxvY2FsT2Zmc2V0ICsgc2Nyb2xsIC0gZ2xvYmFsT2Zmc2V0O1xuICAgIG1hcmtlclNjcm9sbGVyICYmIF9wb3NpdGlvbk1hcmtlcihtYXJrZXJTY3JvbGxlciwgZ2xvYmFsT2Zmc2V0LCBkaXJlY3Rpb24sIHNjcm9sbGVyU2l6ZSAtIGdsb2JhbE9mZnNldCA8IDIwIHx8IG1hcmtlclNjcm9sbGVyLl9pc1N0YXJ0ICYmIGdsb2JhbE9mZnNldCA+IDIwKTtcbiAgICBzY3JvbGxlclNpemUgLT0gc2Nyb2xsZXJTaXplIC0gZ2xvYmFsT2Zmc2V0OyAvLyBhZGp1c3QgZm9yIHRoZSBtYXJrZXJcbiAgfSBlbHNlIGlmIChtYXJrZXJTY3JvbGxlcikge1xuICAgIF9wb3NpdGlvbk1hcmtlcihtYXJrZXJTY3JvbGxlciwgc2Nyb2xsZXJTaXplLCBkaXJlY3Rpb24sIHRydWUpO1xuICB9XG5cbiAgaWYgKG1hcmtlcikge1xuICAgIHZhciBwb3NpdGlvbiA9IHZhbHVlICsgc2Nyb2xsZXJTaXplLFxuICAgICAgICBpc1N0YXJ0ID0gbWFya2VyLl9pc1N0YXJ0O1xuICAgIHNjcm9sbGVyTWF4ID0gXCJzY3JvbGxcIiArIGRpcmVjdGlvbi5kMjtcblxuICAgIF9wb3NpdGlvbk1hcmtlcihtYXJrZXIsIHBvc2l0aW9uLCBkaXJlY3Rpb24sIGlzU3RhcnQgJiYgcG9zaXRpb24gPiAyMCB8fCAhaXNTdGFydCAmJiAodXNlRml4ZWRQb3NpdGlvbiA/IE1hdGgubWF4KF9ib2R5W3Njcm9sbGVyTWF4XSwgX2RvY0VsW3Njcm9sbGVyTWF4XSkgOiBtYXJrZXIucGFyZW50Tm9kZVtzY3JvbGxlck1heF0pIDw9IHBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAodXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgc2Nyb2xsZXJCb3VuZHMgPSBfZ2V0Qm91bmRzKG1hcmtlclNjcm9sbGVyKTtcbiAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgKG1hcmtlci5zdHlsZVtkaXJlY3Rpb24ub3AucF0gPSBzY3JvbGxlckJvdW5kc1tkaXJlY3Rpb24ub3AucF0gLSBkaXJlY3Rpb24ub3AubSAtIG1hcmtlci5fb2Zmc2V0ICsgX3B4KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG59LFxuICAgIF9wcmVmaXhFeHAgPSAvKD86d2Via2l0fG1venxsZW5ndGh8Y3NzVGV4dHxpbnNldCkvaSxcbiAgICBfcmVwYXJlbnQgPSBmdW5jdGlvbiBfcmVwYXJlbnQoZWxlbWVudCwgcGFyZW50LCB0b3AsIGxlZnQpIHtcbiAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gcGFyZW50KSB7XG4gICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgICAgcCxcbiAgICAgICAgY3M7XG5cbiAgICBpZiAocGFyZW50ID09PSBfYm9keSkge1xuICAgICAgZWxlbWVudC5fc3RPcmlnID0gc3R5bGUuY3NzVGV4dDsgLy8gcmVjb3JkIG9yaWdpbmFsIGlubGluZSBzdHlsZXMgc28gd2UgY2FuIHJldmVydCB0aGVtIGxhdGVyXG5cbiAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICAgIGZvciAocCBpbiBjcykge1xuICAgICAgICAvLyBtdXN0IGNvcHkgYWxsIHJlbGV2YW50IHN0eWxlcyB0byBlbnN1cmUgdGhhdCBub3RoaW5nIGNoYW5nZXMgdmlzdWFsbHkgd2hlbiB3ZSByZXBhcmVudCB0byB0aGUgPGJvZHk+LiBTa2lwIHRoZSB2ZW5kb3IgcHJlZml4ZWQgb25lcy5cbiAgICAgICAgaWYgKCErcCAmJiAhX3ByZWZpeEV4cC50ZXN0KHApICYmIGNzW3BdICYmIHR5cGVvZiBzdHlsZVtwXSA9PT0gXCJzdHJpbmdcIiAmJiBwICE9PSBcIjBcIikge1xuICAgICAgICAgIHN0eWxlW3BdID0gY3NbcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3R5bGUudG9wID0gdG9wO1xuICAgICAgc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmNzc1RleHQgPSBlbGVtZW50Ll9zdE9yaWc7XG4gICAgfVxuXG4gICAgZ3NhcC5jb3JlLmdldENhY2hlKGVsZW1lbnQpLnVuY2FjaGUgPSAxO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfVxufSxcbiAgICAvLyByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byB0d2VlbiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGluIHRoZSBkaXJlY3Rpb24gcHJvdmlkZWQsIGFuZCB3aGVuIGRvaW5nIHNvIGl0J2xsIGFkZCBhIC50d2VlbiBwcm9wZXJ0eSB0byB0aGUgRlVOQ1RJT04gaXRzZWxmLCBhbmQgcmVtb3ZlIGl0IHdoZW4gdGhlIHR3ZWVuIGNvbXBsZXRlcyBvciBnZXRzIGtpbGxlZC4gVGhpcyBnaXZlcyB1cyBhIHdheSB0byBoYXZlIG11bHRpcGxlIFNjcm9sbFRyaWdnZXJzIHVzZSBhIGNlbnRyYWwgZnVuY3Rpb24gZm9yIGFueSBnaXZlbiBzY3JvbGxlciBhbmQgc2VlIGlmIHRoZXJlJ3MgYSBzY3JvbGwgdHdlZW4gcnVubmluZyAod2hpY2ggd291bGQgYWZmZWN0IGlmL2hvdyB0aGluZ3MgZ2V0IHVwZGF0ZWQpXG5fZ2V0VHdlZW5DcmVhdG9yID0gZnVuY3Rpb24gX2dldFR3ZWVuQ3JlYXRvcihzY3JvbGxlciwgZGlyZWN0aW9uKSB7XG4gIHZhciBnZXRTY3JvbGwgPSBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgIHByb3AgPSBcIl9zY3JvbGxcIiArIGRpcmVjdGlvbi5wMixcbiAgICAgIC8vIGFkZCBhIHR3ZWVuYWJsZSBwcm9wZXJ0eSB0byB0aGUgc2Nyb2xsZXIgdGhhdCdzIGEgZ2V0dGVyL3NldHRlciBmdW5jdGlvbiwgbGlrZSBfc2Nyb2xsVG9wIG9yIF9zY3JvbGxMZWZ0LiBUaGlzIHdheSwgaWYgc29tZW9uZSBkb2VzIGdzYXAua2lsbFR3ZWVuc09mKHNjcm9sbGVyKSBpdCdsbCBraWxsIHRoZSBzY3JvbGwgdHdlZW4uXG4gIGxhc3RTY3JvbGwxLFxuICAgICAgbGFzdFNjcm9sbDIsXG4gICAgICBnZXRUd2VlbiA9IGZ1bmN0aW9uIGdldFR3ZWVuKHNjcm9sbFRvLCB2YXJzLCBpbml0aWFsVmFsdWUsIGNoYW5nZTEsIGNoYW5nZTIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbixcbiAgICAgICAgb25Db21wbGV0ZSA9IHZhcnMub25Db21wbGV0ZSxcbiAgICAgICAgbW9kaWZpZXJzID0ge307XG4gICAgdHdlZW4gJiYgdHdlZW4ua2lsbCgpO1xuICAgIGxhc3RTY3JvbGwxID0gTWF0aC5yb3VuZChpbml0aWFsVmFsdWUpO1xuICAgIHZhcnNbcHJvcF0gPSBzY3JvbGxUbztcbiAgICB2YXJzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcblxuICAgIG1vZGlmaWVyc1twcm9wXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBfcm91bmQoZ2V0U2Nyb2xsKCkpOyAvLyByb3VuZCBiZWNhdXNlIGluIHNvbWUgW3ZlcnkgdW5jb21tb25dIFdpbmRvd3MgZW52aXJvbm1lbnRzLCBpdCBjYW4gZ2V0IHJlcG9ydGVkIHdpdGggZGVjaW1hbHMgZXZlbiB0aG91Z2ggaXQgd2FzIHNldCB3aXRob3V0LlxuXG4gICAgICBpZiAodmFsdWUgIT09IGxhc3RTY3JvbGwxICYmIHZhbHVlICE9PSBsYXN0U2Nyb2xsMiAmJiBNYXRoLmFicyh2YWx1ZSAtIGxhc3RTY3JvbGwxKSA+IDIpIHtcbiAgICAgICAgLy8gaWYgdGhlIHVzZXIgc2Nyb2xscywga2lsbCB0aGUgdHdlZW4uIGlPUyBTYWZhcmkgaW50ZXJtaXR0ZW50bHkgbWlzcmVwb3J0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uLCBpdCBtYXkgYmUgdGhlIG1vc3QgcmVjZW50bHktc2V0IG9uZSBvciB0aGUgb25lIGJlZm9yZSB0aGF0ISBXaGVuIFNhZmFyaSBpcyB6b29tZWQgKENNRC0rKSwgaXQgb2Z0ZW4gbWlzcmVwb3J0cyBhcyAxIHBpeGVsIG9mZiB0b28hIFNvIGlmIHdlIHNldCB0aGUgc2Nyb2xsIHBvc2l0aW9uIHRvIDEyNSwgZm9yIGV4YW1wbGUsIGl0J2xsIGFjdHVhbGx5IHJlcG9ydCBpdCBhcyAxMjQuXG4gICAgICAgIHR3ZWVuLmtpbGwoKTtcbiAgICAgICAgZ2V0VHdlZW4udHdlZW4gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBpbml0aWFsVmFsdWUgKyBjaGFuZ2UxICogdHdlZW4ucmF0aW8gKyBjaGFuZ2UyICogdHdlZW4ucmF0aW8gKiB0d2Vlbi5yYXRpbztcbiAgICAgIH1cblxuICAgICAgbGFzdFNjcm9sbDIgPSBsYXN0U2Nyb2xsMTtcbiAgICAgIHJldHVybiBsYXN0U2Nyb2xsMSA9IF9yb3VuZCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIHZhcnMub25Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZS5jYWxsKHR3ZWVuKTtcbiAgICB9O1xuXG4gICAgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbiA9IGdzYXAudG8oc2Nyb2xsZXIsIHZhcnMpO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfTtcblxuICBzY3JvbGxlcltwcm9wXSA9IGdldFNjcm9sbDtcbiAgc2Nyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0VHdlZW4udHdlZW4gJiYgZ2V0VHdlZW4udHdlZW4ua2lsbCgpICYmIChnZXRUd2Vlbi50d2VlbiA9IDApO1xuICB9LCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTsgLy8gV2luZG93cyBtYWNoaW5lcyBoYW5kbGUgbW91c2V3aGVlbCBzY3JvbGxpbmcgaW4gY2h1bmtzIChsaWtlIFwiMyBsaW5lcyBwZXIgc2Nyb2xsXCIpIG1lYW5pbmcgdGhlIHR5cGljYWwgc3RyYXRlZ3kgZm9yIGNhbmNlbGxpbmcgdGhlIHNjcm9sbCBpc24ndCBhcyBzZW5zaXRpdmUuIEl0J3MgbXVjaCBtb3JlIGxpa2VseSB0byBtYXRjaCBvbmUgb2YgdGhlIHByZXZpb3VzIDIgc2Nyb2xsIGV2ZW50IHBvc2l0aW9ucy4gU28gd2Uga2lsbCBhbnkgc25hcHBpbmcgYXMgc29vbiBhcyB0aGVyZSdzIGEgd2hlZWwgZXZlbnQuXG5cbiAgcmV0dXJuIGdldFR3ZWVuO1xufTtcblxuX2hvcml6b250YWwub3AgPSBfdmVydGljYWw7XG5leHBvcnQgdmFyIFNjcm9sbFRyaWdnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbikge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKGdzYXApIHx8IGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXCIpO1xuICAgIHRoaXMuaW5pdCh2YXJzLCBhbmltYXRpb24pO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNjcm9sbFRyaWdnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCh2YXJzLCBhbmltYXRpb24pIHtcbiAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5zdGFydCA9IDA7XG4gICAgdGhpcy52YXJzICYmIHRoaXMua2lsbCgxKTsgLy8gaW4gY2FzZSBpdCdzIGJlaW5nIGluaXR0ZWQgYWdhaW5cblxuICAgIGlmICghX2VuYWJsZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlID0gdGhpcy5yZWZyZXNoID0gdGhpcy5raWxsID0gX3Bhc3NUaHJvdWdoO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhcnMgPSBfc2V0RGVmYXVsdHMoX2lzU3RyaW5nKHZhcnMpIHx8IF9pc051bWJlcih2YXJzKSB8fCB2YXJzLm5vZGVUeXBlID8ge1xuICAgICAgdHJpZ2dlcjogdmFyc1xuICAgIH0gOiB2YXJzLCBfZGVmYXVsdHMpO1xuXG4gICAgdmFyIGRpcmVjdGlvbiA9IHZhcnMuaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsLFxuICAgICAgICBfdmFycyA9IHZhcnMsXG4gICAgICAgIG9uVXBkYXRlID0gX3ZhcnMub25VcGRhdGUsXG4gICAgICAgIHRvZ2dsZUNsYXNzID0gX3ZhcnMudG9nZ2xlQ2xhc3MsXG4gICAgICAgIGlkID0gX3ZhcnMuaWQsXG4gICAgICAgIG9uVG9nZ2xlID0gX3ZhcnMub25Ub2dnbGUsXG4gICAgICAgIG9uUmVmcmVzaCA9IF92YXJzLm9uUmVmcmVzaCxcbiAgICAgICAgc2NydWIgPSBfdmFycy5zY3J1YixcbiAgICAgICAgdHJpZ2dlciA9IF92YXJzLnRyaWdnZXIsXG4gICAgICAgIHBpbiA9IF92YXJzLnBpbixcbiAgICAgICAgcGluU3BhY2luZyA9IF92YXJzLnBpblNwYWNpbmcsXG4gICAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggPSBfdmFycy5pbnZhbGlkYXRlT25SZWZyZXNoLFxuICAgICAgICBhbnRpY2lwYXRlUGluID0gX3ZhcnMuYW50aWNpcGF0ZVBpbixcbiAgICAgICAgb25TY3J1YkNvbXBsZXRlID0gX3ZhcnMub25TY3J1YkNvbXBsZXRlLFxuICAgICAgICBvblNuYXBDb21wbGV0ZSA9IF92YXJzLm9uU25hcENvbXBsZXRlLFxuICAgICAgICBvbmNlID0gX3ZhcnMub25jZSxcbiAgICAgICAgc25hcCA9IF92YXJzLnNuYXAsXG4gICAgICAgIHBpblJlcGFyZW50ID0gX3ZhcnMucGluUmVwYXJlbnQsXG4gICAgICAgIGlzVG9nZ2xlID0gIXNjcnViICYmIHNjcnViICE9PSAwLFxuICAgICAgICBzY3JvbGxlciA9IF90b0FycmF5KHZhcnMuc2Nyb2xsZXIgfHwgX3dpbilbMF0sXG4gICAgICAgIHNjcm9sbGVyQ2FjaGUgPSBnc2FwLmNvcmUuZ2V0Q2FjaGUoc2Nyb2xsZXIpLFxuICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQoc2Nyb2xsZXIpLFxuICAgICAgICB1c2VGaXhlZFBvc2l0aW9uID0gXCJwaW5UeXBlXCIgaW4gdmFycyA/IHZhcnMucGluVHlwZSA9PT0gXCJmaXhlZFwiIDogaXNWaWV3cG9ydCB8fCBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcInBpblR5cGVcIikgPT09IFwiZml4ZWRcIixcbiAgICAgICAgY2FsbGJhY2tzID0gW3ZhcnMub25FbnRlciwgdmFycy5vbkxlYXZlLCB2YXJzLm9uRW50ZXJCYWNrLCB2YXJzLm9uTGVhdmVCYWNrXSxcbiAgICAgICAgdG9nZ2xlQWN0aW9ucyA9IGlzVG9nZ2xlICYmIHZhcnMudG9nZ2xlQWN0aW9ucy5zcGxpdChcIiBcIiksXG4gICAgICAgIG1hcmtlcnMgPSBcIm1hcmtlcnNcIiBpbiB2YXJzID8gdmFycy5tYXJrZXJzIDogX2RlZmF1bHRzLm1hcmtlcnMsXG4gICAgICAgIGJvcmRlcldpZHRoID0gaXNWaWV3cG9ydCA/IDAgOiBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGVyKVtcImJvcmRlclwiICsgZGlyZWN0aW9uLnAyICsgX1dpZHRoXSkgfHwgMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIG9uUmVmcmVzaEluaXQgPSB2YXJzLm9uUmVmcmVzaEluaXQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHZhcnMub25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICB9LFxuICAgICAgICBnZXRTY3JvbGxlclNpemUgPSBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbiksXG4gICAgICAgIGdldFNjcm9sbGVyT2Zmc2V0cyA9IF9nZXRPZmZzZXRzRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCksXG4gICAgICAgIGxhc3RTbmFwID0gMCxcbiAgICAgICAgdHdlZW5UbyxcbiAgICAgICAgcGluQ2FjaGUsXG4gICAgICAgIHNuYXBGdW5jLFxuICAgICAgICBzY3JvbGwxLFxuICAgICAgICBzY3JvbGwyLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICBtYXJrZXJTdGFydCxcbiAgICAgICAgbWFya2VyRW5kLFxuICAgICAgICBtYXJrZXJTdGFydFRyaWdnZXIsXG4gICAgICAgIG1hcmtlckVuZFRyaWdnZXIsXG4gICAgICAgIG1hcmtlclZhcnMsXG4gICAgICAgIGNoYW5nZSxcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSxcbiAgICAgICAgcGluQWN0aXZlU3RhdGUsXG4gICAgICAgIHBpblN0YXRlLFxuICAgICAgICBzcGFjZXIsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgcGluR2V0dGVyLFxuICAgICAgICBwaW5TZXR0ZXIsXG4gICAgICAgIHBpblN0YXJ0LFxuICAgICAgICBwaW5DaGFuZ2UsXG4gICAgICAgIHNwYWNpbmdTdGFydCxcbiAgICAgICAgc3BhY2VyU3RhdGUsXG4gICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyLFxuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIsXG4gICAgICAgIGNzLFxuICAgICAgICBzbmFwMSxcbiAgICAgICAgc25hcDIsXG4gICAgICAgIHNjcnViVHdlZW4sXG4gICAgICAgIHNjcnViU21vb3RoLFxuICAgICAgICBzbmFwRHVyQ2xhbXAsXG4gICAgICAgIHNuYXBEZWxheWVkQ2FsbCxcbiAgICAgICAgcHJldlByb2dyZXNzLFxuICAgICAgICBwcmV2U2Nyb2xsLFxuICAgICAgICBwcmV2QW5pbVByb2dyZXNzO1xuXG4gICAgc2VsZi5tZWRpYSA9IF9jcmVhdGluZ01lZGlhO1xuICAgIGFudGljaXBhdGVQaW4gKj0gNDU7XG4gICAgc2VsZi5zY3JvbGxlciA9IHNjcm9sbGVyO1xuICAgIHNlbGYuc2Nyb2xsID0gX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbik7XG4gICAgc2Nyb2xsMSA9IHNlbGYuc2Nyb2xsKCk7XG4gICAgc2VsZi52YXJzID0gdmFycztcbiAgICBhbmltYXRpb24gPSBhbmltYXRpb24gfHwgdmFycy5hbmltYXRpb247XG4gICAgXCJyZWZyZXNoUHJpb3JpdHlcIiBpbiB2YXJzICYmIChfc29ydCA9IDEpO1xuICAgIHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGwgPSBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsIHx8IHtcbiAgICAgIHRvcDogX2dldFR3ZWVuQ3JlYXRvcihzY3JvbGxlciwgX3ZlcnRpY2FsKSxcbiAgICAgIGxlZnQ6IF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIF9ob3Jpem9udGFsKVxuICAgIH07XG4gICAgc2VsZi50d2VlblRvID0gdHdlZW5UbyA9IHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGxbZGlyZWN0aW9uLnBdO1xuXG4gICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgYW5pbWF0aW9uLnZhcnMubGF6eSA9IGZhbHNlO1xuICAgICAgYW5pbWF0aW9uLl9pbml0dGVkIHx8IGFuaW1hdGlvbi52YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UgJiYgdmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlICYmIGFuaW1hdGlvbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBzZWxmLmFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXVzZSgpO1xuICAgICAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgPSBzZWxmO1xuICAgICAgc2NydWJTbW9vdGggPSBfaXNOdW1iZXIoc2NydWIpICYmIHNjcnViO1xuICAgICAgc2NydWJTbW9vdGggJiYgKHNjcnViVHdlZW4gPSBnc2FwLnRvKGFuaW1hdGlvbiwge1xuICAgICAgICBlYXNlOiBcInBvd2VyM1wiLFxuICAgICAgICBkdXJhdGlvbjogc2NydWJTbW9vdGgsXG4gICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgcmV0dXJuIG9uU2NydWJDb21wbGV0ZSAmJiBvblNjcnViQ29tcGxldGUoc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIHNuYXAxID0gMDtcbiAgICAgIGlkIHx8IChpZCA9IGFuaW1hdGlvbi52YXJzLmlkKTtcbiAgICB9XG5cbiAgICBfdHJpZ2dlcnMucHVzaChzZWxmKTtcblxuICAgIGlmIChzbmFwKSB7XG4gICAgICBpZiAoIV9pc09iamVjdChzbmFwKSB8fCBzbmFwLnB1c2gpIHtcbiAgICAgICAgc25hcCA9IHtcbiAgICAgICAgICBzbmFwVG86IHNuYXBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgXCJzY3JvbGxCZWhhdmlvclwiIGluIF9ib2R5LnN0eWxlICYmIGdzYXAuc2V0KGlzVmlld3BvcnQgPyBbX2JvZHksIF9kb2NFbF0gOiBzY3JvbGxlciwge1xuICAgICAgICBzY3JvbGxCZWhhdmlvcjogXCJhdXRvXCJcbiAgICAgIH0pOyAvLyBzbW9vdGggc2Nyb2xsaW5nIGRvZXNuJ3Qgd29yayB3aXRoIHNuYXAuXG5cbiAgICAgIHNuYXBGdW5jID0gX2lzRnVuY3Rpb24oc25hcC5zbmFwVG8pID8gc25hcC5zbmFwVG8gOiBzbmFwLnNuYXBUbyA9PT0gXCJsYWJlbHNcIiA/IF9nZXRDbG9zZXN0TGFiZWwoYW5pbWF0aW9uKSA6IHNuYXAuc25hcFRvID09PSBcImxhYmVsc0RpcmVjdGlvbmFsXCIgPyBfZ2V0TGFiZWxBdERpcmVjdGlvbihhbmltYXRpb24pIDogZ3NhcC51dGlscy5zbmFwKHNuYXAuc25hcFRvKTtcbiAgICAgIHNuYXBEdXJDbGFtcCA9IHNuYXAuZHVyYXRpb24gfHwge1xuICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgbWF4OiAyXG4gICAgICB9O1xuICAgICAgc25hcER1ckNsYW1wID0gX2lzT2JqZWN0KHNuYXBEdXJDbGFtcCkgPyBfY2xhbXAoc25hcER1ckNsYW1wLm1pbiwgc25hcER1ckNsYW1wLm1heCkgOiBfY2xhbXAoc25hcER1ckNsYW1wLCBzbmFwRHVyQ2xhbXApO1xuICAgICAgc25hcERlbGF5ZWRDYWxsID0gZ3NhcC5kZWxheWVkQ2FsbChzbmFwLmRlbGF5IHx8IHNjcnViU21vb3RoIC8gMiB8fCAwLjEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHNlbGYuZ2V0VmVsb2NpdHkoKSkgPCAxMCAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgbGFzdFNuYXAgIT09IHNlbGYuc2Nyb2xsKCkpIHtcbiAgICAgICAgICB2YXIgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogc2VsZi5wcm9ncmVzcyxcbiAgICAgICAgICAgICAgdmVsb2NpdHkgPSAodG90YWxQcm9ncmVzcyAtIHNuYXAyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIDEwMDAgfHwgMCxcbiAgICAgICAgICAgICAgY2hhbmdlMSA9IGdzYXAudXRpbHMuY2xhbXAoLXNlbGYucHJvZ3Jlc3MsIDEgLSBzZWxmLnByb2dyZXNzLCBfYWJzKHZlbG9jaXR5IC8gMikgKiB2ZWxvY2l0eSAvIDAuMTg1KSxcbiAgICAgICAgICAgICAgbmF0dXJhbEVuZCA9IHNlbGYucHJvZ3Jlc3MgKyAoc25hcC5pbmVydGlhID09PSBmYWxzZSA/IDAgOiBjaGFuZ2UxKSxcbiAgICAgICAgICAgICAgZW5kVmFsdWUgPSBfY2xhbXAoMCwgMSwgc25hcEZ1bmMobmF0dXJhbEVuZCwgc2VsZikpLFxuICAgICAgICAgICAgICBzY3JvbGwgPSBzZWxmLnNjcm9sbCgpLFxuICAgICAgICAgICAgICBlbmRTY3JvbGwgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgZW5kVmFsdWUgKiBjaGFuZ2UpLFxuICAgICAgICAgICAgICBfc25hcCA9IHNuYXAsXG4gICAgICAgICAgICAgIG9uU3RhcnQgPSBfc25hcC5vblN0YXJ0LFxuICAgICAgICAgICAgICBfb25JbnRlcnJ1cHQgPSBfc25hcC5vbkludGVycnVwdCxcbiAgICAgICAgICAgICAgX29uQ29tcGxldGUgPSBfc25hcC5vbkNvbXBsZXRlLFxuICAgICAgICAgICAgICB0d2VlbiA9IHR3ZWVuVG8udHdlZW47XG5cbiAgICAgICAgICBpZiAoc2Nyb2xsIDw9IGVuZCAmJiBzY3JvbGwgPj0gc3RhcnQgJiYgZW5kU2Nyb2xsICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICAgIGlmICh0d2VlbiAmJiAhdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uZGF0YSA8PSBNYXRoLmFicyhlbmRTY3JvbGwgLSBzY3JvbGwpKSB7XG4gICAgICAgICAgICAgIC8vIHRoZXJlJ3MgYW4gb3ZlcmxhcHBpbmcgc25hcCEgU28gd2UgbXVzdCBmaWd1cmUgb3V0IHdoaWNoIG9uZSBpcyBjbG9zZXIgYW5kIGxldCB0aGF0IHR3ZWVuIGxpdmUuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNuYXAuaW5lcnRpYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgY2hhbmdlMSA9IGVuZFZhbHVlIC0gc2VsZi5wcm9ncmVzcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHdlZW5UbyhlbmRTY3JvbGwsIHtcbiAgICAgICAgICAgICAgZHVyYXRpb246IHNuYXBEdXJDbGFtcChfYWJzKE1hdGgubWF4KF9hYnMobmF0dXJhbEVuZCAtIHRvdGFsUHJvZ3Jlc3MpLCBfYWJzKGVuZFZhbHVlIC0gdG90YWxQcm9ncmVzcykpICogMC4xODUgLyB2ZWxvY2l0eSAvIDAuMDUgfHwgMCkpLFxuICAgICAgICAgICAgICBlYXNlOiBzbmFwLmVhc2UgfHwgXCJwb3dlcjNcIixcbiAgICAgICAgICAgICAgZGF0YTogTWF0aC5hYnMoZW5kU2Nyb2xsIC0gc2Nyb2xsKSxcbiAgICAgICAgICAgICAgLy8gcmVjb3JkIHRoZSBkaXN0YW5jZSBzbyB0aGF0IGlmIGFub3RoZXIgc25hcCB0d2VlbiBvY2N1cnMgKGNvbmZsaWN0KSB3ZSBjYW4gcHJpb3JpdGl6ZSB0aGUgY2xvc2VzdCBzbmFwLlxuICAgICAgICAgICAgICBvbkludGVycnVwdDogZnVuY3Rpb24gb25JbnRlcnJ1cHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpICYmIF9vbkludGVycnVwdCAmJiBfb25JbnRlcnJ1cHQoc2VsZik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgbGFzdFNuYXAgPSBzZWxmLnNjcm9sbCgpO1xuICAgICAgICAgICAgICAgIHNuYXAxID0gc25hcDIgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgb25TbmFwQ29tcGxldGUgJiYgb25TbmFwQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgICAgX29uQ29tcGxldGUgJiYgX29uQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHNjcm9sbCwgY2hhbmdlMSAqIGNoYW5nZSwgZW5kU2Nyb2xsIC0gc2Nyb2xsIC0gY2hhbmdlMSAqIGNoYW5nZSk7XG4gICAgICAgICAgICBvblN0YXJ0ICYmIG9uU3RhcnQoc2VsZiwgdHdlZW5Uby50d2Vlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuaXNBY3RpdmUpIHtcbiAgICAgICAgICBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSkucGF1c2UoKTtcbiAgICB9XG5cbiAgICBpZCAmJiAoX2lkc1tpZF0gPSBzZWxmKTtcbiAgICB0cmlnZ2VyID0gc2VsZi50cmlnZ2VyID0gX3RvQXJyYXkodHJpZ2dlciB8fCBwaW4pWzBdO1xuICAgIHBpbiA9IHBpbiA9PT0gdHJ1ZSA/IHRyaWdnZXIgOiBfdG9BcnJheShwaW4pWzBdO1xuICAgIF9pc1N0cmluZyh0b2dnbGVDbGFzcykgJiYgKHRvZ2dsZUNsYXNzID0ge1xuICAgICAgdGFyZ2V0czogdHJpZ2dlcixcbiAgICAgIGNsYXNzTmFtZTogdG9nZ2xlQ2xhc3NcbiAgICB9KTtcblxuICAgIGlmIChwaW4pIHtcbiAgICAgIHBpblNwYWNpbmcgPT09IGZhbHNlIHx8IHBpblNwYWNpbmcgPT09IF9tYXJnaW4gfHwgKHBpblNwYWNpbmcgPSAhcGluU3BhY2luZyAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4ucGFyZW50Tm9kZSkuZGlzcGxheSA9PT0gXCJmbGV4XCIgPyBmYWxzZSA6IF9wYWRkaW5nKTsgLy8gaWYgdGhlIHBhcmVudCBpcyBkaXNwbGF5OiBmbGV4LCBkb24ndCBhcHBseSBwaW5TcGFjaW5nIGJ5IGRlZmF1bHQuXG5cbiAgICAgIHNlbGYucGluID0gcGluO1xuICAgICAgdmFycy5mb3JjZTNEICE9PSBmYWxzZSAmJiBnc2FwLnNldChwaW4sIHtcbiAgICAgICAgZm9yY2UzRDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBwaW5DYWNoZSA9IGdzYXAuY29yZS5nZXRDYWNoZShwaW4pO1xuXG4gICAgICBpZiAoIXBpbkNhY2hlLnNwYWNlcikge1xuICAgICAgICAvLyByZWNvcmQgdGhlIHNwYWNlciBhbmQgcGluT3JpZ2luYWxTdGF0ZSBvbiB0aGUgY2FjaGUgaW4gY2FzZSBzb21lb25lIHRyaWVzIHBpbm5pbmcgdGhlIHNhbWUgZWxlbWVudCB3aXRoIE1VTFRJUExFIFNjcm9sbFRyaWdnZXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBoYXZlIG11bHRpcGxlIHNwYWNlcnMgb3IgcmVjb3JkIHRoZSBcIm9yaWdpbmFsXCIgcGluIHN0YXRlIGFmdGVyIGl0IGhhcyBhbHJlYWR5IGJlZW4gYWZmZWN0ZWQgYnkgYW5vdGhlciBTY3JvbGxUcmlnZ2VyLlxuICAgICAgICBwaW5DYWNoZS5zcGFjZXIgPSBzcGFjZXIgPSBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHNwYWNlci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInBpbi1zcGFjZXJcIiArIChpZCA/IFwiIHBpbi1zcGFjZXItXCIgKyBpZCA6IFwiXCIpKTtcbiAgICAgICAgcGluQ2FjaGUucGluU3RhdGUgPSBwaW5PcmlnaW5hbFN0YXRlID0gX2dldFN0YXRlKHBpbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaW5PcmlnaW5hbFN0YXRlID0gcGluQ2FjaGUucGluU3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuc3BhY2VyID0gc3BhY2VyID0gcGluQ2FjaGUuc3BhY2VyO1xuICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgc3BhY2luZ1N0YXJ0ID0gY3NbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdO1xuICAgICAgcGluR2V0dGVyID0gZ3NhcC5nZXRQcm9wZXJ0eShwaW4pO1xuICAgICAgcGluU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihwaW4sIGRpcmVjdGlvbi5hLCBfcHgpOyAvLyBwaW4uZmlyc3RDaGlsZCAmJiAhX21heFNjcm9sbChwaW4sIGRpcmVjdGlvbikgJiYgKHBpbi5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCIpOyAvLyBwcm90ZWN0cyBmcm9tIGNvbGxhcHNpbmcgbWFyZ2lucywgYnV0IGNhbiBoYXZlIHVuaW50ZW5kZWQgY29uc2VxdWVuY2VzIGFzIGRlbW9uc3RyYXRlZCBoZXJlOiBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi8xZTQyYzdhNzNiZmE0MDlkMmNmMWUxODRlN2E0MjQ4ZCBzbyBpdCB3YXMgcmVtb3ZlZCBpbiBmYXZvciBvZiBqdXN0IHRlbGxpbmcgcGVvcGxlIHRvIHNldCB1cCB0aGVpciBDU1MgdG8gYXZvaWQgdGhlIGNvbGxhcHNpbmcgbWFyZ2lucyAob3ZlcmZsb3c6IGhpZGRlbiB8IGF1dG8gaXMganVzdCBvbmUgb3B0aW9uLiBBbm90aGVyIGlzIGJvcmRlci10b3A6IDFweCBzb2xpZCB0cmFuc3BhcmVudCkuXG5cbiAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICB9XG5cbiAgICBpZiAobWFya2Vycykge1xuICAgICAgbWFya2VyVmFycyA9IF9pc09iamVjdChtYXJrZXJzKSA/IF9zZXREZWZhdWx0cyhtYXJrZXJzLCBfbWFya2VyRGVmYXVsdHMpIDogX21hcmtlckRlZmF1bHRzO1xuICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLXN0YXJ0XCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwKTtcbiAgICAgIG1hcmtlckVuZFRyaWdnZXIgPSBfY3JlYXRlTWFya2VyKFwic2Nyb2xsZXItZW5kXCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwLCBtYXJrZXJTdGFydFRyaWdnZXIpO1xuICAgICAgb2Zmc2V0ID0gbWFya2VyU3RhcnRUcmlnZ2VyW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuICAgICAgbWFya2VyU3RhcnQgPSBfY3JlYXRlTWFya2VyKFwic3RhcnRcIiwgaWQsIHNjcm9sbGVyLCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIG9mZnNldCk7XG4gICAgICBtYXJrZXJFbmQgPSBfY3JlYXRlTWFya2VyKFwiZW5kXCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQpO1xuXG4gICAgICBpZiAoIXVzZUZpeGVkUG9zaXRpb24gJiYgIShfcHJveGllcy5sZW5ndGggJiYgX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJmaXhlZE1hcmtlcnNcIikgPT09IHRydWUpKSB7XG4gICAgICAgIF9tYWtlUG9zaXRpb25hYmxlKGlzVmlld3BvcnQgPyBfYm9keSA6IHNjcm9sbGVyKTtcblxuICAgICAgICBnc2FwLnNldChbbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXSwge1xuICAgICAgICAgIGZvcmNlM0Q6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihtYXJrZXJTdGFydFRyaWdnZXIsIGRpcmVjdGlvbi5hLCBfcHgpO1xuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIgPSBnc2FwLnF1aWNrU2V0dGVyKG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5hLCBfcHgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYucmV2ZXJ0ID0gZnVuY3Rpb24gKHJldmVydCkge1xuICAgICAgdmFyIHIgPSByZXZlcnQgIT09IGZhbHNlIHx8ICFzZWxmLmVuYWJsZWQsXG4gICAgICAgICAgcHJldlJlZnJlc2hpbmcgPSBfcmVmcmVzaGluZztcblxuICAgICAgaWYgKHIgIT09IHNlbGYuaXNSZXZlcnRlZCkge1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHNlbGYuc2Nyb2xsLnJlYyB8fCAoc2VsZi5zY3JvbGwucmVjID0gc2VsZi5zY3JvbGwoKSk7XG4gICAgICAgICAgcHJldlNjcm9sbCA9IE1hdGgubWF4KHNlbGYuc2Nyb2xsKCksIHNlbGYuc2Nyb2xsLnJlYyB8fCAwKTsgLy8gcmVjb3JkIHRoZSBzY3JvbGwgc28gd2UgY2FuIHJldmVydCBsYXRlciAocmVwb3NpdGlvbmluZy9waW5uaW5nIHRoaW5ncyBjYW4gYWZmZWN0IHNjcm9sbCBwb3NpdGlvbikuIEluIHRoZSBzdGF0aWMgcmVmcmVzaCgpIG1ldGhvZCwgd2UgZmlyc3QgcmVjb3JkIGFsbCB0aGUgc2Nyb2xsIHBvc2l0aW9ucyBhcyBhIHJlZmVyZW5jZS5cblxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5zdHlsZS5kaXNwbGF5ID0gciA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICAgICAgICB9KTtcbiAgICAgICAgciAmJiAoX3JlZnJlc2hpbmcgPSAxKTtcbiAgICAgICAgc2VsZi51cGRhdGUocik7IC8vIG1ha2Ugc3VyZSB0aGUgcGluIGlzIGJhY2sgaW4gaXRzIG9yaWdpbmFsIHBvc2l0aW9uIHNvIHRoYXQgYWxsIHRoZSBtZWFzdXJlbWVudHMgYXJlIGNvcnJlY3QuXG5cbiAgICAgICAgX3JlZnJlc2hpbmcgPSBwcmV2UmVmcmVzaGluZztcbiAgICAgICAgcGluICYmIChyID8gX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHBpbk9yaWdpbmFsU3RhdGUpIDogKCFwaW5SZXBhcmVudCB8fCAhc2VsZi5pc0FjdGl2ZSkgJiYgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgX2dldENvbXB1dGVkU3R5bGUocGluKSwgc3BhY2VyU3RhdGUpKTtcbiAgICAgICAgc2VsZi5pc1JldmVydGVkID0gcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5yZWZyZXNoID0gZnVuY3Rpb24gKHNvZnQsIGZvcmNlKSB7XG4gICAgICBpZiAoKF9yZWZyZXNoaW5nIHx8ICFzZWxmLmVuYWJsZWQpICYmICFmb3JjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW4gJiYgc29mdCAmJiBfbGFzdFNjcm9sbFRpbWUpIHtcbiAgICAgICAgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfcmVmcmVzaGluZyA9IDE7XG4gICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggJiYgYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5wcm9ncmVzcygwKS5pbnZhbGlkYXRlKCk7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgfHwgc2VsZi5yZXZlcnQoKTtcblxuICAgICAgdmFyIHNpemUgPSBnZXRTY3JvbGxlclNpemUoKSxcbiAgICAgICAgICBzY3JvbGxlckJvdW5kcyA9IGdldFNjcm9sbGVyT2Zmc2V0cygpLFxuICAgICAgICAgIG1heCA9IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICAgICAgb2Zmc2V0ID0gMCxcbiAgICAgICAgICBvdGhlclBpbk9mZnNldCA9IDAsXG4gICAgICAgICAgcGFyc2VkRW5kID0gdmFycy5lbmQsXG4gICAgICAgICAgcGFyc2VkRW5kVHJpZ2dlciA9IHZhcnMuZW5kVHJpZ2dlciB8fCB0cmlnZ2VyLFxuICAgICAgICAgIHBhcnNlZFN0YXJ0ID0gdmFycy5zdGFydCB8fCAodmFycy5zdGFydCA9PT0gMCB8fCAhdHJpZ2dlciA/IDAgOiBwaW4gPyBcIjAgMFwiIDogXCIwIDEwMCVcIiksXG4gICAgICAgICAgcGlubmVkQ29udGFpbmVyID0gdmFycy5waW5uZWRDb250YWluZXIgJiYgX3RvQXJyYXkodmFycy5waW5uZWRDb250YWluZXIpWzBdLFxuICAgICAgICAgIHRyaWdnZXJJbmRleCA9IHRyaWdnZXIgJiYgTWF0aC5tYXgoMCwgX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikpIHx8IDAsXG4gICAgICAgICAgaSA9IHRyaWdnZXJJbmRleCxcbiAgICAgICAgICBjcyxcbiAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgc2Nyb2xsLFxuICAgICAgICAgIGlzVmVydGljYWwsXG4gICAgICAgICAgb3ZlcnJpZGUsXG4gICAgICAgICAgY3VyVHJpZ2dlcixcbiAgICAgICAgICBjdXJQaW4sXG4gICAgICAgICAgb3Bwb3NpdGVTY3JvbGwsXG4gICAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgICByZXZlcnRlZFBpbnM7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgLy8gdXNlciBtaWdodCB0cnkgdG8gcGluIHRoZSBzYW1lIGVsZW1lbnQgbW9yZSB0aGFuIG9uY2UsIHNvIHdlIG11c3QgZmluZCBhbnkgcHJpb3IgdHJpZ2dlcnMgd2l0aCB0aGUgc2FtZSBwaW4sIHJldmVydCB0aGVtLCBhbmQgZGV0ZXJtaW5lIGhvdyBsb25nIHRoZXkncmUgcGlubmluZyBzbyB0aGF0IHdlIGNhbiBvZmZzZXQgdGhpbmdzIGFwcHJvcHJpYXRlbHkuIE1ha2Ugc3VyZSB3ZSByZXZlcnQgZnJvbSBsYXN0IHRvIGZpcnN0IHNvIHRoYXQgdGhpbmdzIFwicmV3aW5kXCIgcHJvcGVybHkuXG4gICAgICAgIGN1clRyaWdnZXIgPSBfdHJpZ2dlcnNbaV07XG4gICAgICAgIGN1clRyaWdnZXIuZW5kIHx8IGN1clRyaWdnZXIucmVmcmVzaCgwLCAxKSB8fCAoX3JlZnJlc2hpbmcgPSAxKTsgLy8gaWYgaXQncyBhIHRpbWVsaW5lLWJhc2VkIHRyaWdnZXIgdGhhdCBoYXNuJ3QgYmVlbiBmdWxseSBpbml0aWFsaXplZCB5ZXQgYmVjYXVzZSBpdCdzIHdhaXRpbmcgZm9yIDEgdGljaywganVzdCBmb3JjZSB0aGUgcmVmcmVzaCgpIGhlcmUsIG90aGVyd2lzZSBpZiBpdCBjb250YWlucyBhIHBpbiB0aGF0J3Mgc3VwcG9zZWQgdG8gYWZmZWN0IG90aGVyIFNjcm9sbFRyaWdnZXJzIGZ1cnRoZXIgZG93biB0aGUgcGFnZSwgdGhleSB3b24ndCBiZSBhZGp1c3RlZCBwcm9wZXJseS5cblxuICAgICAgICBjdXJQaW4gPSBjdXJUcmlnZ2VyLnBpbjtcblxuICAgICAgICBpZiAoY3VyUGluICYmIChjdXJQaW4gPT09IHRyaWdnZXIgfHwgY3VyUGluID09PSBwaW4pICYmICFjdXJUcmlnZ2VyLmlzUmV2ZXJ0ZWQpIHtcbiAgICAgICAgICByZXZlcnRlZFBpbnMgfHwgKHJldmVydGVkUGlucyA9IFtdKTtcbiAgICAgICAgICByZXZlcnRlZFBpbnMudW5zaGlmdChjdXJUcmlnZ2VyKTsgLy8gd2UnbGwgcmV2ZXJ0IGZyb20gZmlyc3QgdG8gbGFzdCB0byBtYWtlIHN1cmUgdGhpbmdzIHJlYWNoIHRoZWlyIGVuZCBzdGF0ZSBwcm9wZXJseVxuXG4gICAgICAgICAgY3VyVHJpZ2dlci5yZXZlcnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdGFydCA9IF9wYXJzZVBvc2l0aW9uKHBhcnNlZFN0YXJ0LCB0cmlnZ2VyLCBzaXplLCBkaXJlY3Rpb24sIHNlbGYuc2Nyb2xsKCksIG1hcmtlclN0YXJ0LCBtYXJrZXJTdGFydFRyaWdnZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgbWF4KSB8fCAocGluID8gLTAuMDAxIDogMCk7XG4gICAgICBfaXNGdW5jdGlvbihwYXJzZWRFbmQpICYmIChwYXJzZWRFbmQgPSBwYXJzZWRFbmQoc2VsZikpO1xuXG4gICAgICBpZiAoX2lzU3RyaW5nKHBhcnNlZEVuZCkgJiYgIXBhcnNlZEVuZC5pbmRleE9mKFwiKz1cIikpIHtcbiAgICAgICAgaWYgKH5wYXJzZWRFbmQuaW5kZXhPZihcIiBcIikpIHtcbiAgICAgICAgICBwYXJzZWRFbmQgPSAoX2lzU3RyaW5nKHBhcnNlZFN0YXJ0KSA/IHBhcnNlZFN0YXJ0LnNwbGl0KFwiIFwiKVswXSA6IFwiXCIpICsgcGFyc2VkRW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZnNldCA9IF9vZmZzZXRUb1B4KHBhcnNlZEVuZC5zdWJzdHIoMiksIHNpemUpO1xuICAgICAgICAgIHBhcnNlZEVuZCA9IF9pc1N0cmluZyhwYXJzZWRTdGFydCkgPyBwYXJzZWRTdGFydCA6IHN0YXJ0ICsgb2Zmc2V0OyAvLyBfcGFyc2VQb3NpdGlvbiB3b24ndCBmYWN0b3IgaW4gdGhlIG9mZnNldCBpZiB0aGUgc3RhcnQgaXMgYSBudW1iZXIsIHNvIGRvIGl0IGhlcmUuXG5cbiAgICAgICAgICBwYXJzZWRFbmRUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbmQgPSBNYXRoLm1heChzdGFydCwgX3BhcnNlUG9zaXRpb24ocGFyc2VkRW5kIHx8IChwYXJzZWRFbmRUcmlnZ2VyID8gXCIxMDAlIDBcIiA6IG1heCksIHBhcnNlZEVuZFRyaWdnZXIsIHNpemUsIGRpcmVjdGlvbiwgc2VsZi5zY3JvbGwoKSArIG9mZnNldCwgbWFya2VyRW5kLCBtYXJrZXJFbmRUcmlnZ2VyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIG1heCkpIHx8IC0wLjAwMTtcbiAgICAgIGNoYW5nZSA9IGVuZCAtIHN0YXJ0IHx8IChzdGFydCAtPSAwLjAxKSAmJiAwLjAwMTtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgICBpID0gdHJpZ2dlckluZGV4O1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGN1clRyaWdnZXIgPSBfdHJpZ2dlcnNbaV07XG4gICAgICAgIGN1clBpbiA9IGN1clRyaWdnZXIucGluO1xuXG4gICAgICAgIGlmIChjdXJQaW4gJiYgY3VyVHJpZ2dlci5zdGFydCAtIGN1clRyaWdnZXIuX3BpblB1c2ggPCBzdGFydCkge1xuICAgICAgICAgIGNzID0gY3VyVHJpZ2dlci5lbmQgLSBjdXJUcmlnZ2VyLnN0YXJ0O1xuICAgICAgICAgIChjdXJQaW4gPT09IHRyaWdnZXIgfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmIChvZmZzZXQgKz0gY3MpO1xuICAgICAgICAgIGN1clBpbiA9PT0gcGluICYmIChvdGhlclBpbk9mZnNldCArPSBjcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RhcnQgKz0gb2Zmc2V0O1xuICAgICAgZW5kICs9IG9mZnNldDtcbiAgICAgIHNlbGYuX3BpblB1c2ggPSBvdGhlclBpbk9mZnNldDtcblxuICAgICAgaWYgKG1hcmtlclN0YXJ0ICYmIG9mZnNldCkge1xuICAgICAgICAvLyBvZmZzZXQgdGhlIG1hcmtlcnMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGNzID0ge307XG4gICAgICAgIGNzW2RpcmVjdGlvbi5hXSA9IFwiKz1cIiArIG9mZnNldDtcbiAgICAgICAgcGlubmVkQ29udGFpbmVyICYmIChjc1tkaXJlY3Rpb24ucF0gPSBcIi09XCIgKyBzZWxmLnNjcm9sbCgpKTtcbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0LCBtYXJrZXJFbmRdLCBjcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgICBpc1ZlcnRpY2FsID0gZGlyZWN0aW9uID09PSBfdmVydGljYWw7XG4gICAgICAgIHNjcm9sbCA9IHNlbGYuc2Nyb2xsKCk7IC8vIHJlY2FsY3VsYXRlIGJlY2F1c2UgdGhlIHRyaWdnZXJzIGNhbiBhZmZlY3QgdGhlIHNjcm9sbFxuXG4gICAgICAgIHBpblN0YXJ0ID0gcGFyc2VGbG9hdChwaW5HZXR0ZXIoZGlyZWN0aW9uLmEpKSArIG90aGVyUGluT2Zmc2V0O1xuICAgICAgICAhbWF4ICYmIGVuZCA+IDEgJiYgKChpc1ZpZXdwb3J0ID8gX2JvZHkgOiBzY3JvbGxlcikuc3R5bGVbXCJvdmVyZmxvdy1cIiArIGRpcmVjdGlvbi5hXSA9IFwic2Nyb2xsXCIpOyAvLyBtYWtlcyBzdXJlIHRoZSBzY3JvbGxlciBoYXMgYSBzY3JvbGxiYXIsIG90aGVyd2lzZSBpZiBzb21ldGhpbmcgaGFzIHdpZHRoOiAxMDAlLCBmb3IgZXhhbXBsZSwgaXQgd291bGQgYmUgdG9vIGJpZyAoZXhjbHVkZSB0aGUgc2Nyb2xsYmFyKS4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjUxODItc2Nyb2xsdHJpZ2dlci13aWR0aC1vZi1wYWdlLWluY3JlYXNlLXdoZXJlLW1hcmtlcnMtYXJlLXNldC10by1mYWxzZS9cblxuICAgICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcyk7XG5cbiAgICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTsgLy8gdHJhbnNmb3JtcyB3aWxsIGludGVyZmVyZSB3aXRoIHRoZSB0b3AvbGVmdC9yaWdodC9ib3R0b20gcGxhY2VtZW50LCBzbyByZW1vdmUgdGhlbSB0ZW1wb3JhcmlseS4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgZmFjdG9ycyBpbiB0cmFuc2Zvcm1zLlxuXG4gICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMocGluLCB0cnVlKTtcbiAgICAgICAgb3Bwb3NpdGVTY3JvbGwgPSB1c2VGaXhlZFBvc2l0aW9uICYmIF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBpc1ZlcnRpY2FsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpKCk7XG5cbiAgICAgICAgaWYgKHBpblNwYWNpbmcpIHtcbiAgICAgICAgICBzcGFjZXJTdGF0ZSA9IFtwaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMiwgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgKyBfcHhdO1xuICAgICAgICAgIHNwYWNlclN0YXRlLnQgPSBzcGFjZXI7XG4gICAgICAgICAgaSA9IHBpblNwYWNpbmcgPT09IF9wYWRkaW5nID8gX2dldFNpemUocGluLCBkaXJlY3Rpb24pICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgOiAwO1xuICAgICAgICAgIGkgJiYgc3BhY2VyU3RhdGUucHVzaChkaXJlY3Rpb24uZCwgaSArIF9weCk7IC8vIGZvciBib3gtc2l6aW5nOiBib3JkZXItYm94IChtdXN0IGluY2x1ZGUgcGFkZGluZykuXG5cbiAgICAgICAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuXG4gICAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiBzZWxmLnNjcm9sbChwcmV2U2Nyb2xsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgb3ZlcnJpZGUgPSB7XG4gICAgICAgICAgICB0b3A6IGJvdW5kcy50b3AgKyAoaXNWZXJ0aWNhbCA/IHNjcm9sbCAtIHN0YXJ0IDogb3Bwb3NpdGVTY3JvbGwpICsgX3B4LFxuICAgICAgICAgICAgbGVmdDogYm91bmRzLmxlZnQgKyAoaXNWZXJ0aWNhbCA/IG9wcG9zaXRlU2Nyb2xsIDogc2Nyb2xsIC0gc3RhcnQpICsgX3B4LFxuICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCJcbiAgICAgICAgICB9O1xuICAgICAgICAgIG92ZXJyaWRlW193aWR0aF0gPSBvdmVycmlkZVtcIm1heFwiICsgX1dpZHRoXSA9IE1hdGguY2VpbChib3VuZHMud2lkdGgpICsgX3B4O1xuICAgICAgICAgIG92ZXJyaWRlW19oZWlnaHRdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9IZWlnaHRdID0gTWF0aC5jZWlsKGJvdW5kcy5oZWlnaHQpICsgX3B4O1xuICAgICAgICAgIG92ZXJyaWRlW19tYXJnaW5dID0gb3ZlcnJpZGVbX21hcmdpbiArIF9Ub3BdID0gb3ZlcnJpZGVbX21hcmdpbiArIF9SaWdodF0gPSBvdmVycmlkZVtfbWFyZ2luICsgX0JvdHRvbV0gPSBvdmVycmlkZVtfbWFyZ2luICsgX0xlZnRdID0gXCIwXCI7XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmddID0gY3NbX3BhZGRpbmddO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1RvcF0gPSBjc1tfcGFkZGluZyArIF9Ub3BdO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1JpZ2h0XSA9IGNzW19wYWRkaW5nICsgX1JpZ2h0XTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9Cb3R0b21dID0gY3NbX3BhZGRpbmcgKyBfQm90dG9tXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9MZWZ0XSA9IGNzW19wYWRkaW5nICsgX0xlZnRdO1xuICAgICAgICAgIHBpbkFjdGl2ZVN0YXRlID0gX2NvcHlTdGF0ZShwaW5PcmlnaW5hbFN0YXRlLCBvdmVycmlkZSwgcGluUmVwYXJlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgIC8vIHRoZSBhbmltYXRpb24gbWlnaHQgYmUgYWZmZWN0aW5nIHRoZSB0cmFuc2Zvcm0sIHNvIHdlIG11c3QganVtcCB0byB0aGUgZW5kLCBjaGVjayB0aGUgdmFsdWUsIGFuZCBjb21wZW5zYXRlIGFjY29yZGluZ2x5LiBPdGhlcndpc2UsIHdoZW4gaXQgYmVjb21lcyB1bnBpbm5lZCwgdGhlIHBpblNldHRlcigpIHdpbGwgZ2V0IHNldCB0byBhIHZhbHVlIHRoYXQgZG9lc24ndCBpbmNsdWRlIHdoYXRldmVyIHRoZSBhbmltYXRpb24gZGlkLlxuICAgICAgICAgIGluaXR0ZWQgPSBhbmltYXRpb24uX2luaXR0ZWQ7IC8vIGlmIG5vdCwgd2UgbXVzdCBpbnZhbGlkYXRlKCkgYWZ0ZXIgdGhpcyBzdGVwLCBvdGhlcndpc2UgaXQgY291bGQgbG9jayBpbiBzdGFydGluZyB2YWx1ZXMgcHJlbWF0dXJlbHkuXG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDEpO1xuXG4gICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcihhbmltYXRpb24uZHVyYXRpb24oKSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgcGluQ2hhbmdlID0gcGluR2V0dGVyKGRpcmVjdGlvbi5hKSAtIHBpblN0YXJ0ICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQ7XG4gICAgICAgICAgY2hhbmdlICE9PSBwaW5DaGFuZ2UgJiYgcGluQWN0aXZlU3RhdGUuc3BsaWNlKHBpbkFjdGl2ZVN0YXRlLmxlbmd0aCAtIDIsIDIpOyAvLyB0cmFuc2Zvcm0gaXMgdGhlIGxhc3QgcHJvcGVydHkvdmFsdWUgc2V0IGluIHRoZSBzdGF0ZSBBcnJheS4gU2luY2UgdGhlIGFuaW1hdGlvbiBpcyBjb250cm9sbGluZyB0aGF0LCB3ZSBzaG91bGQgb21pdCBpdC5cblxuICAgICAgICAgIGFuaW1hdGlvbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCB8fCBhbmltYXRpb24uaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcygwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwaW5DaGFuZ2UgPSBjaGFuZ2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAmJiBzZWxmLnNjcm9sbCgpKSB7XG4gICAgICAgIC8vIGl0IG1heSBiZSBJTlNJREUgYSBwaW5uZWQgZWxlbWVudCwgc28gd2FsayB1cCB0aGUgdHJlZSBhbmQgbG9vayBmb3IgYW55IGVsZW1lbnRzIHdpdGggX3Bpbk9mZnNldCB0byBjb21wZW5zYXRlIGJlY2F1c2UgYW55dGhpbmcgd2l0aCBwaW5TcGFjaW5nIHRoYXQncyBhbHJlYWR5IHNjcm9sbGVkIHdvdWxkIHRocm93IG9mZiB0aGUgbWVhc3VyZW1lbnRzIGluIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGJvdW5kcyA9IHRyaWdnZXIucGFyZW50Tm9kZTtcblxuICAgICAgICB3aGlsZSAoYm91bmRzICYmIGJvdW5kcyAhPT0gX2JvZHkpIHtcbiAgICAgICAgICBpZiAoYm91bmRzLl9waW5PZmZzZXQpIHtcbiAgICAgICAgICAgIHN0YXJ0IC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgICAgZW5kIC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJvdW5kcyA9IGJvdW5kcy5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldmVydGVkUGlucyAmJiByZXZlcnRlZFBpbnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5yZXZlcnQoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICBzZWxmLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICBzZWxmLmVuZCA9IGVuZDtcbiAgICAgIHNjcm9sbDEgPSBzY3JvbGwyID0gc2VsZi5zY3JvbGwoKTsgLy8gcmVzZXQgdmVsb2NpdHlcblxuICAgICAgc2Nyb2xsMSA8IHByZXZTY3JvbGwgJiYgc2VsZi5zY3JvbGwocHJldlNjcm9sbCk7XG4gICAgICBzZWxmLnJldmVydChmYWxzZSk7XG4gICAgICBfcmVmcmVzaGluZyA9IDA7XG4gICAgICBhbmltYXRpb24gJiYgaXNUb2dnbGUgJiYgYW5pbWF0aW9uLl9pbml0dGVkICYmIGFuaW1hdGlvbi5wcm9ncmVzcygpICE9PSBwcmV2QW5pbVByb2dyZXNzICYmIGFuaW1hdGlvbi5wcm9ncmVzcyhwcmV2QW5pbVByb2dyZXNzLCB0cnVlKS5yZW5kZXIoYW5pbWF0aW9uLnRpbWUoKSwgdHJ1ZSwgdHJ1ZSk7IC8vIG11c3QgZm9yY2UgYSByZS1yZW5kZXIgYmVjYXVzZSBpZiBzYXZlU3R5bGVzKCkgd2FzIHVzZWQgb24gdGhlIHRhcmdldChzKSwgdGhlIHN0eWxlcyBjb3VsZCBoYXZlIGJlZW4gd2lwZWQgb3V0IGR1cmluZyB0aGUgcmVmcmVzaCgpLlxuXG4gICAgICBpZiAocHJldlByb2dyZXNzICE9PSBzZWxmLnByb2dyZXNzKSB7XG4gICAgICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgZGlyZWN0aW9uIGlzIHNldCBwcm9wZXJseSAod2hlbiByZWZyZXNoaW5nLCBwcm9ncmVzcyBpcyBzZXQgYmFjayB0byAwIGluaXRpYWxseSwgdGhlbiBiYWNrIGFnYWluIHRvIHdoZXJldmVyIGl0IG5lZWRzIHRvIGJlKSBhbmQgdGhhdCBjYWxsYmFja3MgYXJlIHRyaWdnZXJlZC5cbiAgICAgICAgc2NydWJUd2VlbiAmJiBhbmltYXRpb24udG90YWxQcm9ncmVzcyhwcmV2UHJvZ3Jlc3MsIHRydWUpOyAvLyB0byBhdm9pZCBpc3N1ZXMgd2hlcmUgYW5pbWF0aW9uIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQgYXJlbid0IHRyaWdnZXJlZC5cblxuICAgICAgICBzZWxmLnByb2dyZXNzID0gcHJldlByb2dyZXNzO1xuICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBwaW4gJiYgcGluU3BhY2luZyAmJiAoc3BhY2VyLl9waW5PZmZzZXQgPSBNYXRoLnJvdW5kKHNlbGYucHJvZ3Jlc3MgKiBwaW5DaGFuZ2UpKTtcbiAgICAgIG9uUmVmcmVzaCAmJiBvblJlZnJlc2goc2VsZik7XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VmVsb2NpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHNlbGYuc2Nyb2xsKCkgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIDEwMDAgfHwgMDtcbiAgICB9O1xuXG4gICAgc2VsZi51cGRhdGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlY29yZFZlbG9jaXR5KSB7XG4gICAgICB2YXIgc2Nyb2xsID0gc2VsZi5zY3JvbGwoKSxcbiAgICAgICAgICBwID0gcmVzZXQgPyAwIDogKHNjcm9sbCAtIHN0YXJ0KSAvIGNoYW5nZSxcbiAgICAgICAgICBjbGlwcGVkID0gcCA8IDAgPyAwIDogcCA+IDEgPyAxIDogcCB8fCAwLFxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3MsXG4gICAgICAgICAgaXNBY3RpdmUsXG4gICAgICAgICAgd2FzQWN0aXZlLFxuICAgICAgICAgIHRvZ2dsZVN0YXRlLFxuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBzdGF0ZUNoYW5nZWQsXG4gICAgICAgICAgdG9nZ2xlZDtcblxuICAgICAgaWYgKHJlY29yZFZlbG9jaXR5KSB7XG4gICAgICAgIHNjcm9sbDIgPSBzY3JvbGwxO1xuICAgICAgICBzY3JvbGwxID0gc2Nyb2xsO1xuXG4gICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgc25hcDIgPSBzbmFwMTtcbiAgICAgICAgICBzbmFwMSA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogY2xpcHBlZDtcbiAgICAgICAgfVxuICAgICAgfSAvLyBhbnRpY2lwYXRlIHRoZSBwaW5uaW5nIGEgZmV3IHRpY2tzIGFoZWFkIG9mIHRpbWUgYmFzZWQgb24gdmVsb2NpdHkgdG8gYXZvaWQgYSB2aXN1YWwgZ2xpdGNoIGR1ZSB0byB0aGUgZmFjdCB0aGF0IG1vc3QgYnJvd3NlcnMgZG8gc2Nyb2xsaW5nIG9uIGEgc2VwYXJhdGUgdGhyZWFkIChub3Qgc3luY2VkIHdpdGggcmVxdWVzdEFuaW1hdGlvbkZyYW1lKS5cblxuXG4gICAgICBhbnRpY2lwYXRlUGluICYmICFjbGlwcGVkICYmIHBpbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwICYmIF9sYXN0U2Nyb2xsVGltZSAmJiBzdGFydCA8IHNjcm9sbCArIChzY3JvbGwgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIGFudGljaXBhdGVQaW4gJiYgKGNsaXBwZWQgPSAwLjAwMDEpO1xuXG4gICAgICBpZiAoY2xpcHBlZCAhPT0gcHJldlByb2dyZXNzICYmIHNlbGYuZW5hYmxlZCkge1xuICAgICAgICBpc0FjdGl2ZSA9IHNlbGYuaXNBY3RpdmUgPSAhIWNsaXBwZWQgJiYgY2xpcHBlZCA8IDE7XG4gICAgICAgIHdhc0FjdGl2ZSA9ICEhcHJldlByb2dyZXNzICYmIHByZXZQcm9ncmVzcyA8IDE7XG4gICAgICAgIHRvZ2dsZWQgPSBpc0FjdGl2ZSAhPT0gd2FzQWN0aXZlO1xuICAgICAgICBzdGF0ZUNoYW5nZWQgPSB0b2dnbGVkIHx8ICEhY2xpcHBlZCAhPT0gISFwcmV2UHJvZ3Jlc3M7IC8vIGNvdWxkIGdvIGZyb20gc3RhcnQgYWxsIHRoZSB3YXkgdG8gZW5kLCB0aHVzIGl0IGRpZG4ndCB0b2dnbGUgYnV0IGl0IGRpZCBjaGFuZ2Ugc3RhdGUgaW4gYSBzZW5zZSAobWF5IG5lZWQgdG8gZmlyZSBhIGNhbGxiYWNrKVxuXG4gICAgICAgIHNlbGYuZGlyZWN0aW9uID0gY2xpcHBlZCA+IHByZXZQcm9ncmVzcyA/IDEgOiAtMTtcbiAgICAgICAgc2VsZi5wcm9ncmVzcyA9IGNsaXBwZWQ7XG5cbiAgICAgICAgaWYgKCFpc1RvZ2dsZSkge1xuICAgICAgICAgIGlmIChzY3J1YlR3ZWVuICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXApIHtcbiAgICAgICAgICAgIHNjcnViVHdlZW4udmFycy50b3RhbFByb2dyZXNzID0gY2xpcHBlZDtcbiAgICAgICAgICAgIHNjcnViVHdlZW4uaW52YWxpZGF0ZSgpLnJlc3RhcnQoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoY2xpcHBlZCwgISFfcmVmcmVzaGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpbikge1xuICAgICAgICAgIHJlc2V0ICYmIHBpblNwYWNpbmcgJiYgKHNwYWNlci5zdHlsZVtwaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMl0gPSBzcGFjaW5nU3RhcnQpO1xuXG4gICAgICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBwaW5TZXR0ZXIocGluU3RhcnQgKyBwaW5DaGFuZ2UgKiBjbGlwcGVkKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgYWN0aW9uID0gIXJlc2V0ICYmIGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgJiYgZW5kICsgMSA+IHNjcm9sbCAmJiBzY3JvbGwgKyAxID49IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbik7IC8vIGlmIGl0J3MgYXQgdGhlIFZFUlkgZW5kIG9mIHRoZSBwYWdlLCBkb24ndCBzd2l0Y2ggYXdheSBmcm9tIHBvc2l0aW9uOiBmaXhlZCBiZWNhdXNlIGl0J3MgcG9pbnRsZXNzIGFuZCBpdCBjb3VsZCBjYXVzZSBhIGJyaWVmIGZsYXNoIHdoZW4gdGhlIHVzZXIgc2Nyb2xscyBiYWNrIHVwICh3aGVuIGl0IGdldHMgcGlubmVkIGFnYWluKVxuXG4gICAgICAgICAgICBpZiAocGluUmVwYXJlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKCFyZXNldCAmJiAoaXNBY3RpdmUgfHwgYWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSBfZ2V0Qm91bmRzKHBpbiwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIF9vZmZzZXQgPSBzY3JvbGwgLSBzdGFydDtcblxuICAgICAgICAgICAgICAgIF9yZXBhcmVudChwaW4sIF9ib2R5LCBib3VuZHMudG9wICsgKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gX29mZnNldCA6IDApICsgX3B4LCBib3VuZHMubGVmdCArIChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IDAgOiBfb2Zmc2V0KSArIF9weCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3JlcGFyZW50KHBpbiwgc3BhY2VyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfc2V0U3RhdGUoaXNBY3RpdmUgfHwgYWN0aW9uID8gcGluQWN0aXZlU3RhdGUgOiBwaW5TdGF0ZSk7XG5cbiAgICAgICAgICAgIHBpbkNoYW5nZSAhPT0gY2hhbmdlICYmIGNsaXBwZWQgPCAxICYmIGlzQWN0aXZlIHx8IHBpblNldHRlcihwaW5TdGFydCArIChjbGlwcGVkID09PSAxICYmICFhY3Rpb24gPyBwaW5DaGFuZ2UgOiAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc25hcCAmJiAhdHdlZW5Uby50d2VlbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwICYmIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICB0b2dnbGVDbGFzcyAmJiAodG9nZ2xlZCB8fCBvbmNlICYmIGNsaXBwZWQgJiYgKGNsaXBwZWQgPCAxIHx8ICFfbGltaXRDYWxsYmFja3MpKSAmJiBfdG9BcnJheSh0b2dnbGVDbGFzcy50YXJnZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3RbaXNBY3RpdmUgfHwgb25jZSA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXSh0b2dnbGVDbGFzcy5jbGFzc05hbWUpO1xuICAgICAgICB9KTsgLy8gY2xhc3NlcyBjb3VsZCBhZmZlY3QgcG9zaXRpb25pbmcsIHNvIGRvIGl0IGV2ZW4gaWYgcmVzZXQgb3IgcmVmcmVzaGluZyBpcyB0cnVlLlxuXG4gICAgICAgIG9uVXBkYXRlICYmICFpc1RvZ2dsZSAmJiAhcmVzZXQgJiYgb25VcGRhdGUoc2VsZik7XG5cbiAgICAgICAgaWYgKHN0YXRlQ2hhbmdlZCAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICB0b2dnbGVTdGF0ZSA9IGNsaXBwZWQgJiYgIXByZXZQcm9ncmVzcyA/IDAgOiBjbGlwcGVkID09PSAxID8gMSA6IHByZXZQcm9ncmVzcyA9PT0gMSA/IDIgOiAzOyAvLyAwID0gZW50ZXIsIDEgPSBsZWF2ZSwgMiA9IGVudGVyQmFjaywgMyA9IGxlYXZlQmFjayAod2UgcHJpb3JpdGl6ZSB0aGUgRklSU1QgZW5jb3VudGVyLCB0aHVzIGlmIHlvdSBzY3JvbGwgcmVhbGx5IGZhc3QgcGFzdCB0aGUgb25FbnRlciBhbmQgb25MZWF2ZSBpbiBvbmUgdGljaywgaXQnZCBwcmlvcml0aXplIG9uRW50ZXIuXG5cbiAgICAgICAgICBpZiAoaXNUb2dnbGUpIHtcbiAgICAgICAgICAgIGFjdGlvbiA9ICF0b2dnbGVkICYmIHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGUgKyAxXSAhPT0gXCJub25lXCIgJiYgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZSArIDFdIHx8IHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGVdOyAvLyBpZiBpdCBkaWRuJ3QgdG9nZ2xlLCB0aGF0IG1lYW5zIGl0IHNob3QgcmlnaHQgcGFzdCBhbmQgc2luY2Ugd2UgcHJpb3JpdGl6ZSB0aGUgXCJlbnRlclwiIGFjdGlvbiwgd2Ugc2hvdWxkIHN3aXRjaCB0byB0aGUgXCJsZWF2ZVwiIGluIHRoaXMgY2FzZSAoYnV0IG9ubHkgaWYgb25lIGlzIGRlZmluZWQpXG5cbiAgICAgICAgICAgIGlmIChhbmltYXRpb24gJiYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiIHx8IGFjdGlvbiA9PT0gXCJyZXNldFwiIHx8IGFjdGlvbiBpbiBhbmltYXRpb24pKSB7XG4gICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wYXVzZSgpLnRvdGFsUHJvZ3Jlc3MoMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInJlc2V0XCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVzdGFydCh0cnVlKS5wYXVzZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZXN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVzdGFydCh0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25bYWN0aW9uXSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9uVXBkYXRlICYmIG9uVXBkYXRlKHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0b2dnbGVkIHx8ICFfbGltaXRDYWxsYmFja3MpIHtcbiAgICAgICAgICAgIC8vIG9uIHN0YXJ0dXAsIHRoZSBwYWdlIGNvdWxkIGJlIHNjcm9sbGVkIGFuZCB3ZSBkb24ndCB3YW50IHRvIGZpcmUgY2FsbGJhY2tzIHRoYXQgZGlkbid0IHRvZ2dsZS4gRm9yIGV4YW1wbGUgb25FbnRlciBzaG91bGRuJ3QgZmlyZSBpZiB0aGUgU2Nyb2xsVHJpZ2dlciBpc24ndCBhY3R1YWxseSBlbnRlcmVkLlxuICAgICAgICAgICAgb25Ub2dnbGUgJiYgdG9nZ2xlZCAmJiBvblRvZ2dsZShzZWxmKTtcbiAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXShzZWxmKTtcbiAgICAgICAgICAgIG9uY2UgJiYgKGNsaXBwZWQgPT09IDEgPyBzZWxmLmtpbGwoZmFsc2UsIDEpIDogY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSA9IDApOyAvLyBhIGNhbGxiYWNrIHNob3VsZG4ndCBiZSBjYWxsZWQgYWdhaW4gaWYgb25jZSBpcyB0cnVlLlxuXG4gICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgLy8gaXQncyBwb3NzaWJsZSB0byBnbyBjb21wbGV0ZWx5IHBhc3QsIGxpa2UgZnJvbSBiZWZvcmUgdGhlIHN0YXJ0IHRvIGFmdGVyIHRoZSBlbmQgKG9yIHZpY2UtdmVyc2EpIGluIHdoaWNoIGNhc2UgQk9USCBjYWxsYmFja3Mgc2hvdWxkIGJlIGZpcmVkIGluIHRoYXQgb3JkZXJcbiAgICAgICAgICAgICAgdG9nZ2xlU3RhdGUgPSBjbGlwcGVkID09PSAxID8gMSA6IDM7XG4gICAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXShzZWxmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUb2dnbGUgJiYgb25VcGRhdGUgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgb25VcGRhdGUoc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gdXBkYXRlIGFic29sdXRlbHktcG9zaXRpb25lZCBtYXJrZXJzIChvbmx5IGlmIHRoZSBzY3JvbGxlciBpc24ndCB0aGUgdmlld3BvcnQpXG5cblxuICAgICAgaWYgKG1hcmtlckVuZFNldHRlcikge1xuICAgICAgICBtYXJrZXJTdGFydFNldHRlcihzY3JvbGwgKyAobWFya2VyU3RhcnRUcmlnZ2VyLl9pc0ZsaXBwZWQgPyAxIDogMCkpO1xuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIoc2Nyb2xsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlZnJlc2gpIHtcbiAgICAgIGlmICghc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHNlbGYuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInJlc2l6ZVwiLCBfb25SZXNpemUpO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgICAgICBvblJlZnJlc2hJbml0ICYmIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hJbml0XCIsIG9uUmVmcmVzaEluaXQpO1xuXG4gICAgICAgIGlmIChyZXNldCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBzZWxmLnByb2dyZXNzID0gcHJldlByb2dyZXNzID0gMDtcbiAgICAgICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IGxhc3RTbmFwID0gc2VsZi5zY3JvbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZnJlc2ggIT09IGZhbHNlICYmIHNlbGYucmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmdldFR3ZWVuID0gZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgIHJldHVybiBzbmFwICYmIHR3ZWVuVG8gPyB0d2VlblRvLnR3ZWVuIDogc2NydWJUd2VlbjtcbiAgICB9O1xuXG4gICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKHJlc2V0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgICByZXNldCAhPT0gZmFsc2UgJiYgc2VsZi5yZXZlcnQoKTtcbiAgICAgICAgc2VsZi5lbmFibGVkID0gc2VsZi5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBhbGxvd0FuaW1hdGlvbiB8fCBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgICAgcHJldlNjcm9sbCA9IDA7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIG9uUmVmcmVzaEluaXQgJiYgX3JlbW92ZUxpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaEluaXRcIiwgb25SZWZyZXNoSW5pdCk7XG5cbiAgICAgICAgaWYgKHNuYXBEZWxheWVkQ2FsbCkge1xuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgICAgIHR3ZWVuVG8udHdlZW4gJiYgdHdlZW5Uby50d2Vlbi5raWxsKCkgJiYgKHR3ZWVuVG8udHdlZW4gPSAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWaWV3cG9ydCkge1xuICAgICAgICAgIHZhciBpID0gX3RyaWdnZXJzLmxlbmd0aDtcblxuICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGlmIChfdHJpZ2dlcnNbaV0uc2Nyb2xsZXIgPT09IHNjcm9sbGVyICYmIF90cmlnZ2Vyc1tpXSAhPT0gc2VsZikge1xuICAgICAgICAgICAgICByZXR1cm47IC8vZG9uJ3QgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgaWYgdGhlcmUgYXJlIHN0aWxsIG90aGVyIHRyaWdnZXJzIHJlZmVyZW5jaW5nIGl0LlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihzY3JvbGxlciwgXCJyZXNpemVcIiwgX29uUmVzaXplKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmtpbGwgPSBmdW5jdGlvbiAocmV2ZXJ0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgc2VsZi5kaXNhYmxlKHJldmVydCwgYWxsb3dBbmltYXRpb24pO1xuICAgICAgaWQgJiYgZGVsZXRlIF9pZHNbaWRdO1xuXG4gICAgICB2YXIgaSA9IF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICBfdHJpZ2dlcnMuc3BsaWNlKGksIDEpO1xuXG4gICAgICBpID09PSBfaSAmJiBfZGlyZWN0aW9uID4gMCAmJiBfaS0tOyAvLyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgcmVmcmVzaCgpIG9yIHVwZGF0ZSgpLCBzcGxpY2luZyB3b3VsZCBjYXVzZSBza2lwcyBpbiB0aGUgaW5kZXgsIHNvIGFkanVzdC4uLlxuICAgICAgLy8gaWYgbm8gb3RoZXIgU2Nyb2xsVHJpZ2dlciBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgc2Nyb2xsZXIgYXJlIGZvdW5kLCB3aXBlIG91dCBhbnkgcmVjb3JkZWQgc2Nyb2xsIHBvc2l0aW9uLiBPdGhlcndpc2UsIGluIGEgc2luZ2xlIHBhZ2UgYXBwbGljYXRpb24sIGZvciBleGFtcGxlLCBpdCBjb3VsZCBtYWludGFpbiBzY3JvbGwgcG9zaXRpb24gd2hlbiBpdCByZWFsbHkgc2hvdWxkbid0LlxuXG4gICAgICBpID0gMDtcblxuICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuc2Nyb2xsZXIgPT09IHNlbGYuc2Nyb2xsZXIgJiYgKGkgPSAxKTtcbiAgICAgIH0pO1xuXG4gICAgICBpIHx8IChzZWxmLnNjcm9sbC5yZWMgPSAwKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciA9IG51bGw7XG4gICAgICAgIHJldmVydCAmJiBhbmltYXRpb24ucmVuZGVyKC0xKTtcbiAgICAgICAgYWxsb3dBbmltYXRpb24gfHwgYW5pbWF0aW9uLmtpbGwoKTtcbiAgICAgIH1cblxuICAgICAgbWFya2VyU3RhcnQgJiYgW21hcmtlclN0YXJ0LCBtYXJrZXJFbmQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0uZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gbS5wYXJlbnROb2RlICYmIG0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQucGluID09PSBwaW4gJiYgaSsrO1xuICAgICAgICB9KTtcblxuICAgICAgICBpIHx8IChwaW5DYWNoZS5zcGFjZXIgPSAwKTsgLy8gaWYgdGhlcmUgYXJlbid0IGFueSBtb3JlIFNjcm9sbFRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZW1vdmUgdGhlIHNwYWNlciwgb3RoZXJ3aXNlIGl0IGNvdWxkIGJlIGNvbnRhbWluYXRlZCB3aXRoIG9sZC9zdGFsZSB2YWx1ZXMgaWYgdGhlIHVzZXIgcmUtY3JlYXRlcyBhIFNjcm9sbFRyaWdnZXIgZm9yIHRoZSBzYW1lIGVsZW1lbnQuXG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZW5hYmxlKGZhbHNlLCBmYWxzZSk7XG4gICAgIWFuaW1hdGlvbiB8fCAhYW5pbWF0aW9uLmFkZCB8fCBjaGFuZ2UgPyBzZWxmLnJlZnJlc2goKSA6IGdzYXAuZGVsYXllZENhbGwoMC4wMSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0IHx8IGVuZCB8fCBzZWxmLnJlZnJlc2goKTtcbiAgICB9KSAmJiAoY2hhbmdlID0gMC4wMSkgJiYgKHN0YXJ0ID0gZW5kID0gMCk7IC8vIGlmIHRoZSBhbmltYXRpb24gaXMgYSB0aW1lbGluZSwgaXQgbWF5IG5vdCBoYXZlIGJlZW4gcG9wdWxhdGVkIHlldCwgc28gaXQgd291bGRuJ3QgcmVuZGVyIGF0IHRoZSBwcm9wZXIgcGxhY2Ugb24gdGhlIGZpcnN0IHJlZnJlc2goKSwgdGh1cyB3ZSBzaG91bGQgc2NoZWR1bGUgb25lIGZvciB0aGUgbmV4dCB0aWNrLiBJZiBcImNoYW5nZVwiIGlzIGRlZmluZWQsIHdlIGtub3cgaXQgbXVzdCBiZSByZS1lbmFibGluZywgdGh1cyB3ZSBjYW4gcmVmcmVzaCgpIHJpZ2h0IGF3YXkuXG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvcmUpIHtcbiAgICBpZiAoIV9jb3JlSW5pdHRlZCkge1xuICAgICAgZ3NhcCA9IGNvcmUgfHwgX2dldEdTQVAoKTtcblxuICAgICAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgX3dpbiA9IHdpbmRvdztcbiAgICAgICAgX2RvYyA9IGRvY3VtZW50O1xuICAgICAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgX2JvZHkgPSBfZG9jLmJvZHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnc2FwKSB7XG4gICAgICAgIF90b0FycmF5ID0gZ3NhcC51dGlscy50b0FycmF5O1xuICAgICAgICBfY2xhbXAgPSBnc2FwLnV0aWxzLmNsYW1wO1xuICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzID0gZ3NhcC5jb3JlLnN1cHByZXNzT3ZlcndyaXRlcyB8fCBfcGFzc1Rocm91Z2g7XG4gICAgICAgIGdzYXAuY29yZS5nbG9iYWxzKFwiU2Nyb2xsVHJpZ2dlclwiLCBTY3JvbGxUcmlnZ2VyKTsgLy8gbXVzdCByZWdpc3RlciB0aGUgZ2xvYmFsIG1hbnVhbGx5IGJlY2F1c2UgaW4gSW50ZXJuZXQgRXhwbG9yZXIsIGZ1bmN0aW9ucyAoY2xhc3NlcykgZG9uJ3QgaGF2ZSBhIFwibmFtZVwiIHByb3BlcnR5LlxuXG4gICAgICAgIGlmIChfYm9keSkge1xuICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgMTYpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ3aGVlbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgICAgX3Jvb3QgPSBbX3dpbiwgX2RvYywgX2RvY0VsLCBfYm9keV07XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIoX2RvYywgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTsgLy8gc29tZSBicm93c2VycyAobGlrZSBDaHJvbWUpLCB0aGUgd2luZG93IHN0b3BzIGRpc3BhdGNoaW5nIHNjcm9sbCBldmVudHMgb24gdGhlIHdpbmRvdyBpZiB5b3Ugc2Nyb2xsIHJlYWxseSBmYXN0LCBidXQgaXQncyBjb25zaXN0ZW50IG9uIHRoZSBkb2N1bWVudCFcblxuXG4gICAgICAgICAgdmFyIGJvZHlTdHlsZSA9IF9ib2R5LnN0eWxlLFxuICAgICAgICAgICAgICBib3JkZXIgPSBib2R5U3R5bGUuYm9yZGVyVG9wLFxuICAgICAgICAgICAgICBib3VuZHM7XG4gICAgICAgICAgYm9keVN0eWxlLmJvcmRlclRvcCA9IFwiMXB4IHNvbGlkICMwMDBcIjsgLy8gd29ya3MgYXJvdW5kIGFuIGlzc3VlIHdoZXJlIGEgbWFyZ2luIG9mIGEgY2hpbGQgZWxlbWVudCBjb3VsZCB0aHJvdyBvZmYgdGhlIGJvdW5kcyBvZiB0aGUgX2JvZHksIG1ha2luZyBpdCBzZWVtIGxpa2UgdGhlcmUncyBhIG1hcmdpbiB3aGVuIHRoZXJlIGFjdHVhbGx5IGlzbid0LiBUaGUgYm9yZGVyIGVuc3VyZXMgdGhhdCB0aGUgYm91bmRzIGFyZSBhY2N1cmF0ZS5cblxuICAgICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoX2JvZHkpO1xuICAgICAgICAgIF92ZXJ0aWNhbC5tID0gTWF0aC5yb3VuZChib3VuZHMudG9wICsgX3ZlcnRpY2FsLnNjKCkpIHx8IDA7IC8vIGFjY29tbW9kYXRlIHRoZSBvZmZzZXQgb2YgdGhlIDxib2R5PiBjYXVzZWQgYnkgbWFyZ2lucyBhbmQvb3IgcGFkZGluZ1xuXG4gICAgICAgICAgX2hvcml6b250YWwubSA9IE1hdGgucm91bmQoYm91bmRzLmxlZnQgKyBfaG9yaXpvbnRhbC5zYygpKSB8fCAwO1xuICAgICAgICAgIGJvcmRlciA/IGJvZHlTdHlsZS5ib3JkZXJUb3AgPSBib3JkZXIgOiBib2R5U3R5bGUucmVtb3ZlUHJvcGVydHkoXCJib3JkZXItdG9wXCIpO1xuICAgICAgICAgIF9zeW5jSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChfc3luYywgMjAwKTtcbiAgICAgICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuNSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcInRvdWNoY2FuY2VsXCIsIF9wYXNzVGhyb3VnaCk7IC8vIHNvbWUgb2xkZXIgQW5kcm9pZCBkZXZpY2VzIGludGVybWl0dGVudGx5IHN0b3AgZGlzcGF0Y2hpbmcgXCJ0b3VjaG1vdmVcIiBldmVudHMgaWYgd2UgZG9uJ3QgbGlzdGVuIGZvciBcInRvdWNoY2FuY2VsXCIgb24gdGhlIGRvY3VtZW50LlxuXG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIoX2JvZHksIFwidG91Y2hzdGFydFwiLCBfcGFzc1Rocm91Z2gpOyAvL3dvcmtzIGFyb3VuZCBTYWZhcmkgYnVnOiBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIxNDUwLWRyYWdnYWJsZS1pbi1pZnJhbWUtb24tbW9iaWxlLWlzLWJ1Z2d5L1xuXG5cbiAgICAgICAgICBfbXVsdGlMaXN0ZW5lcihfYWRkTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcmRvd24sdG91Y2hzdGFydCxtb3VzZWRvd25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVydXAsdG91Y2hlbmQsbW91c2V1cFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3BvaW50ZXJJc0Rvd24gPSAwO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RyYW5zZm9ybVByb3AgPSBnc2FwLnV0aWxzLmNoZWNrUHJlZml4KFwidHJhbnNmb3JtXCIpO1xuXG4gICAgICAgICAgX3N0YXRlUHJvcHMucHVzaChfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgICAgICBfY29yZUluaXR0ZWQgPSBfZ2V0VGltZSgpO1xuICAgICAgICAgIF9yZXNpemVEZWxheSA9IGdzYXAuZGVsYXllZENhbGwoMC4yLCBfcmVmcmVzaEFsbCkucGF1c2UoKTtcbiAgICAgICAgICBfYXV0b1JlZnJlc2ggPSBbX2RvYywgXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB3ID0gX3dpbi5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGggPSBfd2luLmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAoX2RvYy5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgX3ByZXZXaWR0aCA9IHc7XG4gICAgICAgICAgICAgIF9wcmV2SGVpZ2h0ID0gaDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3ByZXZXaWR0aCAhPT0gdyB8fCBfcHJldkhlaWdodCAhPT0gaCkge1xuICAgICAgICAgICAgICBfb25SZXNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBfZG9jLCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgX3JlZnJlc2hBbGwsIF93aW4sIFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2xhc3RTY3JvbGxUaW1lIHx8IF9yZWZyZXNoQWxsKCk7XG4gICAgICAgICAgfSwgX3dpbiwgXCJyZXNpemVcIiwgX29uUmVzaXplXTtcblxuICAgICAgICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfY29yZUluaXR0ZWQ7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5kZWZhdWx0cyA9IGZ1bmN0aW9uIGRlZmF1bHRzKGNvbmZpZykge1xuICAgIGZvciAodmFyIHAgaW4gY29uZmlnKSB7XG4gICAgICBfZGVmYXVsdHNbcF0gPSBjb25maWdbcF07XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2VuYWJsZWQgPSAwO1xuXG4gICAgX3RyaWdnZXJzLnNsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgIHJldHVybiB0cmlnZ2VyLmtpbGwoMSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jb25maWcgPSBmdW5jdGlvbiBjb25maWcodmFycykge1xuICAgIFwibGltaXRDYWxsYmFja3NcIiBpbiB2YXJzICYmIChfbGltaXRDYWxsYmFja3MgPSAhIXZhcnMubGltaXRDYWxsYmFja3MpO1xuICAgIHZhciBtcyA9IHZhcnMuc3luY0ludGVydmFsO1xuICAgIG1zICYmIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCkgfHwgKF9zeW5jSW50ZXJ2YWwgPSBtcykgJiYgc2V0SW50ZXJ2YWwoX3N5bmMsIG1zKTtcblxuICAgIGlmIChcImF1dG9SZWZyZXNoRXZlbnRzXCIgaW4gdmFycykge1xuICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfcmVtb3ZlTGlzdGVuZXIpIHx8IF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyLCB2YXJzLmF1dG9SZWZyZXNoRXZlbnRzIHx8IFwibm9uZVwiKTtcbiAgICAgIF9pZ25vcmVSZXNpemUgPSAodmFycy5hdXRvUmVmcmVzaEV2ZW50cyArIFwiXCIpLmluZGV4T2YoXCJyZXNpemVcIikgPT09IC0xO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnNjcm9sbGVyUHJveHkgPSBmdW5jdGlvbiBzY3JvbGxlclByb3h5KHRhcmdldCwgdmFycykge1xuICAgIHZhciB0ID0gX3RvQXJyYXkodGFyZ2V0KVswXSxcbiAgICAgICAgaSA9IF9zY3JvbGxlcnMuaW5kZXhPZih0KSxcbiAgICAgICAgaXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHQpO1xuXG4gICAgaWYgKH5pKSB7XG4gICAgICBfc2Nyb2xsZXJzLnNwbGljZShpLCBpc1ZpZXdwb3J0ID8gNiA6IDIpO1xuICAgIH1cblxuICAgIGlzVmlld3BvcnQgPyBfcHJveGllcy51bnNoaWZ0KF93aW4sIHZhcnMsIF9ib2R5LCB2YXJzLCBfZG9jRWwsIHZhcnMpIDogX3Byb3hpZXMudW5zaGlmdCh0LCB2YXJzKTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLm1hdGNoTWVkaWEgPSBmdW5jdGlvbiBtYXRjaE1lZGlhKHZhcnMpIHtcbiAgICAvLyBfbWVkaWEgaXMgcG9wdWxhdGVkIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6IG1lZGlhUXVlcnlTdHJpbmcsIG9uTWF0Y2gsIG9uVW5tYXRjaCwgaXNNYXRjaGVkLiBTbyBpZiB0aGVyZSBhcmUgdHdvIG1lZGlhIHF1ZXJpZXMsIHRoZSBBcnJheSB3b3VsZCBoYXZlIGEgbGVuZ3RoIG9mIDhcbiAgICB2YXIgbXEsIHAsIGksIGZ1bmMsIHJlc3VsdDtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICBpID0gX21lZGlhLmluZGV4T2YocCk7XG4gICAgICBmdW5jID0gdmFyc1twXTtcbiAgICAgIF9jcmVhdGluZ01lZGlhID0gcDtcblxuICAgICAgaWYgKHAgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgZnVuYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEocCk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgbXEubWF0Y2hlcyAmJiAocmVzdWx0ID0gZnVuYygpKTtcblxuICAgICAgICAgIGlmICh+aSkge1xuICAgICAgICAgICAgX21lZGlhW2kgKyAxXSA9IF9jb21iaW5lRnVuYyhfbWVkaWFbaSArIDFdLCBmdW5jKTtcbiAgICAgICAgICAgIF9tZWRpYVtpICsgMl0gPSBfY29tYmluZUZ1bmMoX21lZGlhW2kgKyAyXSwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaSA9IF9tZWRpYS5sZW5ndGg7XG5cbiAgICAgICAgICAgIF9tZWRpYS5wdXNoKHAsIGZ1bmMsIHJlc3VsdCk7XG5cbiAgICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX21lZGlhW2kgKyAzXSA9IG1xLm1hdGNoZXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX2NyZWF0aW5nTWVkaWEgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBfbWVkaWE7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jbGVhck1hdGNoTWVkaWEgPSBmdW5jdGlvbiBjbGVhck1hdGNoTWVkaWEocXVlcnkpIHtcbiAgICBxdWVyeSB8fCAoX21lZGlhLmxlbmd0aCA9IDApO1xuICAgIHF1ZXJ5ID0gX21lZGlhLmluZGV4T2YocXVlcnkpO1xuICAgIHF1ZXJ5ID49IDAgJiYgX21lZGlhLnNwbGljZShxdWVyeSwgNCk7XG4gIH0gLy8gc3RhdGljIGlzSW5WaWV3cG9ydChlbGVtZW50LCByYXRpbywgaG9yaXpvbnRhbCkge1xuICAvLyBcdGxldCBib3VuZHMgPSAoX2lzU3RyaW5nKGVsZW1lbnQpID8gX3RvQXJyYXkoZWxlbWVudClbMF0gOiBlbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgLy8gXHRcdG9mZnNldCA9IGJvdW5kc1tob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gKiByYXRpbyB8fCAwO1xuICAvLyBcdHJldHVybiBob3Jpem9udGFsID8gYm91bmRzLnJpZ2h0IC0gb2Zmc2V0ID4gMCAmJiBib3VuZHMubGVmdCArIG9mZnNldCA8IF93aW4uaW5uZXJXaWR0aCA6IGJvdW5kcy5ib3R0b20gLSBvZmZzZXQgPiAwICYmIGJvdW5kcy50b3AgKyBvZmZzZXQgPCBfd2luLmlubmVySGVpZ2h0O1xuICAvLyB9XG4gIC8vXG4gIC8vIHN0YXRpYyBwb3NpdGlvbkluVmlld3BvcnQoZWxlbWVudCwgcmVmZXJlbmNlUG9pbnQsIGhvcml6b250YWwpIHtcbiAgLy8gXHRfaXNTdHJpbmcoZWxlbWVudCkgJiYgKGVsZW1lbnQgPSBfdG9BcnJheShlbGVtZW50KVswXSk7XG4gIC8vIFx0bGV0IGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gIC8vIFx0XHRzaXplID0gYm91bmRzW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSxcbiAgLy8gXHRcdG9mZnNldCA9IHJlZmVyZW5jZVBvaW50ID09IG51bGwgPyBzaXplIC8gMiA6ICgocmVmZXJlbmNlUG9pbnQgaW4gX2tleXdvcmRzKSA/IF9rZXl3b3Jkc1tyZWZlcmVuY2VQb2ludF0gKiBzaXplIDogfnJlZmVyZW5jZVBvaW50LmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgfHwgMCk7XG4gIC8vIFx0cmV0dXJuIGhvcml6b250YWwgPyAoYm91bmRzLmxlZnQgKyBvZmZzZXQpIC8gX3dpbi5pbm5lcldpZHRoIDogKGJvdW5kcy50b3AgKyBvZmZzZXQpIC8gX3dpbi5pbm5lckhlaWdodDtcbiAgLy8gfVxuICA7XG5cbiAgcmV0dXJuIFNjcm9sbFRyaWdnZXI7XG59KCk7XG5TY3JvbGxUcmlnZ2VyLnZlcnNpb24gPSBcIjMuNy4xXCI7XG5cblNjcm9sbFRyaWdnZXIuc2F2ZVN0eWxlcyA9IGZ1bmN0aW9uICh0YXJnZXRzKSB7XG4gIHJldHVybiB0YXJnZXRzID8gX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gc2F2ZWQgc3R5bGVzIGFyZSByZWNvcmRlZCBpbiBhIGNvbnNlY3V0aXZlIGFsdGVybmF0aW5nIEFycmF5LCBsaWtlIFtlbGVtZW50LCBjc3NUZXh0LCB0cmFuc2Zvcm0gYXR0cmlidXRlLCBjYWNoZSwgbWF0Y2hNZWRpYSwgLi4uXVxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlKSB7XG4gICAgICB2YXIgaSA9IF9zYXZlZFN0eWxlcy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGkgPj0gMCAmJiBfc2F2ZWRTdHlsZXMuc3BsaWNlKGksIDUpO1xuXG4gICAgICBfc2F2ZWRTdHlsZXMucHVzaCh0YXJnZXQsIHRhcmdldC5zdHlsZS5jc3NUZXh0LCB0YXJnZXQuZ2V0QkJveCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpLCBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KSwgX2NyZWF0aW5nTWVkaWEpO1xuICAgIH1cbiAgfSkgOiBfc2F2ZWRTdHlsZXM7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJldmVydCA9IGZ1bmN0aW9uIChzb2Z0LCBtZWRpYSkge1xuICByZXR1cm4gX3JldmVydEFsbCghc29mdCwgbWVkaWEpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jcmVhdGUgPSBmdW5jdGlvbiAodmFycywgYW5pbWF0aW9uKSB7XG4gIHJldHVybiBuZXcgU2Nyb2xsVHJpZ2dlcih2YXJzLCBhbmltYXRpb24pO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZWZyZXNoID0gZnVuY3Rpb24gKHNhZmUpIHtcbiAgcmV0dXJuIHNhZmUgPyBfb25SZXNpemUoKSA6IF9yZWZyZXNoQWxsKHRydWUpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci51cGRhdGUgPSBfdXBkYXRlQWxsO1xuXG5TY3JvbGxUcmlnZ2VyLm1heFNjcm9sbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBob3Jpem9udGFsKSB7XG4gIHJldHVybiBfbWF4U2Nyb2xsKGVsZW1lbnQsIGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldFNjcm9sbEZ1bmMgPSBmdW5jdGlvbiAoZWxlbWVudCwgaG9yaXpvbnRhbCkge1xuICByZXR1cm4gX2dldFNjcm9sbEZ1bmMoX3RvQXJyYXkoZWxlbWVudClbMF0sIGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIF9pZHNbaWRdO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfdHJpZ2dlcnMuc2xpY2UoMCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmlzU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFfbGFzdFNjcm9sbFRpbWU7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuYmF0Y2ggPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycykge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICB2YXJzQ29weSA9IHt9LFxuICAgICAgaW50ZXJ2YWwgPSB2YXJzLmludGVydmFsIHx8IDAuMDE2LFxuICAgICAgYmF0Y2hNYXggPSB2YXJzLmJhdGNoTWF4IHx8IDFlOSxcbiAgICAgIHByb3h5Q2FsbGJhY2sgPSBmdW5jdGlvbiBwcm94eUNhbGxiYWNrKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW10sXG4gICAgICAgIHRyaWdnZXJzID0gW10sXG4gICAgICAgIGRlbGF5ID0gZ3NhcC5kZWxheWVkQ2FsbChpbnRlcnZhbCwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZWxlbWVudHMsIHRyaWdnZXJzKTtcbiAgICAgIGVsZW1lbnRzID0gW107XG4gICAgICB0cmlnZ2VycyA9IFtdO1xuICAgIH0pLnBhdXNlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzZWxmKSB7XG4gICAgICBlbGVtZW50cy5sZW5ndGggfHwgZGVsYXkucmVzdGFydCh0cnVlKTtcbiAgICAgIGVsZW1lbnRzLnB1c2goc2VsZi50cmlnZ2VyKTtcbiAgICAgIHRyaWdnZXJzLnB1c2goc2VsZik7XG4gICAgICBiYXRjaE1heCA8PSBlbGVtZW50cy5sZW5ndGggJiYgZGVsYXkucHJvZ3Jlc3MoMSk7XG4gICAgfTtcbiAgfSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICB2YXJzQ29weVtwXSA9IHAuc3Vic3RyKDAsIDIpID09PSBcIm9uXCIgJiYgX2lzRnVuY3Rpb24odmFyc1twXSkgJiYgcCAhPT0gXCJvblJlZnJlc2hJbml0XCIgPyBwcm94eUNhbGxiYWNrKHAsIHZhcnNbcF0pIDogdmFyc1twXTtcbiAgfVxuXG4gIGlmIChfaXNGdW5jdGlvbihiYXRjaE1heCkpIHtcbiAgICBiYXRjaE1heCA9IGJhdGNoTWF4KCk7XG5cbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXgoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIGZvciAocCBpbiB2YXJzQ29weSkge1xuICAgICAgY29uZmlnW3BdID0gdmFyc0NvcHlbcF07XG4gICAgfVxuXG4gICAgY29uZmlnLnRyaWdnZXIgPSB0YXJnZXQ7XG4gICAgcmVzdWx0LnB1c2goU2Nyb2xsVHJpZ2dlci5jcmVhdGUoY29uZmlnKSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnNvcnQgPSBmdW5jdGlvbiAoZnVuYykge1xuICByZXR1cm4gX3RyaWdnZXJzLnNvcnQoZnVuYyB8fCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAoYS52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYgKyBhLnN0YXJ0IC0gKGIuc3RhcnQgKyAoYi52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYpO1xuICB9KTtcbn07XG5cbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcbmV4cG9ydCB7IFNjcm9sbFRyaWdnZXIgYXMgZGVmYXVsdCB9OyIsIi8qIVxuICogVGV4dFBsdWdpbiAzLjcuMVxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGVtb2ppU2FmZVNwbGl0LCBnZXRUZXh0LCBzcGxpdElubmVySFRNTCB9IGZyb20gXCIuL3V0aWxzL3N0cmluZ3MuanNcIjtcblxudmFyIGdzYXAsXG4gICAgX3RlbXBEaXYsXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59O1xuXG5leHBvcnQgdmFyIFRleHRQbHVnaW4gPSB7XG4gIHZlcnNpb246IFwiMy43LjFcIixcbiAgbmFtZTogXCJ0ZXh0XCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSwgdHdlZW4pIHtcbiAgICB2YXIgaSA9IHRhcmdldC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICBkYXRhID0gdGhpcyxcbiAgICAgICAgX3Nob3J0LFxuICAgICAgICB0ZXh0LFxuICAgICAgICBvcmlnaW5hbCxcbiAgICAgICAgaixcbiAgICAgICAgY29uZGVuc2VkVGV4dCxcbiAgICAgICAgY29uZGVuc2VkT3JpZ2luYWwsXG4gICAgICAgIGFnZ3JlZ2F0ZSxcbiAgICAgICAgcztcblxuICAgIGRhdGEuc3ZnID0gdGFyZ2V0LmdldEJCb3ggJiYgKGkgPT09IFwiVEVYVFwiIHx8IGkgPT09IFwiVFNQQU5cIik7XG5cbiAgICBpZiAoIShcImlubmVySFRNTFwiIGluIHRhcmdldCkgJiYgIWRhdGEuc3ZnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZGF0YS50YXJnZXQgPSB0YXJnZXQ7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB2YWx1ZSA9IHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghKFwidmFsdWVcIiBpbiB2YWx1ZSkpIHtcbiAgICAgIGRhdGEudGV4dCA9IGRhdGEub3JpZ2luYWwgPSBbXCJcIl07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGF0YS5kZWxpbWl0ZXIgPSB2YWx1ZS5kZWxpbWl0ZXIgfHwgXCJcIjtcbiAgICBvcmlnaW5hbCA9IHNwbGl0SW5uZXJIVE1MKHRhcmdldCwgZGF0YS5kZWxpbWl0ZXIpO1xuXG4gICAgaWYgKCFfdGVtcERpdikge1xuICAgICAgX3RlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIH1cblxuICAgIF90ZW1wRGl2LmlubmVySFRNTCA9IHZhbHVlLnZhbHVlO1xuICAgIHRleHQgPSBzcGxpdElubmVySFRNTChfdGVtcERpdiwgZGF0YS5kZWxpbWl0ZXIpO1xuICAgIGRhdGEuZnJvbSA9IHR3ZWVuLl9mcm9tO1xuXG4gICAgaWYgKGRhdGEuZnJvbSkge1xuICAgICAgaSA9IG9yaWdpbmFsO1xuICAgICAgb3JpZ2luYWwgPSB0ZXh0O1xuICAgICAgdGV4dCA9IGk7XG4gICAgfVxuXG4gICAgZGF0YS5oYXNDbGFzcyA9ICEhKHZhbHVlLm5ld0NsYXNzIHx8IHZhbHVlLm9sZENsYXNzKTtcbiAgICBkYXRhLm5ld0NsYXNzID0gdmFsdWUubmV3Q2xhc3M7XG4gICAgZGF0YS5vbGRDbGFzcyA9IHZhbHVlLm9sZENsYXNzO1xuICAgIGkgPSBvcmlnaW5hbC5sZW5ndGggLSB0ZXh0Lmxlbmd0aDtcbiAgICBfc2hvcnQgPSBpIDwgMCA/IG9yaWdpbmFsIDogdGV4dDtcbiAgICBkYXRhLmZpbGxDaGFyID0gdmFsdWUuZmlsbENoYXIgfHwgKHZhbHVlLnBhZFNwYWNlID8gXCImbmJzcDtcIiA6IFwiXCIpO1xuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBpID0gLWk7XG4gICAgfVxuXG4gICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICBfc2hvcnQucHVzaChkYXRhLmZpbGxDaGFyKTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUudHlwZSA9PT0gXCJkaWZmXCIpIHtcbiAgICAgIGogPSAwO1xuICAgICAgY29uZGVuc2VkVGV4dCA9IFtdO1xuICAgICAgY29uZGVuc2VkT3JpZ2luYWwgPSBbXTtcbiAgICAgIGFnZ3JlZ2F0ZSA9IFwiXCI7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHMgPSB0ZXh0W2ldO1xuXG4gICAgICAgIGlmIChzID09PSBvcmlnaW5hbFtpXSkge1xuICAgICAgICAgIGFnZ3JlZ2F0ZSArPSBzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbmRlbnNlZFRleHRbal0gPSBhZ2dyZWdhdGUgKyBzO1xuICAgICAgICAgIGNvbmRlbnNlZE9yaWdpbmFsW2orK10gPSBhZ2dyZWdhdGUgKyBvcmlnaW5hbFtpXTtcbiAgICAgICAgICBhZ2dyZWdhdGUgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRleHQgPSBjb25kZW5zZWRUZXh0O1xuICAgICAgb3JpZ2luYWwgPSBjb25kZW5zZWRPcmlnaW5hbDtcblxuICAgICAgaWYgKGFnZ3JlZ2F0ZSkge1xuICAgICAgICB0ZXh0LnB1c2goYWdncmVnYXRlKTtcbiAgICAgICAgb3JpZ2luYWwucHVzaChhZ2dyZWdhdGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZS5zcGVlZCkge1xuICAgICAgdHdlZW4uZHVyYXRpb24oTWF0aC5taW4oMC4wNSAvIHZhbHVlLnNwZWVkICogX3Nob3J0Lmxlbmd0aCwgdmFsdWUubWF4RHVyYXRpb24gfHwgOTk5OSkpO1xuICAgIH1cblxuICAgIHRoaXMub3JpZ2luYWwgPSBvcmlnaW5hbDtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuXG4gICAgdGhpcy5fcHJvcHMucHVzaChcInRleHRcIik7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKHJhdGlvID4gMSkge1xuICAgICAgcmF0aW8gPSAxO1xuICAgIH0gZWxzZSBpZiAocmF0aW8gPCAwKSB7XG4gICAgICByYXRpbyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuZnJvbSkge1xuICAgICAgcmF0aW8gPSAxIC0gcmF0aW87XG4gICAgfVxuXG4gICAgdmFyIHRleHQgPSBkYXRhLnRleHQsXG4gICAgICAgIGhhc0NsYXNzID0gZGF0YS5oYXNDbGFzcyxcbiAgICAgICAgbmV3Q2xhc3MgPSBkYXRhLm5ld0NsYXNzLFxuICAgICAgICBvbGRDbGFzcyA9IGRhdGEub2xkQ2xhc3MsXG4gICAgICAgIGRlbGltaXRlciA9IGRhdGEuZGVsaW1pdGVyLFxuICAgICAgICB0YXJnZXQgPSBkYXRhLnRhcmdldCxcbiAgICAgICAgZmlsbENoYXIgPSBkYXRhLmZpbGxDaGFyLFxuICAgICAgICBvcmlnaW5hbCA9IGRhdGEub3JpZ2luYWwsXG4gICAgICAgIGwgPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgaSA9IHJhdGlvICogbCArIDAuNSB8IDAsXG4gICAgICAgIGFwcGx5TmV3LFxuICAgICAgICBhcHBseU9sZCxcbiAgICAgICAgc3RyO1xuXG4gICAgaWYgKGhhc0NsYXNzKSB7XG4gICAgICBhcHBseU5ldyA9IG5ld0NsYXNzICYmIGk7XG4gICAgICBhcHBseU9sZCA9IG9sZENsYXNzICYmIGkgIT09IGw7XG4gICAgICBzdHIgPSAoYXBwbHlOZXcgPyBcIjxzcGFuIGNsYXNzPSdcIiArIG5ld0NsYXNzICsgXCInPlwiIDogXCJcIikgKyB0ZXh0LnNsaWNlKDAsIGkpLmpvaW4oZGVsaW1pdGVyKSArIChhcHBseU5ldyA/IFwiPC9zcGFuPlwiIDogXCJcIikgKyAoYXBwbHlPbGQgPyBcIjxzcGFuIGNsYXNzPSdcIiArIG9sZENsYXNzICsgXCInPlwiIDogXCJcIikgKyBkZWxpbWl0ZXIgKyBvcmlnaW5hbC5zbGljZShpKS5qb2luKGRlbGltaXRlcikgKyAoYXBwbHlPbGQgPyBcIjwvc3Bhbj5cIiA6IFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSB0ZXh0LnNsaWNlKDAsIGkpLmpvaW4oZGVsaW1pdGVyKSArIGRlbGltaXRlciArIG9yaWdpbmFsLnNsaWNlKGkpLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5zdmcpIHtcbiAgICAgIC8vU1ZHIHRleHQgZWxlbWVudHMgZG9uJ3QgaGF2ZSBhbiBcImlubmVySFRNTFwiIGluIE1pY3Jvc29mdCBicm93c2Vycy5cbiAgICAgIHRhcmdldC50ZXh0Q29udGVudCA9IHN0cjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LmlubmVySFRNTCA9IGZpbGxDaGFyID09PSBcIiZuYnNwO1wiICYmIH5zdHIuaW5kZXhPZihcIiAgXCIpID8gc3RyLnNwbGl0KFwiICBcIikuam9pbihcIiZuYnNwOyZuYnNwO1wiKSA6IHN0cjtcbiAgICB9XG4gIH1cbn07XG5UZXh0UGx1Z2luLnNwbGl0SW5uZXJIVE1MID0gc3BsaXRJbm5lckhUTUw7XG5UZXh0UGx1Z2luLmVtb2ppU2FmZVNwbGl0ID0gZW1vamlTYWZlU3BsaXQ7XG5UZXh0UGx1Z2luLmdldFRleHQgPSBnZXRUZXh0O1xuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKFRleHRQbHVnaW4pO1xuZXhwb3J0IHsgVGV4dFBsdWdpbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IGdzYXAgZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgQ1NTUGx1Z2luIGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblx0VHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcblxuZXhwb3J0IHsgZ3NhcFdpdGhDU1MgYXMgZ3NhcCwgZ3NhcFdpdGhDU1MgYXMgZGVmYXVsdCwgQ1NTUGx1Z2luLCBUd2Vlbk1heFdpdGhDU1MgYXMgVHdlZW5NYXggfTtcbmV4cG9ydCB7IFR3ZWVuTGl0ZSwgVGltZWxpbmVNYXgsIFRpbWVsaW5lTGl0ZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBtYXBSYW5nZSwgcGlwZSwgdW5pdGl6ZSwgaW50ZXJwb2xhdGUsIHNodWZmbGUsIHNlbGVjdG9yIH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9EcmFnZ2FibGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0NTU1J1bGVQbHVnaW4uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0Vhc2VsUGx1Z2luLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9FYXNlUGFjay5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vTW90aW9uUGF0aFBsdWdpbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vUGl4aVBsdWdpbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2Nyb2xsVG9QbHVnaW4uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbFRyaWdnZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1RleHRQbHVnaW4uanNcIjsgXG5cbi8vQk9OVVMgRVhQT1JUU1xuLy9leHBvcnQgKiBmcm9tIFwiLi9DdXN0b21FYXNlLmpzXCI7XG4vL2V4cG9ydCAqIGZyb20gXCIuL0RyYXdTVkdQbHVnaW4uanNcIjtcbi8vZXhwb3J0ICogZnJvbSBcIi4vUGh5c2ljczJEUGx1Z2luLmpzXCI7XG4vL2V4cG9ydCAqIGZyb20gXCIuL1BoeXNpY3NQcm9wc1BsdWdpbi5qc1wiO1xuLy9leHBvcnQgKiBmcm9tIFwiLi9TY3JhbWJsZVRleHRQbHVnaW4uanNcIjtcbi8vZXhwb3J0ICogZnJvbSBcIi4vQ3VzdG9tQm91bmNlLmpzXCI7XG4vL2V4cG9ydCAqIGZyb20gXCIuL0N1c3RvbVdpZ2dsZS5qc1wiO1xuLy9leHBvcnQgKiBmcm9tIFwiLi9GbGlwLmpzXCI7XG4vL2V4cG9ydCAqIGZyb20gXCIuL0dTRGV2VG9vbHMuanNcIjtcbi8vZXhwb3J0ICogZnJvbSBcIi4vSW5lcnRpYVBsdWdpbi5qc1wiO1xuLy9leHBvcnQgKiBmcm9tIFwiLi9Nb3JwaFNWR1BsdWdpbi5qc1wiO1xuLy9leHBvcnQgKiBmcm9tIFwiLi9Nb3Rpb25QYXRoSGVscGVyLmpzXCI7XG4vL2V4cG9ydCAqIGZyb20gXCIuL1NwbGl0VGV4dC5qc1wiOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyohXG4gKiBHU0FQIDMuNy4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIxLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgX3RpbnlOdW0gPSAxIC8gX2JpZ051bSxcbiAgICBfMlBJID0gTWF0aC5QSSAqIDIsXG4gICAgX0hBTEZfUEkgPSBfMlBJIC8gNCxcbiAgICBfZ3NJRCA9IDAsXG4gICAgX3NxcnQgPSBNYXRoLnNxcnQsXG4gICAgX2NvcyA9IE1hdGguY29zLFxuICAgIF9zaW4gPSBNYXRoLnNpbixcbiAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn0sXG4gICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59LFxuICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufSxcbiAgICBfaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBfaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9pc05vdEZhbHNlID0gZnVuY3Rpb24gX2lzTm90RmFsc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBmYWxzZTtcbn0sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfaXNGdW5jT3JTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSB8fCBfaXNTdHJpbmcodmFsdWUpO1xufSxcbiAgICBfaXNUeXBlZEFycmF5ID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgIC8vIG5vdGU6IElFMTAgaGFzIEFycmF5QnVmZmVyLCBidXQgTk9UIEFycmF5QnVmZmVyLmlzVmlldygpLlxuX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgIF9zdHJpY3ROdW1FeHAgPSAvKD86LT9cXC4/XFxkfFxcLikrL2dpLFxuICAgIC8vb25seSBudW1iZXJzIChpbmNsdWRpbmcgbmVnYXRpdmVzIGFuZCBkZWNpbWFscykgYnV0IE5PVCByZWxhdGl2ZSB2YWx1ZXMuXG5fbnVtRXhwID0gL1stKz0uXSpcXGQrWy5lXFwtK10qXFxkKltlXFwtK10qXFxkKi9nLFxuICAgIC8vZmluZHMgYW55IG51bWJlcnMsIGluY2x1ZGluZyBvbmVzIHRoYXQgc3RhcnQgd2l0aCArPSBvciAtPSwgbmVnYXRpdmUgbnVtYmVycywgYW5kIG9uZXMgaW4gc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlIDFlLTguXG5fbnVtV2l0aFVuaXRFeHAgPSAvWy0rPS5dKlxcZCtbLmUtXSpcXGQqW2EteiVdKi9nLFxuICAgIF9jb21wbGV4U3RyaW5nTnVtRXhwID0gL1stKz0uXSpcXGQrXFwuP1xcZCooPzplLXxlXFwrKT9cXGQqL2dpLFxuICAgIC8vZHVwbGljYXRlIHNvIHRoYXQgd2hpbGUgd2UncmUgbG9vcGluZyB0aHJvdWdoIG1hdGNoZXMgZnJvbSBleGVjKCksIGl0IGRvZXNuJ3QgY29udGFtaW5hdGUgdGhlIGxhc3RJbmRleCBvZiBfbnVtRXhwIHdoaWNoIHdlIHVzZSB0byBzZWFyY2ggZm9yIGNvbG9ycyB0b28uXG5fcmVsRXhwID0gL1srLV09LT9bLlxcZF0rLyxcbiAgICBfZGVsaW1pdGVkVmFsdWVFeHAgPSAvW14sJ1wiXFxbXFxdXFxzXSsvZ2ksXG4gICAgLy8gcHJldmlvdXNseSAvWyNcXC0rLl0qXFxiW2EtelxcZFxcLT0rJS5dKy9naSBidXQgZGlkbid0IGNhdGNoIHNwZWNpYWwgY2hhcmFjdGVycy5cbl91bml0RXhwID0gL1tcXGQuK1xcLT1dKyg/OmVbLStdXFxkKikqL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3Jlc2VydmVkUHJvcHMgPSB7fSxcbiAgICBfbGF6eVR3ZWVucyA9IFtdLFxuICAgIF9sYXp5TG9va3VwID0ge30sXG4gICAgX2xhc3RSZW5kZXJlZEZyYW1lLFxuICAgIF9wbHVnaW5zID0ge30sXG4gICAgX2VmZmVjdHMgPSB7fSxcbiAgICBfbmV4dEdDRnJhbWUgPSAzMCxcbiAgICBfaGFybmVzc1BsdWdpbnMgPSBbXSxcbiAgICBfY2FsbGJhY2tOYW1lcyA9IFwiXCIsXG4gICAgX2hhcm5lc3MgPSBmdW5jdGlvbiBfaGFybmVzcyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXQgPSB0YXJnZXRzWzBdLFxuICAgICAgaGFybmVzc1BsdWdpbixcbiAgICAgIGk7XG4gIF9pc09iamVjdCh0YXJnZXQpIHx8IF9pc0Z1bmN0aW9uKHRhcmdldCkgfHwgKHRhcmdldHMgPSBbdGFyZ2V0c10pO1xuXG4gIGlmICghKGhhcm5lc3NQbHVnaW4gPSAodGFyZ2V0Ll9nc2FwIHx8IHt9KS5oYXJuZXNzKSkge1xuICAgIC8vIGZpbmQgdGhlIGZpcnN0IHRhcmdldCB3aXRoIGEgaGFybmVzcy4gV2UgYXNzdW1lIHRhcmdldHMgcGFzc2VkIGludG8gYW4gYW5pbWF0aW9uIHdpbGwgYmUgb2Ygc2ltaWxhciB0eXBlLCBtZWFuaW5nIHRoZSBzYW1lIGtpbmQgb2YgaGFybmVzcyBjYW4gYmUgdXNlZCBmb3IgdGhlbSBhbGwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICBpID0gX2hhcm5lc3NQbHVnaW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0gJiYgIV9oYXJuZXNzUGx1Z2luc1tpXS50YXJnZXRUZXN0KHRhcmdldCkpIHt9XG5cbiAgICBoYXJuZXNzUGx1Z2luID0gX2hhcm5lc3NQbHVnaW5zW2ldO1xuICB9XG5cbiAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB0YXJnZXRzW2ldICYmICh0YXJnZXRzW2ldLl9nc2FwIHx8ICh0YXJnZXRzW2ldLl9nc2FwID0gbmV3IEdTQ2FjaGUodGFyZ2V0c1tpXSwgaGFybmVzc1BsdWdpbikpKSB8fCB0YXJnZXRzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRzO1xufSxcbiAgICBfZ2V0Q2FjaGUgPSBmdW5jdGlvbiBfZ2V0Q2FjaGUodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModG9BcnJheSh0YXJnZXQpKVswXS5fZ3NhcDtcbn0sXG4gICAgX2dldFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHYpIHtcbiAgcmV0dXJuICh2ID0gdGFyZ2V0W3Byb3BlcnR5XSkgJiYgX2lzRnVuY3Rpb24odikgPyB0YXJnZXRbcHJvcGVydHldKCkgOiBfaXNVbmRlZmluZWQodikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSB8fCB2O1xufSxcbiAgICBfZm9yRWFjaE5hbWUgPSBmdW5jdGlvbiBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmMpIHtcbiAgcmV0dXJuIChuYW1lcyA9IG5hbWVzLnNwbGl0KFwiLFwiKSkuZm9yRWFjaChmdW5jKSB8fCBuYW1lcztcbn0sXG4gICAgLy9zcGxpdCBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIG5hbWVzIGludG8gYW4gYXJyYXksIHRoZW4gcnVuIGEgZm9yRWFjaCgpIGZ1bmN0aW9uIGFuZCByZXR1cm4gdGhlIHNwbGl0IGFycmF5ICh0aGlzIGlzIGp1c3QgYSB3YXkgdG8gY29uc29saWRhdGUvc2hvcnRlbiBzb21lIGNvZGUpLlxuX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfYXJyYXlDb250YWluc0FueSA9IGZ1bmN0aW9uIF9hcnJheUNvbnRhaW5zQW55KHRvU2VhcmNoLCB0b0ZpbmQpIHtcbiAgLy9zZWFyY2hlcyBvbmUgYXJyYXkgdG8gZmluZCBtYXRjaGVzIGZvciBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSB0b0ZpbmQgYXJyYXkuIEFzIHNvb24gYXMgb25lIGlzIGZvdW5kLCBpdCByZXR1cm5zIHRydWUuIEl0IGRvZXMgTk9UIHJldHVybiBhbGwgdGhlIG1hdGNoZXM7IGl0J3Mgc2ltcGx5IGEgYm9vbGVhbiBzZWFyY2guXG4gIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gIHJldHVybiBpIDwgbDtcbn0sXG4gICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICBhID0gX2xhenlUd2VlbnMuc2xpY2UoMCksXG4gICAgICBpLFxuICAgICAgdHdlZW47XG5cbiAgX2xhenlMb29rdXAgPSB7fTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdHdlZW4gPSBhW2ldO1xuICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICB9XG59LFxuICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTtcbiAgYW5pbWF0aW9uLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIHNvbWVvbmUgY2FsbHMgc2VlaygpIG9yIHRpbWUoKSBvciBwcm9ncmVzcygpLCB0aGV5IGV4cGVjdCBhbiBpbW1lZGlhdGUgcmVuZGVyLlxufSxcbiAgICBfbnVtZXJpY0lmUG9zc2libGUgPSBmdW5jdGlvbiBfbnVtZXJpY0lmUG9zc2libGUodmFsdWUpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgcmV0dXJuIChuIHx8IG4gPT09IDApICYmICh2YWx1ZSArIFwiXCIpLm1hdGNoKF9kZWxpbWl0ZWRWYWx1ZUV4cCkubGVuZ3RoIDwgMiA/IG4gOiBfaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaChwKSB7XG4gIHJldHVybiBwO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9zZXRLZXlmcmFtZURlZmF1bHRzID0gZnVuY3Rpb24gX3NldEtleWZyYW1lRGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyA6IF9zZXREZWZhdWx0cztcblxuICBpZiAoX2lzTm90RmFsc2UodmFycy5pbmhlcml0KSkge1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGZ1bmModmFycywgcGFyZW50LnZhcnMuZGVmYXVsdHMpO1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudCB8fCBwYXJlbnQuX2RwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YXJzO1xufSxcbiAgICBfYXJyYXlzTWF0Y2ggPSBmdW5jdGlvbiBfYXJyYXlzTWF0Y2goYTEsIGEyKSB7XG4gIHZhciBpID0gYTEubGVuZ3RoLFxuICAgICAgbWF0Y2ggPSBpID09PSBhMi5sZW5ndGg7XG5cbiAgd2hpbGUgKG1hdGNoICYmIGktLSAmJiBhMVtpXSA9PT0gYTJbaV0pIHt9XG5cbiAgcmV0dXJuIGkgPCAwO1xufSxcbiAgICBfYWRkTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfYWRkTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCwgc29ydEJ5KSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBwYXJlbnRbbGFzdFByb3BdLFxuICAgICAgdDtcblxuICBpZiAoc29ydEJ5KSB7XG4gICAgdCA9IGNoaWxkW3NvcnRCeV07XG5cbiAgICB3aGlsZSAocHJldiAmJiBwcmV2W3NvcnRCeV0gPiB0KSB7XG4gICAgICBwcmV2ID0gcHJldi5fcHJldjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJldikge1xuICAgIGNoaWxkLl9uZXh0ID0gcHJldi5fbmV4dDtcbiAgICBwcmV2Ll9uZXh0ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQuX25leHQgPSBwYXJlbnRbZmlyc3RQcm9wXTtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgaWYgKGNoaWxkLl9uZXh0KSB7XG4gICAgY2hpbGQuX25leHQuX3ByZXYgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBjaGlsZC5fcHJldiA9IHByZXY7XG4gIGNoaWxkLnBhcmVudCA9IGNoaWxkLl9kcCA9IHBhcmVudDtcbiAgcmV0dXJuIGNoaWxkO1xufSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gY2hpbGQuX3ByZXYsXG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Ll9uZXh0ID0gbmV4dDtcbiAgfSBlbHNlIGlmIChwYXJlbnRbZmlyc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IG5leHQ7XG4gIH1cblxuICBpZiAobmV4dCkge1xuICAgIG5leHQuX3ByZXYgPSBwcmV2O1xuICB9IGVsc2UgaWYgKHBhcmVudFtsYXN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IHByZXY7XG4gIH1cblxuICBjaGlsZC5fbmV4dCA9IGNoaWxkLl9wcmV2ID0gY2hpbGQucGFyZW50ID0gbnVsbDsgLy8gZG9uJ3QgZGVsZXRlIHRoZSBfZHAganVzdCBzbyB3ZSBjYW4gcmV2ZXJ0IGlmIG5lY2Vzc2FyeS4gQnV0IHBhcmVudCBzaG91bGQgYmUgbnVsbCB0byBpbmRpY2F0ZSB0aGUgaXRlbSBpc24ndCBpbiBhIGxpbmtlZCBsaXN0LlxufSxcbiAgICBfcmVtb3ZlRnJvbVBhcmVudCA9IGZ1bmN0aW9uIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkLCBvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlKSB7XG4gIGNoaWxkLnBhcmVudCAmJiAoIW9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUgfHwgY2hpbGQucGFyZW50LmF1dG9SZW1vdmVDaGlsZHJlbikgJiYgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG4gIGNoaWxkLl9hY3QgPSAwO1xufSxcbiAgICBfdW5jYWNoZSA9IGZ1bmN0aW9uIF91bmNhY2hlKGFuaW1hdGlvbiwgY2hpbGQpIHtcbiAgaWYgKGFuaW1hdGlvbiAmJiAoIWNoaWxkIHx8IGNoaWxkLl9lbmQgPiBhbmltYXRpb24uX2R1ciB8fCBjaGlsZC5fc3RhcnQgPCAwKSkge1xuICAgIC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogaWYgYSBjaGlsZCBhbmltYXRpb24gaXMgcGFzc2VkIGluIHdlIHNob3VsZCBvbmx5IHVuY2FjaGUgaWYgdGhhdCBjaGlsZCBFWFRFTkRTIHRoZSBhbmltYXRpb24gKGl0cyBlbmQgdGltZSBpcyBiZXlvbmQgdGhlIGVuZClcbiAgICB2YXIgYSA9IGFuaW1hdGlvbjtcblxuICAgIHdoaWxlIChhKSB7XG4gICAgICBhLl9kaXJ0eSA9IDE7XG4gICAgICBhID0gYS5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3JlY2FjaGVBbmNlc3RvcnMgPSBmdW5jdGlvbiBfcmVjYWNoZUFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5wYXJlbnQ7XG5cbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgLy9zb21ldGltZXMgd2UgbXVzdCBmb3JjZSBhIHJlLXNvcnQgb2YgYWxsIGNoaWxkcmVuIGFuZCB1cGRhdGUgdGhlIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gb2YgYWxsIGFuY2VzdG9yIHRpbWVsaW5lcyBpbW1lZGlhdGVseSBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciBsb29wLCBvbmUgdHdlZW4gYWx0ZXJzIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgd2hpY2ggc2hvdmVzIGl0cyBzdGFydFRpbWUgYmVmb3JlIDAsIGZvcmNpbmcgdGhlIHBhcmVudCB0aW1lbGluZSB0byBzaGlmdCBhcm91bmQgYW5kIHNoaWZ0Q2hpbGRyZW4oKSB3aGljaCBjb3VsZCBhZmZlY3QgdGhhdCBuZXh0IHR3ZWVuJ3MgcmVuZGVyIChzdGFydFRpbWUpLiBEb2Vzbid0IG1hdHRlciBmb3IgdGhlIHJvb3QgdGltZWxpbmUgdGhvdWdoLlxuICAgIHBhcmVudC5fZGlydHkgPSAxO1xuICAgIHBhcmVudC50b3RhbER1cmF0aW9uKCk7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgcmV0dXJuICFhbmltYXRpb24gfHwgYW5pbWF0aW9uLl90cyAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uLnBhcmVudCk7XG59LFxuICAgIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbiA9IGZ1bmN0aW9uIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKGFuaW1hdGlvbi5fdFRpbWUsIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpICsgYW5pbWF0aW9uLl9yRGVsYXkpICogYW5pbWF0aW9uIDogMDtcbn0sXG4gICAgLy8gZmVlZCBpbiB0aGUgdG90YWxUaW1lIGFuZCBjeWNsZUR1cmF0aW9uIGFuZCBpdCdsbCByZXR1cm4gdGhlIGN5Y2xlIChpdGVyYXRpb24gbWludXMgMSkgYW5kIGlmIHRoZSBwbGF5aGVhZCBpcyBleGFjdGx5IGF0IHRoZSB2ZXJ5IEVORCwgaXQgd2lsbCBOT1QgYnVtcCB1cCB0byB0aGUgbmV4dCBjeWNsZS5cbl9hbmltYXRpb25DeWNsZSA9IGZ1bmN0aW9uIF9hbmltYXRpb25DeWNsZSh0VGltZSwgY3ljbGVEdXJhdGlvbikge1xuICB2YXIgd2hvbGUgPSBNYXRoLmZsb29yKHRUaW1lIC89IGN5Y2xlRHVyYXRpb24pO1xuICByZXR1cm4gdFRpbWUgJiYgd2hvbGUgPT09IHRUaW1lID8gd2hvbGUgLSAxIDogd2hvbGU7XG59LFxuICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG59LFxuICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmQoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmQocGFyZW50Ll90aW1lIC0gKGFuaW1hdGlvbi5fdHMgPiAwID8gdG90YWxUaW1lIC8gYW5pbWF0aW9uLl90cyA6ICgoYW5pbWF0aW9uLl9kaXJ0eSA/IGFuaW1hdGlvbi50b3RhbER1cmF0aW9uKCkgOiBhbmltYXRpb24uX3REdXIpIC0gdG90YWxUaW1lKSAvIC1hbmltYXRpb24uX3RzKSk7XG5cbiAgICBfc2V0RW5kKGFuaW1hdGlvbik7XG5cbiAgICBwYXJlbnQuX2RpcnR5IHx8IF91bmNhY2hlKHBhcmVudCwgYW5pbWF0aW9uKTsgLy9mb3IgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuIElmIHRoZSBwYXJlbnQncyBjYWNoZSBpcyBhbHJlYWR5IGRpcnR5LCBpdCBhbHJlYWR5IHRvb2sgY2FyZSBvZiBtYXJraW5nIHRoZSBhbmNlc3RvcnMgYXMgZGlydHkgdG9vLCBzbyBza2lwIHRoZSBmdW5jdGlvbiBjYWxsIGhlcmUuXG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcblxuLypcbl90b3RhbFRpbWVUb1RpbWUgPSAoY2xhbXBlZFRvdGFsVGltZSwgZHVyYXRpb24sIHJlcGVhdCwgcmVwZWF0RGVsYXksIHlveW8pID0+IHtcblx0bGV0IGN5Y2xlRHVyYXRpb24gPSBkdXJhdGlvbiArIHJlcGVhdERlbGF5LFxuXHRcdHRpbWUgPSBfcm91bmQoY2xhbXBlZFRvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24pO1xuXHRpZiAodGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0dGltZSA9IGR1cmF0aW9uO1xuXHR9XG5cdHJldHVybiAoeW95byAmJiAofn4oY2xhbXBlZFRvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pICYgMSkpID8gZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbn0sXG4qL1xuX3Bvc3RBZGRDaGVja3MgPSBmdW5jdGlvbiBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpIHtcbiAgdmFyIHQ7XG5cbiAgaWYgKGNoaWxkLl90aW1lIHx8IGNoaWxkLl9pbml0dGVkICYmICFjaGlsZC5fZHVyKSB7XG4gICAgLy9pbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kKChfaXNOdW1iZXIocG9zaXRpb24pID8gcG9zaXRpb24gOiBwb3NpdGlvbiB8fCB0aW1lbGluZSAhPT0gX2dsb2JhbFRpbWVsaW5lID8gX3BhcnNlUG9zaXRpb24odGltZWxpbmUsIHBvc2l0aW9uLCBjaGlsZCkgOiB0aW1lbGluZS5fdGltZSkgKyBjaGlsZC5fZGVsYXkpO1xuICBjaGlsZC5fZW5kID0gX3JvdW5kKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgX2lzRnJvbU9yRnJvbVN0YXJ0KGNoaWxkKSB8fCAodGltZWxpbmUuX3JlY2VudCA9IGNoaWxkKTtcbiAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICByZXR1cm4gdGltZWxpbmU7XG59LFxuICAgIF9zY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3Njcm9sbFRyaWdnZXIoYW5pbWF0aW9uLCB0cmlnZ2VyKSB7XG4gIHJldHVybiAoX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlciB8fCBfbWlzc2luZ1BsdWdpbihcInNjcm9sbFRyaWdnZXJcIiwgdHJpZ2dlcikpICYmIF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIuY3JlYXRlKHRyaWdnZXIsIGFuaW1hdGlvbik7XG59LFxuICAgIF9hdHRlbXB0SW5pdFR3ZWVuID0gZnVuY3Rpb24gX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzKSB7XG4gIF9pbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSk7XG5cbiAgaWYgKCF0d2Vlbi5faW5pdHRlZCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKCFmb3JjZSAmJiB0d2Vlbi5fcHQgJiYgKHR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5ICE9PSBmYWxzZSB8fCAhdHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkpICYmIF9sYXN0UmVuZGVyZWRGcmFtZSAhPT0gX3RpY2tlci5mcmFtZSkge1xuICAgIF9sYXp5VHdlZW5zLnB1c2godHdlZW4pO1xuXG4gICAgdHdlZW4uX2xhenkgPSBbdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50c107XG4gICAgcmV0dXJuIDE7XG4gIH1cbn0sXG4gICAgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCA9IGZ1bmN0aW9uIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQoX3JlZikge1xuICB2YXIgcGFyZW50ID0gX3JlZi5wYXJlbnQ7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Ll90cyAmJiBwYXJlbnQuX2luaXR0ZWQgJiYgIXBhcmVudC5fbG9jayAmJiAocGFyZW50LnJhd1RpbWUoKSA8IDAgfHwgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChwYXJlbnQpKTtcbn0sXG4gICAgLy8gY2hlY2sgcGFyZW50J3MgX2xvY2sgYmVjYXVzZSB3aGVuIGEgdGltZWxpbmUgcmVwZWF0cy95b3lvcyBhbmQgZG9lcyBpdHMgYXJ0aWZpY2lhbCB3cmFwcGluZywgd2Ugc2hvdWxkbid0IGZvcmNlIHRoZSByYXRpbyBiYWNrIHRvIDBcbl9pc0Zyb21PckZyb21TdGFydCA9IGZ1bmN0aW9uIF9pc0Zyb21PckZyb21TdGFydChfcmVmMikge1xuICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG4gIHJldHVybiBkYXRhID09PSBcImlzRnJvbVN0YXJ0XCIgfHwgZGF0YSA9PT0gXCJpc1N0YXJ0XCI7XG59LFxuICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiA9IGZ1bmN0aW9uIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgdmFyIHByZXZSYXRpbyA9IHR3ZWVuLnJhdGlvLFxuICAgICAgcmF0aW8gPSB0b3RhbFRpbWUgPCAwIHx8ICF0b3RhbFRpbWUgJiYgKCF0d2Vlbi5fc3RhcnQgJiYgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCh0d2VlbikgJiYgISghdHdlZW4uX2luaXR0ZWQgJiYgX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgfHwgKHR3ZWVuLl90cyA8IDAgfHwgdHdlZW4uX2RwLl90cyA8IDApICYmICFfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSA/IDAgOiAxLFxuICAgICAgLy8gaWYgdGhlIHR3ZWVuIG9yIGl0cyBwYXJlbnQgaXMgcmV2ZXJzZWQgYW5kIHRoZSB0b3RhbFRpbWUgaXMgMCwgd2Ugc2hvdWxkIGdvIHRvIGEgcmF0aW8gb2YgMC4gRWRnZSBjYXNlOiBpZiBhIGZyb20oKSBvciBmcm9tVG8oKSBzdGFnZ2VyIHR3ZWVuIGlzIHBsYWNlZCBsYXRlciBpbiBhIHRpbWVsaW5lLCB0aGUgXCJzdGFydEF0XCIgemVyby1kdXJhdGlvbiB0d2VlbiBjb3VsZCBpbml0aWFsbHkgcmVuZGVyIGF0IGEgdGltZSB3aGVuIHRoZSBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBpcyB0ZWNobmljYWxseSBCRUZPUkUgd2hlcmUgdGhpcyB0d2VlbiBpcywgc28gbWFrZSBzdXJlIHRoYXQgYW55IFwiZnJvbVwiIGFuZCBcImZyb21Ub1wiIHN0YXJ0QXQgdHdlZW5zIGFyZSByZW5kZXJlZCB0aGUgZmlyc3QgdGltZSBhdCBhIHJhdGlvIG9mIDEuXG4gIHJlcGVhdERlbGF5ID0gdHdlZW4uX3JEZWxheSxcbiAgICAgIHRUaW1lID0gMCxcbiAgICAgIHB0LFxuICAgICAgaXRlcmF0aW9uLFxuICAgICAgcHJldkl0ZXJhdGlvbjtcblxuICBpZiAocmVwZWF0RGVsYXkgJiYgdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vIGluIGNhc2UgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gdGhhdCBoYXMgYSByZXBlYXQgd2l0aCBhIHJlcGVhdERlbGF5XG4gICAgdFRpbWUgPSBfY2xhbXAoMCwgdHdlZW4uX3REdXIsIHRvdGFsVGltZSk7XG4gICAgaXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCByZXBlYXREZWxheSk7XG4gICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB0d2Vlbi52YXJzLnJlcGVhdFJlZnJlc2ggJiYgdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRpbyAhPT0gcHJldlJhdGlvIHx8IGZvcmNlIHx8IHR3ZWVuLl96VGltZSA9PT0gX3RpbnlOdW0gfHwgIXRvdGFsVGltZSAmJiB0d2Vlbi5felRpbWUpIHtcbiAgICBpZiAoIXR3ZWVuLl9pbml0dGVkICYmIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cykpIHtcbiAgICAgIC8vIGlmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcmV2SXRlcmF0aW9uID0gdHdlZW4uX3pUaW1lO1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZSB8fCAoc3VwcHJlc3NFdmVudHMgPyBfdGlueU51bSA6IDApOyAvLyB3aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgIHN1cHByZXNzRXZlbnRzIHx8IChzdXBwcmVzc0V2ZW50cyA9IHRvdGFsVGltZSAmJiAhcHJldkl0ZXJhdGlvbik7IC8vIGlmIGl0IHdhcyByZW5kZXJlZCBwcmV2aW91c2x5IGF0IGV4YWN0bHkgMCAoX3pUaW1lKSBhbmQgbm93IHRoZSBwbGF5aGVhZCBpcyBtb3ZpbmcgYXdheSwgRE9OJ1QgZmlyZSBjYWxsYmFja3Mgb3RoZXJ3aXNlIHRoZXknbGwgc2VlbSBsaWtlIGR1cGxpY2F0ZXMuXG5cbiAgICB0d2Vlbi5yYXRpbyA9IHJhdGlvO1xuICAgIHR3ZWVuLl9mcm9tICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG4gICAgdHdlZW4uX3RpbWUgPSAwO1xuICAgIHR3ZWVuLl90VGltZSA9IHRUaW1lO1xuICAgIHB0ID0gdHdlZW4uX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgdHdlZW4uX3N0YXJ0QXQgJiYgdG90YWxUaW1lIDwgMCAmJiB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICB0d2Vlbi5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICByYXRpbyAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0d2VlbiwgMSk7XG5cbiAgICAgIGlmICghc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICB0d2Vlbi5fcHJvbSAmJiB0d2Vlbi5fcHJvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghdHdlZW4uX3pUaW1lKSB7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICB9XG59LFxuICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgdmFyIGNoaWxkO1xuXG4gIGlmICh0aW1lID4gcHJldlRpbWUpIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgIGlmICghY2hpbGQuX2R1ciAmJiBjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPiBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9sYXN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICBpZiAoIWNoaWxkLl9kdXIgJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgIH1cbiAgfVxufSxcbiAgICBfc2V0RHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBkdXJhdGlvbiwgc2tpcFVuY2FjaGUsIGxlYXZlUGxheWhlYWQpIHtcbiAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgZHVyID0gX3JvdW5kKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgJiYgKGFuaW1hdGlvbi5fdGltZSAqPSBkdXIgLyBhbmltYXRpb24uX2R1cik7XG4gIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmQoZHVyICogKHJlcGVhdCArIDEpICsgYW5pbWF0aW9uLl9yRGVsYXkgKiByZXBlYXQpO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkID8gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCBhbmltYXRpb24uX3RUaW1lID0gYW5pbWF0aW9uLl90RHVyICogdG90YWxQcm9ncmVzcykgOiBhbmltYXRpb24ucGFyZW50ICYmIF9zZXRFbmQoYW5pbWF0aW9uKTtcbiAgc2tpcFVuY2FjaGUgfHwgX3VuY2FjaGUoYW5pbWF0aW9uLnBhcmVudCwgYW5pbWF0aW9uKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24gaW5zdGFuY2VvZiBUaW1lbGluZSA/IF91bmNhY2hlKGFuaW1hdGlvbikgOiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24uX2R1cik7XG59LFxuICAgIF96ZXJvUG9zaXRpb24gPSB7XG4gIF9zdGFydDogMCxcbiAgZW5kVGltZTogX2VtcHR5RnVuYyxcbiAgdG90YWxEdXJhdGlvbjogX2VtcHR5RnVuY1xufSxcbiAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24sIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgdmFyIGxhYmVscyA9IGFuaW1hdGlvbi5sYWJlbHMsXG4gICAgICByZWNlbnQgPSBhbmltYXRpb24uX3JlY2VudCB8fCBfemVyb1Bvc2l0aW9uLFxuICAgICAgY2xpcHBlZER1cmF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgPj0gX2JpZ051bSA/IHJlY2VudC5lbmRUaW1lKGZhbHNlKSA6IGFuaW1hdGlvbi5fZHVyLFxuICAgICAgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjaGlsZCB0aGF0IGluZmluaXRlbHkgcmVwZWF0cywgdXNlcnMgYWxtb3N0IG5ldmVyIGludGVuZCBmb3IgdGhlIGluc2VydGlvbiBwb2ludCBvZiBhIG5ldyBjaGlsZCB0byBiZSBiYXNlZCBvbiBhIFNVUEVSIGxvbmcgdmFsdWUgbGlrZSB0aGF0IHNvIHdlIGNsaXAgaXQgYW5kIGFzc3VtZSB0aGUgbW9zdCByZWNlbnRseS1hZGRlZCBjaGlsZCdzIGVuZFRpbWUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgaSxcbiAgICAgIG9mZnNldCxcbiAgICAgIGlzUGVyY2VudDtcblxuICBpZiAoX2lzU3RyaW5nKHBvc2l0aW9uKSAmJiAoaXNOYU4ocG9zaXRpb24pIHx8IHBvc2l0aW9uIGluIGxhYmVscykpIHtcbiAgICAvL2lmIHRoZSBzdHJpbmcgaXMgYSBudW1iZXIgbGlrZSBcIjFcIiwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBsYWJlbCB3aXRoIHRoYXQgbmFtZSwgb3RoZXJ3aXNlIGludGVycHJldCBpdCBhcyBhIG51bWJlciAoYWJzb2x1dGUgdmFsdWUpLlxuICAgIG9mZnNldCA9IHBvc2l0aW9uLmNoYXJBdCgwKTtcbiAgICBpc1BlcmNlbnQgPSBwb3NpdGlvbi5zdWJzdHIoLTEpID09PSBcIiVcIjtcbiAgICBpID0gcG9zaXRpb24uaW5kZXhPZihcIj1cIik7XG5cbiAgICBpZiAob2Zmc2V0ID09PSBcIjxcIiB8fCBvZmZzZXQgPT09IFwiPlwiKSB7XG4gICAgICBpID49IDAgJiYgKHBvc2l0aW9uID0gcG9zaXRpb24ucmVwbGFjZSgvPS8sIFwiXCIpKTtcbiAgICAgIHJldHVybiAob2Zmc2V0ID09PSBcIjxcIiA/IHJlY2VudC5fc3RhcnQgOiByZWNlbnQuZW5kVGltZShyZWNlbnQuX3JlcGVhdCA+PSAwKSkgKyAocGFyc2VGbG9hdChwb3NpdGlvbi5zdWJzdHIoMSkpIHx8IDApICogKGlzUGVyY2VudCA/IChpIDwgMCA/IHJlY2VudCA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKSAvIDEwMCA6IDEpO1xuICAgIH1cblxuICAgIGlmIChpIDwgMCkge1xuICAgICAgcG9zaXRpb24gaW4gbGFiZWxzIHx8IChsYWJlbHNbcG9zaXRpb25dID0gY2xpcHBlZER1cmF0aW9uKTtcbiAgICAgIHJldHVybiBsYWJlbHNbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIG9mZnNldCA9IHBhcnNlRmxvYXQocG9zaXRpb24uY2hhckF0KGkgLSAxKSArIHBvc2l0aW9uLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGlzUGVyY2VudCAmJiBwZXJjZW50QW5pbWF0aW9uKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgLyAxMDAgKiAoX2lzQXJyYXkocGVyY2VudEFuaW1hdGlvbikgPyBwZXJjZW50QW5pbWF0aW9uWzBdIDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBpID4gMSA/IF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24uc3Vic3RyKDAsIGkgLSAxKSwgcGVyY2VudEFuaW1hdGlvbikgKyBvZmZzZXQgOiBjbGlwcGVkRHVyYXRpb24gKyBvZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb24gPT0gbnVsbCA/IGNsaXBwZWREdXJhdGlvbiA6ICtwb3NpdGlvbjtcbn0sXG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSA9IGZ1bmN0aW9uIF9jcmVhdGVUd2VlblR5cGUodHlwZSwgcGFyYW1zLCB0aW1lbGluZSkge1xuICB2YXIgaXNMZWdhY3kgPSBfaXNOdW1iZXIocGFyYW1zWzFdKSxcbiAgICAgIHZhcnNJbmRleCA9IChpc0xlZ2FjeSA/IDIgOiAxKSArICh0eXBlIDwgMiA/IDAgOiAxKSxcbiAgICAgIHZhcnMgPSBwYXJhbXNbdmFyc0luZGV4XSxcbiAgICAgIGlyVmFycyxcbiAgICAgIHBhcmVudDtcblxuICBpc0xlZ2FjeSAmJiAodmFycy5kdXJhdGlvbiA9IHBhcmFtc1sxXSk7XG4gIHZhcnMucGFyZW50ID0gdGltZWxpbmU7XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBpclZhcnMgPSB2YXJzO1xuICAgIHBhcmVudCA9IHRpbWVsaW5lO1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiAhKFwiaW1tZWRpYXRlUmVuZGVyXCIgaW4gaXJWYXJzKSkge1xuICAgICAgLy8gaW5oZXJpdGFuY2UgaGFzbid0IGhhcHBlbmVkIHlldCwgYnV0IHNvbWVvbmUgbWF5IGhhdmUgc2V0IGEgZGVmYXVsdCBpbiBhbiBhbmNlc3RvciB0aW1lbGluZS4gV2UgY291bGQgZG8gdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlcikgYnV0IHRoYXQnZCBleGFjdCBhIHNsaWdodCBwZXJmb3JtYW5jZSBwZW5hbHR5IGJlY2F1c2UgX2luaGVyaXREZWZhdWx0cygpIGFsc28gcnVucyBpbiB0aGUgVHdlZW4gY29uc3RydWN0b3IuIFdlJ3JlIHBheWluZyBhIHNtYWxsIGtiIHByaWNlIGhlcmUgdG8gZ2FpbiBzcGVlZC5cbiAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgcGFyZW50ID0gX2lzTm90RmFsc2UocGFyZW50LnZhcnMuaW5oZXJpdCkgJiYgcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHR5cGUgPCAyID8gdmFycy5ydW5CYWNrd2FyZHMgPSAxIDogdmFycy5zdGFydEF0ID0gcGFyYW1zW3ZhcnNJbmRleCAtIDFdOyAvLyBcImZyb21cIiB2YXJzXG4gIH1cblxuICByZXR1cm4gbmV3IFR3ZWVuKHBhcmFtc1swXSwgdmFycywgcGFyYW1zW3ZhcnNJbmRleCArIDFdKTtcbn0sXG4gICAgX2NvbmRpdGlvbmFsUmV0dXJuID0gZnVuY3Rpb24gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jKSB7XG4gIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IGZ1bmModmFsdWUpIDogZnVuYztcbn0sXG4gICAgX2NsYW1wID0gZnVuY3Rpb24gX2NsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xufSxcbiAgICBnZXRVbml0ID0gZnVuY3Rpb24gZ2V0VW5pdCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICB2YXIgdiA9IF91bml0RXhwLmV4ZWModmFsdWUpO1xuXG4gIHJldHVybiB2ID8gdmFsdWUuc3Vic3RyKHYuaW5kZXggKyB2WzBdLmxlbmd0aCkgOiBcIlwiO1xufSxcbiAgICAvLyBub3RlOiBwcm90ZWN0IGFnYWluc3QgcGFkZGVkIG51bWJlcnMgYXMgc3RyaW5ncywgbGlrZSBcIjEwMC4xMDBcIi4gVGhhdCBzaG91bGRuJ3QgcmV0dXJuIFwiMDBcIiBhcyB0aGUgdW5pdC4gSWYgaXQncyBudW1lcmljLCByZXR1cm4gbm8gdW5pdC5cbmNsYW1wID0gZnVuY3Rpb24gY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIF9jbGFtcChtaW4sIG1heCwgdik7XG4gIH0pO1xufSxcbiAgICBfc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfaXNBcnJheUxpa2UgPSBmdW5jdGlvbiBfaXNBcnJheUxpa2UodmFsdWUsIG5vbkVtcHR5KSB7XG4gIHJldHVybiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWUgJiYgKCFub25FbXB0eSAmJiAhdmFsdWUubGVuZ3RoIHx8IHZhbHVlLmxlbmd0aCAtIDEgaW4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlWzBdKSkgJiYgIXZhbHVlLm5vZGVUeXBlICYmIHZhbHVlICE9PSBfd2luO1xufSxcbiAgICBfZmxhdHRlbiA9IGZ1bmN0aW9uIF9mbGF0dGVuKGFyLCBsZWF2ZVN0cmluZ3MsIGFjY3VtdWxhdG9yKSB7XG4gIGlmIChhY2N1bXVsYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBfYWNjdW11bGF0b3I7XG5cbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzIHx8IF9pc0FycmF5TGlrZSh2YWx1ZSwgMSkgPyAoX2FjY3VtdWxhdG9yID0gYWNjdW11bGF0b3IpLnB1c2guYXBwbHkoX2FjY3VtdWxhdG9yLCB0b0FycmF5KHZhbHVlKSkgOiBhY2N1bXVsYXRvci5wdXNoKHZhbHVlKTtcbiAgfSkgfHwgYWNjdW11bGF0b3I7XG59LFxuICAgIC8vdGFrZXMgYW55IHZhbHVlIGFuZCByZXR1cm5zIGFuIGFycmF5LiBJZiBpdCdzIGEgc3RyaW5nIChhbmQgbGVhdmVTdHJpbmdzIGlzbid0IHRydWUpLCBpdCdsbCB1c2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpIGFuZCBjb252ZXJ0IHRoYXQgdG8gYW4gYXJyYXkuIEl0J2xsIGFsc28gYWNjZXB0IGl0ZXJhYmxlcyBsaWtlIGpRdWVyeSBvYmplY3RzLlxudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIHNjb3BlLCBsZWF2ZVN0cmluZ3MpIHtcbiAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyAmJiAoX2NvcmVJbml0dGVkIHx8ICFfd2FrZSgpKSA/IF9zbGljZS5jYWxsKChzY29wZSB8fCBfZG9jKS5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSwgMCkgOiBfaXNBcnJheSh2YWx1ZSkgPyBfZmxhdHRlbih2YWx1ZSwgbGVhdmVTdHJpbmdzKSA6IF9pc0FycmF5TGlrZSh2YWx1ZSkgPyBfc2xpY2UuY2FsbCh2YWx1ZSwgMCkgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXTtcbn0sXG4gICAgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3Rvcih2YWx1ZSkge1xuICB2YWx1ZSA9IHRvQXJyYXkodmFsdWUpWzBdIHx8IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGVsID0gdmFsdWUuY3VycmVudCB8fCB2YWx1ZS5uYXRpdmVFbGVtZW50IHx8IHZhbHVlO1xuICAgIHJldHVybiB0b0FycmF5KHYsIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgPyBlbCA6IGVsID09PSB2YWx1ZSA/IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgOiB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHNodWZmbGUgPSBmdW5jdGlvbiBzaHVmZmxlKGEpIHtcbiAgcmV0dXJuIGEuc29ydChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIC41IC0gTWF0aC5yYW5kb20oKTtcbiAgfSk7XG59LFxuICAgIC8vIGFsdGVybmF0aXZlIHRoYXQncyBhIGJpdCBmYXN0ZXIgYW5kIG1vcmUgcmVsaWFibHkgZGl2ZXJzZSBidXQgYmlnZ2VyOiAgIGZvciAobGV0IGosIHYsIGkgPSBhLmxlbmd0aDsgaTsgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpLCB2ID0gYVstLWldLCBhW2ldID0gYVtqXSwgYVtqXSA9IHYpOyByZXR1cm4gYTtcbi8vZm9yIGRpc3RyaWJ1dGluZyB2YWx1ZXMgYWNyb3NzIGFuIGFycmF5LiBDYW4gYWNjZXB0IGEgbnVtYmVyLCBhIGZ1bmN0aW9uIG9yIChtb3N0IGNvbW1vbmx5KSBhIGZ1bmN0aW9uIHdoaWNoIGNhbiBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczoge2Jhc2UsIGFtb3VudCwgZnJvbSwgZWFzZSwgZ3JpZCwgYXhpcywgbGVuZ3RoLCBlYWNofS4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZXhwZWN0cyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6IGluZGV4LCB0YXJnZXQsIGFycmF5LiBSZWNvZ25pemVzIHRoZSBmb2xsb3dpbmdcbmRpc3RyaWJ1dGUgPSBmdW5jdGlvbiBkaXN0cmlidXRlKHYpIHtcbiAgaWYgKF9pc0Z1bmN0aW9uKHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICB2YXIgdmFycyA9IF9pc09iamVjdCh2KSA/IHYgOiB7XG4gICAgZWFjaDogdlxuICB9LFxuICAgICAgLy9uOjEgaXMganVzdCB0byBpbmRpY2F0ZSB2IHdhcyBhIG51bWJlcjsgd2UgbGV2ZXJhZ2UgdGhhdCBsYXRlciB0byBzZXQgdiBhY2NvcmRpbmcgdG8gdGhlIGxlbmd0aCB3ZSBnZXQuIElmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbiwgd2UgdHJlYXQgaXQgbGlrZSB0aGUgb2xkIHN0YWdnZXIgdmFsdWUgd2hlcmUgMC4xLCBmb3IgZXhhbXBsZSwgd291bGQgbWVhbiB0aGF0IHRoaW5ncyB3b3VsZCBiZSBkaXN0cmlidXRlZCB3aXRoIDAuMSBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0b3RhbCBcImFtb3VudFwiIHRoYXQncyBjaHVua2VkIG91dCBhbW9uZyB0aGVtIGFsbC5cbiAgZWFzZSA9IF9wYXJzZUVhc2UodmFycy5lYXNlKSxcbiAgICAgIGZyb20gPSB2YXJzLmZyb20gfHwgMCxcbiAgICAgIGJhc2UgPSBwYXJzZUZsb2F0KHZhcnMuYmFzZSkgfHwgMCxcbiAgICAgIGNhY2hlID0ge30sXG4gICAgICBpc0RlY2ltYWwgPSBmcm9tID4gMCAmJiBmcm9tIDwgMSxcbiAgICAgIHJhdGlvcyA9IGlzTmFOKGZyb20pIHx8IGlzRGVjaW1hbCxcbiAgICAgIGF4aXMgPSB2YXJzLmF4aXMsXG4gICAgICByYXRpb1ggPSBmcm9tLFxuICAgICAgcmF0aW9ZID0gZnJvbTtcblxuICBpZiAoX2lzU3RyaW5nKGZyb20pKSB7XG4gICAgcmF0aW9YID0gcmF0aW9ZID0ge1xuICAgICAgY2VudGVyOiAuNSxcbiAgICAgIGVkZ2VzOiAuNSxcbiAgICAgIGVuZDogMVxuICAgIH1bZnJvbV0gfHwgMDtcbiAgfSBlbHNlIGlmICghaXNEZWNpbWFsICYmIHJhdGlvcykge1xuICAgIHJhdGlvWCA9IGZyb21bMF07XG4gICAgcmF0aW9ZID0gZnJvbVsxXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaSwgdGFyZ2V0LCBhKSB7XG4gICAgdmFyIGwgPSAoYSB8fCB2YXJzKS5sZW5ndGgsXG4gICAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdLFxuICAgICAgICBvcmlnaW5YLFxuICAgICAgICBvcmlnaW5ZLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBkLFxuICAgICAgICBqLFxuICAgICAgICBtYXgsXG4gICAgICAgIG1pbixcbiAgICAgICAgd3JhcEF0O1xuXG4gICAgaWYgKCFkaXN0YW5jZXMpIHtcbiAgICAgIHdyYXBBdCA9IHZhcnMuZ3JpZCA9PT0gXCJhdXRvXCIgPyAwIDogKHZhcnMuZ3JpZCB8fCBbMSwgX2JpZ051bV0pWzFdO1xuXG4gICAgICBpZiAoIXdyYXBBdCkge1xuICAgICAgICBtYXggPSAtX2JpZ051bTtcblxuICAgICAgICB3aGlsZSAobWF4IDwgKG1heCA9IGFbd3JhcEF0KytdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpICYmIHdyYXBBdCA8IGwpIHt9XG5cbiAgICAgICAgd3JhcEF0LS07XG4gICAgICB9XG5cbiAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdID0gW107XG4gICAgICBvcmlnaW5YID0gcmF0aW9zID8gTWF0aC5taW4od3JhcEF0LCBsKSAqIHJhdGlvWCAtIC41IDogZnJvbSAlIHdyYXBBdDtcbiAgICAgIG9yaWdpblkgPSByYXRpb3MgPyBsICogcmF0aW9ZIC8gd3JhcEF0IC0gLjUgOiBmcm9tIC8gd3JhcEF0IHwgMDtcbiAgICAgIG1heCA9IDA7XG4gICAgICBtaW4gPSBfYmlnTnVtO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgIHggPSBqICUgd3JhcEF0IC0gb3JpZ2luWDtcbiAgICAgICAgeSA9IG9yaWdpblkgLSAoaiAvIHdyYXBBdCB8IDApO1xuICAgICAgICBkaXN0YW5jZXNbal0gPSBkID0gIWF4aXMgPyBfc3FydCh4ICogeCArIHkgKiB5KSA6IE1hdGguYWJzKGF4aXMgPT09IFwieVwiID8geSA6IHgpO1xuICAgICAgICBkID4gbWF4ICYmIChtYXggPSBkKTtcbiAgICAgICAgZCA8IG1pbiAmJiAobWluID0gZCk7XG4gICAgICB9XG5cbiAgICAgIGZyb20gPT09IFwicmFuZG9tXCIgJiYgc2h1ZmZsZShkaXN0YW5jZXMpO1xuICAgICAgZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcbiAgICAgIGRpc3RhbmNlcy5taW4gPSBtaW47XG4gICAgICBkaXN0YW5jZXMudiA9IGwgPSAocGFyc2VGbG9hdCh2YXJzLmFtb3VudCkgfHwgcGFyc2VGbG9hdCh2YXJzLmVhY2gpICogKHdyYXBBdCA+IGwgPyBsIC0gMSA6ICFheGlzID8gTWF0aC5tYXgod3JhcEF0LCBsIC8gd3JhcEF0KSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXBBdCA6IHdyYXBBdCkgfHwgMCkgKiAoZnJvbSA9PT0gXCJlZGdlc1wiID8gLTEgOiAxKTtcbiAgICAgIGRpc3RhbmNlcy5iID0gbCA8IDAgPyBiYXNlIC0gbCA6IGJhc2U7XG4gICAgICBkaXN0YW5jZXMudSA9IGdldFVuaXQodmFycy5hbW91bnQgfHwgdmFycy5lYWNoKSB8fCAwOyAvL3VuaXRcblxuICAgICAgZWFzZSA9IGVhc2UgJiYgbCA8IDAgPyBfaW52ZXJ0RWFzZShlYXNlKSA6IGVhc2U7XG4gICAgfVxuXG4gICAgbCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXggfHwgMDtcbiAgICByZXR1cm4gX3JvdW5kKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSB2IDwgMSA/IE1hdGgucG93KDEwLCAodiArIFwiXCIpLmxlbmd0aCAtIDIpIDogMTsgLy90byBhdm9pZCBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAobGlrZSAyNCAqIDAuMSA9PSAyLjQwMDAwMDAwMDAwMDAwMDQpLCB3ZSBjaG9wIG9mZiBhdCBhIHNwZWNpZmljIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyAobXVjaCBmYXN0ZXIgdGhhbiB0b0ZpeGVkKClcblxuICByZXR1cm4gZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciBuID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KHJhdykgLyB2KSAqIHYgKiBwO1xuICAgIHJldHVybiAobiAtIG4gJSAxKSAvIHAgKyAoX2lzTnVtYmVyKHJhdykgPyAwIDogZ2V0VW5pdChyYXcpKTsgLy8gbiAtIG4gJSAxIHJlcGxhY2VzIE1hdGguZmxvb3IoKSBpbiBvcmRlciB0byBoYW5kbGUgbmVnYXRpdmUgdmFsdWVzIHByb3Blcmx5LiBGb3IgZXhhbXBsZSwgTWF0aC5mbG9vcigtMTUwLjAwMDAwMDAwMDAwMDAzKSBpcyAxNTEhXG4gIH07XG59LFxuICAgIHNuYXAgPSBmdW5jdGlvbiBzbmFwKHNuYXBUbywgdmFsdWUpIHtcbiAgdmFyIGlzQXJyYXkgPSBfaXNBcnJheShzbmFwVG8pLFxuICAgICAgcmFkaXVzLFxuICAgICAgaXMyRDtcblxuICBpZiAoIWlzQXJyYXkgJiYgX2lzT2JqZWN0KHNuYXBUbykpIHtcbiAgICByYWRpdXMgPSBpc0FycmF5ID0gc25hcFRvLnJhZGl1cyB8fCBfYmlnTnVtO1xuXG4gICAgaWYgKHNuYXBUby52YWx1ZXMpIHtcbiAgICAgIHNuYXBUbyA9IHRvQXJyYXkoc25hcFRvLnZhbHVlcyk7XG5cbiAgICAgIGlmIChpczJEID0gIV9pc051bWJlcihzbmFwVG9bMF0pKSB7XG4gICAgICAgIHJhZGl1cyAqPSByYWRpdXM7IC8vcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHdlIGRvbid0IGhhdmUgdG8gTWF0aC5zcXJ0KCkgaW4gdGhlIGxvb3AuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNuYXBUbyA9IF9yb3VuZE1vZGlmaWVyKHNuYXBUby5pbmNyZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsICFpc0FycmF5ID8gX3JvdW5kTW9kaWZpZXIoc25hcFRvKSA6IF9pc0Z1bmN0aW9uKHNuYXBUbykgPyBmdW5jdGlvbiAocmF3KSB7XG4gICAgaXMyRCA9IHNuYXBUbyhyYXcpO1xuICAgIHJldHVybiBNYXRoLmFicyhpczJEIC0gcmF3KSA8PSByYWRpdXMgPyBpczJEIDogcmF3O1xuICB9IDogZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciB4ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnggOiByYXcpLFxuICAgICAgICB5ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnkgOiAwKSxcbiAgICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgICAgY2xvc2VzdCA9IDAsXG4gICAgICAgIGkgPSBzbmFwVG8ubGVuZ3RoLFxuICAgICAgICBkeCxcbiAgICAgICAgZHk7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoaXMyRCkge1xuICAgICAgICBkeCA9IHNuYXBUb1tpXS54IC0geDtcbiAgICAgICAgZHkgPSBzbmFwVG9baV0ueSAtIHk7XG4gICAgICAgIGR4ID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkeCA9IE1hdGguYWJzKHNuYXBUb1tpXSAtIHgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHggPCBtaW4pIHtcbiAgICAgICAgbWluID0gZHg7XG4gICAgICAgIGNsb3Nlc3QgPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNsb3Nlc3QgPSAhcmFkaXVzIHx8IG1pbiA8PSByYWRpdXMgPyBzbmFwVG9bY2xvc2VzdF0gOiByYXc7XG4gICAgcmV0dXJuIGlzMkQgfHwgY2xvc2VzdCA9PT0gcmF3IHx8IF9pc051bWJlcihyYXcpID8gY2xvc2VzdCA6IGNsb3Nlc3QgKyBnZXRVbml0KHJhdyk7XG4gIH0pO1xufSxcbiAgICByYW5kb20gPSBmdW5jdGlvbiByYW5kb20obWluLCBtYXgsIHJvdW5kaW5nSW5jcmVtZW50LCByZXR1cm5GdW5jdGlvbikge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKF9pc0FycmF5KG1pbikgPyAhbWF4IDogcm91bmRpbmdJbmNyZW1lbnQgPT09IHRydWUgPyAhIShyb3VuZGluZ0luY3JlbWVudCA9IDApIDogIXJldHVybkZ1bmN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBtaW5bfn4oTWF0aC5yYW5kb20oKSAqIG1pbi5sZW5ndGgpXSA6IChyb3VuZGluZ0luY3JlbWVudCA9IHJvdW5kaW5nSW5jcmVtZW50IHx8IDFlLTUpICYmIChyZXR1cm5GdW5jdGlvbiA9IHJvdW5kaW5nSW5jcmVtZW50IDwgMSA/IE1hdGgucG93KDEwLCAocm91bmRpbmdJbmNyZW1lbnQgKyBcIlwiKS5sZW5ndGggLSAyKSA6IDEpICYmIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgobWluIC0gcm91bmRpbmdJbmNyZW1lbnQgLyAyICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyByb3VuZGluZ0luY3JlbWVudCAqIC45OSkpIC8gcm91bmRpbmdJbmNyZW1lbnQpICogcm91bmRpbmdJbmNyZW1lbnQgKiByZXR1cm5GdW5jdGlvbikgLyByZXR1cm5GdW5jdGlvbjtcbiAgfSk7XG59LFxuICAgIHBpcGUgPSBmdW5jdGlvbiBwaXBlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3Rpb25zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmN0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAodiwgZikge1xuICAgICAgcmV0dXJuIGYodik7XG4gICAgfSwgdmFsdWUpO1xuICB9O1xufSxcbiAgICB1bml0aXplID0gZnVuY3Rpb24gdW5pdGl6ZShmdW5jLCB1bml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyhwYXJzZUZsb2F0KHZhbHVlKSkgKyAodW5pdCB8fCBnZXRVbml0KHZhbHVlKSk7XG4gIH07XG59LFxuICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIG1hcFJhbmdlKG1pbiwgbWF4LCAwLCAxLCB2YWx1ZSk7XG59LFxuICAgIF93cmFwQXJyYXkgPSBmdW5jdGlvbiBfd3JhcEFycmF5KGEsIHdyYXBwZXIsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBhW35+d3JhcHBlcihpbmRleCldO1xuICB9KTtcbn0sXG4gICAgd3JhcCA9IGZ1bmN0aW9uIHdyYXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIC8vIE5PVEU6IHdyYXAoKSBDQU5OT1QgYmUgYW4gYXJyb3cgZnVuY3Rpb24hIEEgdmVyeSBvZGQgY29tcGlsaW5nIGJ1ZyBjYXVzZXMgcHJvYmxlbXMgKHVucmVsYXRlZCB0byBHU0FQKS5cbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwKDAsIG1pbi5sZW5ndGgpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gKHJhbmdlICsgKHZhbHVlIC0gbWluKSAlIHJhbmdlKSAlIHJhbmdlICsgbWluO1xuICB9KTtcbn0sXG4gICAgd3JhcFlveW8gPSBmdW5jdGlvbiB3cmFwWW95byhtaW4sIG1heCwgdmFsdWUpIHtcbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluLFxuICAgICAgdG90YWwgPSByYW5nZSAqIDI7XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXBZb3lvKDAsIG1pbi5sZW5ndGggLSAxKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFsdWUgPSAodG90YWwgKyAodmFsdWUgLSBtaW4pICUgdG90YWwpICUgdG90YWwgfHwgMDtcbiAgICByZXR1cm4gbWluICsgKHZhbHVlID4gcmFuZ2UgPyB0b3RhbCAtIHZhbHVlIDogdmFsdWUpO1xuICB9KTtcbn0sXG4gICAgX3JlcGxhY2VSYW5kb20gPSBmdW5jdGlvbiBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkge1xuICAvL3JlcGxhY2VzIGFsbCBvY2N1cnJlbmNlcyBvZiByYW5kb20oLi4uKSBpbiBhIHN0cmluZyB3aXRoIHRoZSBjYWxjdWxhdGVkIHJhbmRvbSB2YWx1ZS4gY2FuIGJlIGEgcmFuZ2UgbGlrZSByYW5kb20oLTEwMCwgMTAwLCA1KSBvciBhbiBhcnJheSBsaWtlIHJhbmRvbShbMCwgMTAwLCA1MDBdKVxuICB2YXIgcHJldiA9IDAsXG4gICAgICBzID0gXCJcIixcbiAgICAgIGksXG4gICAgICBudW1zLFxuICAgICAgZW5kLFxuICAgICAgaXNBcnJheTtcblxuICB3aGlsZSAofihpID0gdmFsdWUuaW5kZXhPZihcInJhbmRvbShcIiwgcHJldikpKSB7XG4gICAgZW5kID0gdmFsdWUuaW5kZXhPZihcIilcIiwgaSk7XG4gICAgaXNBcnJheSA9IHZhbHVlLmNoYXJBdChpICsgNykgPT09IFwiW1wiO1xuICAgIG51bXMgPSB2YWx1ZS5zdWJzdHIoaSArIDcsIGVuZCAtIGkgLSA3KS5tYXRjaChpc0FycmF5ID8gX2RlbGltaXRlZFZhbHVlRXhwIDogX3N0cmljdE51bUV4cCk7XG4gICAgcyArPSB2YWx1ZS5zdWJzdHIocHJldiwgaSAtIHByZXYpICsgcmFuZG9tKGlzQXJyYXkgPyBudW1zIDogK251bXNbMF0sIGlzQXJyYXkgPyAwIDogK251bXNbMV0sICtudW1zWzJdIHx8IDFlLTUpO1xuICAgIHByZXYgPSBlbmQgKyAxO1xuICB9XG5cbiAgcmV0dXJuIHMgKyB2YWx1ZS5zdWJzdHIocHJldiwgdmFsdWUubGVuZ3RoIC0gcHJldik7XG59LFxuICAgIG1hcFJhbmdlID0gZnVuY3Rpb24gbWFwUmFuZ2UoaW5NaW4sIGluTWF4LCBvdXRNaW4sIG91dE1heCwgdmFsdWUpIHtcbiAgdmFyIGluUmFuZ2UgPSBpbk1heCAtIGluTWluLFxuICAgICAgb3V0UmFuZ2UgPSBvdXRNYXggLSBvdXRNaW47XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBvdXRNaW4gKyAoKHZhbHVlIC0gaW5NaW4pIC8gaW5SYW5nZSAqIG91dFJhbmdlIHx8IDApO1xuICB9KTtcbn0sXG4gICAgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGFydCwgZW5kLCBwcm9ncmVzcywgbXV0YXRlKSB7XG4gIHZhciBmdW5jID0gaXNOYU4oc3RhcnQgKyBlbmQpID8gMCA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuICgxIC0gcCkgKiBzdGFydCArIHAgKiBlbmQ7XG4gIH07XG5cbiAgaWYgKCFmdW5jKSB7XG4gICAgdmFyIGlzU3RyaW5nID0gX2lzU3RyaW5nKHN0YXJ0KSxcbiAgICAgICAgbWFzdGVyID0ge30sXG4gICAgICAgIHAsXG4gICAgICAgIGksXG4gICAgICAgIGludGVycG9sYXRvcnMsXG4gICAgICAgIGwsXG4gICAgICAgIGlsO1xuXG4gICAgcHJvZ3Jlc3MgPT09IHRydWUgJiYgKG11dGF0ZSA9IDEpICYmIChwcm9ncmVzcyA9IG51bGwpO1xuXG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICBzdGFydCA9IHtcbiAgICAgICAgcDogc3RhcnRcbiAgICAgIH07XG4gICAgICBlbmQgPSB7XG4gICAgICAgIHA6IGVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKF9pc0FycmF5KHN0YXJ0KSAmJiAhX2lzQXJyYXkoZW5kKSkge1xuICAgICAgaW50ZXJwb2xhdG9ycyA9IFtdO1xuICAgICAgbCA9IHN0YXJ0Lmxlbmd0aDtcbiAgICAgIGlsID0gbCAtIDI7XG5cbiAgICAgIGZvciAoaSA9IDE7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW50ZXJwb2xhdG9ycy5wdXNoKGludGVycG9sYXRlKHN0YXJ0W2kgLSAxXSwgc3RhcnRbaV0pKTsgLy9idWlsZCB0aGUgaW50ZXJwb2xhdG9ycyB1cCBmcm9udCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB0aGF0IHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBtYW55IHRpbWVzLCBpdCBjYW4ganVzdCByZXVzZSB0aGVtLlxuICAgICAgfVxuXG4gICAgICBsLS07XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcCAqPSBsO1xuICAgICAgICB2YXIgaSA9IE1hdGgubWluKGlsLCB+fnApO1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tpXShwIC0gaSk7XG4gICAgICB9O1xuXG4gICAgICBwcm9ncmVzcyA9IGVuZDtcbiAgICB9IGVsc2UgaWYgKCFtdXRhdGUpIHtcbiAgICAgIHN0YXJ0ID0gX21lcmdlKF9pc0FycmF5KHN0YXJ0KSA/IFtdIDoge30sIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAoIWludGVycG9sYXRvcnMpIHtcbiAgICAgIGZvciAocCBpbiBlbmQpIHtcbiAgICAgICAgX2FkZFByb3BUd2Vlbi5jYWxsKG1hc3Rlciwgc3RhcnQsIHAsIFwiZ2V0XCIsIGVuZFtwXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcmV0dXJuIF9yZW5kZXJQcm9wVHdlZW5zKHAsIG1hc3RlcikgfHwgKGlzU3RyaW5nID8gc3RhcnQucCA6IHN0YXJ0KTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihwcm9ncmVzcywgZnVuYyk7XG59LFxuICAgIF9nZXRMYWJlbEluRGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsSW5EaXJlY3Rpb24odGltZWxpbmUsIGZyb21UaW1lLCBiYWNrd2FyZCkge1xuICAvL3VzZWQgZm9yIG5leHRMYWJlbCgpIGFuZCBwcmV2aW91c0xhYmVsKClcbiAgdmFyIGxhYmVscyA9IHRpbWVsaW5lLmxhYmVscyxcbiAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICBwLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICBsYWJlbDtcblxuICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgZGlzdGFuY2UgPSBsYWJlbHNbcF0gLSBmcm9tVGltZTtcblxuICAgIGlmIChkaXN0YW5jZSA8IDAgPT09ICEhYmFja3dhcmQgJiYgZGlzdGFuY2UgJiYgbWluID4gKGRpc3RhbmNlID0gTWF0aC5hYnMoZGlzdGFuY2UpKSkge1xuICAgICAgbGFiZWwgPSBwO1xuICAgICAgbWluID0gZGlzdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufSxcbiAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soYW5pbWF0aW9uLCB0eXBlLCBleGVjdXRlTGF6eUZpcnN0KSB7XG4gIHZhciB2ID0gYW5pbWF0aW9uLnZhcnMsXG4gICAgICBjYWxsYmFjayA9IHZbdHlwZV0sXG4gICAgICBwYXJhbXMsXG4gICAgICBzY29wZTtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl07XG4gIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cbiAgcmV0dXJuIHBhcmFtcyA/IGNhbGxiYWNrLmFwcGx5KHNjb3BlLCBwYXJhbXMpIDogY2FsbGJhY2suY2FsbChzY29wZSk7XG59LFxuICAgIF9pbnRlcnJ1cHQgPSBmdW5jdGlvbiBfaW50ZXJydXB0KGFuaW1hdGlvbikge1xuICBfcmVtb3ZlRnJvbVBhcmVudChhbmltYXRpb24pO1xuXG4gIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyICYmIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLmtpbGwoZmFsc2UpO1xuICBhbmltYXRpb24ucHJvZ3Jlc3MoKSA8IDEgJiYgX2NhbGxiYWNrKGFuaW1hdGlvbiwgXCJvbkludGVycnVwdFwiKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3F1aWNrVHdlZW4sXG4gICAgX2NyZWF0ZVBsdWdpbiA9IGZ1bmN0aW9uIF9jcmVhdGVQbHVnaW4oY29uZmlnKSB7XG4gIGNvbmZpZyA9ICFjb25maWcubmFtZSAmJiBjb25maWdbXCJkZWZhdWx0XCJdIHx8IGNvbmZpZzsgLy9VTUQgcGFja2FnaW5nIHdyYXBzIHRoaW5ncyBvZGRseSwgc28gZm9yIGV4YW1wbGUgTW90aW9uUGF0aEhlbHBlciBiZWNvbWVzIHtNb3Rpb25QYXRoSGVscGVyOk1vdGlvblBhdGhIZWxwZXIsIGRlZmF1bHQ6TW90aW9uUGF0aEhlbHBlcn0uXG5cbiAgdmFyIG5hbWUgPSBjb25maWcubmFtZSxcbiAgICAgIGlzRnVuYyA9IF9pc0Z1bmN0aW9uKGNvbmZpZyksXG4gICAgICBQbHVnaW4gPSBuYW1lICYmICFpc0Z1bmMgJiYgY29uZmlnLmluaXQgPyBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcHJvcHMgPSBbXTtcbiAgfSA6IGNvbmZpZyxcbiAgICAgIC8vaW4gY2FzZSBzb21lb25lIHBhc3NlcyBpbiBhbiBvYmplY3QgdGhhdCdzIG5vdCBhIHBsdWdpbiwgbGlrZSBDdXN0b21FYXNlXG4gIGluc3RhbmNlRGVmYXVsdHMgPSB7XG4gICAgaW5pdDogX2VtcHR5RnVuYyxcbiAgICByZW5kZXI6IF9yZW5kZXJQcm9wVHdlZW5zLFxuICAgIGFkZDogX2FkZFByb3BUd2VlbixcbiAgICBraWxsOiBfa2lsbFByb3BUd2VlbnNPZixcbiAgICBtb2RpZmllcjogX2FkZFBsdWdpbk1vZGlmaWVyLFxuICAgIHJhd1ZhcnM6IDBcbiAgfSxcbiAgICAgIHN0YXRpY3MgPSB7XG4gICAgdGFyZ2V0VGVzdDogMCxcbiAgICBnZXQ6IDAsXG4gICAgZ2V0U2V0dGVyOiBfZ2V0U2V0dGVyLFxuICAgIGFsaWFzZXM6IHt9LFxuICAgIHJlZ2lzdGVyOiAwXG4gIH07XG5cbiAgX3dha2UoKTtcblxuICBpZiAoY29uZmlnICE9PSBQbHVnaW4pIHtcbiAgICBpZiAoX3BsdWdpbnNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfc2V0RGVmYXVsdHMoUGx1Z2luLCBfc2V0RGVmYXVsdHMoX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBpbnN0YW5jZURlZmF1bHRzKSwgc3RhdGljcykpOyAvL3N0YXRpYyBtZXRob2RzXG5cblxuICAgIF9tZXJnZShQbHVnaW4ucHJvdG90eXBlLCBfbWVyZ2UoaW5zdGFuY2VEZWZhdWx0cywgX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBzdGF0aWNzKSkpOyAvL2luc3RhbmNlIG1ldGhvZHNcblxuXG4gICAgX3BsdWdpbnNbUGx1Z2luLnByb3AgPSBuYW1lXSA9IFBsdWdpbjtcblxuICAgIGlmIChjb25maWcudGFyZ2V0VGVzdCkge1xuICAgICAgX2hhcm5lc3NQbHVnaW5zLnB1c2goUGx1Z2luKTtcblxuICAgICAgX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xuICAgIH1cblxuICAgIG5hbWUgPSAobmFtZSA9PT0gXCJjc3NcIiA/IFwiQ1NTXCIgOiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSkpICsgXCJQbHVnaW5cIjsgLy9mb3IgdGhlIGdsb2JhbCBuYW1lLiBcIm1vdGlvblBhdGhcIiBzaG91bGQgYmVjb21lIE1vdGlvblBhdGhQbHVnaW5cbiAgfVxuXG4gIF9hZGRHbG9iYWwobmFtZSwgUGx1Z2luKTtcblxuICBjb25maWcucmVnaXN0ZXIgJiYgY29uZmlnLnJlZ2lzdGVyKGdzYXAsIFBsdWdpbiwgUHJvcFR3ZWVuKTtcbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ09MT1JTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fMjU1ID0gMjU1LFxuICAgIF9jb2xvckxvb2t1cCA9IHtcbiAgYXF1YTogWzAsIF8yNTUsIF8yNTVdLFxuICBsaW1lOiBbMCwgXzI1NSwgMF0sXG4gIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICBibGFjazogWzAsIDAsIDBdLFxuICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICB0ZWFsOiBbMCwgMTI4LCAxMjhdLFxuICBibHVlOiBbMCwgMCwgXzI1NV0sXG4gIG5hdnk6IFswLCAwLCAxMjhdLFxuICB3aGl0ZTogW18yNTUsIF8yNTUsIF8yNTVdLFxuICBvbGl2ZTogWzEyOCwgMTI4LCAwXSxcbiAgeWVsbG93OiBbXzI1NSwgXzI1NSwgMF0sXG4gIG9yYW5nZTogW18yNTUsIDE2NSwgMF0sXG4gIGdyYXk6IFsxMjgsIDEyOCwgMTI4XSxcbiAgcHVycGxlOiBbMTI4LCAwLCAxMjhdLFxuICBncmVlbjogWzAsIDEyOCwgMF0sXG4gIHJlZDogW18yNTUsIDAsIDBdLFxuICBwaW5rOiBbXzI1NSwgMTkyLCAyMDNdLFxuICBjeWFuOiBbMCwgXzI1NSwgXzI1NV0sXG4gIHRyYW5zcGFyZW50OiBbXzI1NSwgXzI1NSwgXzI1NSwgMF1cbn0sXG4gICAgX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggPSBoIDwgMCA/IGggKyAxIDogaCA+IDEgPyBoIC0gMSA6IGg7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICBlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgIHRpbWUgPSBfbGFzdFVwZGF0ZSAtIF9zdGFydFRpbWU7XG4gICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICBmcmFtZSA9ICsrX3NlbGYuZnJhbWU7XG4gICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgX25leHRUaW1lICs9IG92ZXJsYXAgKyAob3ZlcmxhcCA+PSBfZ2FwID8gNCA6IF9nYXAgLSBvdmVybGFwKTtcbiAgICAgIGRpc3BhdGNoID0gMTtcbiAgICB9XG5cbiAgICBtYW51YWwgfHwgKF9pZCA9IF9yZXEoX3RpY2spKTsgLy9tYWtlIHN1cmUgdGhlIHJlcXVlc3QgaXMgbWFkZSBiZWZvcmUgd2UgZGlzcGF0Y2ggdGhlIFwidGlja1wiIGV2ZW50IHNvIHRoYXQgdGltaW5nIGlzIG1haW50YWluZWQuIE90aGVyd2lzZSwgaWYgcHJvY2Vzc2luZyB0aGUgXCJ0aWNrXCIgcmVxdWlyZXMgYSBidW5jaCBvZiB0aW1lIChsaWtlIDE1bXMpIGFuZCB3ZSdyZSB1c2luZyBhIHNldFRpbWVvdXQoKSB0aGF0J3MgYmFzZWQgb24gMTYuN21zLCBpdCdkIHRlY2huaWNhbGx5IHRha2UgMzEuN21zIGJldHdlZW4gZnJhbWVzIG90aGVyd2lzZS5cblxuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgLy8gdXNlIF9pIGFuZCBjaGVjayBfbGlzdGVuZXJzLmxlbmd0aCBpbnN0ZWFkIG9mIGEgdmFyaWFibGUgYmVjYXVzZSBhIGxpc3RlbmVyIGNvdWxkIGdldCByZW1vdmVkIGR1cmluZyB0aGUgbG9vcCwgYW5kIGlmIHRoYXQgaGFwcGVucyB0byBhbiBlbGVtZW50IGxlc3MgdGhhbiB0aGUgY3VycmVudCBpbmRleCwgaXQnZCB0aHJvdyB0aGluZ3Mgb2ZmIGluIHRoZSBsb29wLlxuICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYgPSB7XG4gICAgdGltZTogMCxcbiAgICBmcmFtZTogMCxcbiAgICB0aWNrOiBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgfSxcbiAgICBkZWx0YVJhdGlvOiBmdW5jdGlvbiBkZWx0YVJhdGlvKGZwcykge1xuICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgIH0sXG4gICAgd2FrZTogZnVuY3Rpb24gd2FrZSgpIHtcbiAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgIF93aW4gPSBfY29yZUluaXR0ZWQgPSB3aW5kb3c7XG4gICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgKF93aW4uZ3NhcFZlcnNpb25zIHx8IChfd2luLmdzYXBWZXJzaW9ucyA9IFtdKSkucHVzaChnc2FwLnZlcnNpb24pO1xuXG4gICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgX25leHRUaW1lIC0gX3NlbGYudGltZSAqIDEwMDAgKyAxIHwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgX3RpY2soMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGVlcDogZnVuY3Rpb24gc2xlZXAoKSB7XG4gICAgICAoX3JhZiA/IF93aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxIC8gX3RpbnlOdW07IC8vemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZywgX2xhZ1RocmVzaG9sZCwgMCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaykge1xuICAgICAgX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSA8IDAgJiYgX2xpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgX3dha2UoKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIH4oaSA9IF9saXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaykpICYmIF9saXN0ZW5lcnMuc3BsaWNlKGksIDEpICYmIF9pID49IGkgJiYgX2ktLTtcbiAgICB9LFxuICAgIF9saXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIF9zZWxmO1xufSgpLFxuICAgIF93YWtlID0gZnVuY3Rpb24gX3dha2UoKSB7XG4gIHJldHVybiAhX3RpY2tlckFjdGl2ZSAmJiBfdGlja2VyLndha2UoKTtcbn0sXG4gICAgLy9hbHNvIGVuc3VyZXMgdGhlIGNvcmUgY2xhc3NlcyBhcmUgaW5pdGlhbGl6ZWQuXG5cbi8qXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogRUFTSU5HXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5fZWFzZU1hcCA9IHt9LFxuICAgIF9jdXN0b21FYXNlRXhwID0gL15bXFxkLlxcLU1dW1xcZC5cXC0sXFxzXS8sXG4gICAgX3F1b3Rlc0V4cCA9IC9bXCInXS9nLFxuICAgIF9wYXJzZU9iamVjdEluU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlT2JqZWN0SW5TdHJpbmcodmFsdWUpIHtcbiAgLy90YWtlcyBhIHN0cmluZyBsaWtlIFwie3dpZ2dsZXM6MTAsIHR5cGU6YW50aWNpcGF0ZX0pXCIgYW5kIHR1cm5zIGl0IGludG8gYSByZWFsIG9iamVjdC4gTm90aWNlIGl0IGVuZHMgaW4gXCIpXCIgYW5kIGluY2x1ZGVzIHRoZSB7fSB3cmFwcGVycy4gVGhpcyBpcyBiZWNhdXNlIHdlIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZWFzZSBjb25maWdzIGFuZCBwcmlvcml0aXplZCBvcHRpbWl6YXRpb24gcmF0aGVyIHRoYW4gcmV1c2FiaWxpdHkuXG4gIHZhciBvYmogPSB7fSxcbiAgICAgIHNwbGl0ID0gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDMpLnNwbGl0KFwiOlwiKSxcbiAgICAgIGtleSA9IHNwbGl0WzBdLFxuICAgICAgaSA9IDEsXG4gICAgICBsID0gc3BsaXQubGVuZ3RoLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWwsXG4gICAgICBwYXJzZWRWYWw7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICB2YWwgPSBzcGxpdFtpXTtcbiAgICBpbmRleCA9IGkgIT09IGwgLSAxID8gdmFsLmxhc3RJbmRleE9mKFwiLFwiKSA6IHZhbC5sZW5ndGg7XG4gICAgcGFyc2VkVmFsID0gdmFsLnN1YnN0cigwLCBpbmRleCk7XG4gICAgb2JqW2tleV0gPSBpc05hTihwYXJzZWRWYWwpID8gcGFyc2VkVmFsLnJlcGxhY2UoX3F1b3Rlc0V4cCwgXCJcIikudHJpbSgpIDogK3BhcnNlZFZhbDtcbiAgICBrZXkgPSB2YWwuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3ZhbHVlSW5QYXJlbnRoZXNlcyA9IGZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModmFsdWUpIHtcbiAgdmFyIG9wZW4gPSB2YWx1ZS5pbmRleE9mKFwiKFwiKSArIDEsXG4gICAgICBjbG9zZSA9IHZhbHVlLmluZGV4T2YoXCIpXCIpLFxuICAgICAgbmVzdGVkID0gdmFsdWUuaW5kZXhPZihcIihcIiwgb3Blbik7XG4gIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcob3Blbiwgfm5lc3RlZCAmJiBuZXN0ZWQgPCBjbG9zZSA/IHZhbHVlLmluZGV4T2YoXCIpXCIsIGNsb3NlICsgMSkgOiBjbG9zZSk7XG59LFxuICAgIF9jb25maWdFYXNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9jb25maWdFYXNlRnJvbVN0cmluZyhuYW1lKSB7XG4gIC8vbmFtZSBjYW4gYmUgYSBzdHJpbmcgbGlrZSBcImVsYXN0aWMub3V0KDEsMC41KVwiLCBhbmQgcGFzcyBpbiBfZWFzZU1hcCBhcyBvYmogYW5kIGl0J2xsIHBhcnNlIGl0IG91dCBhbmQgY2FsbCB0aGUgYWN0dWFsIGZ1bmN0aW9uIGxpa2UgX2Vhc2VNYXAuRWxhc3RpYy5lYXNlT3V0LmNvbmZpZygxLDAuNSkuIEl0IHdpbGwgYWxzbyBwYXJzZSBjdXN0b20gZWFzZSBzdHJpbmdzIGFzIGxvbmcgYXMgQ3VzdG9tRWFzZSBpcyBsb2FkZWQgYW5kIHJlZ2lzdGVyZWQgKGludGVybmFsbHkgYXMgX2Vhc2VNYXAuX0NFKS5cbiAgdmFyIHNwbGl0ID0gKG5hbWUgKyBcIlwiKS5zcGxpdChcIihcIiksXG4gICAgICBlYXNlID0gX2Vhc2VNYXBbc3BsaXRbMF1dO1xuICByZXR1cm4gZWFzZSAmJiBzcGxpdC5sZW5ndGggPiAxICYmIGVhc2UuY29uZmlnID8gZWFzZS5jb25maWcuYXBwbHkobnVsbCwgfm5hbWUuaW5kZXhPZihcIntcIikgPyBbX3BhcnNlT2JqZWN0SW5TdHJpbmcoc3BsaXRbMV0pXSA6IF92YWx1ZUluUGFyZW50aGVzZXMobmFtZSkuc3BsaXQoXCIsXCIpLm1hcChfbnVtZXJpY0lmUG9zc2libGUpKSA6IF9lYXNlTWFwLl9DRSAmJiBfY3VzdG9tRWFzZUV4cC50ZXN0KG5hbWUpID8gX2Vhc2VNYXAuX0NFKFwiXCIsIG5hbWUpIDogZWFzZTtcbn0sXG4gICAgX2ludmVydEVhc2UgPSBmdW5jdGlvbiBfaW52ZXJ0RWFzZShlYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZSgxIC0gcCk7XG4gIH07XG59LFxuICAgIC8vIGFsbG93IHlveW9FYXNlIHRvIGJlIHNldCBpbiBjaGlsZHJlbiBhbmQgaGF2ZSB0aG9zZSBhZmZlY3RlZCB3aGVuIHRoZSBwYXJlbnQvYW5jZXN0b3IgdGltZWxpbmUgeW95b3MuXG5fcHJvcGFnYXRlWW95b0Vhc2UgPSBmdW5jdGlvbiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95bykge1xuICB2YXIgY2hpbGQgPSB0aW1lbGluZS5fZmlyc3QsXG4gICAgICBlYXNlO1xuXG4gIHdoaWxlIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQsIGlzWW95byk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC52YXJzLnlveW9FYXNlICYmICghY2hpbGQuX3lveW8gfHwgIWNoaWxkLl9yZXBlYXQpICYmIGNoaWxkLl95b3lvICE9PSBpc1lveW8pIHtcbiAgICAgIGlmIChjaGlsZC50aW1lbGluZSkge1xuICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQudGltZWxpbmUsIGlzWW95byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYXNlID0gY2hpbGQuX2Vhc2U7XG4gICAgICAgIGNoaWxkLl9lYXNlID0gY2hpbGQuX3lFYXNlO1xuICAgICAgICBjaGlsZC5feUVhc2UgPSBlYXNlO1xuICAgICAgICBjaGlsZC5feW95byA9IGlzWW95bztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICB9XG59LFxuICAgIF9wYXJzZUVhc2UgPSBmdW5jdGlvbiBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gIHJldHVybiAhZWFzZSA/IGRlZmF1bHRFYXNlIDogKF9pc0Z1bmN0aW9uKGVhc2UpID8gZWFzZSA6IF9lYXNlTWFwW2Vhc2VdIHx8IF9jb25maWdFYXNlRnJvbVN0cmluZyhlYXNlKSkgfHwgZGVmYXVsdEVhc2U7XG59LFxuICAgIF9pbnNlcnRFYXNlID0gZnVuY3Rpb24gX2luc2VydEVhc2UobmFtZXMsIGVhc2VJbiwgZWFzZU91dCwgZWFzZUluT3V0KSB7XG4gIGlmIChlYXNlT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VJbigxIC0gcCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChlYXNlSW5PdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uIGVhc2VJbk91dChwKSB7XG4gICAgICByZXR1cm4gcCA8IC41ID8gZWFzZUluKHAgKiAyKSAvIDIgOiAxIC0gZWFzZUluKCgxIC0gcCkgKiAyKSAvIDI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBlYXNlID0ge1xuICAgIGVhc2VJbjogZWFzZUluLFxuICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgZWFzZUluT3V0OiBlYXNlSW5PdXRcbiAgfSxcbiAgICAgIGxvd2VyY2FzZU5hbWU7XG5cbiAgX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX2dsb2JhbHNbbmFtZV0gPSBlYXNlO1xuICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCldID0gZWFzZU91dDtcblxuICAgIGZvciAodmFyIHAgaW4gZWFzZSkge1xuICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSArIChwID09PSBcImVhc2VJblwiID8gXCIuaW5cIiA6IHAgPT09IFwiZWFzZU91dFwiID8gXCIub3V0XCIgOiBcIi5pbk91dFwiKV0gPSBfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyBwXSA9IGVhc2VbcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2Vhc2VJbk91dEZyb21PdXQgPSBmdW5jdGlvbiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyAoMSAtIGVhc2VPdXQoMSAtIHAgKiAyKSkgLyAyIDogLjUgKyBlYXNlT3V0KChwIC0gLjUpICogMikgLyAyO1xuICB9O1xufSxcbiAgICBfY29uZmlnRWxhc3RpYyA9IGZ1bmN0aW9uIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gIHZhciBwMSA9IGFtcGxpdHVkZSA+PSAxID8gYW1wbGl0dWRlIDogMSxcbiAgICAgIC8vbm90ZTogaWYgYW1wbGl0dWRlIGlzIDwgMSwgd2Ugc2ltcGx5IGFkanVzdCB0aGUgcGVyaW9kIGZvciBhIG1vcmUgbmF0dXJhbCBmZWVsLiBPdGhlcndpc2UgdGhlIG1hdGggZG9lc24ndCB3b3JrIHJpZ2h0IGFuZCB0aGUgY3VydmUgc3RhcnRzIGF0IDEuXG4gIHAyID0gKHBlcmlvZCB8fCAodHlwZSA/IC4zIDogLjQ1KSkgLyAoYW1wbGl0dWRlIDwgMSA/IGFtcGxpdHVkZSA6IDEpLFxuICAgICAgcDMgPSBwMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyBwMSkgfHwgMCksXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPT09IDEgPyAxIDogcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIF9zaW4oKHAgLSBwMykgKiBwMikgKyAxO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgcDIgPSBfMlBJIC8gcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfY29uZmlnQmFjayA9IGZ1bmN0aW9uIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCkge1xuICBpZiAob3ZlcnNob290ID09PSB2b2lkIDApIHtcbiAgICBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuICB9XG5cbiAgdmFyIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA/IC0tcCAqIHAgKiAoKG92ZXJzaG9vdCArIDEpICogcCArIG92ZXJzaG9vdCkgKyAxIDogMDtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKG92ZXJzaG9vdCkge1xuICAgIHJldHVybiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufTsgLy8gYSBjaGVhcGVyIChrYiBhbmQgY3B1KSBidXQgbW9yZSBtaWxkIHdheSB0byBnZXQgYSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgYnkgZmVlZGluZyBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZSA9IHJhdGlvID0+IHtcbi8vIFx0bGV0IHkgPSAwLjUgKyByYXRpbyAvIDI7XG4vLyBcdHJldHVybiBwID0+ICgyICogKDEgLSBwKSAqIHAgKiB5ICsgcCAqIHApO1xuLy8gfSxcbi8vIGEgc3Ryb25nZXIgKGJ1dCBtb3JlIGV4cGVuc2l2ZSBrYi9jcHUpIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSB0aGF0IGxldHMgeW91IGZlZWQgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2VTdHJvbmcgPSByYXRpbyA9PiB7XG4vLyBcdHJhdGlvID0gLjUgKyByYXRpbyAvIDI7XG4vLyBcdGxldCBvID0gMSAvIDMgKiAocmF0aW8gPCAuNSA/IHJhdGlvIDogMSAtIHJhdGlvKSxcbi8vIFx0XHRiID0gcmF0aW8gLSBvLFxuLy8gXHRcdGMgPSByYXRpbyArIG87XG4vLyBcdHJldHVybiBwID0+IHAgPT09IDEgPyBwIDogMyAqIGIgKiAoMSAtIHApICogKDEgLSBwKSAqIHAgKyAzICogYyAqICgxIC0gcCkgKiBwICogcCArIHAgKiBwICogcDtcbi8vIH07XG5cblxuX2ZvckVhY2hOYW1lKFwiTGluZWFyLFF1YWQsQ3ViaWMsUXVhcnQsUXVpbnQsU3Ryb25nXCIsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XG4gIHZhciBwb3dlciA9IGkgPCA1ID8gaSArIDEgOiBpO1xuXG4gIF9pbnNlcnRFYXNlKG5hbWUgKyBcIixQb3dlclwiICsgKHBvd2VyIC0gMSksIGkgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwLCBwb3dlcik7XG4gIH0gOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHAsIHBvd2VyKTtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gTWF0aC5wb3cocCAqIDIsIHBvd2VyKSAvIDIgOiAxIC0gTWF0aC5wb3coKDEgLSBwKSAqIDIsIHBvd2VyKSAvIDI7XG4gIH0pO1xufSk7XG5cbl9lYXNlTWFwLkxpbmVhci5lYXNlTm9uZSA9IF9lYXNlTWFwLm5vbmUgPSBfZWFzZU1hcC5MaW5lYXIuZWFzZUluO1xuXG5faW5zZXJ0RWFzZShcIkVsYXN0aWNcIiwgX2NvbmZpZ0VsYXN0aWMoXCJpblwiKSwgX2NvbmZpZ0VsYXN0aWMoXCJvdXRcIiksIF9jb25maWdFbGFzdGljKCkpO1xuXG4oZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIG4xID0gMSAvIGMsXG4gICAgICBuMiA9IDIgKiBuMSxcbiAgICAgIG4zID0gMi41ICogbjEsXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPCBuMSA/IG4gKiBwICogcCA6IHAgPCBuMiA/IG4gKiBNYXRoLnBvdyhwIC0gMS41IC8gYywgMikgKyAuNzUgOiBwIDwgbjMgPyBuICogKHAgLT0gMi4yNSAvIGMpICogcCArIC45Mzc1IDogbiAqIE1hdGgucG93KHAgLSAyLjYyNSAvIGMsIDIpICsgLjk4NDM3NTtcbiAgfTtcblxuICBfaW5zZXJ0RWFzZShcIkJvdW5jZVwiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0sIGVhc2VPdXQpO1xufSkoNy41NjI1LCAyLjc1KTtcblxuX2luc2VydEVhc2UoXCJFeHBvXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID8gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSA6IDA7XG59KTtcblxuX2luc2VydEVhc2UoXCJDaXJjXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiAtKF9zcXJ0KDEgLSBwICogcCkgLSAxKTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIlNpbmVcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPT09IDEgPyAxIDogLV9jb3MocCAqIF9IQUxGX1BJKSArIDE7XG59KTtcblxuX2luc2VydEVhc2UoXCJCYWNrXCIsIF9jb25maWdCYWNrKFwiaW5cIiksIF9jb25maWdCYWNrKFwib3V0XCIpLCBfY29uZmlnQmFjaygpKTtcblxuX2Vhc2VNYXAuU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5zdGVwcyA9IF9nbG9iYWxzLlN0ZXBwZWRFYXNlID0ge1xuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyhzdGVwcywgaW1tZWRpYXRlU3RhcnQpIHtcbiAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkge1xuICAgICAgc3RlcHMgPSAxO1xuICAgIH1cblxuICAgIHZhciBwMSA9IDEgLyBzdGVwcyxcbiAgICAgICAgcDIgPSBzdGVwcyArIChpbW1lZGlhdGVTdGFydCA/IDAgOiAxKSxcbiAgICAgICAgcDMgPSBpbW1lZGlhdGVTdGFydCA/IDEgOiAwLFxuICAgICAgICBtYXggPSAxIC0gX3RpbnlOdW07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKChwMiAqIF9jbGFtcCgwLCBtYXgsIHApIHwgMCkgKyBwMykgKiBwMTtcbiAgICB9O1xuICB9XG59O1xuX2RlZmF1bHRzLmVhc2UgPSBfZWFzZU1hcFtcInF1YWQub3V0XCJdO1xuXG5fZm9yRWFjaE5hbWUoXCJvbkNvbXBsZXRlLG9uVXBkYXRlLG9uU3RhcnQsb25SZXBlYXQsb25SZXZlcnNlQ29tcGxldGUsb25JbnRlcnJ1cHRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9jYWxsYmFja05hbWVzICs9IG5hbWUgKyBcIixcIiArIG5hbWUgKyBcIlBhcmFtcyxcIjtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDQUNIRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgR1NDYWNoZSA9IGZ1bmN0aW9uIEdTQ2FjaGUodGFyZ2V0LCBoYXJuZXNzKSB7XG4gIHRoaXMuaWQgPSBfZ3NJRCsrO1xuICB0YXJnZXQuX2dzYXAgPSB0aGlzO1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy5oYXJuZXNzID0gaGFybmVzcztcbiAgdGhpcy5nZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXQgOiBfZ2V0UHJvcGVydHk7XG4gIHRoaXMuc2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0U2V0dGVyIDogX2dldFNldHRlcjtcbn07XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFOSU1BVElPTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgdmFyIEFuaW1hdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFuaW1hdGlvbih2YXJzKSB7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICB0aGlzLl9kZWxheSA9ICt2YXJzLmRlbGF5IHx8IDA7XG5cbiAgICBpZiAodGhpcy5fcmVwZWF0ID0gdmFycy5yZXBlYXQgPT09IEluZmluaXR5ID8gLTIgOiB2YXJzLnJlcGVhdCB8fCAwKSB7XG4gICAgICAvLyBUT0RPOiByZXBlYXQ6IEluZmluaXR5IG9uIGEgdGltZWxpbmUncyBjaGlsZHJlbiBtdXN0IGZsYWcgdGhhdCB0aW1lbGluZSBpbnRlcm5hbGx5IGFuZCBhZmZlY3QgaXRzIHRvdGFsRHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBzdG9wIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gd2hlbiByZWFjaGluZyB0aGUgc3RhcnQuXG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YXJzLnJlcGVhdERlbGF5IHx8IDA7XG4gICAgICB0aGlzLl95b3lvID0gISF2YXJzLnlveW8gfHwgISF2YXJzLnlveW9FYXNlO1xuICAgIH1cblxuICAgIHRoaXMuX3RzID0gMTtcblxuICAgIF9zZXREdXJhdGlvbih0aGlzLCArdmFycy5kdXJhdGlvbiwgMSwgMSk7XG5cbiAgICB0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZWxheSA9IGZ1bmN0aW9uIGRlbGF5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLnN0YXJ0VGltZSh0aGlzLl9zdGFydCArIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgdGhpcy5fZGVsYXkgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kZWxheTtcbiAgfTtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbER1cmF0aW9uKHRoaXMuX3JlcGVhdCA+IDAgPyB2YWx1ZSArICh2YWx1ZSArIHRoaXMuX3JEZWxheSkgKiB0aGlzLl9yZXBlYXQgOiB2YWx1ZSkgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSAmJiB0aGlzLl9kdXI7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdER1cjtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXJ0eSA9IDA7XG4gICAgcmV0dXJuIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9yZXBlYXQgPCAwID8gdmFsdWUgOiAodmFsdWUgLSB0aGlzLl9yZXBlYXQgKiB0aGlzLl9yRGVsYXkpIC8gKHRoaXMuX3JlcGVhdCArIDEpKTtcbiAgfTtcblxuICBfcHJvdG8udG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgX3dha2UoKTtcblxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSB0aGlzLl9kcDtcblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuX3RzKSB7XG4gICAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCBfdG90YWxUaW1lKTtcblxuICAgICAgIXBhcmVudC5fZHAgfHwgcGFyZW50LnBhcmVudCB8fCBfcG9zdEFkZENoZWNrcyhwYXJlbnQsIHRoaXMpOyAvLyBlZGdlIGNhc2U6IGlmIHRoaXMgaXMgYSBjaGlsZCBvZiBhIHRpbWVsaW5lIHRoYXQgYWxyZWFkeSBjb21wbGV0ZWQsIGZvciBleGFtcGxlLCB3ZSBtdXN0IHJlLWFjdGl2YXRlIHRoZSBwYXJlbnQuXG4gICAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvciB0aW1lbGluZXMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLCB3ZSBzaG91bGQgcmVzZXQgdGhlaXIgdG90YWxUaW1lKCkgd2hpY2ggd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZXkncmUgbGluZWQgdXAgcHJvcGVybHkgYW5kIGVuYWJsZWQuIFNraXAgZm9yIGFuaW1hdGlvbnMgdGhhdCBhcmUgb24gdGhlIHJvb3QgKHdhc3RlZnVsKS4gRXhhbXBsZTogYSBUaW1lbGluZUxpdGUuZXhwb3J0Um9vdCgpIGlzIHBlcmZvcm1lZCB3aGVuIHRoZXJlJ3MgYSBwYXVzZWQgdHdlZW4gb24gdGhlIHJvb3QsIHRoZSBleHBvcnQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdGhhdCB0d2VlbiBpcyB1bnBhdXNlZCwgYnV0IGltYWdpbmUgYSBjaGlsZCBnZXRzIHJlc3RhcnRlZCBsYXRlciwgYWZ0ZXIgYWxsIFt1bnBhdXNlZF0gdHdlZW5zIGhhdmUgY29tcGxldGVkLiBUaGUgc3RhcnQgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblxuICAgICAgd2hpbGUgKHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhdGlvO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8uaXRlcmF0aW9uID0gZnVuY3Rpb24gaXRlcmF0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBhZGRpdGlvbjpcbiAgLy8gaXNQbGF5aW5nQmFja3dhcmRzKCkge1xuICAvLyBcdGxldCBhbmltYXRpb24gPSB0aGlzLFxuICAvLyBcdFx0b3JpZW50YXRpb24gPSAxOyAvLyAxID0gZm9yd2FyZCwgLTEgPSBiYWNrd2FyZFxuICAvLyBcdHdoaWxlIChhbmltYXRpb24pIHtcbiAgLy8gXHRcdG9yaWVudGF0aW9uICo9IGFuaW1hdGlvbi5yZXZlcnNlZCgpIHx8IChhbmltYXRpb24ucmVwZWF0KCkgJiYgIShhbmltYXRpb24uaXRlcmF0aW9uKCkgJiAxKSkgPyAtMSA6IDE7XG4gIC8vIFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24ucGFyZW50O1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gb3JpZW50YXRpb24gPCAwO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8udGltZVNjYWxlID0gZnVuY3Rpb24gdGltZVNjYWxlKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcy50b3RhbFRpbWUoX2NsYW1wKC10aGlzLl9kZWxheSwgdGhpcy5fdER1ciwgdFRpbWUpLCB0cnVlKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3BzID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpOyAvLyBpZiB0aGUgcGF1c2Ugb2NjdXJzIGR1cmluZyB0aGUgZGVsYXkgcGhhc2UsIG1ha2Ugc3VyZSB0aGF0J3MgZmFjdG9yZWQgaW4gd2hlbiByZXN1bWluZy5cblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX2FjdCA9IDA7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUsIHNvIGEgcGF1c2VkIHR3ZWVuIHdvdWxkIGVmZmVjdGl2ZWx5IGhhdmUgYSB0aW1lU2NhbGUgb2YgMC4gV2UgcmVjb3JkIHRoZSBcInJlYWxcIiB0aW1lU2NhbGUgYXMgX3J0cyAocmVjb3JkZWQgdGltZSBzY2FsZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7IC8vb25seSBkZWZlciB0byBfcFRpbWUgKHBhdXNlVGltZSkgaWYgdFRpbWUgaXMgemVyby4gUmVtZW1iZXIsIHNvbWVvbmUgY291bGQgcGF1c2UoKSBhbiBhbmltYXRpb24sIHRoZW4gc2NydWIgdGhlIHBsYXloZWFkIGFuZCByZXN1bWUoKS4gSWYgdGhlIHBhcmVudCBkb2Vzbid0IGhhdmUgc21vb3RoQ2hpbGRUaW1pbmcsIHdlIHJlbmRlciBhdCB0aGUgcmF3VGltZSgpIGJlY2F1c2UgdGhlIHN0YXJ0VGltZSB3b24ndCBnZXQgdXBkYXRlZC5cblxuICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgTWF0aC5hYnModGhpcy5felRpbWUpICE9PSBfdGlueU51bSAmJiAodGhpcy5fdFRpbWUgLT0gX3RpbnlOdW0pKTsgLy8gZWRnZSBjYXNlOiBhbmltYXRpb24ucHJvZ3Jlc3MoMSkucGF1c2UoKS5wbGF5KCkgd291bGRuJ3QgcmVuZGVyIGFnYWluIGJlY2F1c2UgdGhlIHBsYXloZWFkIGlzIGFscmVhZHkgYXQgdGhlIGVuZCwgYnV0IHRoZSBjYWxsIHRvIHRvdGFsVGltZSgpIGJlbG93IHdpbGwgYWRkIGl0IGJhY2sgdG8gaXRzIHBhcmVudC4uLmFuZCBub3QgcmVtb3ZlIGl0IGFnYWluIChzaW5jZSByZW1vdmluZyBvbmx5IGhhcHBlbnMgdXBvbiByZW5kZXJpbmcgYXQgYSBuZXcgdGltZSkuIE9mZnNldHRpbmcgdGhlIF90VGltZSBzbGlnaHRseSBpcyBkb25lIHNpbXBseSB0byBjYXVzZSB0aGUgZmluYWwgcmVuZGVyIGluIHRvdGFsVGltZSgpIHRoYXQnbGwgcG9wIGl0IG9mZiBpdHMgdGltZWxpbmUgKGlmIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlLCBvZiBjb3Vyc2UpLiBDaGVjayB0byBtYWtlIHN1cmUgX3pUaW1lIGlzbid0IC1fdGlueU51bSB0byBhdm9pZCBhbiBlZGdlIGNhc2Ugd2hlcmUgdGhlIHBsYXloZWFkIGlzIHB1c2hlZCB0byB0aGUgZW5kIGJ1dCBJTlNJREUgYSB0d2Vlbi9jYWxsYmFjaywgdGhlIHRpbWVsaW5lIGl0c2VsZiBpcyBwYXVzZWQgdGh1cyBoYWx0aW5nIHJlbmRlcmluZyBhbmQgbGVhdmluZyBhIGZldyB1bnJlbmRlcmVkLiBXaGVuIHJlc3VtaW5nLCBpdCB3b3VsZG4ndCByZW5kZXIgdGhvc2Ugb3RoZXJ3aXNlLlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHBhcmVudCAmJiAocGFyZW50Ll9zb3J0IHx8ICF0aGlzLnBhcmVudCkgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnQgKyAoX2lzTm90RmFsc2UoaW5jbHVkZVJlcGVhdHMpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gTWF0aC5hYnModGhpcy5fdHMpO1xuICB9O1xuXG4gIF9wcm90by5yYXdUaW1lID0gZnVuY3Rpb24gcmF3VGltZSh3cmFwUmVwZWF0cykge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDsgLy8gX2RwID0gZGV0YWNoZWQgcGFyZW50XG5cbiAgICByZXR1cm4gIXBhcmVudCA/IHRoaXMuX3RUaW1lIDogd3JhcFJlcGVhdHMgJiYgKCF0aGlzLl90cyB8fCB0aGlzLl9yZXBlYXQgJiYgdGhpcy5fdGltZSAmJiB0aGlzLnRvdGFsUHJvZ3Jlc3MoKSA8IDEpID8gdGhpcy5fdFRpbWUgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSA6ICF0aGlzLl90cyA/IHRoaXMuX3RUaW1lIDogX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50LnJhd1RpbWUod3JhcFJlcGVhdHMpLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uZ2xvYmFsVGltZSA9IGZ1bmN0aW9uIGdsb2JhbFRpbWUocmF3VGltZSkge1xuICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA/IHJhd1RpbWUgOiBhbmltYXRpb24ucmF3VGltZSgpO1xuXG4gICAgd2hpbGUgKGFuaW1hdGlvbikge1xuICAgICAgdGltZSA9IGFuaW1hdGlvbi5fc3RhcnQgKyB0aW1lIC8gKGFuaW1hdGlvbi5fdHMgfHwgMSk7XG4gICAgICBhbmltYXRpb24gPSBhbmltYXRpb24uX2RwO1xuICAgIH1cblxuICAgIHJldHVybiB0aW1lO1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcmVwZWF0ID0gdmFsdWUgPT09IEluZmluaXR5ID8gLTIgOiB2YWx1ZTtcbiAgICAgIHJldHVybiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZXBlYXQgPT09IC0yID8gSW5maW5pdHkgOiB0aGlzLl9yZXBlYXQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdERlbGF5ID0gZnVuY3Rpb24gcmVwZWF0RGVsYXkodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHRpbWUgPSB0aGlzLl90aW1lO1xuICAgICAgdGhpcy5fckRlbGF5ID0gdmFsdWU7XG5cbiAgICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG5cbiAgICAgIHJldHVybiB0aW1lID8gdGhpcy50aW1lKHRpbWUpIDogdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fckRlbGF5O1xuICB9O1xuXG4gIF9wcm90by55b3lvID0gZnVuY3Rpb24geW95byh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl95b3lvID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5feW95bztcbiAgfTtcblxuICBfcHJvdG8uc2VlayA9IGZ1bmN0aW9uIHNlZWsocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdGFydCA9IGZ1bmN0aW9uIHJlc3RhcnQoaW5jbHVkZURlbGF5LCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnBsYXkoKS50b3RhbFRpbWUoaW5jbHVkZURlbGF5ID8gLXRoaXMuX2RlbGF5IDogMCwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgfTtcblxuICBfcHJvdG8ucGxheSA9IGZ1bmN0aW9uIHBsYXkoZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBmcm9tICE9IG51bGwgJiYgdGhpcy5zZWVrKGZyb20sIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5yZXZlcnNlZChmYWxzZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UoZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBmcm9tICE9IG51bGwgJiYgdGhpcy5zZWVrKGZyb20gfHwgdGhpcy50b3RhbER1cmF0aW9uKCksIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5yZXZlcnNlZCh0cnVlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBhdFRpbWUgIT0gbnVsbCAmJiB0aGlzLnNlZWsoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuICB9O1xuXG4gIF9wcm90by5yZXN1bWUgPSBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJzZWQgPSBmdW5jdGlvbiByZXZlcnNlZCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAhIXZhbHVlICE9PSB0aGlzLnJldmVyc2VkKCkgJiYgdGhpcy50aW1lU2NhbGUoLXRoaXMuX3J0cyB8fCAodmFsdWUgPyAtX3RpbnlOdW0gOiAwKSk7IC8vIGluIGNhc2UgdGltZVNjYWxlIGlzIHplcm8sIHJldmVyc2luZyB3b3VsZCBoYXZlIG5vIGVmZmVjdCBzbyB3ZSB1c2UgX3RpbnlOdW0uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9ydHMgPCAwO1xuICB9O1xuXG4gIF9wcm90by5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB0aGlzLl9pbml0dGVkID0gdGhpcy5fYWN0ID0gMDtcbiAgICB0aGlzLl96VGltZSA9IC1fdGlueU51bTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uaXNBY3RpdmUgPSBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHAsXG4gICAgICAgIHN0YXJ0ID0gdGhpcy5fc3RhcnQsXG4gICAgICAgIHJhd1RpbWU7XG4gICAgcmV0dXJuICEhKCFwYXJlbnQgfHwgdGhpcy5fdHMgJiYgdGhpcy5faW5pdHRlZCAmJiBwYXJlbnQuaXNBY3RpdmUoKSAmJiAocmF3VGltZSA9IHBhcmVudC5yYXdUaW1lKHRydWUpKSA+PSBzdGFydCAmJiByYXdUaW1lIDwgdGhpcy5lbmRUaW1lKHRydWUpIC0gX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90by5ldmVudENhbGxiYWNrID0gZnVuY3Rpb24gZXZlbnRDYWxsYmFjayh0eXBlLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHZhcnMgPSB0aGlzLnZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgZGVsZXRlIHZhcnNbdHlwZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXJzW3R5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgIHBhcmFtcyAmJiAodmFyc1t0eXBlICsgXCJQYXJhbXNcIl0gPSBwYXJhbXMpO1xuICAgICAgICB0eXBlID09PSBcIm9uVXBkYXRlXCIgJiYgKHRoaXMuX29uVXBkYXRlID0gY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdmFyc1t0eXBlXTtcbiAgfTtcblxuICBfcHJvdG8udGhlbiA9IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICB2YXIgZiA9IF9pc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogX3Bhc3NUaHJvdWdoLFxuICAgICAgICAgIF9yZXNvbHZlID0gZnVuY3Rpb24gX3Jlc29sdmUoKSB7XG4gICAgICAgIHZhciBfdGhlbiA9IHNlbGYudGhlbjtcbiAgICAgICAgc2VsZi50aGVuID0gbnVsbDsgLy8gdGVtcG9yYXJpbHkgbnVsbCB0aGUgdGhlbigpIG1ldGhvZCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zMjIpXG5cbiAgICAgICAgX2lzRnVuY3Rpb24oZikgJiYgKGYgPSBmKHNlbGYpKSAmJiAoZi50aGVuIHx8IGYgPT09IHNlbGYpICYmIChzZWxmLnRoZW4gPSBfdGhlbik7XG4gICAgICAgIHJlc29sdmUoZik7XG4gICAgICAgIHNlbGYudGhlbiA9IF90aGVuO1xuICAgICAgfTtcblxuICAgICAgaWYgKHNlbGYuX2luaXR0ZWQgJiYgc2VsZi50b3RhbFByb2dyZXNzKCkgPT09IDEgJiYgc2VsZi5fdHMgPj0gMCB8fCAhc2VsZi5fdFRpbWUgJiYgc2VsZi5fdHMgPCAwKSB7XG4gICAgICAgIF9yZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLl9wcm9tID0gX3Jlc29sdmU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmtpbGwgPSBmdW5jdGlvbiBraWxsKCkge1xuICAgIF9pbnRlcnJ1cHQodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGlvbjtcbn0oKTtcblxuX3NldERlZmF1bHRzKEFuaW1hdGlvbi5wcm90b3R5cGUsIHtcbiAgX3RpbWU6IDAsXG4gIF9zdGFydDogMCxcbiAgX2VuZDogMCxcbiAgX3RUaW1lOiAwLFxuICBfdER1cjogMCxcbiAgX2RpcnR5OiAwLFxuICBfcmVwZWF0OiAwLFxuICBfeW95bzogZmFsc2UsXG4gIHBhcmVudDogbnVsbCxcbiAgX2luaXR0ZWQ6IGZhbHNlLFxuICBfckRlbGF5OiAwLFxuICBfdHM6IDEsXG4gIF9kcDogMCxcbiAgcmF0aW86IDAsXG4gIF96VGltZTogLV90aW55TnVtLFxuICBfcHJvbTogMCxcbiAgX3BzOiBmYWxzZSxcbiAgX3J0czogMVxufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElNRUxJTkVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVGltZWxpbmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24pIHtcbiAgX2luaGVyaXRzTG9vc2UoVGltZWxpbmUsIF9BbmltYXRpb24pO1xuXG4gIGZ1bmN0aW9uIFRpbWVsaW5lKHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIF90aGlzID0gX0FuaW1hdGlvbi5jYWxsKHRoaXMsIHZhcnMpIHx8IHRoaXM7XG4gICAgX3RoaXMubGFiZWxzID0ge307XG4gICAgX3RoaXMuc21vb3RoQ2hpbGRUaW1pbmcgPSAhIXZhcnMuc21vb3RoQ2hpbGRUaW1pbmc7XG4gICAgX3RoaXMuYXV0b1JlbW92ZUNoaWxkcmVuID0gISF2YXJzLmF1dG9SZW1vdmVDaGlsZHJlbjtcbiAgICBfdGhpcy5fc29ydCA9IF9pc05vdEZhbHNlKHZhcnMuc29ydENoaWxkcmVuKTtcbiAgICBfZ2xvYmFsVGltZWxpbmUgJiYgX2FkZFRvVGltZWxpbmUodmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgcG9zaXRpb24pO1xuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzLnBhdXNlZCh0cnVlKTtcbiAgICB2YXJzLnNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHZhcnMuc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBUaW1lbGluZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50byA9IGZ1bmN0aW9uIHRvKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgwLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICEhdmFycy5pbW1lZGlhdGVSZW5kZXI7XG4gICAgbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgMSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5jYWxsID0gZnVuY3Rpb24gY2FsbChjYWxsYmFjaywgcGFyYW1zLCBwb3NpdGlvbikge1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjaywgcGFyYW1zKSwgcG9zaXRpb24pO1xuICB9IC8vT05MWSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSEgTWF5YmUgZGVsZXRlP1xuICA7XG5cbiAgX3Byb3RvMi5zdGFnZ2VyVG8gPSBmdW5jdGlvbiBzdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHZhcnMuc3RhZ2dlciA9IHZhcnMuc3RhZ2dlciB8fCBzdGFnZ2VyO1xuICAgIHZhcnMub25Db21wbGV0ZSA9IG9uQ29tcGxldGVBbGw7XG4gICAgdmFycy5vbkNvbXBsZXRlUGFyYW1zID0gb25Db21wbGV0ZUFsbFBhcmFtcztcbiAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbSA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMucnVuQmFja3dhcmRzID0gMTtcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKHZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tVG8gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbVRvKHRhcmdldHMsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHRvVmFycy5zdGFydEF0ID0gZnJvbVZhcnM7XG4gICAgX2luaGVyaXREZWZhdWx0cyh0b1ZhcnMpLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICB0RHVyID0gdGhpcy5fZGlydHkgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgdFRpbWUgPSB0aGlzICE9PSBfZ2xvYmFsVGltZWxpbmUgJiYgdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmIHRvdGFsVGltZSA+PSAwID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgcGF1c2VUd2VlbixcbiAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIHlveW8sXG4gICAgICAgIGlzWW95bztcblxuICAgIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgZm9yY2UgfHwgY3Jvc3NpbmdTdGFydCkge1xuICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lICYmIGR1cikge1xuICAgICAgICAvL2lmIHRvdGFsRHVyYXRpb24oKSBmaW5kcyBhIGNoaWxkIHdpdGggYSBuZWdhdGl2ZSBzdGFydFRpbWUgYW5kIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHRoaW5ncyBnZXQgc2hpZnRlZCBhcm91bmQgaW50ZXJuYWxseSBzbyB3ZSBuZWVkIHRvIGFkanVzdCB0aGUgdGltZSBhY2NvcmRpbmdseS4gRm9yIGV4YW1wbGUsIGlmIGEgdHdlZW4gc3RhcnRzIGF0IC0zMCB3ZSBtdXN0IHNoaWZ0IEVWRVJZVEhJTkcgZm9yd2FyZCAzMCBzZWNvbmRzIGFuZCBtb3ZlIHRoaXMgdGltZWxpbmUncyBzdGFydFRpbWUgYmFja3dhcmQgYnkgMzAgc2Vjb25kcyBzbyB0aGF0IHRoaW5ncyBhbGlnbiB3aXRoIHRoZSBwbGF5aGVhZCAobm8ganVtcCkuXG4gICAgICAgIHRUaW1lICs9IHRoaXMuX3RpbWUgLSBwcmV2VGltZTtcbiAgICAgICAgdG90YWxUaW1lICs9IHRoaXMuX3RpbWUgLSBwcmV2VGltZTtcbiAgICAgIH1cblxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgcHJldlN0YXJ0ID0gdGhpcy5fc3RhcnQ7XG4gICAgICB0aW1lU2NhbGUgPSB0aGlzLl90cztcbiAgICAgIHByZXZQYXVzZWQgPSAhdGltZVNjYWxlO1xuXG4gICAgICBpZiAoY3Jvc3NpbmdTdGFydCkge1xuICAgICAgICBkdXIgfHwgKHByZXZUaW1lID0gdGhpcy5felRpbWUpOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHRpbWVsaW5lLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIXN1cHByZXNzRXZlbnRzKSAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICB5b3lvID0gdGhpcy5feW95bztcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgdG90YWxUaW1lIDwgMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZCh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIChwcmV2SXRlcmF0aW9uID0gaXRlcmF0aW9uKTsgLy8gZWRnZSBjYXNlIC0gaWYgc29tZW9uZSBkb2VzIGFkZFBhdXNlKCkgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgcmVwZWF0aW5nIHRpbWVsaW5lLCB0aGF0IHBhdXNlIGlzIHRlY2huaWNhbGx5IGF0IHRoZSBzYW1lIHNwb3QgYXMgdGhlIGVuZCB3aGljaCBjYXVzZXMgdGhpcy5fdGltZSB0byBnZXQgc2V0IHRvIDAgd2hlbiB0aGUgdG90YWxUaW1lIHdvdWxkIG5vcm1hbGx5IHBsYWNlIHRoZSBwbGF5aGVhZCBhdCB0aGUgZW5kLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMzgyMy1jbG9zaW5nLW5hdi1hbmltYXRpb24tbm90LXdvcmtpbmctb24taWUtYW5kLWlwaG9uZS02LW1heWJlLW90aGVyLW9sZGVyLWJyb3dzZXIvP3RhYj1jb21tZW50cyNjb21tZW50LTExMzAwNVxuXG4gICAgICAgIGlmICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpIHtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgICBpc1lveW8gPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIG1ha2Ugc3VyZSBjaGlsZHJlbiBhdCB0aGUgZW5kL2JlZ2lubmluZyBvZiB0aGUgdGltZWxpbmUgYXJlIHJlbmRlcmVkIHByb3Blcmx5LiBJZiwgZm9yIGV4YW1wbGUsXG4gICAgICAgIGEgMy1zZWNvbmQgbG9uZyB0aW1lbGluZSByZW5kZXJlZCBhdCAyLjkgc2Vjb25kcyBwcmV2aW91c2x5LCBhbmQgbm93IHJlbmRlcnMgYXQgMy4yIHNlY29uZHMgKHdoaWNoXG4gICAgICAgIHdvdWxkIGdldCB0cmFuc2xhdGVkIHRvIDIuOCBzZWNvbmRzIGlmIHRoZSB0aW1lbGluZSB5b3lvcyBvciAwLjIgc2Vjb25kcyBpZiBpdCBqdXN0IHJlcGVhdHMpLCB0aGVyZVxuICAgICAgICBjb3VsZCBiZSBhIGNhbGxiYWNrIG9yIGEgc2hvcnQgdHdlZW4gdGhhdCdzIGF0IDIuOTUgb3IgMyBzZWNvbmRzIGluIHdoaWNoIHdvdWxkbid0IHJlbmRlci4gU29cbiAgICAgICAgd2UgbmVlZCB0byBwdXNoIHRoZSB0aW1lbGluZSB0byB0aGUgZW5kIChhbmQvb3IgYmVnaW5uaW5nIGRlcGVuZGluZyBvbiBpdHMgeW95byB2YWx1ZSkuIEFsc28gd2UgbXVzdFxuICAgICAgICBlbnN1cmUgdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb3IgZW5kIG9mIHRoZSBUaW1lbGluZSB3b3JrLlxuICAgICAgICAqL1xuXG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgIHZhciByZXdpbmRpbmcgPSB5b3lvICYmIHByZXZJdGVyYXRpb24gJiAxLFxuICAgICAgICAgICAgICBkb2VzV3JhcCA9IHJld2luZGluZyA9PT0gKHlveW8gJiYgaXRlcmF0aW9uICYgMSk7XG4gICAgICAgICAgaXRlcmF0aW9uIDwgcHJldkl0ZXJhdGlvbiAmJiAocmV3aW5kaW5nID0gIXJld2luZGluZyk7XG4gICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyAwIDogZHVyO1xuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kKHByZXZUaW1lKSwgX3JvdW5kKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lID49IHByZXZUaW1lICYmIHRvdGFsVGltZSA+PSAwKSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IHRpbWUgPj0gY2hpbGQuX3N0YXJ0KSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/ICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IC1fdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBmbGFnIHpUaW1lIGFzIG5lZ2F0aXZlIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9sYXN0O1xuICAgICAgICB2YXIgYWRqdXN0ZWRUaW1lID0gdG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6IHRpbWU7IC8vd2hlbiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0IG9mIHRoaXMgdGltZWxpbmUsIHdlIG11c3QgcGFzcyB0aGF0IGluZm9ybWF0aW9uIGRvd24gdG8gdGhlIGNoaWxkIGFuaW1hdGlvbnMgc28gdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBrbm93IHdoZXRoZXIgdG8gcmVuZGVyIHRoZWlyIHN0YXJ0aW5nIG9yIGVuZGluZyB2YWx1ZXMuXG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9wcmV2O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IGFkanVzdGVkVGltZSA8PSBjaGlsZC5fZW5kKSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/IChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArIChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSBhZGp1c3RlZFRpbWUgPyAtX3RpbnlOdW0gOiBfdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBhZGp1c3QgelRpbWUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXVzZVR3ZWVuICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHBhdXNlVHdlZW4ucmVuZGVyKHRpbWUgPj0gcHJldlRpbWUgPyAwIDogLV90aW55TnVtKS5felRpbWUgPSB0aW1lID49IHByZXZUaW1lID8gMSA6IC0xO1xuXG4gICAgICAgIGlmICh0aGlzLl90cykge1xuICAgICAgICAgIC8vdGhlIGNhbGxiYWNrIHJlc3VtZWQgcGxheWJhY2shIFNvIHNpbmNlIHdlIG1heSBoYXZlIGhlbGQgYmFjayB0aGUgcGxheWhlYWQgZHVlIHRvIHdoZXJlIHRoZSBwYXVzZSBpcyBwb3NpdGlvbmVkLCBnbyBhaGVhZCBhbmQganVtcCB0byB3aGVyZSBpdCdzIFNVUFBPU0VEIHRvIGJlIChpZiBubyBwYXVzZSBoYXBwZW5lZCkuXG4gICAgICAgICAgdGhpcy5fc3RhcnQgPSBwcmV2U3RhcnQ7IC8vaWYgdGhlIHBhdXNlIHdhcyBhdCBhbiBlYXJsaWVyIHRpbWUgYW5kIHRoZSB1c2VyIHJlc3VtZWQgaW4gdGhlIGNhbGxiYWNrLCBpdCBjb3VsZCByZXBvc2l0aW9uIHRoZSB0aW1lbGluZSAoY2hhbmdpbmcgaXRzIHN0YXJ0VGltZSksIHRocm93aW5nIHRoaW5ncyBvZmYgc2xpZ2h0bHksIHNvIHdlIG1ha2Ugc3VyZSB0aGUgX3N0YXJ0IGRvZXNuJ3Qgc2hpZnQuXG5cbiAgICAgICAgICBfc2V0RW5kKHRoaXMpO1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIiwgdHJ1ZSk7XG4gICAgICBpZiAodFRpbWUgPT09IHREdXIgJiYgdER1ciA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgIXREdXIpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICBpZiAoX2lzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcyAhPT0gY2hpbGQgPyBfYWRkVG9UaW1lbGluZSh0aGlzLCBjaGlsZCwgcG9zaXRpb24pIDogdGhpczsgLy9kb24ndCBhbGxvdyBhIHRpbWVsaW5lIHRvIGJlIGFkZGVkIHRvIGl0c2VsZiBhcyBhIGNoaWxkIVxuICB9O1xuXG4gIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgdHdlZW5zID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVsaW5lcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IC1fYmlnTnVtO1xuICAgIH1cblxuICAgIHZhciBhID0gW10sXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVsaW5lcyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMSwgMSwgMSksXG4gICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhbmltYXRpb25zW2ldLnZhcnMuaWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgY2hpbGQpO1xuXG4gICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIHRoZSBnbG9iYWwgdGltZWxpbmUgKG9yIGFueSBvdGhlciB0aGF0IGhhcyBubyBwYXJlbnQgb3IgZGV0YWNoZWQgcGFyZW50KS5cbiAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kKF90aWNrZXIudGltZSAtICh0aGlzLl90cyA+IDAgPyBfdG90YWxUaW1lMiAvIHRoaXMuX3RzIDogKHRoaXMudG90YWxEdXJhdGlvbigpIC0gX3RvdGFsVGltZTIpIC8gLXRoaXMuX3RzKSk7XG4gICAgfVxuXG4gICAgX0FuaW1hdGlvbi5wcm90b3R5cGUudG90YWxUaW1lLmNhbGwodGhpcywgX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKTtcblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkTGFiZWwgPSBmdW5jdGlvbiBhZGRMYWJlbChsYWJlbCwgcG9zaXRpb24pIHtcbiAgICB0aGlzLmxhYmVsc1tsYWJlbF0gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGxhYmVsKSB7XG4gICAgZGVsZXRlIHRoaXMubGFiZWxzW2xhYmVsXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZFBhdXNlID0gZnVuY3Rpb24gYWRkUGF1c2UocG9zaXRpb24sIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrIHx8IF9lbXB0eUZ1bmMsIHBhcmFtcyk7XG4gICAgdC5kYXRhID0gXCJpc1BhdXNlXCI7XG4gICAgdGhpcy5faGFzUGF1c2UgPSAxO1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCB0LCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlUGF1c2UgPSBmdW5jdGlvbiByZW1vdmVQYXVzZShwb3NpdGlvbikge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID09PSBwb3NpdGlvbiAmJiBjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIikge1xuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIHR3ZWVucyA9IHRoaXMuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSksXG4gICAgICAgIGkgPSB0d2VlbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gIT09IHR3ZWVuc1tpXSAmJiB0d2VlbnNbaV0ua2lsbCh0YXJnZXRzLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgaXNHbG9iYWxUaW1lID0gX2lzTnVtYmVyKG9ubHlBY3RpdmUpLFxuICAgICAgICAvLyBhIG51bWJlciBpcyBpbnRlcnByZXRlZCBhcyBhIGdsb2JhbCB0aW1lLiBJZiB0aGUgYW5pbWF0aW9uIHNwYW5zXG4gICAgY2hpbGRyZW47XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgIGlmIChfYXJyYXlDb250YWluc0FueShjaGlsZC5fdGFyZ2V0cywgcGFyc2VkVGFyZ2V0cykgJiYgKGlzR2xvYmFsVGltZSA/ICghX292ZXJ3cml0aW5nVHdlZW4gfHwgY2hpbGQuX2luaXR0ZWQgJiYgY2hpbGQuX3RzKSAmJiBjaGlsZC5nbG9iYWxUaW1lKDApIDw9IG9ubHlBY3RpdmUgJiYgY2hpbGQuZ2xvYmFsVGltZShjaGlsZC50b3RhbER1cmF0aW9uKCkpID4gb25seUFjdGl2ZSA6ICFvbmx5QWN0aXZlIHx8IGNoaWxkLmlzQWN0aXZlKCkpKSB7XG4gICAgICAgICAgLy8gbm90ZTogaWYgdGhpcyBpcyBmb3Igb3ZlcndyaXRpbmcsIGl0IHNob3VsZCBvbmx5IGJlIGZvciB0d2VlbnMgdGhhdCBhcmVuJ3QgcGF1c2VkIGFuZCBhcmUgaW5pdHRlZC5cbiAgICAgICAgICBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKChjaGlsZHJlbiA9IGNoaWxkLmdldFR3ZWVuc09mKHBhcnNlZFRhcmdldHMsIG9ubHlBY3RpdmUpKS5sZW5ndGgpIHtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUgLSB0YXJnZXRzKCkgb24gdGltZWxpbmVzXG4gIC8vIHRhcmdldHMoKSB7XG4gIC8vIFx0bGV0IHJlc3VsdCA9IFtdO1xuICAvLyBcdHRoaXMuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2godCA9PiByZXN1bHQucHVzaCguLi50LnRhcmdldHMoKSkpO1xuICAvLyBcdHJldHVybiByZXN1bHQuZmlsdGVyKCh2LCBpKSA9PiByZXN1bHQuaW5kZXhPZih2KSA9PT0gaSk7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzIudHdlZW5UbyA9IGZ1bmN0aW9uIHR3ZWVuVG8ocG9zaXRpb24sIHZhcnMpIHtcbiAgICB2YXJzID0gdmFycyB8fCB7fTtcblxuICAgIHZhciB0bCA9IHRoaXMsXG4gICAgICAgIGVuZFRpbWUgPSBfcGFyc2VQb3NpdGlvbih0bCwgcG9zaXRpb24pLFxuICAgICAgICBfdmFycyA9IHZhcnMsXG4gICAgICAgIHN0YXJ0QXQgPSBfdmFycy5zdGFydEF0LFxuICAgICAgICBfb25TdGFydCA9IF92YXJzLm9uU3RhcnQsXG4gICAgICAgIG9uU3RhcnRQYXJhbXMgPSBfdmFycy5vblN0YXJ0UGFyYW1zLFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIGluaXR0ZWQsXG4gICAgICAgIHR3ZWVuID0gVHdlZW4udG8odGwsIF9zZXREZWZhdWx0cyh7XG4gICAgICBlYXNlOiB2YXJzLmVhc2UgfHwgXCJub25lXCIsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICB0aW1lOiBlbmRUaW1lLFxuICAgICAgb3ZlcndyaXRlOiBcImF1dG9cIixcbiAgICAgIGR1cmF0aW9uOiB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSkgfHwgX3RpbnlOdW0sXG4gICAgICBvblN0YXJ0OiBmdW5jdGlvbiBvblN0YXJ0KCkge1xuICAgICAgICB0bC5wYXVzZSgpO1xuXG4gICAgICAgIGlmICghaW5pdHRlZCkge1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKTtcbiAgICAgICAgICB0d2Vlbi5fZHVyICE9PSBkdXJhdGlvbiAmJiBfc2V0RHVyYXRpb24odHdlZW4sIGR1cmF0aW9uLCAwLCAxKS5yZW5kZXIodHdlZW4uX3RpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGluaXR0ZWQgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX29uU3RhcnQgJiYgX29uU3RhcnQuYXBwbHkodHdlZW4sIG9uU3RhcnRQYXJhbXMgfHwgW10pOyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG5cbiAgICByZXR1cm4gaW1tZWRpYXRlUmVuZGVyID8gdHdlZW4ucmVuZGVyKDApIDogdHdlZW47XG4gIH07XG5cbiAgX3Byb3RvMi50d2VlbkZyb21UbyA9IGZ1bmN0aW9uIHR3ZWVuRnJvbVRvKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgX3NldERlZmF1bHRzKHtcbiAgICAgIHN0YXJ0QXQ6IHtcbiAgICAgICAgdGltZTogX3BhcnNlUG9zaXRpb24odGhpcywgZnJvbVBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlY2VudCA9IGZ1bmN0aW9uIHJlY2VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjZW50O1xuICB9O1xuXG4gIF9wcm90bzIubmV4dExhYmVsID0gZnVuY3Rpb24gbmV4dExhYmVsKGFmdGVyVGltZSkge1xuICAgIGlmIChhZnRlclRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYWZ0ZXJUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYWZ0ZXJUaW1lKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5wcmV2aW91c0xhYmVsID0gZnVuY3Rpb24gcHJldmlvdXNMYWJlbChiZWZvcmVUaW1lKSB7XG4gICAgaWYgKGJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYmVmb3JlVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGJlZm9yZVRpbWUpLCAxKTtcbiAgfTtcblxuICBfcHJvdG8yLmN1cnJlbnRMYWJlbCA9IGZ1bmN0aW9uIGN1cnJlbnRMYWJlbCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5zZWVrKHZhbHVlLCB0cnVlKSA6IHRoaXMucHJldmlvdXNMYWJlbCh0aGlzLl90aW1lICsgX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90bzIuc2hpZnRDaGlsZHJlbiA9IGZ1bmN0aW9uIHNoaWZ0Q2hpbGRyZW4oYW1vdW50LCBhZGp1c3RMYWJlbHMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gMDtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbGFiZWxzID0gdGhpcy5sYWJlbHMsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBjaGlsZC5fc3RhcnQgKz0gYW1vdW50O1xuICAgICAgICBjaGlsZC5fZW5kICs9IGFtb3VudDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAoYWRqdXN0TGFiZWxzKSB7XG4gICAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICAgIGlmIChsYWJlbHNbcF0gPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICAgIGxhYmVsc1twXSArPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZSgpO1xuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gX0FuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihpbmNsdWRlTGFiZWxzKSB7XG4gICAgaWYgKGluY2x1ZGVMYWJlbHMgPT09IHZvaWQgMCkge1xuICAgICAgaW5jbHVkZUxhYmVscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIHRoaXMucmVtb3ZlKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9kcCAmJiAodGhpcy5fdGltZSA9IHRoaXMuX3RUaW1lID0gdGhpcy5fcFRpbWUgPSAwKTtcbiAgICBpbmNsdWRlTGFiZWxzICYmICh0aGlzLmxhYmVscyA9IHt9KTtcbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIHZhciBtYXggPSAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgY2hpbGQgPSBzZWxmLl9sYXN0LFxuICAgICAgICBwcmV2U3RhcnQgPSBfYmlnTnVtLFxuICAgICAgICBwcmV2LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgcGFyZW50O1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBzZWxmLnRpbWVTY2FsZSgoc2VsZi5fcmVwZWF0IDwgMCA/IHNlbGYuZHVyYXRpb24oKSA6IHNlbGYudG90YWxEdXJhdGlvbigpKSAvIChzZWxmLnJldmVyc2VkKCkgPyAtdmFsdWUgOiB2YWx1ZSkpO1xuICAgIH1cblxuICAgIGlmIChzZWxmLl9kaXJ0eSkge1xuICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBwcmV2ID0gY2hpbGQuX3ByZXY7IC8vcmVjb3JkIGl0IGhlcmUgaW4gY2FzZSB0aGUgdHdlZW4gY2hhbmdlcyBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2UuLi5cblxuICAgICAgICBjaGlsZC5fZGlydHkgJiYgY2hpbGQudG90YWxEdXJhdGlvbigpOyAvL2NvdWxkIGNoYW5nZSB0aGUgdHdlZW4uX3N0YXJ0VGltZSwgc28gbWFrZSBzdXJlIHRoZSBhbmltYXRpb24ncyBjYWNoZSBpcyBjbGVhbiBiZWZvcmUgYW5hbHl6aW5nIGl0LlxuXG4gICAgICAgIHN0YXJ0ID0gY2hpbGQuX3N0YXJ0O1xuXG4gICAgICAgIGlmIChzdGFydCA+IHByZXZTdGFydCAmJiBzZWxmLl9zb3J0ICYmIGNoaWxkLl90cyAmJiAhc2VsZi5fbG9jaykge1xuICAgICAgICAgIC8vaW4gY2FzZSBvbmUgb2YgdGhlIHR3ZWVucyBzaGlmdGVkIG91dCBvZiBvcmRlciwgaXQgbmVlZHMgdG8gYmUgcmUtaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2VcbiAgICAgICAgICBzZWxmLl9sb2NrID0gMTsgLy9wcmV2ZW50IGVuZGxlc3MgcmVjdXJzaXZlIGNhbGxzIC0gdGhlcmUgYXJlIG1ldGhvZHMgdGhhdCBnZXQgdHJpZ2dlcmVkIHRoYXQgY2hlY2sgZHVyYXRpb24vdG90YWxEdXJhdGlvbiB3aGVuIHdlIGFkZCgpLlxuXG4gICAgICAgICAgX2FkZFRvVGltZWxpbmUoc2VsZiwgY2hpbGQsIHN0YXJ0IC0gY2hpbGQuX2RlbGF5LCAxKS5fbG9jayA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgPCAwICYmIGNoaWxkLl90cykge1xuICAgICAgICAgIC8vY2hpbGRyZW4gYXJlbid0IGFsbG93ZWQgdG8gaGF2ZSBuZWdhdGl2ZSBzdGFydFRpbWVzIHVubGVzcyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCBzbyBhZGp1c3QgaGVyZSBpZiBvbmUgaXMgZm91bmQuXG4gICAgICAgICAgbWF4IC09IHN0YXJ0O1xuXG4gICAgICAgICAgaWYgKCFwYXJlbnQgJiYgIXNlbGYuX2RwIHx8IHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0YXJ0ICs9IHN0YXJ0IC8gc2VsZi5fdHM7XG4gICAgICAgICAgICBzZWxmLl90aW1lIC09IHN0YXJ0O1xuICAgICAgICAgICAgc2VsZi5fdFRpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5zaGlmdENoaWxkcmVuKC1zdGFydCwgZmFsc2UsIC0xZTk5OSk7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkLl9lbmQgPiBtYXggJiYgY2hpbGQuX3RzICYmIChtYXggPSBjaGlsZC5fZW5kKTtcbiAgICAgICAgY2hpbGQgPSBwcmV2O1xuICAgICAgfVxuXG4gICAgICBfc2V0RHVyYXRpb24oc2VsZiwgc2VsZiA9PT0gX2dsb2JhbFRpbWVsaW5lICYmIHNlbGYuX3RpbWUgPiBtYXggPyBzZWxmLl90aW1lIDogbWF4LCAxLCAxKTtcblxuICAgICAgc2VsZi5fZGlydHkgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLl90RHVyO1xuICB9O1xuXG4gIFRpbWVsaW5lLnVwZGF0ZVJvb3QgPSBmdW5jdGlvbiB1cGRhdGVSb290KHRpbWUpIHtcbiAgICBpZiAoX2dsb2JhbFRpbWVsaW5lLl90cykge1xuICAgICAgX2xhenlTYWZlUmVuZGVyKF9nbG9iYWxUaW1lbGluZSwgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZSwgX2dsb2JhbFRpbWVsaW5lKSk7XG5cbiAgICAgIF9sYXN0UmVuZGVyZWRGcmFtZSA9IF90aWNrZXIuZnJhbWU7XG4gICAgfVxuXG4gICAgaWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7XG4gICAgICBfbmV4dEdDRnJhbWUgKz0gX2NvbmZpZy5hdXRvU2xlZXAgfHwgMTIwO1xuICAgICAgdmFyIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcbiAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLl90cykgaWYgKF9jb25maWcuYXV0b1NsZWVwICYmIF90aWNrZXIuX2xpc3RlbmVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHdoaWxlIChjaGlsZCAmJiAhY2hpbGQuX3RzKSB7XG4gICAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkIHx8IF90aWNrZXIuc2xlZXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVsaW5lO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVGltZWxpbmUucHJvdG90eXBlLCB7XG4gIF9sb2NrOiAwLFxuICBfaGFzUGF1c2U6IDAsXG4gIF9mb3JjaW5nOiAwXG59KTtcblxudmFyIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKSB7XG4gIC8vbm90ZTogd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZywgbnVsbCwgc2V0dGVyKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnROdW1zLFxuICAgICAgY29sb3IsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgaGFzUmFuZG9tLFxuICAgICAgYTtcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvL2Vuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoaGFzUmFuZG9tID0gfmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gIH1cblxuICBpZiAoc3RyaW5nRmlsdGVyKSB7XG4gICAgYSA9IFtzdGFydCwgZW5kXTtcbiAgICBzdHJpbmdGaWx0ZXIoYSwgdGFyZ2V0LCBwcm9wKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLlxuXG4gICAgc3RhcnQgPSBhWzBdO1xuICAgIGVuZCA9IGFbMV07XG4gIH1cblxuICBzdGFydE51bXMgPSBzdGFydC5tYXRjaChfY29tcGxleFN0cmluZ051bUV4cCkgfHwgW107XG5cbiAgd2hpbGUgKHJlc3VsdCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmV4ZWMoZW5kKSkge1xuICAgIGVuZE51bSA9IHJlc3VsdFswXTtcbiAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG4gICAgICBjb2xvciA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGVuZE51bSAhPT0gc3RhcnROdW1zW21hdGNoSW5kZXgrK10pIHtcbiAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydE51bXNbbWF0Y2hJbmRleCAtIDFdKSB8fCAwOyAvL3RoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cbiAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgYzogZW5kTnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyBwYXJzZUZsb2F0KGVuZE51bS5zdWJzdHIoMikpICogKGVuZE51bS5jaGFyQXQoMCkgPT09IFwiLVwiID8gLTEgOiAxKSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICBfaXNGdW5jdGlvbihlbmQpICYmIChlbmQgPSBlbmQoaW5kZXggfHwgMCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF0sXG4gICAgICBwYXJzZWRTdGFydCA9IHN0YXJ0ICE9PSBcImdldFwiID8gc3RhcnQgOiAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IGN1cnJlbnRWYWx1ZSA6IGZ1bmNQYXJhbSA/IHRhcmdldFtwcm9wLmluZGV4T2YoXCJzZXRcIikgfHwgIV9pc0Z1bmN0aW9uKHRhcmdldFtcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKSA/IHByb3AgOiBcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKGZ1bmNQYXJhbSkgOiB0YXJnZXRbcHJvcF0oKSxcbiAgICAgIHNldHRlciA9ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gX3NldHRlclBsYWluIDogZnVuY1BhcmFtID8gX3NldHRlckZ1bmNXaXRoUGFyYW0gOiBfc2V0dGVyRnVuYyxcbiAgICAgIHB0O1xuXG4gIGlmIChfaXNTdHJpbmcoZW5kKSkge1xuICAgIGlmICh+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICAgIH1cblxuICAgIGlmIChlbmQuY2hhckF0KDEpID09PSBcIj1cIikge1xuICAgICAgcHQgPSBwYXJzZUZsb2F0KHBhcnNlZFN0YXJ0KSArIHBhcnNlRmxvYXQoZW5kLnN1YnN0cigyKSkgKiAoZW5kLmNoYXJBdCgwKSA9PT0gXCItXCIgPyAtMSA6IDEpICsgKGdldFVuaXQocGFyc2VkU3RhcnQpIHx8IDApO1xuXG4gICAgICBpZiAocHQgfHwgcHQgPT09IDApIHtcbiAgICAgICAgLy8gdG8gYXZvaWQgaXNOYU4sIGxpa2UgaWYgc29tZW9uZSBwYXNzZXMgaW4gYSB2YWx1ZSBsaWtlIFwiIT0gd2hhdGV2ZXJcIlxuICAgICAgICBlbmQgPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAocGFyc2VkU3RhcnQgIT09IGVuZCkge1xuICAgIGlmICghaXNOYU4ocGFyc2VkU3RhcnQgKiBlbmQpICYmIGVuZCAhPT0gXCJcIikge1xuICAgICAgLy8gZnVuIGZhY3Q6IGFueSBudW1iZXIgbXVsdGlwbGllZCBieSBcIlwiIGlzIGV2YWx1YXRlZCBhcyB0aGUgbnVtYmVyIDAhXG4gICAgICBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgK3BhcnNlZFN0YXJ0IHx8IDAsIGVuZCAtIChwYXJzZWRTdGFydCB8fCAwKSwgdHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gXCJib29sZWFuXCIgPyBfcmVuZGVyQm9vbGVhbiA6IF9yZW5kZXJQbGFpbiwgMCwgc2V0dGVyKTtcbiAgICAgIGZ1bmNQYXJhbSAmJiAocHQuZnAgPSBmdW5jUGFyYW0pO1xuICAgICAgbW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHRoaXMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcy5fcHQgPSBwdDtcbiAgICB9XG5cbiAgICAhY3VycmVudFZhbHVlICYmICEocHJvcCBpbiB0YXJnZXQpICYmIF9taXNzaW5nUGx1Z2luKHByb3AsIGVuZCk7XG4gICAgcmV0dXJuIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwcm9wLCBwYXJzZWRTdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciB8fCBfY29uZmlnLnN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKTtcbiAgfVxufSxcbiAgICAvL2NyZWF0ZXMgYSBjb3B5IG9mIHRoZSB2YXJzIG9iamVjdCBhbmQgcHJvY2Vzc2VzIGFueSBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgKHB1dHRpbmcgdGhlIHJlc3VsdGluZyB2YWx1ZXMgZGlyZWN0bHkgaW50byB0aGUgY29weSkgYXMgd2VsbCBhcyBzdHJpbmdzIHdpdGggXCJyYW5kb20oKVwiIGluIHRoZW0uIEl0IGRvZXMgTk9UIHByb2Nlc3MgcmVsYXRpdmUgdmFsdWVzLlxuX3Byb2Nlc3NWYXJzID0gZnVuY3Rpb24gX3Byb2Nlc3NWYXJzKHZhcnMsIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSB7XG4gIF9pc0Z1bmN0aW9uKHZhcnMpICYmICh2YXJzID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG5cbiAgaWYgKCFfaXNPYmplY3QodmFycykgfHwgdmFycy5zdHlsZSAmJiB2YXJzLm5vZGVUeXBlIHx8IF9pc0FycmF5KHZhcnMpIHx8IF9pc1R5cGVkQXJyYXkodmFycykpIHtcbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhcnMpID8gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHZhcnM7XG4gIH1cblxuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gdmFycykge1xuICAgIGNvcHlbcF0gPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFyc1twXSwgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9jaGVja1BsdWdpbiA9IGZ1bmN0aW9uIF9jaGVja1BsdWdpbihwcm9wZXJ0eSwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgdmFyIHBsdWdpbiwgcHQsIHB0TG9va3VwLCBpO1xuXG4gIGlmIChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgKHBsdWdpbiA9IG5ldyBfcGx1Z2luc1twcm9wZXJ0eV0oKSkuaW5pdCh0YXJnZXQsIHBsdWdpbi5yYXdWYXJzID8gdmFyc1twcm9wZXJ0eV0gOiBfcHJvY2Vzc1ZhcnModmFyc1twcm9wZXJ0eV0sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICBpZiAodHdlZW4gIT09IF9xdWlja1R3ZWVuKSB7XG4gICAgICBwdExvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cFt0d2Vlbi5fdGFyZ2V0cy5pbmRleE9mKHRhcmdldCldOyAvL25vdGU6IHdlIGNhbid0IHVzZSB0d2Vlbi5fcHRMb29rdXBbaW5kZXhdIGJlY2F1c2UgZm9yIHN0YWdnZXJlZCB0d2VlbnMsIHRoZSBpbmRleCBmcm9tIHRoZSBmdWxsVGFyZ2V0cyBhcnJheSB3b24ndCBtYXRjaCB3aGF0IGl0IGlzIGluIGVhY2ggaW5kaXZpZHVhbCB0d2VlbiB0aGF0IHNwYXducyBmcm9tIHRoZSBzdGFnZ2VyLlxuXG4gICAgICBpID0gcGx1Z2luLl9wcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHRMb29rdXBbcGx1Z2luLl9wcm9wc1tpXV0gPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGx1Z2luO1xufSxcbiAgICBfb3ZlcndyaXRpbmdUd2VlbixcbiAgICAvL3N0b3JlIGEgcmVmZXJlbmNlIHRlbXBvcmFyaWx5IHNvIHdlIGNhbiBhdm9pZCBvdmVyd3JpdGluZyBpdHNlbGYuXG5faW5pdFR3ZWVuID0gZnVuY3Rpb24gX2luaXRUd2Vlbih0d2VlbiwgdGltZSkge1xuICB2YXIgdmFycyA9IHR3ZWVuLnZhcnMsXG4gICAgICBlYXNlID0gdmFycy5lYXNlLFxuICAgICAgc3RhcnRBdCA9IHZhcnMuc3RhcnRBdCxcbiAgICAgIGltbWVkaWF0ZVJlbmRlciA9IHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgbGF6eSA9IHZhcnMubGF6eSxcbiAgICAgIG9uVXBkYXRlID0gdmFycy5vblVwZGF0ZSxcbiAgICAgIG9uVXBkYXRlUGFyYW1zID0gdmFycy5vblVwZGF0ZVBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGUgPSB2YXJzLmNhbGxiYWNrU2NvcGUsXG4gICAgICBydW5CYWNrd2FyZHMgPSB2YXJzLnJ1bkJhY2t3YXJkcyxcbiAgICAgIHlveW9FYXNlID0gdmFycy55b3lvRWFzZSxcbiAgICAgIGtleWZyYW1lcyA9IHZhcnMua2V5ZnJhbWVzLFxuICAgICAgYXV0b1JldmVydCA9IHZhcnMuYXV0b1JldmVydCxcbiAgICAgIGR1ciA9IHR3ZWVuLl9kdXIsXG4gICAgICBwcmV2U3RhcnRBdCA9IHR3ZWVuLl9zdGFydEF0LFxuICAgICAgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcGFyZW50ID0gdHdlZW4ucGFyZW50LFxuICAgICAgZnVsbFRhcmdldHMgPSBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQucGFyZW50Ll90YXJnZXRzIDogdGFyZ2V0cyxcbiAgICAgIGF1dG9PdmVyd3JpdGUgPSB0d2Vlbi5fb3ZlcndyaXRlID09PSBcImF1dG9cIiAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICAgIHRsID0gdHdlZW4udGltZWxpbmUsXG4gICAgICBjbGVhblZhcnMsXG4gICAgICBpLFxuICAgICAgcCxcbiAgICAgIHB0LFxuICAgICAgdGFyZ2V0LFxuICAgICAgaGFzUHJpb3JpdHksXG4gICAgICBnc0RhdGEsXG4gICAgICBoYXJuZXNzLFxuICAgICAgcGx1Z2luLFxuICAgICAgcHRMb29rdXAsXG4gICAgICBpbmRleCxcbiAgICAgIGhhcm5lc3NWYXJzLFxuICAgICAgb3ZlcndyaXR0ZW47XG4gIHRsICYmICgha2V5ZnJhbWVzIHx8ICFlYXNlKSAmJiAoZWFzZSA9IFwibm9uZVwiKTtcbiAgdHdlZW4uX2Vhc2UgPSBfcGFyc2VFYXNlKGVhc2UsIF9kZWZhdWx0cy5lYXNlKTtcbiAgdHdlZW4uX3lFYXNlID0geW95b0Vhc2UgPyBfaW52ZXJ0RWFzZShfcGFyc2VFYXNlKHlveW9FYXNlID09PSB0cnVlID8gZWFzZSA6IHlveW9FYXNlLCBfZGVmYXVsdHMuZWFzZSkpIDogMDtcblxuICBpZiAoeW95b0Vhc2UgJiYgdHdlZW4uX3lveW8gJiYgIXR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvL3RoZXJlIG11c3QgaGF2ZSBiZWVuIGEgcGFyZW50IHRpbWVsaW5lIHdpdGggeW95bzp0cnVlIHRoYXQgaXMgY3VycmVudGx5IGluIGl0cyB5b3lvIHBoYXNlLCBzbyBmbGlwIHRoZSBlYXNlcy5cbiAgICB5b3lvRWFzZSA9IHR3ZWVuLl95RWFzZTtcbiAgICB0d2Vlbi5feUVhc2UgPSB0d2Vlbi5fZWFzZTtcbiAgICB0d2Vlbi5fZWFzZSA9IHlveW9FYXNlO1xuICB9XG5cbiAgdHdlZW4uX2Zyb20gPSAhdGwgJiYgISF2YXJzLnJ1bkJhY2t3YXJkczsgLy9uZXN0ZWQgdGltZWxpbmVzIHNob3VsZCBuZXZlciBydW4gYmFja3dhcmRzIC0gdGhlIGJhY2t3YXJkcy1uZXNzIGlzIGluIHRoZSBjaGlsZCB0d2VlbnMuXG5cbiAgaWYgKCF0bCkge1xuICAgIC8vaWYgdGhlcmUncyBhbiBpbnRlcm5hbCB0aW1lbGluZSwgc2tpcCBhbGwgdGhlIHBhcnNpbmcgYmVjYXVzZSB3ZSBwYXNzZWQgdGhhdCB0YXNrIGRvd24gdGhlIGNoYWluLlxuICAgIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwO1xuICAgIGhhcm5lc3NWYXJzID0gaGFybmVzcyAmJiB2YXJzW2hhcm5lc3MucHJvcF07IC8vc29tZW9uZSBtYXkgbmVlZCB0byBzcGVjaWZ5IENTUy1zcGVjaWZpYyB2YWx1ZXMgQU5EIG5vbi1DU1MgdmFsdWVzLCBsaWtlIGlmIHRoZSBlbGVtZW50IGhhcyBhbiBcInhcIiBwcm9wZXJ0eSBwbHVzIGl0J3MgYSBzdGFuZGFyZCBET00gZWxlbWVudC4gV2UgYWxsb3cgcGVvcGxlIHRvIGRpc3Rpbmd1aXNoIGJ5IHdyYXBwaW5nIHBsdWdpbi1zcGVjaWZpYyBzdHVmZiBpbiBhIGNzczp7fSBvYmplY3QgZm9yIGV4YW1wbGUuXG5cbiAgICBjbGVhblZhcnMgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfcmVzZXJ2ZWRQcm9wcyk7XG4gICAgcHJldlN0YXJ0QXQgJiYgcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKS5raWxsKCk7XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6IF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICBzdGFydEF0OiBudWxsLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlLFxuICAgICAgICBvblVwZGF0ZVBhcmFtczogb25VcGRhdGVQYXJhbXMsXG4gICAgICAgIGNhbGxiYWNrU2NvcGU6IGNhbGxiYWNrU2NvcGUsXG4gICAgICAgIHN0YWdnZXI6IDBcbiAgICAgIH0sIHN0YXJ0QXQpKSk7IC8vY29weSB0aGUgcHJvcGVydGllcy92YWx1ZXMgaW50byBhIG5ldyBvYmplY3QgdG8gYXZvaWQgY29sbGlzaW9ucywgbGlrZSB2YXIgdG8gPSB7eDowfSwgZnJvbSA9IHt4OjUwMH07IHRpbWVsaW5lLmZyb21UbyhlLCBmcm9tLCB0bykuZnJvbVRvKGUsIHRvLCBmcm9tKTtcblxuXG4gICAgICB0aW1lIDwgMCAmJiAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ICYmIHR3ZWVuLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgdGltZSA+IDAgJiYgIWF1dG9SZXZlcnQgJiYgKHR3ZWVuLl9zdGFydEF0ID0gMCk7IC8vdHdlZW5zIHRoYXQgcmVuZGVyIGltbWVkaWF0ZWx5IChsaWtlIG1vc3QgZnJvbSgpIGFuZCBmcm9tVG8oKSB0d2VlbnMpIHNob3VsZG4ndCByZXZlcnQgd2hlbiB0aGVpciBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIHBhc3QgdGhlIHN0YXJ0VGltZSBiZWNhdXNlIHRoZSBpbml0aWFsIHJlbmRlciBjb3VsZCBoYXZlIGhhcHBlbmVkIGFueXRpbWUgYW5kIGl0IHNob3VsZG4ndCBiZSBkaXJlY3RseSBjb3JyZWxhdGVkIHRvIHRoaXMgdHdlZW4ncyBzdGFydFRpbWUuIEltYWdpbmUgc2V0dGluZyB1cCBhIGNvbXBsZXggYW5pbWF0aW9uIHdoZXJlIHRoZSBiZWdpbm5pbmcgc3RhdGVzIG9mIHZhcmlvdXMgb2JqZWN0cyBhcmUgcmVuZGVyZWQgaW1tZWRpYXRlbHkgYnV0IHRoZSB0d2VlbiBkb2Vzbid0IGhhcHBlbiBmb3IgcXVpdGUgc29tZSB0aW1lIC0gaWYgd2UgcmV2ZXJ0IHRvIHRoZSBzdGFydGluZyB2YWx1ZXMgYXMgc29vbiBhcyB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBwYXN0IHRoZSB0d2VlbidzIHN0YXJ0VGltZSwgaXQgd2lsbCB0aHJvdyB0aGluZ3Mgb2ZmIHZpc3VhbGx5LiBSZXZlcnNpb24gc2hvdWxkIG9ubHkgaGFwcGVuIGluIFRpbWVsaW5lIGluc3RhbmNlcyB3aGVyZSBpbW1lZGlhdGVSZW5kZXIgd2FzIGZhbHNlIG9yIHdoZW4gYXV0b1JldmVydCBpcyBleHBsaWNpdGx5IHNldCB0byB0cnVlLlxuXG4gICAgICAgIGlmIChkdXIgJiYgdGltZSA8PSAwKSB7XG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9IC8vIGlmICh0aW1lID4gMCkge1xuICAgICAgICAvLyBcdGF1dG9SZXZlcnQgfHwgKHR3ZWVuLl9zdGFydEF0ID0gMCk7IC8vdHdlZW5zIHRoYXQgcmVuZGVyIGltbWVkaWF0ZWx5IChsaWtlIG1vc3QgZnJvbSgpIGFuZCBmcm9tVG8oKSB0d2VlbnMpIHNob3VsZG4ndCByZXZlcnQgd2hlbiB0aGVpciBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIHBhc3QgdGhlIHN0YXJ0VGltZSBiZWNhdXNlIHRoZSBpbml0aWFsIHJlbmRlciBjb3VsZCBoYXZlIGhhcHBlbmVkIGFueXRpbWUgYW5kIGl0IHNob3VsZG4ndCBiZSBkaXJlY3RseSBjb3JyZWxhdGVkIHRvIHRoaXMgdHdlZW4ncyBzdGFydFRpbWUuIEltYWdpbmUgc2V0dGluZyB1cCBhIGNvbXBsZXggYW5pbWF0aW9uIHdoZXJlIHRoZSBiZWdpbm5pbmcgc3RhdGVzIG9mIHZhcmlvdXMgb2JqZWN0cyBhcmUgcmVuZGVyZWQgaW1tZWRpYXRlbHkgYnV0IHRoZSB0d2VlbiBkb2Vzbid0IGhhcHBlbiBmb3IgcXVpdGUgc29tZSB0aW1lIC0gaWYgd2UgcmV2ZXJ0IHRvIHRoZSBzdGFydGluZyB2YWx1ZXMgYXMgc29vbiBhcyB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBwYXN0IHRoZSB0d2VlbidzIHN0YXJ0VGltZSwgaXQgd2lsbCB0aHJvdyB0aGluZ3Mgb2ZmIHZpc3VhbGx5LiBSZXZlcnNpb24gc2hvdWxkIG9ubHkgaGFwcGVuIGluIFRpbWVsaW5lIGluc3RhbmNlcyB3aGVyZSBpbW1lZGlhdGVSZW5kZXIgd2FzIGZhbHNlIG9yIHdoZW4gYXV0b1JldmVydCBpcyBleHBsaWNpdGx5IHNldCB0byB0cnVlLlxuICAgICAgICAvLyB9IGVsc2UgaWYgKGR1ciAmJiAhKHRpbWUgPCAwICYmIHByZXZTdGFydEF0KSkge1xuICAgICAgICAvLyBcdHRpbWUgJiYgKHR3ZWVuLl96VGltZSA9IHRpbWUpO1xuICAgICAgICAvLyBcdHJldHVybjsgLy93ZSBza2lwIGluaXRpYWxpemF0aW9uIGhlcmUgc28gdGhhdCBvdmVyd3JpdGluZyBkb2Vzbid0IG9jY3VyIHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBzZXZlcmFsIGltbWVkaWF0ZVJlbmRlcjp0cnVlIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQvcHJvcGVydGllcyB0byBkcm9wIGludG8gYSBUaW1lbGluZSwgdGhlIGxhc3Qgb25lIGNyZWF0ZWQgd291bGQgb3ZlcndyaXRlIHRoZSBmaXJzdCBvbmVzIGJlY2F1c2UgdGhleSBkaWRuJ3QgZ2V0IHBsYWNlZCBpbnRvIHRoZSB0aW1lbGluZSB5ZXQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXIgb2NjdXJzIGFuZCBraWNrcyBpbiBvdmVyd3JpdGluZy5cbiAgICAgICAgLy8gfVxuXG4gICAgICB9IGVsc2UgaWYgKGF1dG9SZXZlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9zdGFydEF0ID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmIChwcmV2U3RhcnRBdCkge1xuICAgICAgICAhYXV0b1JldmVydCAmJiAodHdlZW4uX3N0YXJ0QXQgPSAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OmdzYXAudXRpbHMud3JhcChbLTEwMCwxMDBdKX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgdGltZSA8IDAgJiYgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKTsgLy8gcmFyZSBlZGdlIGNhc2UsIGxpa2UgaWYgYSByZW5kZXIgaXMgZm9yY2VkIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gb2YgYSBub24taW5pdHRlZCBmcm9tKCkgdHdlZW4uXG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblxuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHdlZW4uX3B0ID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSgwKSk7IC8vQWxzbyBtYWtlIHN1cmUgdGhlIG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb3ZlcndyaXRlIFRISVMgdHdlZW4hISFcblxuXG4gICAgICAgIG92ZXJ3cml0dGVuID0gIXR3ZWVuLnBhcmVudDtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fcHQgJiYgbGF6eSAmJiAoX2xhenlMb29rdXBbZ3NEYXRhLmlkXSA9IDEpO1xuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodHdlZW4pO1xuICAgIHR3ZWVuLl9vbkluaXQgJiYgdHdlZW4uX29uSW5pdCh0d2Vlbik7IC8vcGx1Z2lucyBsaWtlIFJvdW5kUHJvcHMgbXVzdCB3YWl0IHVudGlsIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyBhcmUgaW5zdGFudGlhdGVkLiBJbiB0aGUgcGx1Z2luJ3MgaW5pdCgpIGZ1bmN0aW9uLCBpdCBzZXRzIHRoZSBfb25Jbml0IG9uIHRoZSB0d2VlbiBpbnN0YW5jZS4gTWF5IG5vdCBiZSBwcmV0dHkvaW50dWl0aXZlLCBidXQgaXQncyBmYXN0IGFuZCBrZWVwcyBmaWxlIHNpemUgZG93bi5cbiAgfVxuXG4gIHR3ZWVuLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICB0d2Vlbi5faW5pdHRlZCA9ICghdHdlZW4uX29wIHx8IHR3ZWVuLl9wdCkgJiYgIW92ZXJ3cml0dGVuOyAvLyBpZiBvdmVyd3JpdHRlblByb3BzIHJlc3VsdGVkIGluIHRoZSBlbnRpcmUgdHdlZW4gYmVpbmcga2lsbGVkLCBkbyBOT1QgZmxhZyBpdCBhcyBpbml0dGVkIG9yIGVsc2UgaXQgbWF5IHJlbmRlciBmb3Igb25lIHRpY2suXG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX3BhcnNlRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHZhbHVlLCB0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiB+dmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgPyBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkgOiB2YWx1ZTtcbn0sXG4gICAgX3N0YWdnZXJUd2VlblByb3BzID0gX2NhbGxiYWNrTmFtZXMgKyBcInJlcGVhdCxyZXBlYXREZWxheSx5b3lvLHJlcGVhdFJlZnJlc2gseW95b0Vhc2VcIixcbiAgICBfc3RhZ2dlclByb3BzVG9Ta2lwID0gKF9zdGFnZ2VyVHdlZW5Qcm9wcyArIFwiLGlkLHN0YWdnZXIsZGVsYXksZHVyYXRpb24scGF1c2VkLHNjcm9sbFRyaWdnZXJcIikuc3BsaXQoXCIsXCIpO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24yKSB7XG4gIF9pbmhlcml0c0xvb3NlKFR3ZWVuLCBfQW5pbWF0aW9uMik7XG5cbiAgZnVuY3Rpb24gVHdlZW4odGFyZ2V0cywgdmFycywgcG9zaXRpb24sIHNraXBJbmhlcml0KSB7XG4gICAgdmFyIF90aGlzMztcblxuICAgIGlmICh0eXBlb2YgdmFycyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcG9zaXRpb24uZHVyYXRpb24gPSB2YXJzO1xuICAgICAgdmFycyA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIF90aGlzMyA9IF9BbmltYXRpb24yLmNhbGwodGhpcywgc2tpcEluaGVyaXQgPyB2YXJzIDogX2luaGVyaXREZWZhdWx0cyh2YXJzKSkgfHwgdGhpcztcbiAgICB2YXIgX3RoaXMzJHZhcnMgPSBfdGhpczMudmFycyxcbiAgICAgICAgZHVyYXRpb24gPSBfdGhpczMkdmFycy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfdGhpczMkdmFycy5kZWxheSxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3RoaXMzJHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBzdGFnZ2VyID0gX3RoaXMzJHZhcnMuc3RhZ2dlcixcbiAgICAgICAgb3ZlcndyaXRlID0gX3RoaXMzJHZhcnMub3ZlcndyaXRlLFxuICAgICAgICBrZXlmcmFtZXMgPSBfdGhpczMkdmFycy5rZXlmcmFtZXMsXG4gICAgICAgIGRlZmF1bHRzID0gX3RoaXMzJHZhcnMuZGVmYXVsdHMsXG4gICAgICAgIHNjcm9sbFRyaWdnZXIgPSBfdGhpczMkdmFycy5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICB5b3lvRWFzZSA9IF90aGlzMyR2YXJzLnlveW9FYXNlLFxuICAgICAgICBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSAoX2lzQXJyYXkodGFyZ2V0cykgfHwgX2lzVHlwZWRBcnJheSh0YXJnZXRzKSA/IF9pc051bWJlcih0YXJnZXRzWzBdKSA6IFwibGVuZ3RoXCIgaW4gdmFycykgPyBbdGFyZ2V0c10gOiB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICB0bCxcbiAgICAgICAgaSxcbiAgICAgICAgY29weSxcbiAgICAgICAgbCxcbiAgICAgICAgcCxcbiAgICAgICAgY3VyVGFyZ2V0LFxuICAgICAgICBzdGFnZ2VyRnVuYyxcbiAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlO1xuICAgIF90aGlzMy5fdGFyZ2V0cyA9IHBhcnNlZFRhcmdldHMubGVuZ3RoID8gX2hhcm5lc3MocGFyc2VkVGFyZ2V0cykgOiBfd2FybihcIkdTQVAgdGFyZ2V0IFwiICsgdGFyZ2V0cyArIFwiIG5vdCBmb3VuZC4gaHR0cHM6Ly9ncmVlbnNvY2suY29tXCIsICFfY29uZmlnLm51bGxUYXJnZXRXYXJuKSB8fCBbXTtcbiAgICBfdGhpczMuX3B0TG9va3VwID0gW107IC8vUHJvcFR3ZWVuIGxvb2t1cC4gQW4gYXJyYXkgY29udGFpbmluZyBhbiBvYmplY3QgZm9yIGVhY2ggdGFyZ2V0LCBoYXZpbmcga2V5cyBmb3IgZWFjaCB0d2VlbmluZyBwcm9wZXJ0eVxuXG4gICAgX3RoaXMzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGU7XG5cbiAgICBpZiAoa2V5ZnJhbWVzIHx8IHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICB2YXJzID0gX3RoaXMzLnZhcnM7XG4gICAgICB0bCA9IF90aGlzMy50aW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gICAgICAgIGRhdGE6IFwibmVzdGVkXCIsXG4gICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0cyB8fCB7fVxuICAgICAgfSk7XG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSB0bC5fZHAgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG4gICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICBpZiAoa2V5ZnJhbWVzKSB7XG4gICAgICAgIF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhZ2dlciA/IHBhcnNlZFRhcmdldHMuZm9yRWFjaChmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICAgIHJldHVybiBrZXlmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUsIGopIHtcbiAgICAgICAgICAgIHJldHVybiB0bC50byh0LCBmcmFtZSwgaiA/IFwiPlwiIDogaSAqIHN0YWdnZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSA6IGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgIHJldHVybiB0bC50byhwYXJzZWRUYXJnZXRzLCBmcmFtZSwgXCI+XCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGwgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcbiAgICAgICAgc3RhZ2dlckZ1bmMgPSBzdGFnZ2VyID8gZGlzdHJpYnV0ZShzdGFnZ2VyKSA6IF9lbXB0eUZ1bmM7XG5cbiAgICAgICAgaWYgKF9pc09iamVjdChzdGFnZ2VyKSkge1xuICAgICAgICAgIC8vdXNlcnMgY2FuIHBhc3MgaW4gY2FsbGJhY2tzIGxpa2Ugb25TdGFydC9vbkNvbXBsZXRlIGluIHRoZSBzdGFnZ2VyIG9iamVjdC4gVGhlc2Ugc2hvdWxkIGZpcmUgd2l0aCBlYWNoIGluZGl2aWR1YWwgdHdlZW4uXG4gICAgICAgICAgZm9yIChwIGluIHN0YWdnZXIpIHtcbiAgICAgICAgICAgIGlmICh+X3N0YWdnZXJUd2VlblByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlIHx8IChzdGFnZ2VyVmFyc1RvTWVyZ2UgPSB7fSk7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZVtwXSA9IHN0YWdnZXJbcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvcHkgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICBpZiAoX3N0YWdnZXJQcm9wc1RvU2tpcC5pbmRleE9mKHApIDwgMCkge1xuICAgICAgICAgICAgICBjb3B5W3BdID0gdmFyc1twXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb3B5LnN0YWdnZXIgPSAwO1xuICAgICAgICAgIHlveW9FYXNlICYmIChjb3B5LnlveW9FYXNlID0geW95b0Vhc2UpO1xuICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSAmJiBfbWVyZ2UoY29weSwgc3RhZ2dlclZhcnNUb01lcmdlKTtcbiAgICAgICAgICBjdXJUYXJnZXQgPSBwYXJzZWRUYXJnZXRzW2ldOyAvL2Rvbid0IGp1c3QgY29weSBkdXJhdGlvbiBvciBkZWxheSBiZWNhdXNlIGlmIHRoZXkncmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24sIHdlJ2QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AgYmVjYXVzZSBfaXNGdW5jT3JTdHJpbmcoKSB3b3VsZCBldmFsdWF0ZSBhcyB0cnVlIGluIHRoZSBjaGlsZCB0d2VlbnMsIGVudGVyaW5nIHRoaXMgbG9vcCwgZXRjLiBTbyB3ZSBwYXJzZSB0aGUgdmFsdWUgc3RyYWlnaHQgZnJvbSB2YXJzIGFuZCBkZWZhdWx0IHRvIDAuXG5cbiAgICAgICAgICBjb3B5LmR1cmF0aW9uID0gK19wYXJzZUZ1bmNPclN0cmluZyhkdXJhdGlvbiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpO1xuICAgICAgICAgIGNvcHkuZGVsYXkgPSAoK19wYXJzZUZ1bmNPclN0cmluZyhkZWxheSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIHx8IDApIC0gX3RoaXMzLl9kZWxheTtcblxuICAgICAgICAgIGlmICghc3RhZ2dlciAmJiBsID09PSAxICYmIGNvcHkuZGVsYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIHNvbWVvbmUgZG9lcyBkZWxheTpcInJhbmRvbSgxLCA1KVwiLCByZXBlYXQ6LTEsIGZvciBleGFtcGxlLCB0aGUgZGVsYXkgc2hvdWxkbid0IGJlIGluc2lkZSB0aGUgcmVwZWF0LlxuICAgICAgICAgICAgX3RoaXMzLl9kZWxheSA9IGRlbGF5ID0gY29weS5kZWxheTtcbiAgICAgICAgICAgIF90aGlzMy5fc3RhcnQgKz0gZGVsYXk7XG4gICAgICAgICAgICBjb3B5LmRlbGF5ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC50byhjdXJUYXJnZXQsIGNvcHksIHN0YWdnZXJGdW5jKGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDsgLy8gaWYgdGhlIHRpbWVsaW5lJ3MgZHVyYXRpb24gaXMgMCwgd2UgZG9uJ3QgbmVlZCBhIHRpbWVsaW5lIGludGVybmFsbHkhXG4gICAgICB9XG5cbiAgICAgIGR1cmF0aW9uIHx8IF90aGlzMy5kdXJhdGlvbihkdXJhdGlvbiA9IHRsLmR1cmF0aW9uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpczMudGltZWxpbmUgPSAwOyAvL3NwZWVkIG9wdGltaXphdGlvbiwgZmFzdGVyIGxvb2t1cHMgKG5vIGdvaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4pXG4gICAgfVxuXG4gICAgaWYgKG92ZXJ3cml0ZSA9PT0gdHJ1ZSAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcykge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG5cbiAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YocGFyc2VkVGFyZ2V0cyk7XG5cbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShwYXJlbnQsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgcG9zaXRpb24pO1xuXG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpczMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzMy5wYXVzZWQodHJ1ZSk7XG5cbiAgICBpZiAoaW1tZWRpYXRlUmVuZGVyIHx8ICFkdXJhdGlvbiAmJiAha2V5ZnJhbWVzICYmIF90aGlzMy5fc3RhcnQgPT09IF9yb3VuZChwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgIF90aGlzMy5fdFRpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXG4gICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkpOyAvL2luIGNhc2UgZGVsYXkgaXMgbmVnYXRpdmVcblxuICAgIH1cblxuICAgIHNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBzY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXMzO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICB0RHVyID0gdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiB0b3RhbFRpbWUgPj0gMCA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IHRvdGFsVGltZSA8IDApIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgdG90YWxUaW1lIDwgMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZCh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICBpZiAoaXNZb3lvKSB7XG4gICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgIC8vY291bGQgYmUgZHVyaW5nIHRoZSByZXBlYXREZWxheSBwYXJ0LiBObyBuZWVkIHRvIHJlbmRlciBhbmQgZmlyZSBjYWxsYmFja3MuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgdGltZWxpbmUgJiYgdGhpcy5feUVhc2UgJiYgX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pOyAvL3JlcGVhdFJlZnJlc2ggZnVuY3Rpb25hbGl0eVxuXG4gICAgICAgICAgaWYgKHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSBmb3JjZSA9IDE7IC8vZm9yY2UsIG90aGVyd2lzZSBpZiBsYXp5IGlzIHRydWUsIHRoZSBfYXR0ZW1wdEluaXRUd2VlbigpIHdpbGwgcmV0dXJuIGFuZCB3ZSdsbCBqdW1wIG91dCBhbmQgZ2V0IGNhdWdodCBib3VuY2luZyBvbiBlYWNoIHRpY2suXG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKF9yb3VuZChjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzKSkge1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gMDsgLy8gaW4gY29uc3RydWN0b3IgaWYgaW1tZWRpYXRlUmVuZGVyIGlzIHRydWUsIHdlIHNldCBfdFRpbWUgdG8gLV90aW55TnVtIHRvIGhhdmUgdGhlIHBsYXloZWFkIGNyb3NzIHRoZSBzdGFydGluZyBwb2ludCBidXQgd2UgY2FuJ3QgbGVhdmUgX3RUaW1lIGFzIGEgbmVnYXRpdmUgbnVtYmVyLlxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVyICE9PSB0aGlzLl9kdXIpIHtcbiAgICAgICAgICAvLyB3aGlsZSBpbml0dGluZywgYSBwbHVnaW4gbGlrZSBJbmVydGlhUGx1Z2luIG1pZ2h0IGFsdGVyIHRoZSBkdXJhdGlvbiwgc28gcmVydW4gZnJvbSB0aGUgc3RhcnQgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgcmVuZGVycyBhcyBpdCBzaG91bGQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG5cbiAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX2FjdCA9IDE7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICAgIHRoaXMuX2xhenkgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgIGlmICh0aGlzLl9mcm9tKSB7XG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgJiYgIXByZXZUaW1lICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiAhdGltZSAmJiBpc1lveW8gPyAtX3RpbnlOdW0gOiB0aW1lbGluZS5fZHVyICogcmF0aW8sIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRvdGFsVGltZSA8IDAgJiYgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblxuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRUaW1lID09PSB0aGlzLl90RHVyIHx8ICF0VGltZSkgJiYgdGhpcy5fdFRpbWUgPT09IHRUaW1lKSB7XG4gICAgICAgIHRvdGFsVGltZSA8IDAgJiYgdGhpcy5fc3RhcnRBdCAmJiAhdGhpcy5fb25VcGRhdGUgJiYgdGhpcy5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lKSkge1xuICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGFuZCB0VGltZSBhcmUgemVybywgd2Ugc2hvdWxkbid0IGZpcmUgdGhlIG9uUmV2ZXJzZUNvbXBsZXRlLiBUaGlzIGNvdWxkIGhhcHBlbiBpZiB5b3UgZ3NhcC50byguLi4ge3BhdXNlZDp0cnVlfSkucGxheSgpO1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzMudGFyZ2V0cyA9IGZ1bmN0aW9uIHRhcmdldHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHM7XG4gIH07XG5cbiAgX3Byb3RvMy5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fc3RhcnRBdCA9IHRoaXMuX29uVXBkYXRlID0gdGhpcy5fbGF6eSA9IHRoaXMucmF0aW8gPSAwO1xuICAgIHRoaXMuX3B0TG9va3VwID0gW107XG4gICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLmludmFsaWRhdGUoKTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gX2ludGVycnVwdCh0aGlzKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcbiAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7IC8vIGlmIG5vdGhpbmcgaXMgbGVmdCB0d2VlbmluZywgaW50ZXJydXB0LlxuXG4gICAgICB0aGlzLnBhcmVudCAmJiB0RHVyICE9PSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKSAmJiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fZHVyICogdGhpcy50aW1lbGluZS5fdER1ciAvIHREdXIsIDAsIDEpOyAvLyBpZiBhIG5lc3RlZCB0d2VlbiBpcyBraWxsZWQgdGhhdCBjaGFuZ2VzIHRoZSBkdXJhdGlvbiwgaXQgc2hvdWxkIGFmZmVjdCB0aGlzIHR3ZWVuJ3MgZHVyYXRpb24uIFdlIG11c3QgdXNlIHRoZSByYXRpbywgdGhvdWdoLCBiZWNhdXNlIHNvbWV0aW1lcyB0aGUgaW50ZXJuYWwgdGltZWxpbmUgaXMgc3RyZXRjaGVkIGxpa2UgZm9yIGtleWZyYW1lcyB3aGVyZSB0aGV5IGRvbid0IGFsbCBhZGQgdXAgdG8gd2hhdGV2ZXIgdGhlIHBhcmVudCB0d2VlbidzIGR1cmF0aW9uIHdhcyBzZXQgdG8uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWRUYXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcbiAgICAgICAga2lsbGluZ1RhcmdldHMgPSB0YXJnZXRzID8gdG9BcnJheSh0YXJnZXRzKSA6IHBhcnNlZFRhcmdldHMsXG4gICAgICAgIHByb3BUd2Vlbkxvb2t1cCA9IHRoaXMuX3B0TG9va3VwLFxuICAgICAgICBmaXJzdFBUID0gdGhpcy5fcHQsXG4gICAgICAgIG92ZXJ3cml0dGVuUHJvcHMsXG4gICAgICAgIGN1ckxvb2t1cCxcbiAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBwLFxuICAgICAgICBwdCxcbiAgICAgICAgaTtcblxuICAgIGlmICgoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikgJiYgX2FycmF5c01hdGNoKHBhcnNlZFRhcmdldHMsIGtpbGxpbmdUYXJnZXRzKSkge1xuICAgICAgdmFycyA9PT0gXCJhbGxcIiAmJiAodGhpcy5fcHQgPSAwKTtcbiAgICAgIHJldHVybiBfaW50ZXJydXB0KHRoaXMpO1xuICAgIH1cblxuICAgIG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vcCA9IHRoaXMuX29wIHx8IFtdO1xuXG4gICAgaWYgKHZhcnMgIT09IFwiYWxsXCIpIHtcbiAgICAgIC8vc28gcGVvcGxlIGNhbiBwYXNzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXNcbiAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgcCA9IHt9O1xuXG4gICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBwW25hbWVdID0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFycyA9IHA7XG4gICAgICB9XG5cbiAgICAgIHZhcnMgPSBfYWRkQWxpYXNlc1RvVmFycyhwYXJzZWRUYXJnZXRzLCB2YXJzKTtcbiAgICB9XG5cbiAgICBpID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAofmtpbGxpbmdUYXJnZXRzLmluZGV4T2YocGFyc2VkVGFyZ2V0c1tpXSkpIHtcbiAgICAgICAgY3VyTG9va3VwID0gcHJvcFR3ZWVuTG9va3VwW2ldO1xuXG4gICAgICAgIGlmICh2YXJzID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnM7XG4gICAgICAgICAgcHJvcHMgPSBjdXJMb29rdXA7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gPSBvdmVyd3JpdHRlblByb3BzW2ldIHx8IHt9O1xuICAgICAgICAgIHByb3BzID0gdmFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocCBpbiBwcm9wcykge1xuICAgICAgICAgIHB0ID0gY3VyTG9va3VwICYmIGN1ckxvb2t1cFtwXTtcblxuICAgICAgICAgIGlmIChwdCkge1xuICAgICAgICAgICAgaWYgKCEoXCJraWxsXCIgaW4gcHQuZCkgfHwgcHQuZC5raWxsKHApID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjdXJMb29rdXBbcF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1ck92ZXJ3cml0ZVByb3BzICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wc1twXSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdHRlZCAmJiAhdGhpcy5fcHQgJiYgZmlyc3RQVCAmJiBfaW50ZXJydXB0KHRoaXMpOyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFR3ZWVuLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgYXJndW1lbnRzWzJdKTtcbiAgfTtcblxuICBUd2Vlbi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uIGRlbGF5ZWRDYWxsKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuICAgIHJldHVybiBuZXcgVHdlZW4oY2FsbGJhY2ssIDAsIHtcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICBkZWxheTogZGVsYXksXG4gICAgICBvbkNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlOiBzY29wZVxuICAgIH0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycykge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzKTtcbiAgfTtcblxuICBUd2Vlbi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSk7XG4gIH07XG5cbiAgcmV0dXJuIFR3ZWVuO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVHdlZW4ucHJvdG90eXBlLCB7XG4gIF90YXJnZXRzOiBbXSxcbiAgX2xhenk6IDAsXG4gIF9zdGFydEF0OiAwLFxuICBfb3A6IDAsXG4gIF9vbkluaXQ6IDBcbn0pOyAvL2FkZCB0aGUgcGVydGluZW50IHRpbWVsaW5lIG1ldGhvZHMgdG8gVHdlZW4gaW5zdGFuY2VzIHNvIHRoYXQgdXNlcnMgY2FuIGNoYWluIGNvbnZlbmllbnRseSBhbmQgY3JlYXRlIGEgdGltZWxpbmUgYXV0b21hdGljYWxseS4gKHJlbW92ZWQgZHVlIHRvIGNvbmNlcm5zIHRoYXQgaXQnZCB1bHRpbWF0ZWx5IGFkZCB0byBtb3JlIGNvbmZ1c2lvbiBlc3BlY2lhbGx5IGZvciBiZWdpbm5lcnMpXG4vLyBfZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxzZXQsY2FsbCxhZGQsYWRkTGFiZWwsYWRkUGF1c2VcIiwgbmFtZSA9PiB7XG4vLyBcdFR3ZWVuLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuLy8gXHRcdGxldCB0bCA9IG5ldyBUaW1lbGluZSgpO1xuLy8gXHRcdHJldHVybiBfYWRkVG9UaW1lbGluZSh0bCwgdGhpcylbbmFtZV0uYXBwbHkodGwsIHRvQXJyYXkoYXJndW1lbnRzKSk7XG4vLyBcdH1cbi8vIH0pO1xuLy9mb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gTGV2ZXJhZ2UgdGhlIHRpbWVsaW5lIGNhbGxzLlxuXG5cbl9mb3JFYWNoTmFtZShcInN0YWdnZXJUbyxzdGFnZ2VyRnJvbSxzdGFnZ2VyRnJvbVRvXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIFR3ZWVuW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSgpLFxuICAgICAgICBwYXJhbXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcGFyYW1zLnNwbGljZShuYW1lID09PSBcInN0YWdnZXJGcm9tVG9cIiA/IDUgOiA0LCAwLCAwKTtcbiAgICByZXR1cm4gdGxbbmFtZV0uYXBwbHkodGwsIHBhcmFtcyk7XG4gIH07XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUFJPUFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9zZXR0ZXJQbGFpbiA9IGZ1bmN0aW9uIF9zZXR0ZXJQbGFpbih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyRnVuYyA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckZ1bmNXaXRoUGFyYW0gPSBmdW5jdGlvbiBfc2V0dGVyRnVuY1dpdGhQYXJhbSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XShkYXRhLmZwLCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfc2V0dGVyQXR0cmlidXRlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc2V0QXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9nZXRTZXR0ZXIgPSBmdW5jdGlvbiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHRhcmdldFtwcm9wZXJ0eV0pID8gX3NldHRlckZ1bmMgOiBfaXNVbmRlZmluZWQodGFyZ2V0W3Byb3BlcnR5XSkgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZSA/IF9zZXR0ZXJBdHRyaWJ1dGUgOiBfc2V0dGVyUGxhaW47XG59LFxuICAgIF9yZW5kZXJQbGFpbiA9IGZ1bmN0aW9uIF9yZW5kZXJQbGFpbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwMDApIC8gMTAwMDAwMCwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJCb29sZWFuID0gZnVuY3Rpb24gX3JlbmRlckJvb2xlYW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCAhIShkYXRhLnMgKyBkYXRhLmMgKiByYXRpbyksIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ29tcGxleFN0cmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDb21wbGV4U3RyaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0LFxuICAgICAgcyA9IFwiXCI7XG5cbiAgaWYgKCFyYXRpbyAmJiBkYXRhLmIpIHtcbiAgICAvL2IgPSBiZWdpbm5pbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuYjtcbiAgfSBlbHNlIGlmIChyYXRpbyA9PT0gMSAmJiBkYXRhLmUpIHtcbiAgICAvL2UgPSBlbmRpbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuZTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHMgPSBwdC5wICsgKHB0Lm0gPyBwdC5tKHB0LnMgKyBwdC5jICogcmF0aW8pIDogTWF0aC5yb3VuZCgocHQucyArIHB0LmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCkgKyBzOyAvL3dlIHVzZSB0aGUgXCJwXCIgcHJvcGVydHkgZm9yIHRoZSB0ZXh0IGluYmV0d2VlbiAobGlrZSBhIHN1ZmZpeCkuIEFuZCBpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBsZXggc3RyaW5nLCB0aGUgbW9kaWZpZXIgKG0pIGlzIHR5cGljYWxseSBqdXN0IE1hdGgucm91bmQoKSwgbGlrZSBmb3IgUkdCIGNvbG9ycy5cblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICBzICs9IGRhdGEuYzsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIGNodW5rIG9mIG5vbi1udW1lcmljIHRleHQuXG4gIH1cblxuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcywgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3JlbmRlclByb3BUd2VlbnMocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxufSxcbiAgICBfYWRkUGx1Z2luTW9kaWZpZXIgPSBmdW5jdGlvbiBfYWRkUGx1Z2luTW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQucCA9PT0gcHJvcGVydHkgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQpO1xuICAgIHB0ID0gbmV4dDtcbiAgfVxufSxcbiAgICBfa2lsbFByb3BUd2VlbnNPZiA9IGZ1bmN0aW9uIF9raWxsUHJvcFR3ZWVuc09mKHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nLFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG5cbiAgICBpZiAocHQucCA9PT0gcHJvcGVydHkgJiYgIXB0Lm9wIHx8IHB0Lm9wID09PSBwcm9wZXJ0eSkge1xuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICB9IGVsc2UgaWYgKCFwdC5kZXApIHtcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyA9IDE7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuICFoYXNOb25EZXBlbmRlbnRSZW1haW5pbmc7XG59LFxuICAgIF9zZXR0ZXJXaXRoTW9kaWZpZXIgPSBmdW5jdGlvbiBfc2V0dGVyV2l0aE1vZGlmaWVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIGRhdGEubVNldCh0YXJnZXQsIHByb3BlcnR5LCBkYXRhLm0uY2FsbChkYXRhLnR3ZWVuLCB2YWx1ZSwgZGF0YS5tdCksIGRhdGEpO1xufSxcbiAgICBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5ID0gZnVuY3Rpb24gX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eShwYXJlbnQpIHtcbiAgdmFyIHB0ID0gcGFyZW50Ll9wdCxcbiAgICAgIG5leHQsXG4gICAgICBwdDIsXG4gICAgICBmaXJzdCxcbiAgICAgIGxhc3Q7IC8vc29ydHMgdGhlIFByb3BUd2VlbiBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwcmlvcml0eSBiZWNhdXNlIHNvbWUgcGx1Z2lucyBuZWVkIHRvIGRvIHRoZWlyIHdvcmsgYWZ0ZXIgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIHdlcmUgY3JlYXRlZCAobGlrZSBSb3VuZFByb3BzUGx1Z2luIGFuZCBNb2RpZmllcnNQbHVnaW4pXG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0MiA9IGZpcnN0O1xuXG4gICAgd2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuICAgICAgcHQyID0gcHQyLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpIHtcbiAgICAgIHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpcnN0ID0gcHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9uZXh0ID0gcHQyKSB7XG4gICAgICBwdDIuX3ByZXYgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IHB0O1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHBhcmVudC5fcHQgPSBmaXJzdDtcbn07IC8vUHJvcFR3ZWVuIGtleTogdCA9IHRhcmdldCwgcCA9IHByb3AsIHIgPSByZW5kZXJlciwgZCA9IGRhdGEsIHMgPSBzdGFydCwgYyA9IGNoYW5nZSwgb3AgPSBvdmVyd3JpdGVQcm9wZXJ0eSAoT05MWSBwb3B1bGF0ZWQgd2hlbiBpdCdzIGRpZmZlcmVudCB0aGFuIHApLCBwciA9IHByaW9yaXR5LCBfbmV4dC9fcHJldiBmb3IgdGhlIGxpbmtlZCBsaXN0IHNpYmxpbmdzLCBzZXQgPSBzZXR0ZXIsIG0gPSBtb2RpZmllciwgbVNldCA9IG1vZGlmaWVyU2V0dGVyICh0aGUgb3JpZ2luYWwgc2V0dGVyLCBiZWZvcmUgYSBtb2RpZmllciB3YXMgYWRkZWQpXG5cblxuZXhwb3J0IHZhciBQcm9wVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9wVHdlZW4obmV4dCwgdGFyZ2V0LCBwcm9wLCBzdGFydCwgY2hhbmdlLCByZW5kZXJlciwgZGF0YSwgc2V0dGVyLCBwcmlvcml0eSkge1xuICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICB0aGlzLnMgPSBzdGFydDtcbiAgICB0aGlzLmMgPSBjaGFuZ2U7XG4gICAgdGhpcy5wID0gcHJvcDtcbiAgICB0aGlzLnIgPSByZW5kZXJlciB8fCBfcmVuZGVyUGxhaW47XG4gICAgdGhpcy5kID0gZGF0YSB8fCB0aGlzO1xuICAgIHRoaXMuc2V0ID0gc2V0dGVyIHx8IF9zZXR0ZXJQbGFpbjtcbiAgICB0aGlzLnByID0gcHJpb3JpdHkgfHwgMDtcbiAgICB0aGlzLl9uZXh0ID0gbmV4dDtcblxuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0Ll9wcmV2ID0gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvNCA9IFByb3BUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5tb2RpZmllciA9IGZ1bmN0aW9uIG1vZGlmaWVyKGZ1bmMsIHR3ZWVuLCB0YXJnZXQpIHtcbiAgICB0aGlzLm1TZXQgPSB0aGlzLm1TZXQgfHwgdGhpcy5zZXQ7IC8vaW4gY2FzZSBpdCB3YXMgYWxyZWFkeSBzZXQgKGEgUHJvcFR3ZWVuIGNhbiBvbmx5IGhhdmUgb25lIG1vZGlmaWVyKVxuXG4gICAgdGhpcy5zZXQgPSBfc2V0dGVyV2l0aE1vZGlmaWVyO1xuICAgIHRoaXMubSA9IGZ1bmM7XG4gICAgdGhpcy5tdCA9IHRhcmdldDsgLy9tb2RpZmllciB0YXJnZXRcblxuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcbiAgfTtcblxuICByZXR1cm4gUHJvcFR3ZWVuO1xufSgpOyAvL0luaXRpYWxpemF0aW9uIHRhc2tzXG5cbl9mb3JFYWNoTmFtZShfY2FsbGJhY2tOYW1lcyArIFwicGFyZW50LGR1cmF0aW9uLGVhc2UsZGVsYXksb3ZlcndyaXRlLHJ1bkJhY2t3YXJkcyxzdGFydEF0LHlveW8saW1tZWRpYXRlUmVuZGVyLHJlcGVhdCxyZXBlYXREZWxheSxkYXRhLHBhdXNlZCxyZXZlcnNlZCxsYXp5LGNhbGxiYWNrU2NvcGUsc3RyaW5nRmlsdGVyLGlkLHlveW9FYXNlLHN0YWdnZXIsaW5oZXJpdCxyZXBlYXRSZWZyZXNoLGtleWZyYW1lcyxhdXRvUmV2ZXJ0LHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbn0pO1xuXG5fZ2xvYmFscy5Ud2Vlbk1heCA9IF9nbG9iYWxzLlR3ZWVuTGl0ZSA9IFR3ZWVuO1xuX2dsb2JhbHMuVGltZWxpbmVMaXRlID0gX2dsb2JhbHMuVGltZWxpbmVNYXggPSBUaW1lbGluZTtcbl9nbG9iYWxUaW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gIHNvcnRDaGlsZHJlbjogZmFsc2UsXG4gIGRlZmF1bHRzOiBfZGVmYXVsdHMsXG4gIGF1dG9SZW1vdmVDaGlsZHJlbjogdHJ1ZSxcbiAgaWQ6IFwicm9vdFwiLFxuICBzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZVxufSk7XG5fY29uZmlnLnN0cmluZ0ZpbHRlciA9IF9jb2xvclN0cmluZ0ZpbHRlcjtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogR1NBUFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgaXNUd2VlbmluZzogZnVuY3Rpb24gaXNUd2VlbmluZyh0YXJnZXRzKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCB0cnVlKS5sZW5ndGggPiAwO1xuICB9LFxuICBkZWZhdWx0czogZnVuY3Rpb24gZGVmYXVsdHModmFsdWUpIHtcbiAgICB2YWx1ZSAmJiB2YWx1ZS5lYXNlICYmICh2YWx1ZS5lYXNlID0gX3BhcnNlRWFzZSh2YWx1ZS5lYXNlLCBfZGVmYXVsdHMuZWFzZSkpO1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9kZWZhdWx0cywgdmFsdWUgfHwge30pO1xuICB9LFxuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyh2YWx1ZSkge1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9jb25maWcsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgcmVnaXN0ZXJFZmZlY3Q6IGZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0KF9yZWYzKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3QsXG4gICAgICAgIHBsdWdpbnMgPSBfcmVmMy5wbHVnaW5zLFxuICAgICAgICBkZWZhdWx0cyA9IF9yZWYzLmRlZmF1bHRzLFxuICAgICAgICBleHRlbmRUaW1lbGluZSA9IF9yZWYzLmV4dGVuZFRpbWVsaW5lO1xuICAgIChwbHVnaW5zIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gICAgICByZXR1cm4gcGx1Z2luTmFtZSAmJiAhX3BsdWdpbnNbcGx1Z2luTmFtZV0gJiYgIV9nbG9iYWxzW3BsdWdpbk5hbWVdICYmIF93YXJuKG5hbWUgKyBcIiBlZmZlY3QgcmVxdWlyZXMgXCIgKyBwbHVnaW5OYW1lICsgXCIgcGx1Z2luLlwiKTtcbiAgICB9KTtcblxuICAgIF9lZmZlY3RzW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHRsKSB7XG4gICAgICByZXR1cm4gZWZmZWN0KHRvQXJyYXkodGFyZ2V0cyksIF9zZXREZWZhdWx0cyh2YXJzIHx8IHt9LCBkZWZhdWx0cyksIHRsKTtcbiAgICB9O1xuXG4gICAgaWYgKGV4dGVuZFRpbWVsaW5lKSB7XG4gICAgICBUaW1lbGluZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKF9lZmZlY3RzW25hbWVdKHRhcmdldHMsIF9pc09iamVjdCh2YXJzKSA/IHZhcnMgOiAocG9zaXRpb24gPSB2YXJzKSAmJiB7fSwgdGhpcyksIHBvc2l0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICByZWdpc3RlckVhc2U6IGZ1bmN0aW9uIHJlZ2lzdGVyRWFzZShuYW1lLCBlYXNlKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfcGFyc2VFYXNlKGVhc2UpO1xuICB9LFxuICBwYXJzZUVhc2U6IGZ1bmN0aW9uIHBhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkgOiBfZWFzZU1hcDtcbiAgfSxcbiAgZ2V0QnlJZDogZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0QnlJZChpZCk7XG4gIH0sXG4gIGV4cG9ydFJvb3Q6IGZ1bmN0aW9uIGV4cG9ydFJvb3QodmFycywgaW5jbHVkZURlbGF5ZWRDYWxscykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUodmFycyksXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0O1xuICAgIHRsLnNtb290aENoaWxkVGltaW5nID0gX2lzTm90RmFsc2UodmFycy5zbW9vdGhDaGlsZFRpbWluZyk7XG5cbiAgICBfZ2xvYmFsVGltZWxpbmUucmVtb3ZlKHRsKTtcblxuICAgIHRsLl9kcCA9IDA7IC8vb3RoZXJ3aXNlIGl0J2xsIGdldCByZS1hY3RpdmF0ZWQgd2hlbiBhZGRpbmcgY2hpbGRyZW4gYW5kIGJlIHJlLWludHJvZHVjZWQgaW50byBfZ2xvYmFsVGltZWxpbmUncyBsaW5rZWQgbGlzdCAodGhlbiBhZGRlZCB0byBpdHNlbGYpLlxuXG4gICAgdGwuX3RpbWUgPSB0bC5fdFRpbWUgPSBfZ2xvYmFsVGltZWxpbmUuX3RpbWU7XG4gICAgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgIGlmIChpbmNsdWRlRGVsYXllZENhbGxzIHx8ICEoIWNoaWxkLl9kdXIgJiYgY2hpbGQgaW5zdGFuY2VvZiBUd2VlbiAmJiBjaGlsZC52YXJzLm9uQ29tcGxldGUgPT09IGNoaWxkLl90YXJnZXRzWzBdKSkge1xuICAgICAgICBfYWRkVG9UaW1lbGluZSh0bCwgY2hpbGQsIGNoaWxkLl9zdGFydCAtIGNoaWxkLl9kZWxheSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShfZ2xvYmFsVGltZWxpbmUsIHRsLCAwKTtcblxuICAgIHJldHVybiB0bDtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdDtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICBwdCA9IHRoaXMuYWRkKHRhcmdldCwgXCJzZXRBdHRyaWJ1dGVcIiwgKHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgMCkgKyBcIlwiLCB2YXJzW3BdLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICBwdCAmJiAocHQub3AgPSBwKTtcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH1cbn0sIHtcbiAgbmFtZTogXCJlbmRBcnJheVwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFsdWUpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuYWRkKHRhcmdldCwgaSwgdGFyZ2V0W2ldIHx8IDAsIHZhbHVlW2ldKTtcbiAgICB9XG4gIH1cbn0sIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwicm91bmRQcm9wc1wiLCBfcm91bmRNb2RpZmllciksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwibW9kaWZpZXJzXCIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcInNuYXBcIiwgc25hcCkpIHx8IF9nc2FwOyAvL3RvIHByZXZlbnQgdGhlIGNvcmUgcGx1Z2lucyBmcm9tIGJlaW5nIGRyb3BwZWQgdmlhIGFnZ3Jlc3NpdmUgdHJlZSBzaGFraW5nLCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb24gaW4gdGhpcyB3YXkuXG5cblR3ZWVuLnZlcnNpb24gPSBUaW1lbGluZS52ZXJzaW9uID0gZ3NhcC52ZXJzaW9uID0gXCIzLjcuMVwiO1xuX2NvcmVSZWFkeSA9IDE7XG5fd2luZG93RXhpc3RzKCkgJiYgX3dha2UoKTtcbnZhciBQb3dlcjAgPSBfZWFzZU1hcC5Qb3dlcjAsXG4gICAgUG93ZXIxID0gX2Vhc2VNYXAuUG93ZXIxLFxuICAgIFBvd2VyMiA9IF9lYXNlTWFwLlBvd2VyMixcbiAgICBQb3dlcjMgPSBfZWFzZU1hcC5Qb3dlcjMsXG4gICAgUG93ZXI0ID0gX2Vhc2VNYXAuUG93ZXI0LFxuICAgIExpbmVhciA9IF9lYXNlTWFwLkxpbmVhcixcbiAgICBRdWFkID0gX2Vhc2VNYXAuUXVhZCxcbiAgICBDdWJpYyA9IF9lYXNlTWFwLkN1YmljLFxuICAgIFF1YXJ0ID0gX2Vhc2VNYXAuUXVhcnQsXG4gICAgUXVpbnQgPSBfZWFzZU1hcC5RdWludCxcbiAgICBTdHJvbmcgPSBfZWFzZU1hcC5TdHJvbmcsXG4gICAgRWxhc3RpYyA9IF9lYXNlTWFwLkVsYXN0aWMsXG4gICAgQmFjayA9IF9lYXNlTWFwLkJhY2ssXG4gICAgU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5TdGVwcGVkRWFzZSxcbiAgICBCb3VuY2UgPSBfZWFzZU1hcC5Cb3VuY2UsXG4gICAgU2luZSA9IF9lYXNlTWFwLlNpbmUsXG4gICAgRXhwbyA9IF9lYXNlTWFwLkV4cG8sXG4gICAgQ2lyYyA9IF9lYXNlTWFwLkNpcmM7XG5leHBvcnQgeyBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTtcbmV4cG9ydCB7IFR3ZWVuIGFzIFR3ZWVuTWF4LCBUd2VlbiBhcyBUd2VlbkxpdGUsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTWF4LCBUaW1lbGluZSBhcyBUaW1lbGluZUxpdGUsIGdzYXAgYXMgZGVmYXVsdCwgd3JhcCwgd3JhcFlveW8sIGRpc3RyaWJ1dGUsIHJhbmRvbSwgc25hcCwgbm9ybWFsaXplLCBnZXRVbml0LCBjbGFtcCwgc3BsaXRDb2xvciwgdG9BcnJheSwgc2VsZWN0b3IsIG1hcFJhbmdlLCBwaXBlLCB1bml0aXplLCBpbnRlcnBvbGF0ZSwgc2h1ZmZsZSB9OyAvL2V4cG9ydCBzb21lIGludGVybmFsIG1ldGhvZHMvb3JvamVjdHMgZm9yIHVzZSBpbiBDU1NQbHVnaW4gc28gdGhhdCB3ZSBjYW4gZXh0ZXJuYWxpemUgdGhhdCBmaWxlIGFuZCBhbGxvdyBjdXN0b20gYnVpbGRzIHRoYXQgZXhjbHVkZSBpdC5cblxuZXhwb3J0IHsgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfcmVwbGFjZVJhbmRvbSwgX2NoZWNrUGx1Z2luLCBfcGx1Z2lucywgX3RpY2tlciwgX2NvbmZpZywgX3JvdW5kTW9kaWZpZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwIH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsIi8qIVxuICogbWF0cml4IDMuNy4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDIxLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9kb2MsXG4gICAgX3dpbixcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfYm9keSxcbiAgICBfZGl2Q29udGFpbmVyLFxuICAgIF9zdmdDb250YWluZXIsXG4gICAgX2lkZW50aXR5TWF0cml4LFxuICAgIF9nRWwsXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9oYXNPZmZzZXRCdWcsXG4gICAgX3NldERvYyA9IGZ1bmN0aW9uIF9zZXREb2MoZWxlbWVudCkge1xuICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50IHx8IGVsZW1lbnQ7XG5cbiAgaWYgKCEoX3RyYW5zZm9ybVByb3AgaW4gZWxlbWVudC5zdHlsZSkgJiYgXCJtc1RyYW5zZm9ybVwiIGluIGVsZW1lbnQuc3R5bGUpIHtcbiAgICAvL3RvIGltcHJvdmUgY29tcGF0aWJpbGl0eSB3aXRoIG9sZCBNaWNyb3NvZnQgYnJvd3NlcnNcbiAgICBfdHJhbnNmb3JtUHJvcCA9IFwibXNUcmFuc2Zvcm1cIjtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgfVxuXG4gIHdoaWxlIChkb2MucGFyZW50Tm9kZSAmJiAoZG9jID0gZG9jLnBhcmVudE5vZGUpKSB7fVxuXG4gIF93aW4gPSB3aW5kb3c7XG4gIF9pZGVudGl0eU1hdHJpeCA9IG5ldyBNYXRyaXgyRCgpO1xuXG4gIGlmIChkb2MpIHtcbiAgICBfZG9jID0gZG9jO1xuICAgIF9kb2NFbGVtZW50ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IGRvYy5ib2R5O1xuICAgIF9nRWwgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTsgLy8gcHJldmVudCBhbnkgZXhpc3RpbmcgQ1NTIGZyb20gdHJhbnNmb3JtaW5nIGl0XG5cbiAgICBfZ0VsLnN0eWxlLnRyYW5zZm9ybSA9IFwibm9uZVwiOyAvLyBub3cgdGVzdCBmb3IgdGhlIG9mZnNldCByZXBvcnRpbmcgYnVnLiBVc2UgZmVhdHVyZSBkZXRlY3Rpb24gaW5zdGVhZCBvZiBicm93c2VyIHNuaWZmaW5nIHRvIG1ha2UgdGhpbmdzIG1vcmUgYnVsbGV0cHJvb2YgYW5kIGZ1dHVyZS1wcm9vZi4gSG9wZWZ1bGx5IFNhZmFyaSB3aWxsIGZpeCB0aGVpciBidWcgc29vbiBidXQgaXQncyAyMDIwIGFuZCBpdCdzIHN0aWxsIG5vdCBmaXhlZC5cblxuICAgIHZhciBkMSA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgICBkMiA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgX2JvZHkuYXBwZW5kQ2hpbGQoZDEpO1xuXG4gICAgZDEuYXBwZW5kQ2hpbGQoZDIpO1xuICAgIGQxLnN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIjtcbiAgICBkMS5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSBcInRyYW5zbGF0ZTNkKDAsMCwxcHgpXCI7XG4gICAgX2hhc09mZnNldEJ1ZyA9IGQyLm9mZnNldFBhcmVudCAhPT0gZDE7XG5cbiAgICBfYm9keS5yZW1vdmVDaGlsZChkMSk7XG4gIH1cblxuICByZXR1cm4gZG9jO1xufSxcbiAgICBfZm9yY2VOb25aZXJvU2NhbGUgPSBmdW5jdGlvbiBfZm9yY2VOb25aZXJvU2NhbGUoZSkge1xuICAvLyB3YWxrcyB1cCB0aGUgZWxlbWVudCdzIGFuY2VzdG9ycyBhbmQgZmluZHMgYW55IHRoYXQgaGFkIHRoZWlyIHNjYWxlIHNldCB0byAwIHZpYSBHU0FQLCBhbmQgY2hhbmdlcyB0aGVtIHRvIDAuMDAwMSB0byBlbnN1cmUgdGhhdCBtZWFzdXJlbWVudHMgd29yay4gRmlyZWZveCBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgdG8gaW5jb3JyZWN0bHkgcmVwb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHdoZW4gc2NhbGUgaXMgMC5cbiAgdmFyIGEsIGNhY2hlO1xuXG4gIHdoaWxlIChlICYmIGUgIT09IF9ib2R5KSB7XG4gICAgY2FjaGUgPSBlLl9nc2FwO1xuICAgIGNhY2hlICYmIGNhY2hlLnVuY2FjaGUgJiYgY2FjaGUuZ2V0KGUsIFwieFwiKTsgLy8gZm9yY2UgcmUtcGFyc2luZyBvZiB0cmFuc2Zvcm1zIGlmIG5lY2Vzc2FyeVxuXG4gICAgaWYgKGNhY2hlICYmICFjYWNoZS5zY2FsZVggJiYgIWNhY2hlLnNjYWxlWSAmJiBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0pIHtcbiAgICAgIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IDFlLTQ7XG4gICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oMSwgY2FjaGUpO1xuICAgICAgYSA/IGEucHVzaChjYWNoZSkgOiBhID0gW2NhY2hlXTtcbiAgICB9XG5cbiAgICBlID0gZS5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbjogcGFzcyBhbiBlbGVtZW50IHRvIF9mb3JjZURpc3BsYXkoKSBhbmQgaXQnbGwgd2FsayB1cCBhbGwgaXRzIGFuY2VzdG9ycyBhbmQgbWFrZSBzdXJlIGFueXRoaW5nIHdpdGggZGlzcGxheTogbm9uZSBpcyBzZXQgdG8gZGlzcGxheTogYmxvY2ssIGFuZCBpZiB0aGVyZSdzIG5vIHBhcmVudE5vZGUsIGl0J2xsIGFkZCBpdCB0byB0aGUgYm9keS4gSXQgcmV0dXJucyBhbiBBcnJheSB0aGF0IHlvdSBjYW4gdGhlbiBmZWVkIHRvIF9yZXZlcnREaXNwbGF5KCkgdG8gaGF2ZSBpdCByZXZlcnQgYWxsIHRoZSBjaGFuZ2VzIGl0IG1hZGUuXG4vLyBfZm9yY2VEaXNwbGF5ID0gZSA9PiB7XG4vLyBcdGxldCBhID0gW10sXG4vLyBcdFx0cGFyZW50O1xuLy8gXHR3aGlsZSAoZSAmJiBlICE9PSBfYm9keSkge1xuLy8gXHRcdHBhcmVudCA9IGUucGFyZW50Tm9kZTtcbi8vIFx0XHQoX3dpbi5nZXRDb21wdXRlZFN0eWxlKGUpLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFwYXJlbnQpICYmIGEucHVzaChlLCBlLnN0eWxlLmRpc3BsYXksIHBhcmVudCkgJiYgKGUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIik7XG4vLyBcdFx0cGFyZW50IHx8IF9ib2R5LmFwcGVuZENoaWxkKGUpO1xuLy8gXHRcdGUgPSBwYXJlbnQ7XG4vLyBcdH1cbi8vIFx0cmV0dXJuIGE7XG4vLyB9LFxuLy8gX3JldmVydERpc3BsYXkgPSBhID0+IHtcbi8vIFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSs9Mykge1xuLy8gXHRcdGFbaSsxXSA/IChhW2ldLnN0eWxlLmRpc3BsYXkgPSBhW2krMV0pIDogYVtpXS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcImRpc3BsYXlcIik7XG4vLyBcdFx0YVtpKzJdIHx8IGFbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhW2ldKTtcbi8vIFx0fVxuLy8gfSxcbl9zdmdUZW1wcyA9IFtdLFxuICAgIC8vd2UgY3JlYXRlIDMgZWxlbWVudHMgZm9yIFNWRywgYW5kIDMgZm9yIG90aGVyIERPTSBlbGVtZW50cyBhbmQgY2FjaGUgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gVGhleSBnZXQgbmVzdGVkIGluIF9kaXZDb250YWluZXIgYW5kIF9zdmdDb250YWluZXIgc28gdGhhdCBqdXN0IG9uZSBlbGVtZW50IGlzIGFkZGVkIHRvIHRoZSBET00gb24gZWFjaCBzdWNjZXNzaXZlIGF0dGVtcHQuIEFnYWluLCBwZXJmb3JtYW5jZSBpcyBrZXkuXG5fZGl2VGVtcHMgPSBbXSxcbiAgICBfZ2V0RG9jU2Nyb2xsVG9wID0gZnVuY3Rpb24gX2dldERvY1Njcm9sbFRvcCgpIHtcbiAgcmV0dXJuIF93aW4ucGFnZVlPZmZzZXQgfHwgX2RvYy5zY3JvbGxUb3AgfHwgX2RvY0VsZW1lbnQuc2Nyb2xsVG9wIHx8IF9ib2R5LnNjcm9sbFRvcCB8fCAwO1xufSxcbiAgICBfZ2V0RG9jU2Nyb2xsTGVmdCA9IGZ1bmN0aW9uIF9nZXREb2NTY3JvbGxMZWZ0KCkge1xuICByZXR1cm4gX3dpbi5wYWdlWE9mZnNldCB8fCBfZG9jLnNjcm9sbExlZnQgfHwgX2RvY0VsZW1lbnQuc2Nyb2xsTGVmdCB8fCBfYm9keS5zY3JvbGxMZWZ0IHx8IDA7XG59LFxuICAgIF9zdmdPd25lciA9IGZ1bmN0aW9uIF9zdmdPd25lcihlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50Lm93bmVyU1ZHRWxlbWVudCB8fCAoKGVsZW1lbnQudGFnTmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIgPyBlbGVtZW50IDogbnVsbCk7XG59LFxuICAgIF9pc0ZpeGVkID0gZnVuY3Rpb24gX2lzRml4ZWQoZWxlbWVudCkge1xuICBpZiAoX3dpbi5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSBcImZpeGVkXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgIC8vIGF2b2lkIGRvY3VtZW50IGZyYWdtZW50cyB3aGljaCB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgIHJldHVybiBfaXNGaXhlZChlbGVtZW50KTtcbiAgfVxufSxcbiAgICBfY3JlYXRlU2libGluZyA9IGZ1bmN0aW9uIF9jcmVhdGVTaWJsaW5nKGVsZW1lbnQsIGkpIHtcbiAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAmJiAoX2RvYyB8fCBfc2V0RG9jKGVsZW1lbnQpKSkge1xuICAgIHZhciBzdmcgPSBfc3ZnT3duZXIoZWxlbWVudCksXG4gICAgICAgIG5zID0gc3ZnID8gc3ZnLmdldEF0dHJpYnV0ZShcInhtbG5zXCIpIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiA6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFxuICAgICAgICB0eXBlID0gc3ZnID8gaSA/IFwicmVjdFwiIDogXCJnXCIgOiBcImRpdlwiLFxuICAgICAgICB4ID0gaSAhPT0gMiA/IDAgOiAxMDAsXG4gICAgICAgIHkgPSBpID09PSAzID8gMTAwIDogMCxcbiAgICAgICAgY3NzID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmJsb2NrO3BvaW50ZXItZXZlbnRzOm5vbmU7bWFyZ2luOjA7cGFkZGluZzowO1wiLFxuICAgICAgICBlID0gX2RvYy5jcmVhdGVFbGVtZW50TlMgPyBfZG9jLmNyZWF0ZUVsZW1lbnROUyhucy5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpO1xuXG4gICAgaWYgKGkpIHtcbiAgICAgIGlmICghc3ZnKSB7XG4gICAgICAgIGlmICghX2RpdkNvbnRhaW5lcikge1xuICAgICAgICAgIF9kaXZDb250YWluZXIgPSBfY3JlYXRlU2libGluZyhlbGVtZW50KTtcbiAgICAgICAgICBfZGl2Q29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBjc3M7XG4gICAgICAgIH1cblxuICAgICAgICBlLnN0eWxlLmNzc1RleHQgPSBjc3MgKyBcIndpZHRoOjAuMXB4O2hlaWdodDowLjFweDt0b3A6XCIgKyB5ICsgXCJweDtsZWZ0OlwiICsgeCArIFwicHhcIjtcblxuICAgICAgICBfZGl2Q29udGFpbmVyLmFwcGVuZENoaWxkKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3N2Z0NvbnRhaW5lciB8fCAoX3N2Z0NvbnRhaW5lciA9IF9jcmVhdGVTaWJsaW5nKGVsZW1lbnQpKTtcbiAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCAwLjAxKTtcbiAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgMC4wMSk7XG4gICAgICAgIGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgeCArIFwiLFwiICsgeSArIFwiKVwiKTtcblxuICAgICAgICBfc3ZnQ29udGFpbmVyLmFwcGVuZENoaWxkKGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlO1xuICB9XG5cbiAgdGhyb3cgXCJOZWVkIGRvY3VtZW50IGFuZCBwYXJlbnQuXCI7XG59LFxuICAgIF9jb25zb2xpZGF0ZSA9IGZ1bmN0aW9uIF9jb25zb2xpZGF0ZShtKSB7XG4gIC8vIHJlcGxhY2VzIFNWR1RyYW5zZm9ybUxpc3QuY29uc29saWRhdGUoKSBiZWNhdXNlIGEgYnVnIGluIEZpcmVmb3ggY2F1c2VzIGl0IHRvIGJyZWFrIHBvaW50ZXIgZXZlbnRzLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMzI0OC10b3VjaC1pcy1ub3Qtd29ya2luZy1vbi1kcmFnZ2FibGUtaW4tZmlyZWZveC13aW5kb3dzLXYzMjQvP3RhYj1jb21tZW50cyNjb21tZW50LTEwOTgwMFxuICB2YXIgYyA9IG5ldyBNYXRyaXgyRCgpLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCBtLm51bWJlck9mSXRlbXM7IGkrKykge1xuICAgIGMubXVsdGlwbHkobS5nZXRJdGVtKGkpLm1hdHJpeCk7XG4gIH1cblxuICByZXR1cm4gYztcbn0sXG4gICAgX2dldENUTSA9IGZ1bmN0aW9uIF9nZXRDVE0oc3ZnKSB7XG4gIHZhciBtID0gc3ZnLmdldENUTSgpLFxuICAgICAgdHJhbnNmb3JtO1xuXG4gIGlmICghbSkge1xuICAgIC8vIEZpcmVmb3ggcmV0dXJucyBudWxsIGZvciBnZXRDVE0oKSBvbiByb290IDxzdmc+IGVsZW1lbnRzLCBzbyB0aGlzIGlzIGEgd29ya2Fyb3VuZCB1c2luZyBhIDxnPiB0aGF0IHdlIHRlbXBvcmFyaWx5IGFwcGVuZC5cbiAgICB0cmFuc2Zvcm0gPSBzdmcuc3R5bGVbX3RyYW5zZm9ybVByb3BdO1xuICAgIHN2Zy5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSBcIm5vbmVcIjsgLy8gYSBidWcgaW4gRmlyZWZveCBjYXVzZXMgY3NzIHRyYW5zZm9ybXMgdG8gY29udGFtaW5hdGUgdGhlIGdldENUTSgpXG5cbiAgICBzdmcuYXBwZW5kQ2hpbGQoX2dFbCk7XG4gICAgbSA9IF9nRWwuZ2V0Q1RNKCk7XG4gICAgc3ZnLnJlbW92ZUNoaWxkKF9nRWwpO1xuICAgIHRyYW5zZm9ybSA/IHN2Zy5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm0gOiBzdmcuc3R5bGUucmVtb3ZlUHJvcGVydHkoX3RyYW5zZm9ybVByb3AucmVwbGFjZSgvKFtBLVpdKS9nLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIHJldHVybiBtO1xufSxcbiAgICBfcGxhY2VTaWJsaW5ncyA9IGZ1bmN0aW9uIF9wbGFjZVNpYmxpbmdzKGVsZW1lbnQsIGFkanVzdEdPZmZzZXQpIHtcbiAgdmFyIHN2ZyA9IF9zdmdPd25lcihlbGVtZW50KSxcbiAgICAgIGlzUm9vdFNWRyA9IGVsZW1lbnQgPT09IHN2ZyxcbiAgICAgIHNpYmxpbmdzID0gc3ZnID8gX3N2Z1RlbXBzIDogX2RpdlRlbXBzLFxuICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgbSxcbiAgICAgIGIsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNzO1xuXG4gIGlmIChlbGVtZW50ID09PSBfd2luKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBzaWJsaW5ncy5sZW5ndGggfHwgc2libGluZ3MucHVzaChfY3JlYXRlU2libGluZyhlbGVtZW50LCAxKSwgX2NyZWF0ZVNpYmxpbmcoZWxlbWVudCwgMiksIF9jcmVhdGVTaWJsaW5nKGVsZW1lbnQsIDMpKTtcbiAgY29udGFpbmVyID0gc3ZnID8gX3N2Z0NvbnRhaW5lciA6IF9kaXZDb250YWluZXI7XG5cbiAgaWYgKHN2Zykge1xuICAgIGlmIChpc1Jvb3RTVkcpIHtcbiAgICAgIGIgPSBfZ2V0Q1RNKGVsZW1lbnQpO1xuICAgICAgeCA9IC1iLmUgLyBiLmE7XG4gICAgICB5ID0gLWIuZiAvIGIuZDtcbiAgICAgIG0gPSBfaWRlbnRpdHlNYXRyaXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSBlbGVtZW50LmdldEJCb3goKTtcbiAgICAgIG0gPSBlbGVtZW50LnRyYW5zZm9ybSA/IGVsZW1lbnQudHJhbnNmb3JtLmJhc2VWYWwgOiB7fTsgLy8gSUUxMSBkb2Vzbid0IGZvbGxvdyB0aGUgc3BlYy5cblxuICAgICAgbSA9ICFtLm51bWJlck9mSXRlbXMgPyBfaWRlbnRpdHlNYXRyaXggOiBtLm51bWJlck9mSXRlbXMgPiAxID8gX2NvbnNvbGlkYXRlKG0pIDogbS5nZXRJdGVtKDApLm1hdHJpeDsgLy8gZG9uJ3QgY2FsbCBtLmNvbnNvbGlkYXRlKCkubWF0cml4IGJlY2F1c2UgYSBidWcgaW4gRmlyZWZveCBtYWtlcyBwb2ludGVyIGV2ZW50cyBub3Qgd29yayB3aGVuIGNvbnNvbGlkYXRlKCkgaXMgY2FsbGVkIG9uIHRoZSBzYW1lIHRpY2sgYXMgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkhIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIzMjQ4LXRvdWNoLWlzLW5vdC13b3JraW5nLW9uLWRyYWdnYWJsZS1pbi1maXJlZm94LXdpbmRvd3MtdjMyNC8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTA5ODAwXG5cbiAgICAgIHggPSBtLmEgKiBiLnggKyBtLmMgKiBiLnk7XG4gICAgICB5ID0gbS5iICogYi54ICsgbS5kICogYi55O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RHT2Zmc2V0ICYmIGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImdcIikge1xuICAgICAgeCA9IHkgPSAwO1xuICAgIH1cblxuICAgIChpc1Jvb3RTVkcgPyBzdmcgOiBwYXJlbnQpLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIm1hdHJpeChcIiArIG0uYSArIFwiLFwiICsgbS5iICsgXCIsXCIgKyBtLmMgKyBcIixcIiArIG0uZCArIFwiLFwiICsgKG0uZSArIHgpICsgXCIsXCIgKyAobS5mICsgeSkgKyBcIilcIik7XG4gIH0gZWxzZSB7XG4gICAgeCA9IHkgPSAwO1xuXG4gICAgaWYgKF9oYXNPZmZzZXRCdWcpIHtcbiAgICAgIC8vIHNvbWUgYnJvd3NlcnMgKGxpa2UgU2FmYXJpKSBoYXZlIGEgYnVnIHRoYXQgY2F1c2VzIHRoZW0gdG8gbWlzcmVwb3J0IG9mZnNldCB2YWx1ZXMuIFdoZW4gYW4gYW5jZXN0b3IgZWxlbWVudCBoYXMgYSB0cmFuc2Zvcm0gYXBwbGllZCwgaXQncyBzdXBwb3NlZCB0byB0cmVhdCBpdCBhcyBpZiBpdCdzIHBvc2l0aW9uOiByZWxhdGl2ZSAobmV3IGNvbnRleHQpLiBTYWZhcmkgYm90Y2hlcyB0aGlzLCBzbyB3ZSBuZWVkIHRvIGZpbmQgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgKGJldHdlZW4gdGhlIGVsZW1lbnQgYW5kIGl0cyBvZmZzZXRQYXJlbnQpIHRoYXQgaGFzIGEgdHJhbnNmb3JtIGFwcGxpZWQgYW5kIGlmIG9uZSBpcyBmb3VuZCwgZ3JhYiBpdHMgb2Zmc2V0VG9wL0xlZnQgYW5kIHN1YnRyYWN0IHRoZW0gdG8gY29tcGVuc2F0ZS5cbiAgICAgIG0gPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgICAgIGIgPSBlbGVtZW50O1xuXG4gICAgICB3aGlsZSAoYiAmJiAoYiA9IGIucGFyZW50Tm9kZSkgJiYgYiAhPT0gbSAmJiBiLnBhcmVudE5vZGUpIHtcbiAgICAgICAgaWYgKChfd2luLmdldENvbXB1dGVkU3R5bGUoYilbX3RyYW5zZm9ybVByb3BdICsgXCJcIikubGVuZ3RoID4gNCkge1xuICAgICAgICAgIHggPSBiLm9mZnNldExlZnQ7XG4gICAgICAgICAgeSA9IGIub2Zmc2V0VG9wO1xuICAgICAgICAgIGIgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY3MgPSBfd2luLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoY3MucG9zaXRpb24gIT09IFwiYWJzb2x1dGVcIiAmJiBjcy5wb3NpdGlvbiAhPT0gXCJmaXhlZFwiKSB7XG4gICAgICBtID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50ICE9PSBtKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlJ3MgYW4gYW5jZXN0b3IgZWxlbWVudCBiZXR3ZWVuIHRoZSBlbGVtZW50IGFuZCBpdHMgb2Zmc2V0UGFyZW50IHRoYXQncyBzY3JvbGxlZCwgd2UgbXVzdCBmYWN0b3IgdGhhdCBpbi5cbiAgICAgICAgeCArPSBwYXJlbnQuc2Nyb2xsTGVmdCB8fCAwO1xuICAgICAgICB5ICs9IHBhcmVudC5zY3JvbGxUb3AgfHwgMDtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYiA9IGNvbnRhaW5lci5zdHlsZTtcbiAgICBiLnRvcCA9IGVsZW1lbnQub2Zmc2V0VG9wIC0geSArIFwicHhcIjtcbiAgICBiLmxlZnQgPSBlbGVtZW50Lm9mZnNldExlZnQgLSB4ICsgXCJweFwiO1xuICAgIGJbX3RyYW5zZm9ybVByb3BdID0gY3NbX3RyYW5zZm9ybVByb3BdO1xuICAgIGJbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gY3NbX3RyYW5zZm9ybU9yaWdpblByb3BdOyAvLyBiLmJvcmRlciA9IG0uYm9yZGVyO1xuICAgIC8vIGIuYm9yZGVyTGVmdFN0eWxlID0gbS5ib3JkZXJMZWZ0U3R5bGU7XG4gICAgLy8gYi5ib3JkZXJUb3BTdHlsZSA9IG0uYm9yZGVyVG9wU3R5bGU7XG4gICAgLy8gYi5ib3JkZXJMZWZ0V2lkdGggPSBtLmJvcmRlckxlZnRXaWR0aDtcbiAgICAvLyBiLmJvcmRlclRvcFdpZHRoID0gbS5ib3JkZXJUb3BXaWR0aDtcblxuICAgIGIucG9zaXRpb24gPSBjcy5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiID8gXCJmaXhlZFwiIDogXCJhYnNvbHV0ZVwiO1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn0sXG4gICAgX3NldE1hdHJpeCA9IGZ1bmN0aW9uIF9zZXRNYXRyaXgobSwgYSwgYiwgYywgZCwgZSwgZikge1xuICBtLmEgPSBhO1xuICBtLmIgPSBiO1xuICBtLmMgPSBjO1xuICBtLmQgPSBkO1xuICBtLmUgPSBlO1xuICBtLmYgPSBmO1xuICByZXR1cm4gbTtcbn07XG5cbmV4cG9ydCB2YXIgTWF0cml4MkQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRyaXgyRChhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgaWYgKGEgPT09IHZvaWQgMCkge1xuICAgICAgYSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGIgPT09IHZvaWQgMCkge1xuICAgICAgYiA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGMgPT09IHZvaWQgMCkge1xuICAgICAgYyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGQgPT09IHZvaWQgMCkge1xuICAgICAgZCA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGUgPT09IHZvaWQgMCkge1xuICAgICAgZSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGYgPT09IHZvaWQgMCkge1xuICAgICAgZiA9IDA7XG4gICAgfVxuXG4gICAgX3NldE1hdHJpeCh0aGlzLCBhLCBiLCBjLCBkLCBlLCBmKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNYXRyaXgyRC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmludmVyc2UgPSBmdW5jdGlvbiBpbnZlcnNlKCkge1xuICAgIHZhciBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuICAgICAgICBjID0gdGhpcy5jLFxuICAgICAgICBkID0gdGhpcy5kLFxuICAgICAgICBlID0gdGhpcy5lLFxuICAgICAgICBmID0gdGhpcy5mLFxuICAgICAgICBkZXRlcm1pbmFudCA9IGEgKiBkIC0gYiAqIGMgfHwgMWUtMTA7XG4gICAgcmV0dXJuIF9zZXRNYXRyaXgodGhpcywgZCAvIGRldGVybWluYW50LCAtYiAvIGRldGVybWluYW50LCAtYyAvIGRldGVybWluYW50LCBhIC8gZGV0ZXJtaW5hbnQsIChjICogZiAtIGQgKiBlKSAvIGRldGVybWluYW50LCAtKGEgKiBmIC0gYiAqIGUpIC8gZGV0ZXJtaW5hbnQpO1xuICB9O1xuXG4gIF9wcm90by5tdWx0aXBseSA9IGZ1bmN0aW9uIG11bHRpcGx5KG1hdHJpeCkge1xuICAgIHZhciBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuICAgICAgICBjID0gdGhpcy5jLFxuICAgICAgICBkID0gdGhpcy5kLFxuICAgICAgICBlID0gdGhpcy5lLFxuICAgICAgICBmID0gdGhpcy5mLFxuICAgICAgICBhMiA9IG1hdHJpeC5hLFxuICAgICAgICBiMiA9IG1hdHJpeC5jLFxuICAgICAgICBjMiA9IG1hdHJpeC5iLFxuICAgICAgICBkMiA9IG1hdHJpeC5kLFxuICAgICAgICBlMiA9IG1hdHJpeC5lLFxuICAgICAgICBmMiA9IG1hdHJpeC5mO1xuICAgIHJldHVybiBfc2V0TWF0cml4KHRoaXMsIGEyICogYSArIGMyICogYywgYTIgKiBiICsgYzIgKiBkLCBiMiAqIGEgKyBkMiAqIGMsIGIyICogYiArIGQyICogZCwgZSArIGUyICogYSArIGYyICogYywgZiArIGUyICogYiArIGYyICogZCk7XG4gIH07XG5cbiAgX3Byb3RvLmNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgyRCh0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0aGlzLmQsIHRoaXMuZSwgdGhpcy5mKTtcbiAgfTtcblxuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG1hdHJpeCkge1xuICAgIHZhciBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuICAgICAgICBjID0gdGhpcy5jLFxuICAgICAgICBkID0gdGhpcy5kLFxuICAgICAgICBlID0gdGhpcy5lLFxuICAgICAgICBmID0gdGhpcy5mO1xuICAgIHJldHVybiBhID09PSBtYXRyaXguYSAmJiBiID09PSBtYXRyaXguYiAmJiBjID09PSBtYXRyaXguYyAmJiBkID09PSBtYXRyaXguZCAmJiBlID09PSBtYXRyaXguZSAmJiBmID09PSBtYXRyaXguZjtcbiAgfTtcblxuICBfcHJvdG8uYXBwbHkgPSBmdW5jdGlvbiBhcHBseShwb2ludCwgZGVjb3JhdGVlKSB7XG4gICAgaWYgKGRlY29yYXRlZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWNvcmF0ZWUgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgeCA9IHBvaW50LngsXG4gICAgICAgIHkgPSBwb2ludC55LFxuICAgICAgICBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuICAgICAgICBjID0gdGhpcy5jLFxuICAgICAgICBkID0gdGhpcy5kLFxuICAgICAgICBlID0gdGhpcy5lLFxuICAgICAgICBmID0gdGhpcy5mO1xuICAgIGRlY29yYXRlZS54ID0geCAqIGEgKyB5ICogYyArIGUgfHwgMDtcbiAgICBkZWNvcmF0ZWUueSA9IHggKiBiICsgeSAqIGQgKyBmIHx8IDA7XG4gICAgcmV0dXJuIGRlY29yYXRlZTtcbiAgfTtcblxuICByZXR1cm4gTWF0cml4MkQ7XG59KCk7IC8vIEZlZWQgaW4gYW4gZWxlbWVudCBhbmQgaXQnbGwgcmV0dXJuIGEgMkQgbWF0cml4IChvcHRpb25hbGx5IGludmVydGVkKSBzbyB0aGF0IHlvdSBjYW4gdHJhbnNsYXRlIGJldHdlZW4gY29vcmRpbmF0ZSBzcGFjZXMuXG4vLyBJbnZlcnRpbmcgbGV0cyB5b3UgdHJhbnNsYXRlIGEgZ2xvYmFsIHBvaW50IGludG8gYSBsb2NhbCBjb29yZGluYXRlIHNwYWNlLiBObyBpbnZlcnRpbmcgbGV0cyB5b3UgZ28gdGhlIG90aGVyIHdheS5cbi8vIFdlIG5lZWRlZCB0aGlzIHRvIHdvcmsgYXJvdW5kIHZhcmlvdXMgYnJvd3NlciBidWdzLCBsaWtlIEZpcmVmb3ggZG9lc24ndCBhY2N1cmF0ZWx5IHJlcG9ydCBnZXRTY3JlZW5DVE0oKSB3aGVuIHRoZXJlXG4vLyBhcmUgdHJhbnNmb3JtcyBhcHBsaWVkIHRvIGFuY2VzdG9yIGVsZW1lbnRzLlxuLy8gVGhlIG1hdHJpeCBtYXRoIHRvIGNvbnZlcnQgYW55IHgveSBjb29yZGluYXRlIGlzIGFzIGZvbGxvd3MsIHdoaWNoIGlzIHdyYXBwZWQgaW4gYSBjb252ZW5pZW50IGFwcGx5KCkgbWV0aG9kIG9mIE1hdHJpeDJEIGFib3ZlOlxuLy8gICAgIHR4ID0gbS5hICogeCArIG0uYyAqIHkgKyBtLmVcbi8vICAgICB0eSA9IG0uYiAqIHggKyBtLmQgKiB5ICsgbS5mXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxNYXRyaXgoZWxlbWVudCwgaW52ZXJzZSwgYWRqdXN0R09mZnNldCwgaW5jbHVkZVNjcm9sbEluRml4ZWQpIHtcbiAgLy8gYWRqdXN0R09mZnNldCBpcyB0eXBpY2FsbHkgdXNlZCBvbmx5IHdoZW4gZ3JhYmJpbmcgYW4gZWxlbWVudCdzIFBBUkVOVCdzIGdsb2JhbCBtYXRyaXgsIGFuZCBpdCBpZ25vcmVzIHRoZSB4L3kgb2Zmc2V0IG9mIGFueSBTVkcgPGc+IGVsZW1lbnRzIGJlY2F1c2UgdGhleSBiZWhhdmUgaW4gYSBzcGVjaWFsIHdheS5cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudE5vZGUgfHwgKF9kb2MgfHwgX3NldERvYyhlbGVtZW50KSkuZG9jdW1lbnRFbGVtZW50ID09PSBlbGVtZW50KSB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgyRCgpO1xuICB9XG5cbiAgdmFyIHplcm9TY2FsZXMgPSBfZm9yY2VOb25aZXJvU2NhbGUoZWxlbWVudCksXG4gICAgICBzdmcgPSBfc3ZnT3duZXIoZWxlbWVudCksXG4gICAgICB0ZW1wcyA9IHN2ZyA/IF9zdmdUZW1wcyA6IF9kaXZUZW1wcyxcbiAgICAgIGNvbnRhaW5lciA9IF9wbGFjZVNpYmxpbmdzKGVsZW1lbnQsIGFkanVzdEdPZmZzZXQpLFxuICAgICAgYjEgPSB0ZW1wc1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGIyID0gdGVtcHNbMV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBiMyA9IHRlbXBzWzJdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgcGFyZW50ID0gY29udGFpbmVyLnBhcmVudE5vZGUsXG4gICAgICBpc0ZpeGVkID0gIWluY2x1ZGVTY3JvbGxJbkZpeGVkICYmIF9pc0ZpeGVkKGVsZW1lbnQpLFxuICAgICAgbSA9IG5ldyBNYXRyaXgyRCgoYjIubGVmdCAtIGIxLmxlZnQpIC8gMTAwLCAoYjIudG9wIC0gYjEudG9wKSAvIDEwMCwgKGIzLmxlZnQgLSBiMS5sZWZ0KSAvIDEwMCwgKGIzLnRvcCAtIGIxLnRvcCkgLyAxMDAsIGIxLmxlZnQgKyAoaXNGaXhlZCA/IDAgOiBfZ2V0RG9jU2Nyb2xsTGVmdCgpKSwgYjEudG9wICsgKGlzRml4ZWQgPyAwIDogX2dldERvY1Njcm9sbFRvcCgpKSk7XG5cbiAgcGFyZW50LnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG5cbiAgaWYgKHplcm9TY2FsZXMpIHtcbiAgICBiMSA9IHplcm9TY2FsZXMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGIxLS0pIHtcbiAgICAgIGIyID0gemVyb1NjYWxlc1tiMV07XG4gICAgICBiMi5zY2FsZVggPSBiMi5zY2FsZVkgPSAwO1xuICAgICAgYjIucmVuZGVyVHJhbnNmb3JtKDEsIGIyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW52ZXJzZSA/IG0uaW52ZXJzZSgpIDogbTtcbn1cbmV4cG9ydCB7IF9nZXREb2NTY3JvbGxUb3AsIF9nZXREb2NTY3JvbGxMZWZ0LCBfc2V0RG9jLCBfaXNGaXhlZCwgX2dldENUTSB9OyAvLyBleHBvcnQgZnVuY3Rpb24gZ2V0TWF0cml4KGVsZW1lbnQpIHtcbi8vIFx0X2RvYyB8fCBfc2V0RG9jKGVsZW1lbnQpO1xuLy8gXHRsZXQgbSA9IChfd2luLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClbX3RyYW5zZm9ybVByb3BdICsgXCJcIikuc3Vic3RyKDcpLm1hdGNoKC9bLS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC1cXCtdKlxcZCovZyksXG4vLyBcdFx0aXMyRCA9IG0gJiYgbS5sZW5ndGggPT09IDY7XG4vLyBcdHJldHVybiAhbSB8fCBtLmxlbmd0aCA8IDYgPyBuZXcgTWF0cml4MkQoKSA6IG5ldyBNYXRyaXgyRCgrbVswXSwgK21bMV0sICttW2lzMkQgPyAyIDogNF0sICttW2lzMkQgPyAzIDogNV0sICttW2lzMkQgPyA0IDogMTJdLCArbVtpczJEID8gNSA6IDEzXSk7XG4vLyB9IiwiLyohXG4gKiBwYXRocyAzLjcuMVxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyMSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfc3ZnUGF0aEV4cCA9IC9bYWNobG1xc3R2el18KC0/XFxkKlxcLj9cXGQqKD86ZVtcXC0rXT9cXGQrKT8pWzAtOV0vaWcsXG4gICAgX251bWJlcnNFeHAgPSAvKD86KC0pP1xcZCpcXC4/XFxkKig/OmVbXFwtK10/XFxkKyk/KVswLTldL2lnLFxuICAgIF9zY2llbnRpZmljID0gL1tcXCtcXC1dP1xcZCpcXC4/XFxkK2VbXFwrXFwtXT9cXGQrL2lnLFxuICAgIF9zZWxlY3RvckV4cCA9IC8oXlsjXFwuXVthLXpdfFthLXldW2Etel0pL2ksXG4gICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2NvcyA9IE1hdGguY29zLFxuICAgIF9hYnMgPSBNYXRoLmFicyxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfYXRhbjIgPSBNYXRoLmF0YW4yLFxuICAgIF9sYXJnZU51bSA9IDFlOCxcbiAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfdGVtcCA9IHt9LFxuICAgIF90ZW1wMiA9IHt9LFxuICAgIF9yb3VuZGluZ051bSA9IDFlNSxcbiAgICBfd3JhcFByb2dyZXNzID0gZnVuY3Rpb24gX3dyYXBQcm9ncmVzcyhwcm9ncmVzcykge1xuICByZXR1cm4gTWF0aC5yb3VuZCgocHJvZ3Jlc3MgKyBfbGFyZ2VOdW0pICUgMSAqIF9yb3VuZGluZ051bSkgLyBfcm91bmRpbmdOdW0gfHwgKHByb2dyZXNzIDwgMCA/IDAgOiAxKTtcbn0sXG4gICAgLy9pZiBwcm9ncmVzcyBsYW5kcyBvbiAxLCB0aGUgJSB3aWxsIG1ha2UgaXQgMCB3aGljaCBpcyB3aHkgd2UgfHwgMSwgYnV0IG5vdCBpZiBpdCdzIG5lZ2F0aXZlIGJlY2F1c2UgaXQgbWFrZXMgbW9yZSBzZW5zZSBmb3IgbW90aW9uIHRvIGVuZCBhdCAwIGluIHRoYXQgY2FzZS5cbl9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIF9yb3VuZGluZ051bSkgLyBfcm91bmRpbmdOdW0gfHwgMDtcbn0sXG4gICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTEwKSAvIDFlMTAgfHwgMDtcbn0sXG4gICAgX3NwbGl0U2VnbWVudCA9IGZ1bmN0aW9uIF9zcGxpdFNlZ21lbnQocmF3UGF0aCwgc2VnSW5kZXgsIGksIHQpIHtcbiAgdmFyIHNlZ21lbnQgPSByYXdQYXRoW3NlZ0luZGV4XSxcbiAgICAgIHNoaWZ0ID0gdCA9PT0gMSA/IDYgOiBzdWJkaXZpZGVTZWdtZW50KHNlZ21lbnQsIGksIHQpO1xuXG4gIGlmIChzaGlmdCAmJiBzaGlmdCArIGkgKyAyIDwgc2VnbWVudC5sZW5ndGgpIHtcbiAgICByYXdQYXRoLnNwbGljZShzZWdJbmRleCwgMCwgc2VnbWVudC5zbGljZSgwLCBpICsgc2hpZnQgKyAyKSk7XG4gICAgc2VnbWVudC5zcGxpY2UoMCwgaSArIHNoaWZ0KTtcbiAgICByZXR1cm4gMTtcbiAgfVxufSxcbiAgICBfZ2V0U2FtcGxlSW5kZXggPSBmdW5jdGlvbiBfZ2V0U2FtcGxlSW5kZXgoc2FtcGxlcywgbGVuZ3RoLCBwcm9ncmVzcykge1xuICAvLyBzbGlnaHRseSBzbG93ZXIgd2F5IHRoYW4gZG9pbmcgdGhpcyAod2hlbiB0aGVyZSdzIG5vIGxvb2t1cCk6IHNlZ21lbnQubG9va3VwW3Byb2dyZXNzIDwgMSA/IH5+KGxlbmd0aCAvIHNlZ21lbnQubWluTGVuZ3RoKSA6IHNlZ21lbnQubG9va3VwLmxlbmd0aCAtIDFdIHx8IDA7XG4gIHZhciBsID0gc2FtcGxlcy5sZW5ndGgsXG4gICAgICBpID0gfn4ocHJvZ3Jlc3MgKiBsKTtcblxuICBpZiAoc2FtcGxlc1tpXSA+IGxlbmd0aCkge1xuICAgIHdoaWxlICgtLWkgJiYgc2FtcGxlc1tpXSA+IGxlbmd0aCkge31cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc2FtcGxlc1srK2ldIDwgbGVuZ3RoICYmIGkgPCBsKSB7fVxuICB9XG5cbiAgcmV0dXJuIGk7XG59LFxuICAgIF9yZXZlcnNlUmF3UGF0aCA9IGZ1bmN0aW9uIF9yZXZlcnNlUmF3UGF0aChyYXdQYXRoLCBza2lwT3V0ZXIpIHtcbiAgdmFyIGkgPSByYXdQYXRoLmxlbmd0aDtcbiAgc2tpcE91dGVyIHx8IHJhd1BhdGgucmV2ZXJzZSgpO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICByYXdQYXRoW2ldLnJldmVyc2VkIHx8IHJldmVyc2VTZWdtZW50KHJhd1BhdGhbaV0pO1xuICB9XG59LFxuICAgIF9jb3B5TWV0YURhdGEgPSBmdW5jdGlvbiBfY29weU1ldGFEYXRhKHNvdXJjZSwgY29weSkge1xuICBjb3B5LnRvdGFsTGVuZ3RoID0gc291cmNlLnRvdGFsTGVuZ3RoO1xuXG4gIGlmIChzb3VyY2Uuc2FtcGxlcykge1xuICAgIC8vc2VnbWVudFxuICAgIGNvcHkuc2FtcGxlcyA9IHNvdXJjZS5zYW1wbGVzLnNsaWNlKDApO1xuICAgIGNvcHkubG9va3VwID0gc291cmNlLmxvb2t1cC5zbGljZSgwKTtcbiAgICBjb3B5Lm1pbkxlbmd0aCA9IHNvdXJjZS5taW5MZW5ndGg7XG4gICAgY29weS5yZXNvbHV0aW9uID0gc291cmNlLnJlc29sdXRpb247XG4gIH0gZWxzZSBpZiAoc291cmNlLnRvdGFsUG9pbnRzKSB7XG4gICAgLy9yYXdQYXRoXG4gICAgY29weS50b3RhbFBvaW50cyA9IHNvdXJjZS50b3RhbFBvaW50cztcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICAvL3B1c2hlcyBhIG5ldyBzZWdtZW50IGludG8gYSByYXdQYXRoLCBidXQgaWYgaXRzIHN0YXJ0aW5nIHZhbHVlcyBtYXRjaCB0aGUgZW5kaW5nIHZhbHVlcyBvZiB0aGUgbGFzdCBzZWdtZW50LCBpdCdsbCBtZXJnZSBpdCBpbnRvIHRoYXQgc2FtZSBzZWdtZW50ICh0byByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWdtZW50cylcbl9hcHBlbmRPck1lcmdlID0gZnVuY3Rpb24gX2FwcGVuZE9yTWVyZ2UocmF3UGF0aCwgc2VnbWVudCkge1xuICB2YXIgaW5kZXggPSByYXdQYXRoLmxlbmd0aCxcbiAgICAgIHByZXZTZWcgPSByYXdQYXRoW2luZGV4IC0gMV0gfHwgW10sXG4gICAgICBsID0gcHJldlNlZy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4ICYmIHNlZ21lbnRbMF0gPT09IHByZXZTZWdbbCAtIDJdICYmIHNlZ21lbnRbMV0gPT09IHByZXZTZWdbbCAtIDFdKSB7XG4gICAgc2VnbWVudCA9IHByZXZTZWcuY29uY2F0KHNlZ21lbnQuc2xpY2UoMikpO1xuICAgIGluZGV4LS07XG4gIH1cblxuICByYXdQYXRoW2luZGV4XSA9IHNlZ21lbnQ7XG59LFxuICAgIF9iZXN0RGlzdGFuY2U7XG4vKiBURVJNSU5PTE9HWVxuIC0gUmF3UGF0aCAtIGFuIGFycmF5IG9mIGFycmF5cywgb25lIGZvciBlYWNoIFNlZ21lbnQuIEEgc2luZ2xlIFJhd1BhdGggY291bGQgaGF2ZSBtdWx0aXBsZSBcIk1cIiBjb21tYW5kcywgZGVmaW5pbmcgU2VnbWVudHMgKHBhdGhzIGFyZW4ndCBhbHdheXMgY29ubmVjdGVkKS5cbiAtIFNlZ21lbnQgLSBhbiBhcnJheSBjb250YWluaW5nIGEgc2VxdWVuY2Ugb2YgQ3ViaWMgQmV6aWVyIGNvb3JkaW5hdGVzIGluIGFsdGVybmF0aW5nIHgsIHksIHgsIHkgZm9ybWF0LiBTdGFydGluZyBhbmNob3IsIHRoZW4gY29udHJvbCBwb2ludCAxLCBjb250cm9sIHBvaW50IDIsIGFuZCBlbmRpbmcgYW5jaG9yLCB0aGVuIHRoZSBuZXh0IGNvbnRyb2wgcG9pbnQgMSwgY29udHJvbCBwb2ludCAyLCBhbmNob3IsIGV0Yy4gVXNlcyBsZXNzIG1lbW9yeSB0aGFuIGFuIGFycmF5IHdpdGggYSBidW5jaCBvZiB7eCwgeX0gcG9pbnRzLlxuIC0gQmV6aWVyIC0gYSBzaW5nbGUgY3ViaWMgQmV6aWVyIHdpdGggYSBzdGFydGluZyBhbmNob3IsIHR3byBjb250cm9sIHBvaW50cywgYW5kIGFuIGVuZGluZyBhbmNob3IuXG4gLSB0aGUgdmFyaWFibGUgXCJ0XCIgaXMgdHlwaWNhbGx5IHRoZSBwb3NpdGlvbiBhbG9uZyBhbiBpbmRpdmlkdWFsIEJlemllciBwYXRoICh0aW1lKSBhbmQgaXQncyBOT1QgbGluZWFyLCBtZWFuaW5nIGl0IGNvdWxkIGFjY2VsZXJhdGUvZGVjZWxlcmF0ZSBiYXNlZCBvbiB0aGUgY29udHJvbCBwb2ludHMgd2hlcmVhcyB0aGUgXCJwXCIgb3IgXCJwcm9ncmVzc1wiIHZhbHVlIGlzIGxpbmVhcmx5IG1hcHBlZCB0byB0aGUgd2hvbGUgcGF0aCwgc28gaXQgc2hvdWxkbid0IHJlYWxseSBhY2NlbGVyYXRlL2RlY2VsZXJhdGUgYmFzZWQgb24gY29udHJvbCBwb2ludHMuIFNvIGEgcHJvZ3Jlc3Mgb2YgMC4yIHdvdWxkIGJlIGFsbW9zdCBleGFjdGx5IDIwJSBhbG9uZyB0aGUgcGF0aC4gXCJ0XCIgaXMgT05MWSBpbiBhbiBpbmRpdmlkdWFsIEJlemllciBwaWVjZS5cbiAqL1xuLy9hY2NlcHRzIGJhc2ljIHNlbGVjdG9yIHRleHQsIGEgcGF0aCBpbnN0YW5jZSwgYSBSYXdQYXRoIGluc3RhbmNlLCBvciBhIFNlZ21lbnQgYW5kIHJldHVybnMgYSBSYXdQYXRoIChtYWtlcyBpdCBlYXN5IHRvIGhvbW9nZW5pemUgdGhpbmdzKS4gSWYgYW4gZWxlbWVudCBvciBzZWxlY3RvciB0ZXh0IGlzIHBhc3NlZCBpbiwgaXQnbGwgYWxzbyBjYWNoZSB0aGUgdmFsdWUgc28gdGhhdCBpZiBpdCdzIHF1ZXJpZWQgYWdhaW4sIGl0J2xsIGp1c3QgdGFrZSB0aGUgcGF0aCBkYXRhIGZyb20gdGhlcmUgaW5zdGVhZCBvZiBwYXJzaW5nIGl0IGFsbCBvdmVyIGFnYWluIChhcyBsb25nIGFzIHRoZSBwYXRoIGRhdGEgaXRzZWxmIGhhc24ndCBjaGFuZ2VkIC0gaXQnbGwgY2hlY2spLlxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYXdQYXRoKHZhbHVlKSB7XG4gIHZhbHVlID0gX2lzU3RyaW5nKHZhbHVlKSAmJiBfc2VsZWN0b3JFeHAudGVzdCh2YWx1ZSkgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHZhbHVlKSB8fCB2YWx1ZSA6IHZhbHVlO1xuICB2YXIgZSA9IHZhbHVlLmdldEF0dHJpYnV0ZSA/IHZhbHVlIDogMCxcbiAgICAgIHJhd1BhdGg7XG5cbiAgaWYgKGUgJiYgKHZhbHVlID0gdmFsdWUuZ2V0QXR0cmlidXRlKFwiZFwiKSkpIHtcbiAgICAvL2ltcGxlbWVudHMgY2FjaGluZ1xuICAgIGlmICghZS5fZ3NQYXRoKSB7XG4gICAgICBlLl9nc1BhdGggPSB7fTtcbiAgICB9XG5cbiAgICByYXdQYXRoID0gZS5fZ3NQYXRoW3ZhbHVlXTtcbiAgICByZXR1cm4gcmF3UGF0aCAmJiAhcmF3UGF0aC5fZGlydHkgPyByYXdQYXRoIDogZS5fZ3NQYXRoW3ZhbHVlXSA9IHN0cmluZ1RvUmF3UGF0aCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gIXZhbHVlID8gY29uc29sZS53YXJuKFwiRXhwZWN0aW5nIGEgPHBhdGg+IGVsZW1lbnQgb3IgYW4gU1ZHIHBhdGggZGF0YSBzdHJpbmdcIikgOiBfaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9SYXdQYXRoKHZhbHVlKSA6IF9pc051bWJlcih2YWx1ZVswXSkgPyBbdmFsdWVdIDogdmFsdWU7XG59IC8vY29waWVzIGEgUmF3UGF0aCBXSVRIT1VUIHRoZSBsZW5ndGggbWV0YSBkYXRhIChmb3Igc3BlZWQpXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5UmF3UGF0aChyYXdQYXRoKSB7XG4gIHZhciBhID0gW10sXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgaSA8IHJhd1BhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBhW2ldID0gX2NvcHlNZXRhRGF0YShyYXdQYXRoW2ldLCByYXdQYXRoW2ldLnNsaWNlKDApKTtcbiAgfVxuXG4gIHJldHVybiBfY29weU1ldGFEYXRhKHJhd1BhdGgsIGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJldmVyc2VTZWdtZW50KHNlZ21lbnQpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgeTtcbiAgc2VnbWVudC5yZXZlcnNlKCk7IC8vdGhpcyB3aWxsIGludmVydCB0aGUgb3JkZXIgeSwgeCwgeSwgeCBzbyB3ZSBtdXN0IGZsaXAgaXQgYmFjay5cblxuICBmb3IgKDsgaSA8IHNlZ21lbnQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB5ID0gc2VnbWVudFtpXTtcbiAgICBzZWdtZW50W2ldID0gc2VnbWVudFtpICsgMV07XG4gICAgc2VnbWVudFtpICsgMV0gPSB5O1xuICB9XG5cbiAgc2VnbWVudC5yZXZlcnNlZCA9ICFzZWdtZW50LnJldmVyc2VkO1xufVxuXG52YXIgX2NyZWF0ZVBhdGggPSBmdW5jdGlvbiBfY3JlYXRlUGF0aChlLCBpZ25vcmUpIHtcbiAgdmFyIHBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInBhdGhcIiksXG4gICAgICBhdHRyID0gW10uc2xpY2UuY2FsbChlLmF0dHJpYnV0ZXMpLFxuICAgICAgaSA9IGF0dHIubGVuZ3RoLFxuICAgICAgbmFtZTtcbiAgaWdub3JlID0gXCIsXCIgKyBpZ25vcmUgKyBcIixcIjtcblxuICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICBuYW1lID0gYXR0cltpXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOyAvL2luIE1pY3Jvc29mdCBFZGdlLCBpZiB5b3UgZG9uJ3Qgc2V0IHRoZSBhdHRyaWJ1dGUgd2l0aCBhIGxvd2VyY2FzZSBuYW1lLCBpdCBkb2Vzbid0IHJlbmRlciBjb3JyZWN0bHkhIFN1cGVyIHdlaXJkLlxuXG4gICAgaWYgKGlnbm9yZS5pbmRleE9mKFwiLFwiICsgbmFtZSArIFwiLFwiKSA8IDApIHtcbiAgICAgIHBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgbmFtZSwgYXR0cltpXS5ub2RlVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufSxcbiAgICBfdHlwZUF0dHJzID0ge1xuICByZWN0OiBcInJ4LHJ5LHgseSx3aWR0aCxoZWlnaHRcIixcbiAgY2lyY2xlOiBcInIsY3gsY3lcIixcbiAgZWxsaXBzZTogXCJyeCxyeSxjeCxjeVwiLFxuICBsaW5lOiBcIngxLHgyLHkxLHkyXCJcbn0sXG4gICAgX2F0dHJUb09iaiA9IGZ1bmN0aW9uIF9hdHRyVG9PYmooZSwgYXR0cnMpIHtcbiAgdmFyIHByb3BzID0gYXR0cnMgPyBhdHRycy5zcGxpdChcIixcIikgOiBbXSxcbiAgICAgIG9iaiA9IHt9LFxuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICBvYmpbcHJvcHNbaV1dID0gK2UuZ2V0QXR0cmlidXRlKHByb3BzW2ldKSB8fCAwO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07IC8vY29udmVydHMgYW4gU1ZHIHNoYXBlIGxpa2UgPGNpcmNsZT4sIDxyZWN0PiwgPHBvbHlnb24+LCA8cG9seWxpbmU+LCA8ZWxsaXBzZT4sIGV0Yy4gdG8gYSA8cGF0aD4sIHN3YXBwaW5nIGl0IGluIGFuZCBjb3B5aW5nIHRoZSBhdHRyaWJ1dGVzIHRvIG1hdGNoLlxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9QYXRoKGVsZW1lbnQsIHN3YXApIHtcbiAgdmFyIHR5cGUgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgIGNpcmMgPSAwLjU1MjI4NDc0OTgzMSxcbiAgICAgIGRhdGEsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHIsXG4gICAgICByeSxcbiAgICAgIHBhdGgsXG4gICAgICByY2lyYyxcbiAgICAgIHJ5Y2lyYyxcbiAgICAgIHBvaW50cyxcbiAgICAgIHcsXG4gICAgICBoLFxuICAgICAgeDIsXG4gICAgICB4MyxcbiAgICAgIHg0LFxuICAgICAgeDUsXG4gICAgICB4NixcbiAgICAgIHkyLFxuICAgICAgeTMsXG4gICAgICB5NCxcbiAgICAgIHk1LFxuICAgICAgeTYsXG4gICAgICBhdHRyO1xuXG4gIGlmICh0eXBlID09PSBcInBhdGhcIiB8fCAhZWxlbWVudC5nZXRCQm94KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBwYXRoID0gX2NyZWF0ZVBhdGgoZWxlbWVudCwgXCJ4LHksd2lkdGgsaGVpZ2h0LGN4LGN5LHJ4LHJ5LHIseDEseDIseTEseTIscG9pbnRzXCIpO1xuICBhdHRyID0gX2F0dHJUb09iaihlbGVtZW50LCBfdHlwZUF0dHJzW3R5cGVdKTtcblxuICBpZiAodHlwZSA9PT0gXCJyZWN0XCIpIHtcbiAgICByID0gYXR0ci5yeDtcbiAgICByeSA9IGF0dHIucnkgfHwgcjtcbiAgICB4ID0gYXR0ci54O1xuICAgIHkgPSBhdHRyLnk7XG4gICAgdyA9IGF0dHIud2lkdGggLSByICogMjtcbiAgICBoID0gYXR0ci5oZWlnaHQgLSByeSAqIDI7XG5cbiAgICBpZiAociB8fCByeSkge1xuICAgICAgLy9pZiB0aGVyZSBhcmUgcm91bmRlZCBjb3JuZXJzLCByZW5kZXIgY3ViaWMgYmV6aWVyc1xuICAgICAgeDIgPSB4ICsgciAqICgxIC0gY2lyYyk7XG4gICAgICB4MyA9IHggKyByO1xuICAgICAgeDQgPSB4MyArIHc7XG4gICAgICB4NSA9IHg0ICsgciAqIGNpcmM7XG4gICAgICB4NiA9IHg0ICsgcjtcbiAgICAgIHkyID0geSArIHJ5ICogKDEgLSBjaXJjKTtcbiAgICAgIHkzID0geSArIHJ5O1xuICAgICAgeTQgPSB5MyArIGg7XG4gICAgICB5NSA9IHk0ICsgcnkgKiBjaXJjO1xuICAgICAgeTYgPSB5NCArIHJ5O1xuICAgICAgZGF0YSA9IFwiTVwiICsgeDYgKyBcIixcIiArIHkzICsgXCIgVlwiICsgeTQgKyBcIiBDXCIgKyBbeDYsIHk1LCB4NSwgeTYsIHg0LCB5NiwgeDQgLSAoeDQgLSB4MykgLyAzLCB5NiwgeDMgKyAoeDQgLSB4MykgLyAzLCB5NiwgeDMsIHk2LCB4MiwgeTYsIHgsIHk1LCB4LCB5NCwgeCwgeTQgLSAoeTQgLSB5MykgLyAzLCB4LCB5MyArICh5NCAtIHkzKSAvIDMsIHgsIHkzLCB4LCB5MiwgeDIsIHksIHgzLCB5LCB4MyArICh4NCAtIHgzKSAvIDMsIHksIHg0IC0gKHg0IC0geDMpIC8gMywgeSwgeDQsIHksIHg1LCB5LCB4NiwgeTIsIHg2LCB5M10uam9pbihcIixcIikgKyBcInpcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IFwiTVwiICsgKHggKyB3KSArIFwiLFwiICsgeSArIFwiIHZcIiArIGggKyBcIiBoXCIgKyAtdyArIFwiIHZcIiArIC1oICsgXCIgaFwiICsgdyArIFwielwiO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImNpcmNsZVwiIHx8IHR5cGUgPT09IFwiZWxsaXBzZVwiKSB7XG4gICAgaWYgKHR5cGUgPT09IFwiY2lyY2xlXCIpIHtcbiAgICAgIHIgPSByeSA9IGF0dHIucjtcbiAgICAgIHJ5Y2lyYyA9IHIgKiBjaXJjO1xuICAgIH0gZWxzZSB7XG4gICAgICByID0gYXR0ci5yeDtcbiAgICAgIHJ5ID0gYXR0ci5yeTtcbiAgICAgIHJ5Y2lyYyA9IHJ5ICogY2lyYztcbiAgICB9XG5cbiAgICB4ID0gYXR0ci5jeDtcbiAgICB5ID0gYXR0ci5jeTtcbiAgICByY2lyYyA9IHIgKiBjaXJjO1xuICAgIGRhdGEgPSBcIk1cIiArICh4ICsgcikgKyBcIixcIiArIHkgKyBcIiBDXCIgKyBbeCArIHIsIHkgKyByeWNpcmMsIHggKyByY2lyYywgeSArIHJ5LCB4LCB5ICsgcnksIHggLSByY2lyYywgeSArIHJ5LCB4IC0gciwgeSArIHJ5Y2lyYywgeCAtIHIsIHksIHggLSByLCB5IC0gcnljaXJjLCB4IC0gcmNpcmMsIHkgLSByeSwgeCwgeSAtIHJ5LCB4ICsgcmNpcmMsIHkgLSByeSwgeCArIHIsIHkgLSByeWNpcmMsIHggKyByLCB5XS5qb2luKFwiLFwiKSArIFwielwiO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibGluZVwiKSB7XG4gICAgZGF0YSA9IFwiTVwiICsgYXR0ci54MSArIFwiLFwiICsgYXR0ci55MSArIFwiIExcIiArIGF0dHIueDIgKyBcIixcIiArIGF0dHIueTI7IC8vcHJldmlvdXNseSwgd2UganVzdCBjb252ZXJ0ZWQgdG8gXCJNeCx5IEx4LHlcIiBidXQgU2FmYXJpIGhhcyBidWdzIHRoYXQgY2F1c2UgdGhhdCBub3QgdG8gcmVuZGVyIHByb3Blcmx5IHdoZW4gdXNpbmcgYSBzdHJva2UtZGFzaGFycmF5IHRoYXQncyBub3QgZnVsbHkgdmlzaWJsZSEgVXNpbmcgYSBjdWJpYyBiZXppZXIgZml4ZXMgdGhhdCBpc3N1ZS5cbiAgfSBlbHNlIGlmICh0eXBlID09PSBcInBvbHlsaW5lXCIgfHwgdHlwZSA9PT0gXCJwb2x5Z29uXCIpIHtcbiAgICBwb2ludHMgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwb2ludHNcIikgKyBcIlwiKS5tYXRjaChfbnVtYmVyc0V4cCkgfHwgW107XG4gICAgeCA9IHBvaW50cy5zaGlmdCgpO1xuICAgIHkgPSBwb2ludHMuc2hpZnQoKTtcbiAgICBkYXRhID0gXCJNXCIgKyB4ICsgXCIsXCIgKyB5ICsgXCIgTFwiICsgcG9pbnRzLmpvaW4oXCIsXCIpO1xuXG4gICAgaWYgKHR5cGUgPT09IFwicG9seWdvblwiKSB7XG4gICAgICBkYXRhICs9IFwiLFwiICsgeCArIFwiLFwiICsgeSArIFwielwiO1xuICAgIH1cbiAgfVxuXG4gIHBhdGguc2V0QXR0cmlidXRlKFwiZFwiLCByYXdQYXRoVG9TdHJpbmcocGF0aC5fZ3NSYXdQYXRoID0gc3RyaW5nVG9SYXdQYXRoKGRhdGEpKSk7XG5cbiAgaWYgKHN3YXAgJiYgZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwYXRoLCBlbGVtZW50KTtcbiAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn0gLy9yZXR1cm5zIHRoZSByb3RhdGlvbiAoaW4gZGVncmVlcykgYXQgYSBwYXJ0aWN1bGFyIHByb2dyZXNzIG9uIGEgcmF3UGF0aCAodGhlIHNsb3BlIG9mIHRoZSB0YW5nZW50KVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um90YXRpb25BdFByb2dyZXNzKHJhd1BhdGgsIHByb2dyZXNzKSB7XG4gIHZhciBkID0gZ2V0UHJvZ3Jlc3NEYXRhKHJhd1BhdGgsIHByb2dyZXNzID49IDEgPyAxIC0gMWUtOSA6IHByb2dyZXNzID8gcHJvZ3Jlc3MgOiAxZS05KTtcbiAgcmV0dXJuIGdldFJvdGF0aW9uQXRCZXppZXJUKGQuc2VnbWVudCwgZC5pLCBkLnQpO1xufVxuXG5mdW5jdGlvbiBnZXRSb3RhdGlvbkF0QmV6aWVyVChzZWdtZW50LCBpLCB0KSB7XG4gIHZhciBhID0gc2VnbWVudFtpXSxcbiAgICAgIGIgPSBzZWdtZW50W2kgKyAyXSxcbiAgICAgIGMgPSBzZWdtZW50W2kgKyA0XSxcbiAgICAgIHg7XG4gIGEgKz0gKGIgLSBhKSAqIHQ7XG4gIGIgKz0gKGMgLSBiKSAqIHQ7XG4gIGEgKz0gKGIgLSBhKSAqIHQ7XG4gIHggPSBiICsgKGMgKyAoc2VnbWVudFtpICsgNl0gLSBjKSAqIHQgLSBiKSAqIHQgLSBhO1xuICBhID0gc2VnbWVudFtpICsgMV07XG4gIGIgPSBzZWdtZW50W2kgKyAzXTtcbiAgYyA9IHNlZ21lbnRbaSArIDVdO1xuICBhICs9IChiIC0gYSkgKiB0O1xuICBiICs9IChjIC0gYikgKiB0O1xuICBhICs9IChiIC0gYSkgKiB0O1xuICByZXR1cm4gX3JvdW5kKF9hdGFuMihiICsgKGMgKyAoc2VnbWVudFtpICsgN10gLSBjKSAqIHQgLSBiKSAqIHQgLSBhLCB4KSAqIF9SQUQyREVHKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlUmF3UGF0aChyYXdQYXRoLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IF9pc1VuZGVmaW5lZChlbmQpID8gMSA6IF9yb3VuZFByZWNpc2UoZW5kKSB8fCAwOyAvLyB3ZSBtdXN0IHJvdW5kIHRvIGF2b2lkIGlzc3VlcyBsaWtlIDQuMTUgLyA4ID0gMC44MzAwMDAwMDAwMDAwMDAxIGluc3RlYWQgb2YgMC44MyBvciAyLjggLyA1ID0gMC41NTk5OTk5OTk5OTk5OTk5IGluc3RlYWQgb2YgMC41NiBhbmQgaWYgc29tZW9uZSBpcyBkb2luZyBhIGxvb3AgbGlrZSBzdGFydDogMi44IC8gMC41LCBlbmQ6IDIuOCAvIDAuNSArIDEuXG5cbiAgc3RhcnQgPSBfcm91bmRQcmVjaXNlKHN0YXJ0KSB8fCAwO1xuICB2YXIgbG9vcHMgPSBNYXRoLm1heCgwLCB+fihfYWJzKGVuZCAtIHN0YXJ0KSAtIDFlLTgpKSxcbiAgICAgIHBhdGggPSBjb3B5UmF3UGF0aChyYXdQYXRoKTtcblxuICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICBzdGFydCA9IDEgLSBzdGFydDtcbiAgICBlbmQgPSAxIC0gZW5kO1xuXG4gICAgX3JldmVyc2VSYXdQYXRoKHBhdGgpO1xuXG4gICAgcGF0aC50b3RhbExlbmd0aCA9IDA7XG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA8IDApIHtcbiAgICB2YXIgb2Zmc2V0ID0gTWF0aC5hYnMofn5NYXRoLm1pbihzdGFydCwgZW5kKSkgKyAxO1xuICAgIHN0YXJ0ICs9IG9mZnNldDtcbiAgICBlbmQgKz0gb2Zmc2V0O1xuICB9XG5cbiAgcGF0aC50b3RhbExlbmd0aCB8fCBjYWNoZVJhd1BhdGhNZWFzdXJlbWVudHMocGF0aCk7XG4gIHZhciB3cmFwID0gZW5kID4gMSxcbiAgICAgIHMgPSBnZXRQcm9ncmVzc0RhdGEocGF0aCwgc3RhcnQsIF90ZW1wLCB0cnVlKSxcbiAgICAgIGUgPSBnZXRQcm9ncmVzc0RhdGEocGF0aCwgZW5kLCBfdGVtcDIpLFxuICAgICAgZVNlZyA9IGUuc2VnbWVudCxcbiAgICAgIHNTZWcgPSBzLnNlZ21lbnQsXG4gICAgICBlU2VnSW5kZXggPSBlLnNlZ0luZGV4LFxuICAgICAgc1NlZ0luZGV4ID0gcy5zZWdJbmRleCxcbiAgICAgIGVpID0gZS5pLFxuICAgICAgc2kgPSBzLmksXG4gICAgICBzYW1lU2VnbWVudCA9IHNTZWdJbmRleCA9PT0gZVNlZ0luZGV4LFxuICAgICAgc2FtZUJlemllciA9IGVpID09PSBzaSAmJiBzYW1lU2VnbWVudCxcbiAgICAgIHdyYXBzQmVoaW5kLFxuICAgICAgc1NoaWZ0LFxuICAgICAgZVNoaWZ0LFxuICAgICAgaSxcbiAgICAgIGNvcHksXG4gICAgICB0b3RhbFNlZ21lbnRzLFxuICAgICAgbCxcbiAgICAgIGo7XG5cbiAgaWYgKHdyYXAgfHwgbG9vcHMpIHtcbiAgICB3cmFwc0JlaGluZCA9IGVTZWdJbmRleCA8IHNTZWdJbmRleCB8fCBzYW1lU2VnbWVudCAmJiBlaSA8IHNpIHx8IHNhbWVCZXppZXIgJiYgZS50IDwgcy50O1xuXG4gICAgaWYgKF9zcGxpdFNlZ21lbnQocGF0aCwgc1NlZ0luZGV4LCBzaSwgcy50KSkge1xuICAgICAgc1NlZ0luZGV4Kys7XG5cbiAgICAgIGlmICghd3JhcHNCZWhpbmQpIHtcbiAgICAgICAgZVNlZ0luZGV4Kys7XG5cbiAgICAgICAgaWYgKHNhbWVCZXppZXIpIHtcbiAgICAgICAgICBlLnQgPSAoZS50IC0gcy50KSAvICgxIC0gcy50KTtcbiAgICAgICAgICBlaSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoc2FtZVNlZ21lbnQpIHtcbiAgICAgICAgICBlaSAtPSBzaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgxIC0gKGVuZCAtIHN0YXJ0KSA8IDFlLTUpIHtcbiAgICAgIGVTZWdJbmRleCA9IHNTZWdJbmRleCAtIDE7XG4gICAgfSBlbHNlIGlmICghZS50ICYmIGVTZWdJbmRleCkge1xuICAgICAgZVNlZ0luZGV4LS07XG4gICAgfSBlbHNlIGlmIChfc3BsaXRTZWdtZW50KHBhdGgsIGVTZWdJbmRleCwgZWksIGUudCkgJiYgd3JhcHNCZWhpbmQpIHtcbiAgICAgIHNTZWdJbmRleCsrO1xuICAgIH1cblxuICAgIGlmIChzLnQgPT09IDEpIHtcbiAgICAgIHNTZWdJbmRleCA9IChzU2VnSW5kZXggKyAxKSAlIHBhdGgubGVuZ3RoO1xuICAgIH1cblxuICAgIGNvcHkgPSBbXTtcbiAgICB0b3RhbFNlZ21lbnRzID0gcGF0aC5sZW5ndGg7XG4gICAgbCA9IDEgKyB0b3RhbFNlZ21lbnRzICogbG9vcHM7XG4gICAgaiA9IHNTZWdJbmRleDtcbiAgICBsICs9ICh0b3RhbFNlZ21lbnRzIC0gc1NlZ0luZGV4ICsgZVNlZ0luZGV4KSAlIHRvdGFsU2VnbWVudHM7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBfYXBwZW5kT3JNZXJnZShjb3B5LCBwYXRoW2orKyAlIHRvdGFsU2VnbWVudHNdKTtcbiAgICB9XG5cbiAgICBwYXRoID0gY29weTtcbiAgfSBlbHNlIHtcbiAgICBlU2hpZnQgPSBlLnQgPT09IDEgPyA2IDogc3ViZGl2aWRlU2VnbWVudChlU2VnLCBlaSwgZS50KTtcblxuICAgIGlmIChzdGFydCAhPT0gZW5kKSB7XG4gICAgICBzU2hpZnQgPSBzdWJkaXZpZGVTZWdtZW50KHNTZWcsIHNpLCBzYW1lQmV6aWVyID8gcy50IC8gZS50IDogcy50KTtcbiAgICAgIHNhbWVTZWdtZW50ICYmIChlU2hpZnQgKz0gc1NoaWZ0KTtcbiAgICAgIGVTZWcuc3BsaWNlKGVpICsgZVNoaWZ0ICsgMik7XG4gICAgICAoc1NoaWZ0IHx8IHNpKSAmJiBzU2VnLnNwbGljZSgwLCBzaSArIHNTaGlmdCk7XG4gICAgICBpID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgLy9jaG9wIG9mZiBhbnkgZXh0cmEgc2VnbWVudHNcbiAgICAgICAgKGkgPCBzU2VnSW5kZXggfHwgaSA+IGVTZWdJbmRleCkgJiYgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVTZWcuYW5nbGUgPSBnZXRSb3RhdGlvbkF0QmV6aWVyVChlU2VnLCBlaSArIGVTaGlmdCwgMCk7IC8vcmVjb3JkIHRoZSB2YWx1ZSBiZWZvcmUgd2UgY2hvcCBiZWNhdXNlIGl0J2xsIGJlIGltcG9zc2libGUgdG8gZGV0ZXJtaW5lIHRoZSBhbmdsZSBhZnRlciBpdHMgbGVuZ3RoIGlzIDAhXG5cbiAgICAgIGVpICs9IGVTaGlmdDtcbiAgICAgIHMgPSBlU2VnW2VpXTtcbiAgICAgIGUgPSBlU2VnW2VpICsgMV07XG4gICAgICBlU2VnLmxlbmd0aCA9IGVTZWcudG90YWxMZW5ndGggPSAwO1xuICAgICAgZVNlZy50b3RhbFBvaW50cyA9IHBhdGgudG90YWxQb2ludHMgPSA4O1xuICAgICAgZVNlZy5wdXNoKHMsIGUsIHMsIGUsIHMsIGUsIHMsIGUpO1xuICAgIH1cbiAgfVxuXG4gIHBhdGgudG90YWxMZW5ndGggPSAwO1xuICByZXR1cm4gcGF0aDtcbn0gLy9tZWFzdXJlcyBhIFNlZ21lbnQgYWNjb3JkaW5nIHRvIGl0cyByZXNvbHV0aW9uIChzbyBpZiBzZWdtZW50LnJlc29sdXRpb24gaXMgNiwgZm9yIGV4YW1wbGUsIGl0J2xsIHRha2UgNiBzYW1wbGVzIGVxdWFsbHkgYWNyb3NzIGVhY2ggQmV6aWVyKSBhbmQgY3JlYXRlL3BvcHVsYXRlIGEgXCJzYW1wbGVzXCIgQXJyYXkgdGhhdCBoYXMgdGhlIGxlbmd0aCB1cCB0byBlYWNoIG9mIHRob3NlIHNhbXBsZSBwb2ludHMgKGFsd2F5cyBpbmNyZWFzaW5nIGZyb20gdGhlIHN0YXJ0KSBhcyB3ZWxsIGFzIGEgXCJsb29rdXBcIiBhcnJheSB0aGF0J3MgYnJva2VuIHVwIGFjY29yZGluZyB0byB0aGUgc21hbGxlc3QgZGlzdGFuY2UgYmV0d2VlbiAyIHNhbXBsZXMuIFRoaXMgZ2l2ZXMgdXMgYSB2ZXJ5IGZhc3Qgd2F5IG9mIGxvb2tpbmcgdXAgYSBwcm9ncmVzcyBwb3NpdGlvbiByYXRoZXIgdGhhbiBsb29waW5nIHRocm91Z2ggYWxsIHRoZSBwb2ludHMvQmV6aWVycy4gWW91IGNhbiBvcHRpb25hbGx5IGhhdmUgaXQgb25seSBtZWFzdXJlIGEgc3Vic2V0LCBzdGFydGluZyBhdCBzdGFydEluZGV4IGFuZCBnb2luZyBmb3IgYSBzcGVjaWZpYyBudW1iZXIgb2YgYmV6aWVycyAocmVtZW1iZXIsIHRoZXJlIGFyZSAzIHgveSBwYWlycyBlYWNoLCBmb3IgYSB0b3RhbCBvZiA2IGVsZW1lbnRzIGZvciBlYWNoIEJlemllcikuIEl0IHdpbGwgYWxzbyBwb3B1bGF0ZSBhIFwidG90YWxMZW5ndGhcIiBwcm9wZXJ0eSwgYnV0IHRoYXQncyBub3QgZ2VuZXJhbGx5IHN1cGVyIGFjY3VyYXRlIGJlY2F1c2UgYnkgZGVmYXVsdCBpdCdsbCBvbmx5IHRha2UgNiBzYW1wbGVzIHBlciBCZXppZXIuIEJ1dCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgaXQncyBwZXJmZWN0bHkgYWRlcXVhdGUgZm9yIG1lYXN1cmluZyBwcm9ncmVzcyB2YWx1ZXMgYWxvbmcgdGhlIHBhdGguIElmIHlvdSBuZWVkIGEgbW9yZSBhY2N1cmF0ZSB0b3RhbExlbmd0aCwgZWl0aGVyIGluY3JlYXNlIHRoZSByZXNvbHV0aW9uIG9yIHVzZSB0aGUgbW9yZSBhZHZhbmNlZCBiZXppZXJUb1BvaW50cygpIG1ldGhvZCB3aGljaCBrZWVwcyBhZGRpbmcgcG9pbnRzIHVudGlsIHRoZXkgZG9uJ3QgZGV2aWF0ZSBieSBtb3JlIHRoYW4gYSBjZXJ0YWluIHByZWNpc2lvbiB2YWx1ZS5cblxuZnVuY3Rpb24gbWVhc3VyZVNlZ21lbnQoc2VnbWVudCwgc3RhcnRJbmRleCwgYmV6aWVyUXR5KSB7XG4gIHN0YXJ0SW5kZXggPSBzdGFydEluZGV4IHx8IDA7XG5cbiAgaWYgKCFzZWdtZW50LnNhbXBsZXMpIHtcbiAgICBzZWdtZW50LnNhbXBsZXMgPSBbXTtcbiAgICBzZWdtZW50Lmxvb2t1cCA9IFtdO1xuICB9XG5cbiAgdmFyIHJlc29sdXRpb24gPSB+fnNlZ21lbnQucmVzb2x1dGlvbiB8fCAxMixcbiAgICAgIGluYyA9IDEgLyByZXNvbHV0aW9uLFxuICAgICAgZW5kSW5kZXggPSBiZXppZXJRdHkgPyBzdGFydEluZGV4ICsgYmV6aWVyUXR5ICogNiArIDEgOiBzZWdtZW50Lmxlbmd0aCxcbiAgICAgIHgxID0gc2VnbWVudFtzdGFydEluZGV4XSxcbiAgICAgIHkxID0gc2VnbWVudFtzdGFydEluZGV4ICsgMV0sXG4gICAgICBzYW1wbGVzSW5kZXggPSBzdGFydEluZGV4ID8gc3RhcnRJbmRleCAvIDYgKiByZXNvbHV0aW9uIDogMCxcbiAgICAgIHNhbXBsZXMgPSBzZWdtZW50LnNhbXBsZXMsXG4gICAgICBsb29rdXAgPSBzZWdtZW50Lmxvb2t1cCxcbiAgICAgIG1pbiA9IChzdGFydEluZGV4ID8gc2VnbWVudC5taW5MZW5ndGggOiBfbGFyZ2VOdW0pIHx8IF9sYXJnZU51bSxcbiAgICAgIHByZXZMZW5ndGggPSBzYW1wbGVzW3NhbXBsZXNJbmRleCArIGJlemllclF0eSAqIHJlc29sdXRpb24gLSAxXSxcbiAgICAgIGxlbmd0aCA9IHN0YXJ0SW5kZXggPyBzYW1wbGVzW3NhbXBsZXNJbmRleCAtIDFdIDogMCxcbiAgICAgIGksXG4gICAgICBqLFxuICAgICAgeDQsXG4gICAgICB4MyxcbiAgICAgIHgyLFxuICAgICAgeGQsXG4gICAgICB4ZDEsXG4gICAgICB5NCxcbiAgICAgIHkzLFxuICAgICAgeTIsXG4gICAgICB5ZCxcbiAgICAgIHlkMSxcbiAgICAgIGludixcbiAgICAgIHQsXG4gICAgICBsZW5ndGhJbmRleCxcbiAgICAgIGwsXG4gICAgICBzZWdMZW5ndGg7XG4gIHNhbXBsZXMubGVuZ3RoID0gbG9va3VwLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChqID0gc3RhcnRJbmRleCArIDI7IGogPCBlbmRJbmRleDsgaiArPSA2KSB7XG4gICAgeDQgPSBzZWdtZW50W2ogKyA0XSAtIHgxO1xuICAgIHgzID0gc2VnbWVudFtqICsgMl0gLSB4MTtcbiAgICB4MiA9IHNlZ21lbnRbal0gLSB4MTtcbiAgICB5NCA9IHNlZ21lbnRbaiArIDVdIC0geTE7XG4gICAgeTMgPSBzZWdtZW50W2ogKyAzXSAtIHkxO1xuICAgIHkyID0gc2VnbWVudFtqICsgMV0gLSB5MTtcbiAgICB4ZCA9IHhkMSA9IHlkID0geWQxID0gMDtcblxuICAgIGlmIChfYWJzKHg0KSA8IC4wMSAmJiBfYWJzKHk0KSA8IC4wMSAmJiBfYWJzKHgyKSArIF9hYnMoeTIpIDwgLjAxKSB7XG4gICAgICAvL2R1bXAgcG9pbnRzIHRoYXQgYXJlIHN1ZmZpY2llbnRseSBjbG9zZSAoYmFzaWNhbGx5IHJpZ2h0IG9uIHRvcCBvZiBlYWNoIG90aGVyLCBtYWtpbmcgYSBiZXppZXIgc3VwZXIgdGlueSBvciAwIGxlbmd0aClcbiAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDgpIHtcbiAgICAgICAgc2VnbWVudC5zcGxpY2UoaiwgNik7XG4gICAgICAgIGogLT0gNjtcbiAgICAgICAgZW5kSW5kZXggLT0gNjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMTsgaSA8PSByZXNvbHV0aW9uOyBpKyspIHtcbiAgICAgICAgdCA9IGluYyAqIGk7XG4gICAgICAgIGludiA9IDEgLSB0O1xuICAgICAgICB4ZCA9IHhkMSAtICh4ZDEgPSAodCAqIHQgKiB4NCArIDMgKiBpbnYgKiAodCAqIHgzICsgaW52ICogeDIpKSAqIHQpO1xuICAgICAgICB5ZCA9IHlkMSAtICh5ZDEgPSAodCAqIHQgKiB5NCArIDMgKiBpbnYgKiAodCAqIHkzICsgaW52ICogeTIpKSAqIHQpO1xuICAgICAgICBsID0gX3NxcnQoeWQgKiB5ZCArIHhkICogeGQpO1xuXG4gICAgICAgIGlmIChsIDwgbWluKSB7XG4gICAgICAgICAgbWluID0gbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxlbmd0aCArPSBsO1xuICAgICAgICBzYW1wbGVzW3NhbXBsZXNJbmRleCsrXSA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4MSArPSB4NDtcbiAgICB5MSArPSB5NDtcbiAgfVxuXG4gIGlmIChwcmV2TGVuZ3RoKSB7XG4gICAgcHJldkxlbmd0aCAtPSBsZW5ndGg7XG5cbiAgICBmb3IgKDsgc2FtcGxlc0luZGV4IDwgc2FtcGxlcy5sZW5ndGg7IHNhbXBsZXNJbmRleCsrKSB7XG4gICAgICBzYW1wbGVzW3NhbXBsZXNJbmRleF0gKz0gcHJldkxlbmd0aDtcbiAgICB9XG4gIH1cblxuICBpZiAoc2FtcGxlcy5sZW5ndGggJiYgbWluKSB7XG4gICAgc2VnbWVudC50b3RhbExlbmd0aCA9IHNlZ0xlbmd0aCA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXSB8fCAwO1xuICAgIHNlZ21lbnQubWluTGVuZ3RoID0gbWluO1xuXG4gICAgaWYgKHNlZ0xlbmd0aCAvIG1pbiA8IDk5OTkpIHtcbiAgICAgIC8vIGlmIHRoZSBsb29rdXAgd291bGQgcmVxdWlyZSB0b28gbWFueSB2YWx1ZXMgKG1lbW9yeSBwcm9ibGVtKSwgd2Ugc2tpcCB0aGlzIGFuZCBpbnN0ZWFkIHdlIHVzZSBhIGxvb3AgdG8gbG9va3VwIHZhbHVlcyBkaXJlY3RseSBpbiB0aGUgc2FtcGxlcyBBcnJheVxuICAgICAgbCA9IGxlbmd0aEluZGV4ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHNlZ0xlbmd0aDsgaSArPSBtaW4pIHtcbiAgICAgICAgbG9va3VwW2wrK10gPSBzYW1wbGVzW2xlbmd0aEluZGV4XSA8IGkgPyArK2xlbmd0aEluZGV4IDogbGVuZ3RoSW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNlZ21lbnQudG90YWxMZW5ndGggPSBzYW1wbGVzWzBdID0gMDtcbiAgfVxuXG4gIHJldHVybiBzdGFydEluZGV4ID8gbGVuZ3RoIC0gc2FtcGxlc1tzdGFydEluZGV4IC8gMiAtIDFdIDogbGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FjaGVSYXdQYXRoTWVhc3VyZW1lbnRzKHJhd1BhdGgsIHJlc29sdXRpb24pIHtcbiAgdmFyIHBhdGhMZW5ndGgsIHBvaW50cywgaTtcblxuICBmb3IgKGkgPSBwYXRoTGVuZ3RoID0gcG9pbnRzID0gMDsgaSA8IHJhd1BhdGgubGVuZ3RoOyBpKyspIHtcbiAgICByYXdQYXRoW2ldLnJlc29sdXRpb24gPSB+fnJlc29sdXRpb24gfHwgMTI7IC8vc3RlcHMgcGVyIEJlemllciBjdXJ2ZSAoYW5jaG9yLCAyIGNvbnRyb2wgcG9pbnRzLCB0byBhbmNob3IpXG5cbiAgICBwb2ludHMgKz0gcmF3UGF0aFtpXS5sZW5ndGg7XG4gICAgcGF0aExlbmd0aCArPSBtZWFzdXJlU2VnbWVudChyYXdQYXRoW2ldKTtcbiAgfVxuXG4gIHJhd1BhdGgudG90YWxQb2ludHMgPSBwb2ludHM7XG4gIHJhd1BhdGgudG90YWxMZW5ndGggPSBwYXRoTGVuZ3RoO1xuICByZXR1cm4gcmF3UGF0aDtcbn0gLy9kaXZpZGUgc2VnbWVudFtpXSBhdCBwb3NpdGlvbiB0ICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIHByb2dyZXNzIGFsb25nIHRoYXQgcGFydGljdWxhciBjdWJpYyBiZXppZXIgc2VnbWVudCB0aGF0IHN0YXJ0cyBhdCBzZWdtZW50W2ldKS4gUmV0dXJucyBob3cgbWFueSBlbGVtZW50cyB3ZXJlIHNwbGljZWQgaW50byB0aGUgc2VnbWVudCBhcnJheSAoZWl0aGVyIDAgb3IgNilcblxuZXhwb3J0IGZ1bmN0aW9uIHN1YmRpdmlkZVNlZ21lbnQoc2VnbWVudCwgaSwgdCkge1xuICBpZiAodCA8PSAwIHx8IHQgPj0gMSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGF4ID0gc2VnbWVudFtpXSxcbiAgICAgIGF5ID0gc2VnbWVudFtpICsgMV0sXG4gICAgICBjcDF4ID0gc2VnbWVudFtpICsgMl0sXG4gICAgICBjcDF5ID0gc2VnbWVudFtpICsgM10sXG4gICAgICBjcDJ4ID0gc2VnbWVudFtpICsgNF0sXG4gICAgICBjcDJ5ID0gc2VnbWVudFtpICsgNV0sXG4gICAgICBieCA9IHNlZ21lbnRbaSArIDZdLFxuICAgICAgYnkgPSBzZWdtZW50W2kgKyA3XSxcbiAgICAgIHgxYSA9IGF4ICsgKGNwMXggLSBheCkgKiB0LFxuICAgICAgeDIgPSBjcDF4ICsgKGNwMnggLSBjcDF4KSAqIHQsXG4gICAgICB5MWEgPSBheSArIChjcDF5IC0gYXkpICogdCxcbiAgICAgIHkyID0gY3AxeSArIChjcDJ5IC0gY3AxeSkgKiB0LFxuICAgICAgeDEgPSB4MWEgKyAoeDIgLSB4MWEpICogdCxcbiAgICAgIHkxID0geTFhICsgKHkyIC0geTFhKSAqIHQsXG4gICAgICB4MmEgPSBjcDJ4ICsgKGJ4IC0gY3AyeCkgKiB0LFxuICAgICAgeTJhID0gY3AyeSArIChieSAtIGNwMnkpICogdDtcbiAgeDIgKz0gKHgyYSAtIHgyKSAqIHQ7XG4gIHkyICs9ICh5MmEgLSB5MikgKiB0O1xuICBzZWdtZW50LnNwbGljZShpICsgMiwgNCwgX3JvdW5kKHgxYSksIC8vZmlyc3QgY29udHJvbCBwb2ludFxuICBfcm91bmQoeTFhKSwgX3JvdW5kKHgxKSwgLy9zZWNvbmQgY29udHJvbCBwb2ludFxuICBfcm91bmQoeTEpLCBfcm91bmQoeDEgKyAoeDIgLSB4MSkgKiB0KSwgLy9uZXcgZmFicmljYXRlZCBhbmNob3Igb24gbGluZVxuICBfcm91bmQoeTEgKyAoeTIgLSB5MSkgKiB0KSwgX3JvdW5kKHgyKSwgLy90aGlyZCBjb250cm9sIHBvaW50XG4gIF9yb3VuZCh5MiksIF9yb3VuZCh4MmEpLCAvL2ZvdXJ0aCBjb250cm9sIHBvaW50XG4gIF9yb3VuZCh5MmEpKTtcbiAgc2VnbWVudC5zYW1wbGVzICYmIHNlZ21lbnQuc2FtcGxlcy5zcGxpY2UoaSAvIDYgKiBzZWdtZW50LnJlc29sdXRpb24gfCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIDY7XG59IC8vIHJldHVybnMgYW4gb2JqZWN0IHtwYXRoLCBzZWdtZW50LCBzZWdJbmRleCwgaSwgdH1cblxuZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NEYXRhKHJhd1BhdGgsIHByb2dyZXNzLCBkZWNvcmF0ZWUsIHB1c2hUb05leHRJZkF0RW5kKSB7XG4gIGRlY29yYXRlZSA9IGRlY29yYXRlZSB8fCB7fTtcbiAgcmF3UGF0aC50b3RhbExlbmd0aCB8fCBjYWNoZVJhd1BhdGhNZWFzdXJlbWVudHMocmF3UGF0aCk7XG5cbiAgaWYgKHByb2dyZXNzIDwgMCB8fCBwcm9ncmVzcyA+IDEpIHtcbiAgICBwcm9ncmVzcyA9IF93cmFwUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuICB9XG5cbiAgdmFyIHNlZ0luZGV4ID0gMCxcbiAgICAgIHNlZ21lbnQgPSByYXdQYXRoWzBdLFxuICAgICAgc2FtcGxlcyxcbiAgICAgIHJlc29sdXRpb24sXG4gICAgICBsZW5ndGgsXG4gICAgICBtaW4sXG4gICAgICBtYXgsXG4gICAgICBpLFxuICAgICAgdDtcblxuICBpZiAoIXByb2dyZXNzKSB7XG4gICAgdCA9IGkgPSBzZWdJbmRleCA9IDA7XG4gICAgc2VnbWVudCA9IHJhd1BhdGhbMF07XG4gIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPT09IDEpIHtcbiAgICB0ID0gMTtcbiAgICBzZWdJbmRleCA9IHJhd1BhdGgubGVuZ3RoIC0gMTtcbiAgICBzZWdtZW50ID0gcmF3UGF0aFtzZWdJbmRleF07XG4gICAgaSA9IHNlZ21lbnQubGVuZ3RoIC0gODtcbiAgfSBlbHNlIHtcbiAgICBpZiAocmF3UGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICAvL3NwZWVkIG9wdGltaXphdGlvbjogbW9zdCBvZiB0aGUgdGltZSwgdGhlcmUncyBvbmx5IG9uZSBzZWdtZW50IHNvIHNraXAgdGhlIHJlY3Vyc2lvbi5cbiAgICAgIGxlbmd0aCA9IHJhd1BhdGgudG90YWxMZW5ndGggKiBwcm9ncmVzcztcbiAgICAgIG1heCA9IGkgPSAwO1xuXG4gICAgICB3aGlsZSAoKG1heCArPSByYXdQYXRoW2krK10udG90YWxMZW5ndGgpIDwgbGVuZ3RoKSB7XG4gICAgICAgIHNlZ0luZGV4ID0gaTtcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHJhd1BhdGhbc2VnSW5kZXhdO1xuICAgICAgbWluID0gbWF4IC0gc2VnbWVudC50b3RhbExlbmd0aDtcbiAgICAgIHByb2dyZXNzID0gKGxlbmd0aCAtIG1pbikgLyAobWF4IC0gbWluKSB8fCAwO1xuICAgIH1cblxuICAgIHNhbXBsZXMgPSBzZWdtZW50LnNhbXBsZXM7XG4gICAgcmVzb2x1dGlvbiA9IHNlZ21lbnQucmVzb2x1dGlvbjsgLy9ob3cgbWFueSBzYW1wbGVzIHBlciBjdWJpYyBiZXppZXIgY2h1bmtcblxuICAgIGxlbmd0aCA9IHNlZ21lbnQudG90YWxMZW5ndGggKiBwcm9ncmVzcztcbiAgICBpID0gc2VnbWVudC5sb29rdXAubGVuZ3RoID8gc2VnbWVudC5sb29rdXBbfn4obGVuZ3RoIC8gc2VnbWVudC5taW5MZW5ndGgpXSB8fCAwIDogX2dldFNhbXBsZUluZGV4KHNhbXBsZXMsIGxlbmd0aCwgcHJvZ3Jlc3MpO1xuICAgIG1pbiA9IGkgPyBzYW1wbGVzW2kgLSAxXSA6IDA7XG4gICAgbWF4ID0gc2FtcGxlc1tpXTtcblxuICAgIGlmIChtYXggPCBsZW5ndGgpIHtcbiAgICAgIG1pbiA9IG1heDtcbiAgICAgIG1heCA9IHNhbXBsZXNbKytpXTtcbiAgICB9XG5cbiAgICB0ID0gMSAvIHJlc29sdXRpb24gKiAoKGxlbmd0aCAtIG1pbikgLyAobWF4IC0gbWluKSArIGkgJSByZXNvbHV0aW9uKTtcbiAgICBpID0gfn4oaSAvIHJlc29sdXRpb24pICogNjtcblxuICAgIGlmIChwdXNoVG9OZXh0SWZBdEVuZCAmJiB0ID09PSAxKSB7XG4gICAgICBpZiAoaSArIDYgPCBzZWdtZW50Lmxlbmd0aCkge1xuICAgICAgICBpICs9IDY7XG4gICAgICAgIHQgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzZWdJbmRleCArIDEgPCByYXdQYXRoLmxlbmd0aCkge1xuICAgICAgICBpID0gdCA9IDA7XG4gICAgICAgIHNlZ21lbnQgPSByYXdQYXRoWysrc2VnSW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlY29yYXRlZS50ID0gdDtcbiAgZGVjb3JhdGVlLmkgPSBpO1xuICBkZWNvcmF0ZWUucGF0aCA9IHJhd1BhdGg7XG4gIGRlY29yYXRlZS5zZWdtZW50ID0gc2VnbWVudDtcbiAgZGVjb3JhdGVlLnNlZ0luZGV4ID0gc2VnSW5kZXg7XG4gIHJldHVybiBkZWNvcmF0ZWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQb3NpdGlvbk9uUGF0aChyYXdQYXRoLCBwcm9ncmVzcywgaW5jbHVkZUFuZ2xlLCBwb2ludCkge1xuICB2YXIgc2VnbWVudCA9IHJhd1BhdGhbMF0sXG4gICAgICByZXN1bHQgPSBwb2ludCB8fCB7fSxcbiAgICAgIHNhbXBsZXMsXG4gICAgICByZXNvbHV0aW9uLFxuICAgICAgbGVuZ3RoLFxuICAgICAgbWluLFxuICAgICAgbWF4LFxuICAgICAgaSxcbiAgICAgIHQsXG4gICAgICBhLFxuICAgICAgaW52O1xuXG4gIGlmIChwcm9ncmVzcyA8IDAgfHwgcHJvZ3Jlc3MgPiAxKSB7XG4gICAgcHJvZ3Jlc3MgPSBfd3JhcFByb2dyZXNzKHByb2dyZXNzKTtcbiAgfVxuXG4gIGlmIChyYXdQYXRoLmxlbmd0aCA+IDEpIHtcbiAgICAvL3NwZWVkIG9wdGltaXphdGlvbjogbW9zdCBvZiB0aGUgdGltZSwgdGhlcmUncyBvbmx5IG9uZSBzZWdtZW50IHNvIHNraXAgdGhlIHJlY3Vyc2lvbi5cbiAgICBsZW5ndGggPSByYXdQYXRoLnRvdGFsTGVuZ3RoICogcHJvZ3Jlc3M7XG4gICAgbWF4ID0gaSA9IDA7XG5cbiAgICB3aGlsZSAoKG1heCArPSByYXdQYXRoW2krK10udG90YWxMZW5ndGgpIDwgbGVuZ3RoKSB7XG4gICAgICBzZWdtZW50ID0gcmF3UGF0aFtpXTtcbiAgICB9XG5cbiAgICBtaW4gPSBtYXggLSBzZWdtZW50LnRvdGFsTGVuZ3RoO1xuICAgIHByb2dyZXNzID0gKGxlbmd0aCAtIG1pbikgLyAobWF4IC0gbWluKSB8fCAwO1xuICB9XG5cbiAgc2FtcGxlcyA9IHNlZ21lbnQuc2FtcGxlcztcbiAgcmVzb2x1dGlvbiA9IHNlZ21lbnQucmVzb2x1dGlvbjtcbiAgbGVuZ3RoID0gc2VnbWVudC50b3RhbExlbmd0aCAqIHByb2dyZXNzO1xuICBpID0gc2VnbWVudC5sb29rdXAubGVuZ3RoID8gc2VnbWVudC5sb29rdXBbcHJvZ3Jlc3MgPCAxID8gfn4obGVuZ3RoIC8gc2VnbWVudC5taW5MZW5ndGgpIDogc2VnbWVudC5sb29rdXAubGVuZ3RoIC0gMV0gfHwgMCA6IF9nZXRTYW1wbGVJbmRleChzYW1wbGVzLCBsZW5ndGgsIHByb2dyZXNzKTtcbiAgbWluID0gaSA/IHNhbXBsZXNbaSAtIDFdIDogMDtcbiAgbWF4ID0gc2FtcGxlc1tpXTtcblxuICBpZiAobWF4IDwgbGVuZ3RoKSB7XG4gICAgbWluID0gbWF4O1xuICAgIG1heCA9IHNhbXBsZXNbKytpXTtcbiAgfVxuXG4gIHQgPSAxIC8gcmVzb2x1dGlvbiAqICgobGVuZ3RoIC0gbWluKSAvIChtYXggLSBtaW4pICsgaSAlIHJlc29sdXRpb24pIHx8IDA7XG4gIGludiA9IDEgLSB0O1xuICBpID0gfn4oaSAvIHJlc29sdXRpb24pICogNjtcbiAgYSA9IHNlZ21lbnRbaV07XG4gIHJlc3VsdC54ID0gX3JvdW5kKCh0ICogdCAqIChzZWdtZW50W2kgKyA2XSAtIGEpICsgMyAqIGludiAqICh0ICogKHNlZ21lbnRbaSArIDRdIC0gYSkgKyBpbnYgKiAoc2VnbWVudFtpICsgMl0gLSBhKSkpICogdCArIGEpO1xuICByZXN1bHQueSA9IF9yb3VuZCgodCAqIHQgKiAoc2VnbWVudFtpICsgN10gLSAoYSA9IHNlZ21lbnRbaSArIDFdKSkgKyAzICogaW52ICogKHQgKiAoc2VnbWVudFtpICsgNV0gLSBhKSArIGludiAqIChzZWdtZW50W2kgKyAzXSAtIGEpKSkgKiB0ICsgYSk7XG5cbiAgaWYgKGluY2x1ZGVBbmdsZSkge1xuICAgIHJlc3VsdC5hbmdsZSA9IHNlZ21lbnQudG90YWxMZW5ndGggPyBnZXRSb3RhdGlvbkF0QmV6aWVyVChzZWdtZW50LCBpLCB0ID49IDEgPyAxIC0gMWUtOSA6IHQgPyB0IDogMWUtOSkgOiBzZWdtZW50LmFuZ2xlIHx8IDA7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvL2FwcGxpZXMgYSBtYXRyaXggdHJhbnNmb3JtIHRvIFJhd1BhdGggKG9yIGEgc2VnbWVudCBpbiBhIFJhd1BhdGgpIGFuZCByZXR1cm5zIHdoYXRldmVyIHdhcyBwYXNzZWQgaW4gKGl0IHRyYW5zZm9ybXMgdGhlIHZhbHVlcyBpbiB0aGUgYXJyYXkocyksIG5vdCBhIGNvcHkpLlxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUmF3UGF0aChyYXdQYXRoLCBhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgdmFyIGogPSByYXdQYXRoLmxlbmd0aCxcbiAgICAgIHNlZ21lbnQsXG4gICAgICBsLFxuICAgICAgaSxcbiAgICAgIHgsXG4gICAgICB5O1xuXG4gIHdoaWxlICgtLWogPiAtMSkge1xuICAgIHNlZ21lbnQgPSByYXdQYXRoW2pdO1xuICAgIGwgPSBzZWdtZW50Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgIHggPSBzZWdtZW50W2ldO1xuICAgICAgeSA9IHNlZ21lbnRbaSArIDFdO1xuICAgICAgc2VnbWVudFtpXSA9IHggKiBhICsgeSAqIGMgKyB0eDtcbiAgICAgIHNlZ21lbnRbaSArIDFdID0geCAqIGIgKyB5ICogZCArIHR5O1xuICAgIH1cbiAgfVxuXG4gIHJhd1BhdGguX2RpcnR5ID0gMTtcbiAgcmV0dXJuIHJhd1BhdGg7XG59IC8vIHRyYW5zbGF0ZXMgU1ZHIGFyYyBkYXRhIGludG8gYSBzZWdtZW50IChjdWJpYyBiZXppZXJzKS4gQW5nbGUgaXMgaW4gZGVncmVlcy5cblxuZnVuY3Rpb24gYXJjVG9TZWdtZW50KGxhc3RYLCBsYXN0WSwgcngsIHJ5LCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpIHtcbiAgaWYgKGxhc3RYID09PSB4ICYmIGxhc3RZID09PSB5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcnggPSBfYWJzKHJ4KTtcbiAgcnkgPSBfYWJzKHJ5KTtcblxuICB2YXIgYW5nbGVSYWQgPSBhbmdsZSAlIDM2MCAqIF9ERUcyUkFELFxuICAgICAgY29zQW5nbGUgPSBfY29zKGFuZ2xlUmFkKSxcbiAgICAgIHNpbkFuZ2xlID0gX3NpbihhbmdsZVJhZCksXG4gICAgICBQSSA9IE1hdGguUEksXG4gICAgICBUV09QSSA9IFBJICogMixcbiAgICAgIGR4MiA9IChsYXN0WCAtIHgpIC8gMixcbiAgICAgIGR5MiA9IChsYXN0WSAtIHkpIC8gMixcbiAgICAgIHgxID0gY29zQW5nbGUgKiBkeDIgKyBzaW5BbmdsZSAqIGR5MixcbiAgICAgIHkxID0gLXNpbkFuZ2xlICogZHgyICsgY29zQW5nbGUgKiBkeTIsXG4gICAgICB4MV9zcSA9IHgxICogeDEsXG4gICAgICB5MV9zcSA9IHkxICogeTEsXG4gICAgICByYWRpaUNoZWNrID0geDFfc3EgLyAocnggKiByeCkgKyB5MV9zcSAvIChyeSAqIHJ5KTtcblxuICBpZiAocmFkaWlDaGVjayA+IDEpIHtcbiAgICByeCA9IF9zcXJ0KHJhZGlpQ2hlY2spICogcng7XG4gICAgcnkgPSBfc3FydChyYWRpaUNoZWNrKSAqIHJ5O1xuICB9XG5cbiAgdmFyIHJ4X3NxID0gcnggKiByeCxcbiAgICAgIHJ5X3NxID0gcnkgKiByeSxcbiAgICAgIHNxID0gKHJ4X3NxICogcnlfc3EgLSByeF9zcSAqIHkxX3NxIC0gcnlfc3EgKiB4MV9zcSkgLyAocnhfc3EgKiB5MV9zcSArIHJ5X3NxICogeDFfc3EpO1xuXG4gIGlmIChzcSA8IDApIHtcbiAgICBzcSA9IDA7XG4gIH1cblxuICB2YXIgY29lZiA9IChsYXJnZUFyY0ZsYWcgPT09IHN3ZWVwRmxhZyA/IC0xIDogMSkgKiBfc3FydChzcSksXG4gICAgICBjeDEgPSBjb2VmICogKHJ4ICogeTEgLyByeSksXG4gICAgICBjeTEgPSBjb2VmICogLShyeSAqIHgxIC8gcngpLFxuICAgICAgc3gyID0gKGxhc3RYICsgeCkgLyAyLFxuICAgICAgc3kyID0gKGxhc3RZICsgeSkgLyAyLFxuICAgICAgY3ggPSBzeDIgKyAoY29zQW5nbGUgKiBjeDEgLSBzaW5BbmdsZSAqIGN5MSksXG4gICAgICBjeSA9IHN5MiArIChzaW5BbmdsZSAqIGN4MSArIGNvc0FuZ2xlICogY3kxKSxcbiAgICAgIHV4ID0gKHgxIC0gY3gxKSAvIHJ4LFxuICAgICAgdXkgPSAoeTEgLSBjeTEpIC8gcnksXG4gICAgICB2eCA9ICgteDEgLSBjeDEpIC8gcngsXG4gICAgICB2eSA9ICgteTEgLSBjeTEpIC8gcnksXG4gICAgICB0ZW1wID0gdXggKiB1eCArIHV5ICogdXksXG4gICAgICBhbmdsZVN0YXJ0ID0gKHV5IDwgMCA/IC0xIDogMSkgKiBNYXRoLmFjb3ModXggLyBfc3FydCh0ZW1wKSksXG4gICAgICBhbmdsZUV4dGVudCA9ICh1eCAqIHZ5IC0gdXkgKiB2eCA8IDAgPyAtMSA6IDEpICogTWF0aC5hY29zKCh1eCAqIHZ4ICsgdXkgKiB2eSkgLyBfc3FydCh0ZW1wICogKHZ4ICogdnggKyB2eSAqIHZ5KSkpO1xuXG4gIGlzTmFOKGFuZ2xlRXh0ZW50KSAmJiAoYW5nbGVFeHRlbnQgPSBQSSk7IC8vcmFyZSBlZGdlIGNhc2UuIE1hdGguY29zKC0xKSBpcyBOYU4uXG5cbiAgaWYgKCFzd2VlcEZsYWcgJiYgYW5nbGVFeHRlbnQgPiAwKSB7XG4gICAgYW5nbGVFeHRlbnQgLT0gVFdPUEk7XG4gIH0gZWxzZSBpZiAoc3dlZXBGbGFnICYmIGFuZ2xlRXh0ZW50IDwgMCkge1xuICAgIGFuZ2xlRXh0ZW50ICs9IFRXT1BJO1xuICB9XG5cbiAgYW5nbGVTdGFydCAlPSBUV09QSTtcbiAgYW5nbGVFeHRlbnQgJT0gVFdPUEk7XG5cbiAgdmFyIHNlZ21lbnRzID0gTWF0aC5jZWlsKF9hYnMoYW5nbGVFeHRlbnQpIC8gKFRXT1BJIC8gNCkpLFxuICAgICAgcmF3UGF0aCA9IFtdLFxuICAgICAgYW5nbGVJbmNyZW1lbnQgPSBhbmdsZUV4dGVudCAvIHNlZ21lbnRzLFxuICAgICAgY29udHJvbExlbmd0aCA9IDQgLyAzICogX3NpbihhbmdsZUluY3JlbWVudCAvIDIpIC8gKDEgKyBfY29zKGFuZ2xlSW5jcmVtZW50IC8gMikpLFxuICAgICAgbWEgPSBjb3NBbmdsZSAqIHJ4LFxuICAgICAgbWIgPSBzaW5BbmdsZSAqIHJ4LFxuICAgICAgbWMgPSBzaW5BbmdsZSAqIC1yeSxcbiAgICAgIG1kID0gY29zQW5nbGUgKiByeSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNlZ21lbnRzOyBpKyspIHtcbiAgICBhbmdsZSA9IGFuZ2xlU3RhcnQgKyBpICogYW5nbGVJbmNyZW1lbnQ7XG4gICAgeDEgPSBfY29zKGFuZ2xlKTtcbiAgICB5MSA9IF9zaW4oYW5nbGUpO1xuICAgIHV4ID0gX2NvcyhhbmdsZSArPSBhbmdsZUluY3JlbWVudCk7XG4gICAgdXkgPSBfc2luKGFuZ2xlKTtcbiAgICByYXdQYXRoLnB1c2goeDEgLSBjb250cm9sTGVuZ3RoICogeTEsIHkxICsgY29udHJvbExlbmd0aCAqIHgxLCB1eCArIGNvbnRyb2xMZW5ndGggKiB1eSwgdXkgLSBjb250cm9sTGVuZ3RoICogdXgsIHV4LCB1eSk7XG4gIH0gLy9ub3cgdHJhbnNmb3JtIGFjY29yZGluZyB0byB0aGUgYWN0dWFsIHNpemUgb2YgdGhlIGVsbGlwc2UvYXJjICh0aGUgYmV6aWVycyB3ZXJlIG5vcmFtbGl6ZWQsIGJldHdlZW4gMCBhbmQgMSBvbiBhIGNpcmNsZSkuXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcmF3UGF0aC5sZW5ndGg7IGkgKz0gMikge1xuICAgIHgxID0gcmF3UGF0aFtpXTtcbiAgICB5MSA9IHJhd1BhdGhbaSArIDFdO1xuICAgIHJhd1BhdGhbaV0gPSB4MSAqIG1hICsgeTEgKiBtYyArIGN4O1xuICAgIHJhd1BhdGhbaSArIDFdID0geDEgKiBtYiArIHkxICogbWQgKyBjeTtcbiAgfVxuXG4gIHJhd1BhdGhbaSAtIDJdID0geDsgLy9hbHdheXMgc2V0IHRoZSBlbmQgdG8gZXhhY3RseSB3aGVyZSBpdCdzIHN1cHBvc2VkIHRvIGJlXG5cbiAgcmF3UGF0aFtpIC0gMV0gPSB5O1xuICByZXR1cm4gcmF3UGF0aDtcbn0gLy9TcGl0cyBiYWNrIGEgUmF3UGF0aCB3aXRoIGFic29sdXRlIGNvb3JkaW5hdGVzLiBFYWNoIHNlZ21lbnQgc3RhcnRzIHdpdGggYSBcIm1vdmVUb1wiIGNvbW1hbmQgKHggY29vcmRpbmF0ZSwgdGhlbiB5KSBhbmQgdGhlbiAyIGNvbnRyb2wgcG9pbnRzICh4LCB5LCB4LCB5KSwgdGhlbiBhbmNob3IuIFRoZSBnb2FsIGlzIHRvIG1pbmltaXplIG1lbW9yeSBhbmQgbWF4aW1pemUgc3BlZWQuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvUmF3UGF0aChkKSB7XG4gIHZhciBhID0gKGQgKyBcIlwiKS5yZXBsYWNlKF9zY2llbnRpZmljLCBmdW5jdGlvbiAobSkge1xuICAgIHZhciBuID0gK207XG4gICAgcmV0dXJuIG4gPCAwLjAwMDEgJiYgbiA+IC0wLjAwMDEgPyAwIDogbjtcbiAgfSkubWF0Y2goX3N2Z1BhdGhFeHApIHx8IFtdLFxuICAgICAgLy9zb21lIGF1dGhvcmluZyBwcm9ncmFtcyBzcGl0IG91dCB2ZXJ5IHNtYWxsIG51bWJlcnMgaW4gc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlIFwiMWUtNVwiLCBzbyBtYWtlIHN1cmUgd2Ugcm91bmQgdGhhdCBkb3duIHRvIDAgZmlyc3QuXG4gIHBhdGggPSBbXSxcbiAgICAgIHJlbGF0aXZlWCA9IDAsXG4gICAgICByZWxhdGl2ZVkgPSAwLFxuICAgICAgdHdvVGhpcmRzID0gMiAvIDMsXG4gICAgICBlbGVtZW50cyA9IGEubGVuZ3RoLFxuICAgICAgcG9pbnRzID0gMCxcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiRVJST1I6IG1hbGZvcm1lZCBwYXRoOiBcIiArIGQsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgY29tbWFuZCxcbiAgICAgIGlzUmVsYXRpdmUsXG4gICAgICBzZWdtZW50LFxuICAgICAgc3RhcnRYLFxuICAgICAgc3RhcnRZLFxuICAgICAgZGlmWCxcbiAgICAgIGRpZlksXG4gICAgICBiZXppZXJzLFxuICAgICAgcHJldkNvbW1hbmQsXG4gICAgICBmbGFnMSxcbiAgICAgIGZsYWcyLFxuICAgICAgbGluZSA9IGZ1bmN0aW9uIGxpbmUoc3gsIHN5LCBleCwgZXkpIHtcbiAgICBkaWZYID0gKGV4IC0gc3gpIC8gMztcbiAgICBkaWZZID0gKGV5IC0gc3kpIC8gMztcbiAgICBzZWdtZW50LnB1c2goc3ggKyBkaWZYLCBzeSArIGRpZlksIGV4IC0gZGlmWCwgZXkgLSBkaWZZLCBleCwgZXkpO1xuICB9O1xuXG4gIGlmICghZCB8fCAhaXNOYU4oYVswXSkgfHwgaXNOYU4oYVsxXSkpIHtcbiAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnRzOyBpKyspIHtcbiAgICBwcmV2Q29tbWFuZCA9IGNvbW1hbmQ7XG5cbiAgICBpZiAoaXNOYU4oYVtpXSkpIHtcbiAgICAgIGNvbW1hbmQgPSBhW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgICBpc1JlbGF0aXZlID0gY29tbWFuZCAhPT0gYVtpXTsgLy9sb3dlciBjYXNlIG1lYW5zIHJlbGF0aXZlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vY29tbWFuZHMgbGlrZSBcIkNcIiBjYW4gYmUgc3RydW5nIHRvZ2V0aGVyIHdpdGhvdXQgYW55IG5ldyBjb21tYW5kIGNoYXJhY3RlcnMgYmV0d2Vlbi5cbiAgICAgIGktLTtcbiAgICB9XG5cbiAgICB4ID0gK2FbaSArIDFdO1xuICAgIHkgPSArYVtpICsgMl07XG5cbiAgICBpZiAoaXNSZWxhdGl2ZSkge1xuICAgICAgeCArPSByZWxhdGl2ZVg7XG4gICAgICB5ICs9IHJlbGF0aXZlWTtcbiAgICB9XG5cbiAgICBpZiAoIWkpIHtcbiAgICAgIHN0YXJ0WCA9IHg7XG4gICAgICBzdGFydFkgPSB5O1xuICAgIH0gLy8gXCJNXCIgKG1vdmUpXG5cblxuICAgIGlmIChjb21tYW5kID09PSBcIk1cIikge1xuICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoIDwgOCkge1xuICAgICAgICAgIC8vaWYgdGhlIHBhdGggZGF0YSB3YXMgZnVua3kgYW5kIGp1c3QgaGFkIGEgTSB3aXRoIG5vIGFjdHVhbCBkcmF3aW5nIGFueXdoZXJlLCBza2lwIGl0LlxuICAgICAgICAgIHBhdGgubGVuZ3RoIC09IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9pbnRzICs9IHNlZ21lbnQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlbGF0aXZlWCA9IHN0YXJ0WCA9IHg7XG4gICAgICByZWxhdGl2ZVkgPSBzdGFydFkgPSB5O1xuICAgICAgc2VnbWVudCA9IFt4LCB5XTtcbiAgICAgIHBhdGgucHVzaChzZWdtZW50KTtcbiAgICAgIGkgKz0gMjtcbiAgICAgIGNvbW1hbmQgPSBcIkxcIjsgLy9hbiBcIk1cIiB3aXRoIG1vcmUgdGhhbiAyIHZhbHVlcyBnZXRzIGludGVycHJldGVkIGFzIFwibGluZVRvXCIgY29tbWFuZHMgKFwiTFwiKS5cbiAgICAgIC8vIFwiQ1wiIChjdWJpYyBiZXppZXIpXG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSBcIkNcIikge1xuICAgICAgaWYgKCFzZWdtZW50KSB7XG4gICAgICAgIHNlZ21lbnQgPSBbMCwgMF07XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNSZWxhdGl2ZSkge1xuICAgICAgICByZWxhdGl2ZVggPSByZWxhdGl2ZVkgPSAwO1xuICAgICAgfSAvL25vdGU6IFwiKjFcIiBpcyBqdXN0IGEgZmFzdC9zaG9ydCB3YXkgdG8gY2FzdCB0aGUgdmFsdWUgYXMgYSBOdW1iZXIuIFdBQUFZIGZhc3RlciBpbiBDaHJvbWUsIHNsaWdodGx5IHNsb3dlciBpbiBGaXJlZm94LlxuXG5cbiAgICAgIHNlZ21lbnQucHVzaCh4LCB5LCByZWxhdGl2ZVggKyBhW2kgKyAzXSAqIDEsIHJlbGF0aXZlWSArIGFbaSArIDRdICogMSwgcmVsYXRpdmVYICs9IGFbaSArIDVdICogMSwgcmVsYXRpdmVZICs9IGFbaSArIDZdICogMSk7XG4gICAgICBpICs9IDY7IC8vIFwiU1wiIChjb250aW51YXRpb24gb2YgY3ViaWMgYmV6aWVyKVxuICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJTXCIpIHtcbiAgICAgIGRpZlggPSByZWxhdGl2ZVg7XG4gICAgICBkaWZZID0gcmVsYXRpdmVZO1xuXG4gICAgICBpZiAocHJldkNvbW1hbmQgPT09IFwiQ1wiIHx8IHByZXZDb21tYW5kID09PSBcIlNcIikge1xuICAgICAgICBkaWZYICs9IHJlbGF0aXZlWCAtIHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSA0XTtcbiAgICAgICAgZGlmWSArPSByZWxhdGl2ZVkgLSBzZWdtZW50W3NlZ21lbnQubGVuZ3RoIC0gM107XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNSZWxhdGl2ZSkge1xuICAgICAgICByZWxhdGl2ZVggPSByZWxhdGl2ZVkgPSAwO1xuICAgICAgfVxuXG4gICAgICBzZWdtZW50LnB1c2goZGlmWCwgZGlmWSwgeCwgeSwgcmVsYXRpdmVYICs9IGFbaSArIDNdICogMSwgcmVsYXRpdmVZICs9IGFbaSArIDRdICogMSk7XG4gICAgICBpICs9IDQ7IC8vIFwiUVwiIChxdWFkcmF0aWMgYmV6aWVyKVxuICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJRXCIpIHtcbiAgICAgIGRpZlggPSByZWxhdGl2ZVggKyAoeCAtIHJlbGF0aXZlWCkgKiB0d29UaGlyZHM7XG4gICAgICBkaWZZID0gcmVsYXRpdmVZICsgKHkgLSByZWxhdGl2ZVkpICogdHdvVGhpcmRzO1xuXG4gICAgICBpZiAoIWlzUmVsYXRpdmUpIHtcbiAgICAgICAgcmVsYXRpdmVYID0gcmVsYXRpdmVZID0gMDtcbiAgICAgIH1cblxuICAgICAgcmVsYXRpdmVYICs9IGFbaSArIDNdICogMTtcbiAgICAgIHJlbGF0aXZlWSArPSBhW2kgKyA0XSAqIDE7XG4gICAgICBzZWdtZW50LnB1c2goZGlmWCwgZGlmWSwgcmVsYXRpdmVYICsgKHggLSByZWxhdGl2ZVgpICogdHdvVGhpcmRzLCByZWxhdGl2ZVkgKyAoeSAtIHJlbGF0aXZlWSkgKiB0d29UaGlyZHMsIHJlbGF0aXZlWCwgcmVsYXRpdmVZKTtcbiAgICAgIGkgKz0gNDsgLy8gXCJUXCIgKGNvbnRpbnVhdGlvbiBvZiBxdWFkcmF0aWMgYmV6aWVyKVxuICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJUXCIpIHtcbiAgICAgIGRpZlggPSByZWxhdGl2ZVggLSBzZWdtZW50W3NlZ21lbnQubGVuZ3RoIC0gNF07XG4gICAgICBkaWZZID0gcmVsYXRpdmVZIC0gc2VnbWVudFtzZWdtZW50Lmxlbmd0aCAtIDNdO1xuICAgICAgc2VnbWVudC5wdXNoKHJlbGF0aXZlWCArIGRpZlgsIHJlbGF0aXZlWSArIGRpZlksIHggKyAocmVsYXRpdmVYICsgZGlmWCAqIDEuNSAtIHgpICogdHdvVGhpcmRzLCB5ICsgKHJlbGF0aXZlWSArIGRpZlkgKiAxLjUgLSB5KSAqIHR3b1RoaXJkcywgcmVsYXRpdmVYID0geCwgcmVsYXRpdmVZID0geSk7XG4gICAgICBpICs9IDI7IC8vIFwiSFwiIChob3Jpem9udGFsIGxpbmUpXG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSBcIkhcIikge1xuICAgICAgbGluZShyZWxhdGl2ZVgsIHJlbGF0aXZlWSwgcmVsYXRpdmVYID0geCwgcmVsYXRpdmVZKTtcbiAgICAgIGkgKz0gMTsgLy8gXCJWXCIgKHZlcnRpY2FsIGxpbmUpXG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSBcIlZcIikge1xuICAgICAgLy9hZGp1c3QgdmFsdWVzIGJlY2F1c2UgdGhlIGZpcnN0IChhbmQgb25seSBvbmUpIGlzbid0IHggaW4gdGhpcyBjYXNlLCBpdCdzIHkuXG4gICAgICBsaW5lKHJlbGF0aXZlWCwgcmVsYXRpdmVZLCByZWxhdGl2ZVgsIHJlbGF0aXZlWSA9IHggKyAoaXNSZWxhdGl2ZSA/IHJlbGF0aXZlWSAtIHJlbGF0aXZlWCA6IDApKTtcbiAgICAgIGkgKz0gMTsgLy8gXCJMXCIgKGxpbmUpIG9yIFwiWlwiIChjbG9zZSlcbiAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiTFwiIHx8IGNvbW1hbmQgPT09IFwiWlwiKSB7XG4gICAgICBpZiAoY29tbWFuZCA9PT0gXCJaXCIpIHtcbiAgICAgICAgeCA9IHN0YXJ0WDtcbiAgICAgICAgeSA9IHN0YXJ0WTtcbiAgICAgICAgc2VnbWVudC5jbG9zZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tbWFuZCA9PT0gXCJMXCIgfHwgX2FicyhyZWxhdGl2ZVggLSB4KSA+IDAuNSB8fCBfYWJzKHJlbGF0aXZlWSAtIHkpID4gMC41KSB7XG4gICAgICAgIGxpbmUocmVsYXRpdmVYLCByZWxhdGl2ZVksIHgsIHkpO1xuXG4gICAgICAgIGlmIChjb21tYW5kID09PSBcIkxcIikge1xuICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZWxhdGl2ZVggPSB4O1xuICAgICAgcmVsYXRpdmVZID0geTsgLy8gXCJBXCIgKGFyYylcbiAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiQVwiKSB7XG4gICAgICBmbGFnMSA9IGFbaSArIDRdO1xuICAgICAgZmxhZzIgPSBhW2kgKyA1XTtcbiAgICAgIGRpZlggPSBhW2kgKyA2XTtcbiAgICAgIGRpZlkgPSBhW2kgKyA3XTtcbiAgICAgIGogPSA3O1xuXG4gICAgICBpZiAoZmxhZzEubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBmb3IgY2FzZXMgd2hlbiB0aGUgZmxhZ3MgYXJlIG1lcmdlZCwgbGlrZSBcImE4IDggMCAwMTggOFwiICh0aGUgMCBhbmQgMSBmbGFncyBhcmUgV0lUSCB0aGUgeCB2YWx1ZSBvZiA4LCBidXQgaXQgY291bGQgYWxzbyBiZSBcImE4IDggMCAwMS04IDhcIiBzbyBpdCBtYXkgaW5jbHVkZSB4IG9yIG5vdClcbiAgICAgICAgaWYgKGZsYWcxLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICBkaWZZID0gZGlmWDtcbiAgICAgICAgICBkaWZYID0gZmxhZzI7XG4gICAgICAgICAgai0tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpZlkgPSBmbGFnMjtcbiAgICAgICAgICBkaWZYID0gZmxhZzEuc3Vic3RyKDIpO1xuICAgICAgICAgIGogLT0gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZsYWcyID0gZmxhZzEuY2hhckF0KDEpO1xuICAgICAgICBmbGFnMSA9IGZsYWcxLmNoYXJBdCgwKTtcbiAgICAgIH1cblxuICAgICAgYmV6aWVycyA9IGFyY1RvU2VnbWVudChyZWxhdGl2ZVgsIHJlbGF0aXZlWSwgK2FbaSArIDFdLCArYVtpICsgMl0sICthW2kgKyAzXSwgK2ZsYWcxLCArZmxhZzIsIChpc1JlbGF0aXZlID8gcmVsYXRpdmVYIDogMCkgKyBkaWZYICogMSwgKGlzUmVsYXRpdmUgPyByZWxhdGl2ZVkgOiAwKSArIGRpZlkgKiAxKTtcbiAgICAgIGkgKz0gajtcblxuICAgICAgaWYgKGJlemllcnMpIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGJlemllcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50LnB1c2goYmV6aWVyc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVsYXRpdmVYID0gc2VnbWVudFtzZWdtZW50Lmxlbmd0aCAtIDJdO1xuICAgICAgcmVsYXRpdmVZID0gc2VnbWVudFtzZWdtZW50Lmxlbmd0aCAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGkgPSBzZWdtZW50Lmxlbmd0aDtcblxuICBpZiAoaSA8IDYpIHtcbiAgICAvL2luIGNhc2UgdGhlcmUncyBvZGQgU1ZHIGxpa2UgYSBNMCwwIGNvbW1hbmQgYXQgdGhlIHZlcnkgZW5kLlxuICAgIHBhdGgucG9wKCk7XG4gICAgaSA9IDA7XG4gIH0gZWxzZSBpZiAoc2VnbWVudFswXSA9PT0gc2VnbWVudFtpIC0gMl0gJiYgc2VnbWVudFsxXSA9PT0gc2VnbWVudFtpIC0gMV0pIHtcbiAgICBzZWdtZW50LmNsb3NlZCA9IHRydWU7XG4gIH1cblxuICBwYXRoLnRvdGFsUG9pbnRzID0gcG9pbnRzICsgaTtcbiAgcmV0dXJuIHBhdGg7XG59IC8vcG9wdWxhdGVzIHRoZSBwb2ludHMgYXJyYXkgaW4gYWx0ZXJuYXRpbmcgeC95IHZhbHVlcyAobGlrZSBbeCwgeSwgeCwgeS4uLl0gaW5zdGVhZCBvZiBpbmRpdmlkdWFsIHBvaW50IG9iamVjdHMgW3t4LCB5fSwge3gsIHl9Li4uXSB0byBjb25zZXJ2ZSBtZW1vcnkgYW5kIHN0YXkgaW4gbGluZSB3aXRoIGhvdyB3ZSdyZSBoYW5kbGluZyBzZWdtZW50IGFycmF5c1xuXG5leHBvcnQgZnVuY3Rpb24gYmV6aWVyVG9Qb2ludHMoeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0LCB0aHJlc2hvbGQsIHBvaW50cywgaW5kZXgpIHtcbiAgdmFyIHgxMiA9ICh4MSArIHgyKSAvIDIsXG4gICAgICB5MTIgPSAoeTEgKyB5MikgLyAyLFxuICAgICAgeDIzID0gKHgyICsgeDMpIC8gMixcbiAgICAgIHkyMyA9ICh5MiArIHkzKSAvIDIsXG4gICAgICB4MzQgPSAoeDMgKyB4NCkgLyAyLFxuICAgICAgeTM0ID0gKHkzICsgeTQpIC8gMixcbiAgICAgIHgxMjMgPSAoeDEyICsgeDIzKSAvIDIsXG4gICAgICB5MTIzID0gKHkxMiArIHkyMykgLyAyLFxuICAgICAgeDIzNCA9ICh4MjMgKyB4MzQpIC8gMixcbiAgICAgIHkyMzQgPSAoeTIzICsgeTM0KSAvIDIsXG4gICAgICB4MTIzNCA9ICh4MTIzICsgeDIzNCkgLyAyLFxuICAgICAgeTEyMzQgPSAoeTEyMyArIHkyMzQpIC8gMixcbiAgICAgIGR4ID0geDQgLSB4MSxcbiAgICAgIGR5ID0geTQgLSB5MSxcbiAgICAgIGQyID0gX2FicygoeDIgLSB4NCkgKiBkeSAtICh5MiAtIHk0KSAqIGR4KSxcbiAgICAgIGQzID0gX2FicygoeDMgLSB4NCkgKiBkeSAtICh5MyAtIHk0KSAqIGR4KSxcbiAgICAgIGxlbmd0aDtcblxuICBpZiAoIXBvaW50cykge1xuICAgIHBvaW50cyA9IFt4MSwgeTEsIHg0LCB5NF07XG4gICAgaW5kZXggPSAyO1xuICB9XG5cbiAgcG9pbnRzLnNwbGljZShpbmRleCB8fCBwb2ludHMubGVuZ3RoIC0gMiwgMCwgeDEyMzQsIHkxMjM0KTtcblxuICBpZiAoKGQyICsgZDMpICogKGQyICsgZDMpID4gdGhyZXNob2xkICogKGR4ICogZHggKyBkeSAqIGR5KSkge1xuICAgIGxlbmd0aCA9IHBvaW50cy5sZW5ndGg7XG4gICAgYmV6aWVyVG9Qb2ludHMoeDEsIHkxLCB4MTIsIHkxMiwgeDEyMywgeTEyMywgeDEyMzQsIHkxMjM0LCB0aHJlc2hvbGQsIHBvaW50cywgaW5kZXgpO1xuICAgIGJlemllclRvUG9pbnRzKHgxMjM0LCB5MTIzNCwgeDIzNCwgeTIzNCwgeDM0LCB5MzQsIHg0LCB5NCwgdGhyZXNob2xkLCBwb2ludHMsIGluZGV4ICsgMiArIChwb2ludHMubGVuZ3RoIC0gbGVuZ3RoKSk7XG4gIH1cblxuICByZXR1cm4gcG9pbnRzO1xufVxuLypcbmZ1bmN0aW9uIGdldEFuZ2xlQmV0d2VlblBvaW50cyh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyKSB7IC8vYW5nbGUgYmV0d2VlbiAzIHBvaW50cyBpbiByYWRpYW5zXG5cdHZhciBkeDEgPSB4MSAtIHgwLFxuXHRcdGR5MSA9IHkxIC0geTAsXG5cdFx0ZHgyID0geDIgLSB4MSxcblx0XHRkeTIgPSB5MiAtIHkxLFxuXHRcdGR4MyA9IHgyIC0geDAsXG5cdFx0ZHkzID0geTIgLSB5MCxcblx0XHRhID0gZHgxICogZHgxICsgZHkxICogZHkxLFxuXHRcdGIgPSBkeDIgKiBkeDIgKyBkeTIgKiBkeTIsXG5cdFx0YyA9IGR4MyAqIGR4MyArIGR5MyAqIGR5Mztcblx0cmV0dXJuIE1hdGguYWNvcyggKGEgKyBiIC0gYykgLyBfc3FydCg0ICogYSAqIGIpICk7XG59LFxuKi9cbi8vcG9pbnRzVG9TZWdtZW50KCkgZG9lc24ndCBoYW5kbGUgZmxhdCBjb29yZGluYXRlcyAod2hlcmUgeSBpcyBhbHdheXMgMCkgdGhlIHdheSB3ZSBuZWVkICh0aGUgcmVzdWx0aW5nIGNvbnRyb2wgcG9pbnRzIGFyZSBhbHdheXMgcmlnaHQgb24gdG9wIG9mIHRoZSBhbmNob3JzKSwgc28gdGhpcyBmdW5jdGlvbiBiYXNpY2FsbHkgbWFrZXMgdGhlIGNvbnRyb2wgcG9pbnRzIGdvIGRpcmVjdGx5IHVwIGFuZCBkb3duLCB2YXJ5aW5nIGluIGxlbmd0aCBiYXNlZCBvbiB0aGUgY3VydmluZXNzIChtb3JlIGN1cnZ5LCBmdXJ0aGVyIGNvbnRyb2wgcG9pbnRzKVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdFBvaW50c1RvU2VnbWVudChwb2ludHMsIGN1cnZpbmVzcykge1xuICBpZiAoY3VydmluZXNzID09PSB2b2lkIDApIHtcbiAgICBjdXJ2aW5lc3MgPSAxO1xuICB9XG5cbiAgdmFyIHggPSBwb2ludHNbMF0sXG4gICAgICB5ID0gMCxcbiAgICAgIHNlZ21lbnQgPSBbeCwgeV0sXG4gICAgICBpID0gMjtcblxuICBmb3IgKDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHNlZ21lbnQucHVzaCh4LCB5LCBwb2ludHNbaV0sIHkgPSAocG9pbnRzW2ldIC0geCkgKiBjdXJ2aW5lc3MgLyAyLCB4ID0gcG9pbnRzW2ldLCAteSk7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudDtcbn0gLy9wb2ludHMgaXMgYW4gYXJyYXkgb2YgeC95IHBvaW50cywgbGlrZSBbeCwgeSwgeCwgeSwgeCwgeV1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50c1RvU2VnbWVudChwb2ludHMsIGN1cnZpbmVzcywgY29ybmVyVGhyZXNob2xkKSB7XG4gIC8vcG9pbnRzID0gc2ltcGxpZnlQb2ludHMocG9pbnRzLCB0b2xlcmFuY2UpO1xuICBfYWJzKHBvaW50c1swXSAtIHBvaW50c1syXSkgPCAxZS00ICYmIF9hYnMocG9pbnRzWzFdIC0gcG9pbnRzWzNdKSA8IDFlLTQgJiYgKHBvaW50cyA9IHBvaW50cy5zbGljZSgyKSk7IC8vIGlmIHRoZSBmaXJzdCB0d28gcG9pbnRzIGFyZSBzdXBlciBjbG9zZSwgZHVtcCB0aGUgZmlyc3Qgb25lLlxuXG4gIHZhciBsID0gcG9pbnRzLmxlbmd0aCAtIDIsXG4gICAgICB4ID0gK3BvaW50c1swXSxcbiAgICAgIHkgPSArcG9pbnRzWzFdLFxuICAgICAgbmV4dFggPSArcG9pbnRzWzJdLFxuICAgICAgbmV4dFkgPSArcG9pbnRzWzNdLFxuICAgICAgc2VnbWVudCA9IFt4LCB5LCB4LCB5XSxcbiAgICAgIGR4MiA9IG5leHRYIC0geCxcbiAgICAgIGR5MiA9IG5leHRZIC0geSxcbiAgICAgIGNsb3NlZCA9IE1hdGguYWJzKHBvaW50c1tsXSAtIHgpIDwgMC4wMDEgJiYgTWF0aC5hYnMocG9pbnRzW2wgKyAxXSAtIHkpIDwgMC4wMDEsXG4gICAgICBwcmV2WCxcbiAgICAgIHByZXZZLFxuICAgICAgYW5nbGUsXG4gICAgICBzbG9wZSxcbiAgICAgIGksXG4gICAgICBkeDEsXG4gICAgICBkeDMsXG4gICAgICBkeTEsXG4gICAgICBkeTMsXG4gICAgICBkMSxcbiAgICAgIGQyLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjO1xuXG4gIGlmIChpc05hTihjb3JuZXJUaHJlc2hvbGQpKSB7XG4gICAgY29ybmVyVGhyZXNob2xkID0gTWF0aC5QSSAvIDEwO1xuICB9XG5cbiAgaWYgKGNsb3NlZCkge1xuICAgIC8vIGlmIHRoZSBzdGFydCBhbmQgZW5kIHBvaW50cyBhcmUgYmFzaWNhbGx5IG9uIHRvcCBvZiBlYWNoIG90aGVyLCBjbG9zZSB0aGUgc2VnbWVudCBieSBhZGRpbmcgdGhlIDJuZCBwb2ludCB0byB0aGUgZW5kLCBhbmQgdGhlIDJuZC10by1sYXN0IHBvaW50IHRvIHRoZSBiZWdpbm5pbmcgKHdlJ2xsIHJlbW92ZSB0aGVtIGF0IHRoZSBlbmQsIGJ1dCB0aGlzIGFsbG93cyB0aGUgY3VydmF0dXJlIHRvIGxvb2sgcGVyZmVjdClcbiAgICBwb2ludHMucHVzaChuZXh0WCwgbmV4dFkpO1xuICAgIG5leHRYID0geDtcbiAgICBuZXh0WSA9IHk7XG4gICAgeCA9IHBvaW50c1tsIC0gMl07XG4gICAgeSA9IHBvaW50c1tsIC0gMV07XG4gICAgcG9pbnRzLnVuc2hpZnQoeCwgeSk7XG4gICAgbCArPSA0O1xuICB9XG5cbiAgY3VydmluZXNzID0gY3VydmluZXNzIHx8IGN1cnZpbmVzcyA9PT0gMCA/ICtjdXJ2aW5lc3MgOiAxO1xuXG4gIGZvciAoaSA9IDI7IGkgPCBsOyBpICs9IDIpIHtcbiAgICBwcmV2WCA9IHg7XG4gICAgcHJldlkgPSB5O1xuICAgIHggPSBuZXh0WDtcbiAgICB5ID0gbmV4dFk7XG4gICAgbmV4dFggPSArcG9pbnRzW2kgKyAyXTtcbiAgICBuZXh0WSA9ICtwb2ludHNbaSArIDNdO1xuXG4gICAgaWYgKHggPT09IG5leHRYICYmIHkgPT09IG5leHRZKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBkeDEgPSBkeDI7XG4gICAgZHkxID0gZHkyO1xuICAgIGR4MiA9IG5leHRYIC0geDtcbiAgICBkeTIgPSBuZXh0WSAtIHk7XG4gICAgZHgzID0gbmV4dFggLSBwcmV2WDtcbiAgICBkeTMgPSBuZXh0WSAtIHByZXZZO1xuICAgIGEgPSBkeDEgKiBkeDEgKyBkeTEgKiBkeTE7XG4gICAgYiA9IGR4MiAqIGR4MiArIGR5MiAqIGR5MjtcbiAgICBjID0gZHgzICogZHgzICsgZHkzICogZHkzO1xuICAgIGFuZ2xlID0gTWF0aC5hY29zKChhICsgYiAtIGMpIC8gX3NxcnQoNCAqIGEgKiBiKSk7IC8vYW5nbGUgYmV0d2VlbiB0aGUgMyBwb2ludHNcblxuICAgIGQyID0gYW5nbGUgLyBNYXRoLlBJICogY3VydmluZXNzOyAvL3RlbXBvcmFyeSBwcmVjYWxjdWxhdGlvbiBmb3Igc3BlZWQgKHJldXNpbmcgZDIgdmFyaWFibGUpXG5cbiAgICBkMSA9IF9zcXJ0KGEpICogZDI7IC8vdGhlIHRpZ2h0ZXIgdGhlIGFuZ2xlLCB0aGUgc2hvcnRlciB3ZSBtYWtlIHRoZSBoYW5kbGVzIGluIHByb3BvcnRpb24uXG5cbiAgICBkMiAqPSBfc3FydChiKTtcblxuICAgIGlmICh4ICE9PSBwcmV2WCB8fCB5ICE9PSBwcmV2WSkge1xuICAgICAgaWYgKGFuZ2xlID4gY29ybmVyVGhyZXNob2xkKSB7XG4gICAgICAgIHNsb3BlID0gX2F0YW4yKGR5MywgZHgzKTtcbiAgICAgICAgc2VnbWVudC5wdXNoKF9yb3VuZCh4IC0gX2NvcyhzbG9wZSkgKiBkMSksIC8vZmlyc3QgY29udHJvbCBwb2ludFxuICAgICAgICBfcm91bmQoeSAtIF9zaW4oc2xvcGUpICogZDEpLCBfcm91bmQoeCksIC8vYW5jaG9yXG4gICAgICAgIF9yb3VuZCh5KSwgX3JvdW5kKHggKyBfY29zKHNsb3BlKSAqIGQyKSwgLy9zZWNvbmQgY29udHJvbCBwb2ludFxuICAgICAgICBfcm91bmQoeSArIF9zaW4oc2xvcGUpICogZDIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3BlID0gX2F0YW4yKGR5MSwgZHgxKTtcbiAgICAgICAgc2VnbWVudC5wdXNoKF9yb3VuZCh4IC0gX2NvcyhzbG9wZSkgKiBkMSksIC8vZmlyc3QgY29udHJvbCBwb2ludFxuICAgICAgICBfcm91bmQoeSAtIF9zaW4oc2xvcGUpICogZDEpKTtcbiAgICAgICAgc2xvcGUgPSBfYXRhbjIoZHkyLCBkeDIpO1xuICAgICAgICBzZWdtZW50LnB1c2goX3JvdW5kKHgpLCAvL2FuY2hvclxuICAgICAgICBfcm91bmQoeSksIF9yb3VuZCh4ICsgX2NvcyhzbG9wZSkgKiBkMiksIC8vc2Vjb25kIGNvbnRyb2wgcG9pbnRcbiAgICAgICAgX3JvdW5kKHkgKyBfc2luKHNsb3BlKSAqIGQyKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgeCAhPT0gbmV4dFggfHwgeSAhPT0gbmV4dFkgfHwgc2VnbWVudC5sZW5ndGggPCA0ID8gc2VnbWVudC5wdXNoKF9yb3VuZChuZXh0WCksIF9yb3VuZChuZXh0WSksIF9yb3VuZChuZXh0WCksIF9yb3VuZChuZXh0WSkpIDogc2VnbWVudC5sZW5ndGggLT0gMjtcblxuICBpZiAoY2xvc2VkKSB7XG4gICAgc2VnbWVudC5zcGxpY2UoMCwgNik7XG4gICAgc2VnbWVudC5sZW5ndGggPSBzZWdtZW50Lmxlbmd0aCAtIDY7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudDtcbn0gLy9yZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYW4geC95IGNvb3JkaW5hdGUgYW5kIGEgc2VnbWVudCBiZXR3ZWVuIHgxL3kxIGFuZCB4Mi95MlxuXG5mdW5jdGlvbiBwb2ludFRvU2VnRGlzdCh4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICB2YXIgZHggPSB4MiAtIHgxLFxuICAgICAgZHkgPSB5MiAtIHkxLFxuICAgICAgdDtcblxuICBpZiAoZHggfHwgZHkpIHtcbiAgICB0ID0gKCh4IC0geDEpICogZHggKyAoeSAtIHkxKSAqIGR5KSAvIChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICBpZiAodCA+IDEpIHtcbiAgICAgIHgxID0geDI7XG4gICAgICB5MSA9IHkyO1xuICAgIH0gZWxzZSBpZiAodCA+IDApIHtcbiAgICAgIHgxICs9IGR4ICogdDtcbiAgICAgIHkxICs9IGR5ICogdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5wb3coeCAtIHgxLCAyKSArIE1hdGgucG93KHkgLSB5MSwgMik7XG59XG5cbmZ1bmN0aW9uIHNpbXBsaWZ5U3RlcChwb2ludHMsIGZpcnN0LCBsYXN0LCB0b2xlcmFuY2UsIHNpbXBsaWZpZWQpIHtcbiAgdmFyIG1heFNxRGlzdCA9IHRvbGVyYW5jZSxcbiAgICAgIGZpcnN0WCA9IHBvaW50c1tmaXJzdF0sXG4gICAgICBmaXJzdFkgPSBwb2ludHNbZmlyc3QgKyAxXSxcbiAgICAgIGxhc3RYID0gcG9pbnRzW2xhc3RdLFxuICAgICAgbGFzdFkgPSBwb2ludHNbbGFzdCArIDFdLFxuICAgICAgaW5kZXgsXG4gICAgICBpLFxuICAgICAgZDtcblxuICBmb3IgKGkgPSBmaXJzdCArIDI7IGkgPCBsYXN0OyBpICs9IDIpIHtcbiAgICBkID0gcG9pbnRUb1NlZ0Rpc3QocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdLCBmaXJzdFgsIGZpcnN0WSwgbGFzdFgsIGxhc3RZKTtcblxuICAgIGlmIChkID4gbWF4U3FEaXN0KSB7XG4gICAgICBpbmRleCA9IGk7XG4gICAgICBtYXhTcURpc3QgPSBkO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtYXhTcURpc3QgPiB0b2xlcmFuY2UpIHtcbiAgICBpbmRleCAtIGZpcnN0ID4gMiAmJiBzaW1wbGlmeVN0ZXAocG9pbnRzLCBmaXJzdCwgaW5kZXgsIHRvbGVyYW5jZSwgc2ltcGxpZmllZCk7XG4gICAgc2ltcGxpZmllZC5wdXNoKHBvaW50c1tpbmRleF0sIHBvaW50c1tpbmRleCArIDFdKTtcbiAgICBsYXN0IC0gaW5kZXggPiAyICYmIHNpbXBsaWZ5U3RlcChwb2ludHMsIGluZGV4LCBsYXN0LCB0b2xlcmFuY2UsIHNpbXBsaWZpZWQpO1xuICB9XG59IC8vcG9pbnRzIGlzIGFuIGFycmF5IG9mIHgveSB2YWx1ZXMgbGlrZSBbeCwgeSwgeCwgeSwgeCwgeV1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxpZnlQb2ludHMocG9pbnRzLCB0b2xlcmFuY2UpIHtcbiAgdmFyIHByZXZYID0gcGFyc2VGbG9hdChwb2ludHNbMF0pLFxuICAgICAgcHJldlkgPSBwYXJzZUZsb2F0KHBvaW50c1sxXSksXG4gICAgICB0ZW1wID0gW3ByZXZYLCBwcmV2WV0sXG4gICAgICBsID0gcG9pbnRzLmxlbmd0aCAtIDIsXG4gICAgICBpLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBkeCxcbiAgICAgIGR5LFxuICAgICAgcmVzdWx0LFxuICAgICAgbGFzdDtcbiAgdG9sZXJhbmNlID0gTWF0aC5wb3codG9sZXJhbmNlIHx8IDEsIDIpO1xuXG4gIGZvciAoaSA9IDI7IGkgPCBsOyBpICs9IDIpIHtcbiAgICB4ID0gcGFyc2VGbG9hdChwb2ludHNbaV0pO1xuICAgIHkgPSBwYXJzZUZsb2F0KHBvaW50c1tpICsgMV0pO1xuICAgIGR4ID0gcHJldlggLSB4O1xuICAgIGR5ID0gcHJldlkgLSB5O1xuXG4gICAgaWYgKGR4ICogZHggKyBkeSAqIGR5ID4gdG9sZXJhbmNlKSB7XG4gICAgICB0ZW1wLnB1c2goeCwgeSk7XG4gICAgICBwcmV2WCA9IHg7XG4gICAgICBwcmV2WSA9IHk7XG4gICAgfVxuICB9XG5cbiAgdGVtcC5wdXNoKHBhcnNlRmxvYXQocG9pbnRzW2xdKSwgcGFyc2VGbG9hdChwb2ludHNbbCArIDFdKSk7XG4gIGxhc3QgPSB0ZW1wLmxlbmd0aCAtIDI7XG4gIHJlc3VsdCA9IFt0ZW1wWzBdLCB0ZW1wWzFdXTtcbiAgc2ltcGxpZnlTdGVwKHRlbXAsIDAsIGxhc3QsIHRvbGVyYW5jZSwgcmVzdWx0KTtcbiAgcmVzdWx0LnB1c2godGVtcFtsYXN0XSwgdGVtcFtsYXN0ICsgMV0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRDbG9zZXN0UHJvZ3Jlc3NPbkJlemllcihpdGVyYXRpb25zLCBweCwgcHksIHN0YXJ0LCBlbmQsIHNsaWNlcywgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gIHZhciBpbmMgPSAoZW5kIC0gc3RhcnQpIC8gc2xpY2VzLFxuICAgICAgYmVzdCA9IDAsXG4gICAgICB0ID0gc3RhcnQsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGQsXG4gICAgICBkeCxcbiAgICAgIGR5LFxuICAgICAgaW52O1xuICBfYmVzdERpc3RhbmNlID0gX2xhcmdlTnVtO1xuXG4gIHdoaWxlICh0IDw9IGVuZCkge1xuICAgIGludiA9IDEgLSB0O1xuICAgIHggPSBpbnYgKiBpbnYgKiBpbnYgKiB4MCArIDMgKiBpbnYgKiBpbnYgKiB0ICogeDEgKyAzICogaW52ICogdCAqIHQgKiB4MiArIHQgKiB0ICogdCAqIHgzO1xuICAgIHkgPSBpbnYgKiBpbnYgKiBpbnYgKiB5MCArIDMgKiBpbnYgKiBpbnYgKiB0ICogeTEgKyAzICogaW52ICogdCAqIHQgKiB5MiArIHQgKiB0ICogdCAqIHkzO1xuICAgIGR4ID0geCAtIHB4O1xuICAgIGR5ID0geSAtIHB5O1xuICAgIGQgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblxuICAgIGlmIChkIDwgX2Jlc3REaXN0YW5jZSkge1xuICAgICAgX2Jlc3REaXN0YW5jZSA9IGQ7XG4gICAgICBiZXN0ID0gdDtcbiAgICB9XG5cbiAgICB0ICs9IGluYztcbiAgfVxuXG4gIHJldHVybiBpdGVyYXRpb25zID4gMSA/IGdldENsb3Nlc3RQcm9ncmVzc09uQmV6aWVyKGl0ZXJhdGlvbnMgLSAxLCBweCwgcHksIE1hdGgubWF4KGJlc3QgLSBpbmMsIDApLCBNYXRoLm1pbihiZXN0ICsgaW5jLCAxKSwgc2xpY2VzLCB4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIDogYmVzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsb3Nlc3REYXRhKHJhd1BhdGgsIHgsIHksIHNsaWNlcykge1xuICAvL3JldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGNsb3Nlc3QgaiwgaSwgYW5kIHQgKGogaXMgdGhlIHNlZ21lbnQgaW5kZXgsIGkgaXMgdGhlIGluZGV4IG9mIHRoZSBwb2ludCBpbiB0aGF0IHNlZ21lbnQsIGFuZCB0IGlzIHRoZSB0aW1lL3Byb2dyZXNzIGFsb25nIHRoYXQgYmV6aWVyKVxuICB2YXIgY2xvc2VzdCA9IHtcbiAgICBqOiAwLFxuICAgIGk6IDAsXG4gICAgdDogMFxuICB9LFxuICAgICAgYmVzdERpc3RhbmNlID0gX2xhcmdlTnVtLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICB0LFxuICAgICAgc2VnbWVudDtcblxuICBmb3IgKGogPSAwOyBqIDwgcmF3UGF0aC5sZW5ndGg7IGorKykge1xuICAgIHNlZ21lbnQgPSByYXdQYXRoW2pdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNlZ21lbnQubGVuZ3RoOyBpICs9IDYpIHtcbiAgICAgIHQgPSBnZXRDbG9zZXN0UHJvZ3Jlc3NPbkJlemllcigxLCB4LCB5LCAwLCAxLCBzbGljZXMgfHwgMjAsIHNlZ21lbnRbaV0sIHNlZ21lbnRbaSArIDFdLCBzZWdtZW50W2kgKyAyXSwgc2VnbWVudFtpICsgM10sIHNlZ21lbnRbaSArIDRdLCBzZWdtZW50W2kgKyA1XSwgc2VnbWVudFtpICsgNl0sIHNlZ21lbnRbaSArIDddKTtcblxuICAgICAgaWYgKGJlc3REaXN0YW5jZSA+IF9iZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgYmVzdERpc3RhbmNlID0gX2Jlc3REaXN0YW5jZTtcbiAgICAgICAgY2xvc2VzdC5qID0gajtcbiAgICAgICAgY2xvc2VzdC5pID0gaTtcbiAgICAgICAgY2xvc2VzdC50ID0gdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdDtcbn0gLy9zdWJkaXZpZGUgYSBTZWdtZW50IGNsb3Nlc3QgdG8gYSBzcGVjaWZpYyB4LHkgY29vcmRpbmF0ZVxuXG5leHBvcnQgZnVuY3Rpb24gc3ViZGl2aWRlU2VnbWVudE5lYXIoeCwgeSwgc2VnbWVudCwgc2xpY2VzLCBpdGVyYXRpb25zKSB7XG4gIHZhciBsID0gc2VnbWVudC5sZW5ndGgsXG4gICAgICBiZXN0RGlzdGFuY2UgPSBfbGFyZ2VOdW0sXG4gICAgICBiZXN0VCA9IDAsXG4gICAgICBiZXN0U2VnbWVudEluZGV4ID0gMCxcbiAgICAgIHQsXG4gICAgICBpO1xuICBzbGljZXMgPSBzbGljZXMgfHwgMjA7XG4gIGl0ZXJhdGlvbnMgPSBpdGVyYXRpb25zIHx8IDM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gNikge1xuICAgIHQgPSBnZXRDbG9zZXN0UHJvZ3Jlc3NPbkJlemllcigxLCB4LCB5LCAwLCAxLCBzbGljZXMsIHNlZ21lbnRbaV0sIHNlZ21lbnRbaSArIDFdLCBzZWdtZW50W2kgKyAyXSwgc2VnbWVudFtpICsgM10sIHNlZ21lbnRbaSArIDRdLCBzZWdtZW50W2kgKyA1XSwgc2VnbWVudFtpICsgNl0sIHNlZ21lbnRbaSArIDddKTtcblxuICAgIGlmIChiZXN0RGlzdGFuY2UgPiBfYmVzdERpc3RhbmNlKSB7XG4gICAgICBiZXN0RGlzdGFuY2UgPSBfYmVzdERpc3RhbmNlO1xuICAgICAgYmVzdFQgPSB0O1xuICAgICAgYmVzdFNlZ21lbnRJbmRleCA9IGk7XG4gICAgfVxuICB9XG5cbiAgdCA9IGdldENsb3Nlc3RQcm9ncmVzc09uQmV6aWVyKGl0ZXJhdGlvbnMsIHgsIHksIGJlc3RUIC0gMC4wNSwgYmVzdFQgKyAwLjA1LCBzbGljZXMsIHNlZ21lbnRbYmVzdFNlZ21lbnRJbmRleF0sIHNlZ21lbnRbYmVzdFNlZ21lbnRJbmRleCArIDFdLCBzZWdtZW50W2Jlc3RTZWdtZW50SW5kZXggKyAyXSwgc2VnbWVudFtiZXN0U2VnbWVudEluZGV4ICsgM10sIHNlZ21lbnRbYmVzdFNlZ21lbnRJbmRleCArIDRdLCBzZWdtZW50W2Jlc3RTZWdtZW50SW5kZXggKyA1XSwgc2VnbWVudFtiZXN0U2VnbWVudEluZGV4ICsgNl0sIHNlZ21lbnRbYmVzdFNlZ21lbnRJbmRleCArIDddKTtcbiAgc3ViZGl2aWRlU2VnbWVudChzZWdtZW50LCBiZXN0U2VnbWVudEluZGV4LCB0KTtcbiAgcmV0dXJuIGJlc3RTZWdtZW50SW5kZXggKyA2O1xufVxuLypcblRha2VzIGFueSBvZiB0aGUgZm9sbG93aW5nIGFuZCBjb252ZXJ0cyBpdCB0byBhbiBhbGwgQ3ViaWMgQmV6aWVyIFNWRyBkYXRhIHN0cmluZzpcbi0gQSA8cGF0aD4gZGF0YSBzdHJpbmcgbGlrZSBcIk0wLDAgTDIsNCB2MjAsMTUgSDEwMFwiXG4tIEEgUmF3UGF0aCwgbGlrZSBbW3gsIHksIHgsIHksIHgsIHksIHgsIHldW1t4LCB5LCB4LCB5LCB4LCB5LCB4LCB5XV1cbi0gQSBTZWdtZW50LCBsaWtlIFt4LCB5LCB4LCB5LCB4LCB5LCB4LCB5XVxuXG5Ob3RlOiBhbGwgbnVtYmVycyBhcmUgcm91bmRlZCBkb3duIHRvIHRoZSBjbG9zZXN0IDAuMDAxIHRvIG1pbmltaXplIG1lbW9yeSwgbWF4aW1pemUgc3BlZWQsIGFuZCBhdm9pZCBvZGQgbnVtYmVycyBsaWtlIDFlLTEzXG4qL1xuXG5leHBvcnQgZnVuY3Rpb24gcmF3UGF0aFRvU3RyaW5nKHJhd1BhdGgpIHtcbiAgaWYgKF9pc051bWJlcihyYXdQYXRoWzBdKSkge1xuICAgIC8vaW4gY2FzZSBhIHNlZ21lbnQgaXMgcGFzc2VkIGluIGluc3RlYWRcbiAgICByYXdQYXRoID0gW3Jhd1BhdGhdO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBsID0gcmF3UGF0aC5sZW5ndGgsXG4gICAgICBzbCxcbiAgICAgIHMsXG4gICAgICBpLFxuICAgICAgc2VnbWVudDtcblxuICBmb3IgKHMgPSAwOyBzIDwgbDsgcysrKSB7XG4gICAgc2VnbWVudCA9IHJhd1BhdGhbc107XG4gICAgcmVzdWx0ICs9IFwiTVwiICsgX3JvdW5kKHNlZ21lbnRbMF0pICsgXCIsXCIgKyBfcm91bmQoc2VnbWVudFsxXSkgKyBcIiBDXCI7XG4gICAgc2wgPSBzZWdtZW50Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDI7IGkgPCBzbDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gX3JvdW5kKHNlZ21lbnRbaSsrXSkgKyBcIixcIiArIF9yb3VuZChzZWdtZW50W2krK10pICsgXCIgXCIgKyBfcm91bmQoc2VnbWVudFtpKytdKSArIFwiLFwiICsgX3JvdW5kKHNlZ21lbnRbaSsrXSkgKyBcIiBcIiArIF9yb3VuZChzZWdtZW50W2krK10pICsgXCIsXCIgKyBfcm91bmQoc2VnbWVudFtpXSkgKyBcIiBcIjtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudC5jbG9zZWQpIHtcbiAgICAgIHJlc3VsdCArPSBcInpcIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLypcbi8vIHRha2VzIGEgc2VnbWVudCB3aXRoIGNvb3JkaW5hdGVzIFt4LCB5LCB4LCB5LCAuLi5dIGFuZCBjb252ZXJ0cyB0aGUgY29udHJvbCBwb2ludHMgaW50byBhbmdsZXMgYW5kIGxlbmd0aHMgW3gsIHksIGFuZ2xlLCBsZW5ndGgsIGFuZ2xlLCBsZW5ndGgsIHgsIHksIGFuZ2xlLCBsZW5ndGgsIC4uLl0gc28gdGhhdCBpdCBhbmltYXRlcyBtb3JlIGNsZWFubHkgYW5kIGF2b2lkcyBvZGQgYnJlYWtzL2tpbmtzLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFuaW1hdGUgZnJvbSAxIG8nY2xvY2sgdG8gNiBvJ2Nsb2NrLCBpdCdkIGp1c3QgZ28gZGlyZWN0bHkvbGluZWFybHkgcmF0aGVyIHRoYW4gYXJvdW5kLiBTbyB0aGUgbGVuZ3RoIHdvdWxkIGJlIHZlcnkgc2hvcnQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdHdlZW4uXG5leHBvcnQgZnVuY3Rpb24gY3BDb29yZHNUb0FuZ2xlcyhzZWdtZW50LCBjb3B5KSB7XG5cdHZhciByZXN1bHQgPSBjb3B5ID8gc2VnbWVudC5zbGljZSgwKSA6IHNlZ21lbnQsXG5cdFx0eCwgeSwgaTtcblx0Zm9yIChpID0gMDsgaSA8IHNlZ21lbnQubGVuZ3RoOyBpKz02KSB7XG5cdFx0eCA9IHNlZ21lbnRbaSsyXSAtIHNlZ21lbnRbaV07XG5cdFx0eSA9IHNlZ21lbnRbaSszXSAtIHNlZ21lbnRbaSsxXTtcblx0XHRyZXN1bHRbaSsyXSA9IE1hdGguYXRhbjIoeSwgeCk7XG5cdFx0cmVzdWx0W2krM10gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG5cdFx0eCA9IHNlZ21lbnRbaSs2XSAtIHNlZ21lbnRbaSs0XTtcblx0XHR5ID0gc2VnbWVudFtpKzddIC0gc2VnbWVudFtpKzVdO1xuXHRcdHJlc3VsdFtpKzRdID0gTWF0aC5hdGFuMih5LCB4KTtcblx0XHRyZXN1bHRbaSs1XSA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vLyB0YWtlcyBhIHNlZ21lbnQgdGhhdCB3YXMgY29udmVydGVkIHdpdGggY3BDb29yZHNUb0FuZ2xlcygpIHRvIGhhdmUgYW5nbGVzIGFuZCBsZW5ndGhzIGluc3RlYWQgb2YgY29vcmRpbmF0ZXMgZm9yIHRoZSBjb250cm9sIHBvaW50cywgYW5kIGNvbnZlcnRzIGl0IEJBQ0sgaW50byBjb29yZGluYXRlcy5cbmV4cG9ydCBmdW5jdGlvbiBjcEFuZ2xlc1RvQ29vcmRzKHNlZ21lbnQsIGNvcHkpIHtcblx0dmFyIHJlc3VsdCA9IGNvcHkgPyBzZWdtZW50LnNsaWNlKDApIDogc2VnbWVudCxcblx0XHRsZW5ndGggPSBzZWdtZW50Lmxlbmd0aCxcblx0XHRybmQgPSAxMDAwLFxuXHRcdGFuZ2xlLCBsLCBpLCBqO1xuXHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKz02KSB7XG5cdFx0YW5nbGUgPSBzZWdtZW50W2krMl07XG5cdFx0bCA9IHNlZ21lbnRbaSszXTsgLy9sZW5ndGhcblx0XHRyZXN1bHRbaSsyXSA9ICgoKHNlZ21lbnRbaV0gKyBNYXRoLmNvcyhhbmdsZSkgKiBsKSAqIHJuZCkgfCAwKSAvIHJuZDtcblx0XHRyZXN1bHRbaSszXSA9ICgoKHNlZ21lbnRbaSsxXSArIE1hdGguc2luKGFuZ2xlKSAqIGwpICogcm5kKSB8IDApIC8gcm5kO1xuXHRcdGFuZ2xlID0gc2VnbWVudFtpKzRdO1xuXHRcdGwgPSBzZWdtZW50W2krNV07IC8vbGVuZ3RoXG5cdFx0cmVzdWx0W2krNF0gPSAoKChzZWdtZW50W2krNl0gLSBNYXRoLmNvcyhhbmdsZSkgKiBsKSAqIHJuZCkgfCAwKSAvIHJuZDtcblx0XHRyZXN1bHRbaSs1XSA9ICgoKHNlZ21lbnRbaSs3XSAtIE1hdGguc2luKGFuZ2xlKSAqIGwpICogcm5kKSB8IDApIC8gcm5kO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8vYWRkcyBhbiBcImlzU21vb3RoXCIgYXJyYXkgdG8gZWFjaCBzZWdtZW50IGFuZCBwb3B1bGF0ZXMgaXQgd2l0aCBhIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNtb290aCAodGhlIGNvbnRyb2wgcG9pbnRzIGhhdmUgYmFzaWNhbGx5IHRoZSBzYW1lIHNsb3BlKS4gRm9yIGFueSBzbW9vdGggY29udHJvbCBwb2ludHMsIGl0IGNvbnZlcnRzIHRoZSBjb29yZGluYXRlcyBpbnRvIGFuZ2xlICh4LCBpbiByYWRpYW5zKSBhbmQgbGVuZ3RoICh5KSBhbmQgcHV0cyB0aGVtIGludG8gdGhlIHNhbWUgaW5kZXggdmFsdWUgaW4gYSBzbW9vdGhEYXRhIGFycmF5LlxuZXhwb3J0IGZ1bmN0aW9uIHBvcHVsYXRlU21vb3RoRGF0YShyYXdQYXRoKSB7XG5cdGxldCBqID0gcmF3UGF0aC5sZW5ndGgsXG5cdFx0c21vb3RoLCBzZWdtZW50LCB4LCB5LCB4MiwgeTIsIGksIGwsIGEsIGEyLCBpc1Ntb290aCwgc21vb3RoRGF0YTtcblx0d2hpbGUgKC0taiA+IC0xKSB7XG5cdFx0c2VnbWVudCA9IHJhd1BhdGhbal07XG5cdFx0aXNTbW9vdGggPSBzZWdtZW50LmlzU21vb3RoID0gc2VnbWVudC5pc1Ntb290aCB8fCBbMCwgMCwgMCwgMF07XG5cdFx0c21vb3RoRGF0YSA9IHNlZ21lbnQuc21vb3RoRGF0YSA9IHNlZ21lbnQuc21vb3RoRGF0YSB8fCBbMCwgMCwgMCwgMF07XG5cdFx0aXNTbW9vdGgubGVuZ3RoID0gNDtcblx0XHRsID0gc2VnbWVudC5sZW5ndGggLSAyO1xuXHRcdGZvciAoaSA9IDY7IGkgPCBsOyBpICs9IDYpIHtcblx0XHRcdHggPSBzZWdtZW50W2ldIC0gc2VnbWVudFtpIC0gMl07XG5cdFx0XHR5ID0gc2VnbWVudFtpICsgMV0gLSBzZWdtZW50W2kgLSAxXTtcblx0XHRcdHgyID0gc2VnbWVudFtpICsgMl0gLSBzZWdtZW50W2ldO1xuXHRcdFx0eTIgPSBzZWdtZW50W2kgKyAzXSAtIHNlZ21lbnRbaSArIDFdO1xuXHRcdFx0YSA9IF9hdGFuMih5LCB4KTtcblx0XHRcdGEyID0gX2F0YW4yKHkyLCB4Mik7XG5cdFx0XHRzbW9vdGggPSAoTWF0aC5hYnMoYSAtIGEyKSA8IDAuMDkpO1xuXHRcdFx0aWYgKHNtb290aCkge1xuXHRcdFx0XHRzbW9vdGhEYXRhW2kgLSAyXSA9IGE7XG5cdFx0XHRcdHNtb290aERhdGFbaSArIDJdID0gYTI7XG5cdFx0XHRcdHNtb290aERhdGFbaSAtIDFdID0gX3NxcnQoeCAqIHggKyB5ICogeSk7XG5cdFx0XHRcdHNtb290aERhdGFbaSArIDNdID0gX3NxcnQoeDIgKiB4MiArIHkyICogeTIpO1xuXHRcdFx0fVxuXHRcdFx0aXNTbW9vdGgucHVzaChzbW9vdGgsIHNtb290aCwgMCwgMCwgc21vb3RoLCBzbW9vdGgpO1xuXHRcdH1cblx0XHQvL2lmIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHMgYXJlIGlkZW50aWNhbCwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBzbW9vdGggdHJhbnNpdGlvbi4gV2UgbXVzdCBoYW5kbGUgdGhpcyBhIGJpdCBkaWZmZXJlbnRseSBkdWUgdG8gdGhlaXIgcG9zaXRpb25zIGluIHRoZSBhcnJheS5cblx0XHRpZiAoc2VnbWVudFtsXSA9PT0gc2VnbWVudFswXSAmJiBzZWdtZW50W2wrMV0gPT09IHNlZ21lbnRbMV0pIHtcblx0XHRcdHggPSBzZWdtZW50WzBdIC0gc2VnbWVudFtsLTJdO1xuXHRcdFx0eSA9IHNlZ21lbnRbMV0gLSBzZWdtZW50W2wtMV07XG5cdFx0XHR4MiA9IHNlZ21lbnRbMl0gLSBzZWdtZW50WzBdO1xuXHRcdFx0eTIgPSBzZWdtZW50WzNdIC0gc2VnbWVudFsxXTtcblx0XHRcdGEgPSBfYXRhbjIoeSwgeCk7XG5cdFx0XHRhMiA9IF9hdGFuMih5MiwgeDIpO1xuXHRcdFx0aWYgKE1hdGguYWJzKGEgLSBhMikgPCAwLjA5KSB7XG5cdFx0XHRcdHNtb290aERhdGFbbC0yXSA9IGE7XG5cdFx0XHRcdHNtb290aERhdGFbMl0gPSBhMjtcblx0XHRcdFx0c21vb3RoRGF0YVtsLTFdID0gX3NxcnQoeCAqIHggKyB5ICogeSk7XG5cdFx0XHRcdHNtb290aERhdGFbM10gPSBfc3FydCh4MiAqIHgyICsgeTIgKiB5Mik7XG5cdFx0XHRcdGlzU21vb3RoW2wtMl0gPSBpc1Ntb290aFtsLTFdID0gdHJ1ZTsgLy9kb24ndCBjaGFuZ2UgaW5kZXhlcyAyIGFuZCAzIGJlY2F1c2Ugd2UnbGwgdHJpZ2dlciBldmVyeXRoaW5nIGZyb20gdGhlIEVORCwgYW5kIHRoaXMgd2lsbCBvcHRpbWl6ZSBmaWxlIHNpemUgYSBiaXQuXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiByYXdQYXRoO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50VG9TY3JlZW4oc3ZnRWxlbWVudCwgcG9pbnQpIHtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7IC8vYnkgZGVmYXVsdCwgdGFrZSB0aGUgZmlyc3Qgc2V0IG9mIGNvb3JkaW5hdGVzIGluIHRoZSBwYXRoIGFzIHRoZSBwb2ludFxuXHRcdGxldCByYXdQYXRoID0gZ2V0UmF3UGF0aChzdmdFbGVtZW50KTtcblx0XHRwb2ludCA9IHN2Z0VsZW1lbnQub3duZXJTVkdFbGVtZW50LmNyZWF0ZVNWR1BvaW50KCk7XG5cdFx0cG9pbnQueCA9IHJhd1BhdGhbMF1bMF07XG5cdFx0cG9pbnQueSA9IHJhd1BhdGhbMF1bMV07XG5cdH1cblx0cmV0dXJuIHBvaW50Lm1hdHJpeFRyYW5zZm9ybShzdmdFbGVtZW50LmdldFNjcmVlbkNUTSgpKTtcbn1cblxuKi8iLCIvKiFcbiAqIHN0cmluZ3M6IDMuNy4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDIxLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF90cmltRXhwID0gLyheXFxzK3xcXHMrJCkvZztcbmV4cG9ydCB2YXIgZW1vamlFeHAgPSAvKFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0oPzpbXFx1MjAwRFxcdUZFMEZdW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXSl7Mix9fFxcdUQ4M0RcXHVEQzY5KD86XFx1MjAwRCg/Oig/OlxcdUQ4M0RcXHVEQzY5XFx1MjAwRCk/XFx1RDgzRFxcdURDNjd8KD86XFx1RDgzRFxcdURDNjlcXHUyMDBEKT9cXHVEODNEXFx1REM2Nil8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKXxcXHVEODNEXFx1REM2OVxcdTIwMEQoPzpcXHVEODNEXFx1REM2OVxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY2XFx1MjAwRFxcdUQ4M0RcXHVEQzY2fFxcdUQ4M0RcXHVEQzY5XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzY5XFx1MjAwRCk/XFx1RDgzRFxcdURDNjdcXHUyMDBEKD86XFx1RDgzRFtcXHVEQzY2XFx1REM2N10pfFxcdUQ4M0NcXHVERkYzXFx1RkUwRlxcdTIwMERcXHVEODNDXFx1REYwOHwoPzpcXHVEODNDW1xcdURGQzNcXHVERkM0XFx1REZDQV18XFx1RDgzRFtcXHVEQzZFXFx1REM3MVxcdURDNzNcXHVEQzc3XFx1REM4MVxcdURDODJcXHVEQzg2XFx1REM4N1xcdURFNDUtXFx1REU0N1xcdURFNEJcXHVERTREXFx1REU0RVxcdURFQTNcXHVERUI0LVxcdURFQjZdfFxcdUQ4M0VbXFx1REQyNlxcdUREMzctXFx1REQzOVxcdUREM0RcXHVERDNFXFx1RERENi1cXHVEREREXSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pXFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml1cXHVGRTBGfFxcdUQ4M0RcXHVEQzY5KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKVxcdTIwMEQoPzpcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXSl8KD86XFx1RDgzQ1tcXHVERkMzXFx1REZDNFxcdURGQ0FdfFxcdUQ4M0RbXFx1REM2RVxcdURDNkZcXHVEQzcxXFx1REM3M1xcdURDNzdcXHVEQzgxXFx1REM4MlxcdURDODZcXHVEQzg3XFx1REU0NS1cXHVERTQ3XFx1REU0QlxcdURFNERcXHVERTRFXFx1REVBM1xcdURFQjQtXFx1REVCNl18XFx1RDgzRVtcXHVERDI2XFx1REQzNy1cXHVERDM5XFx1REQzQy1cXHVERDNFXFx1RERENi1cXHVERERGXSlcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEZ8XFx1RDgzQ1xcdURERkRcXHVEODNDXFx1RERGMHxcXHVEODNDXFx1RERGNlxcdUQ4M0NcXHVEREU2fFxcdUQ4M0NcXHVEREY0XFx1RDgzQ1xcdURERjJ8XFx1RDgzQ1xcdURERTkoPzpcXHVEODNDW1xcdURERUFcXHVEREVDXFx1RERFRlxcdURERjBcXHVEREYyXFx1RERGNFxcdURERkZdKXxcXHVEODNDXFx1RERGNyg/OlxcdUQ4M0NbXFx1RERFQVxcdURERjRcXHVEREY4XFx1RERGQVxcdURERkNdKXxcXHVEODNDXFx1RERFOCg/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREU5XFx1RERFQi1cXHVEREVFXFx1RERGMC1cXHVEREY1XFx1RERGN1xcdURERkEtXFx1RERGRl0pfCg/OlxcdTI2Rjl8XFx1RDgzQ1tcXHVERkNCXFx1REZDQ118XFx1RDgzRFxcdURENzUpKD86XFx1RkUwRlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdfCg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSlcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXSlcXHVGRTBGfCg/OlxcdUQ4M0RcXHVEQzQxXFx1RkUwRlxcdTIwMERcXHVEODNEXFx1RERFOHxcXHVEODNEXFx1REM2OSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSlcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzRFxcdURDNjlcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzRFxcdURDNjgoPzooPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pXFx1MjAwRFtcXHUyNjk1XFx1MjY5NlxcdTI3MDhdfFxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XSkpXFx1RkUwRnxcXHVEODNDXFx1RERGMig/OlxcdUQ4M0NbXFx1RERFNlxcdURERTgtXFx1RERFRFxcdURERjAtXFx1RERGRl0pfFxcdUQ4M0RcXHVEQzY5XFx1MjAwRCg/OlxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdTI3NjRcXHVGRTBGXFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCg/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKXxcXHVEODNEW1xcdURDNjhcXHVEQzY5XSkpfFxcdUQ4M0NcXHVEREYxKD86XFx1RDgzQ1tcXHVEREU2LVxcdURERThcXHVEREVFXFx1RERGMFxcdURERjctXFx1RERGQlxcdURERkVdKXxcXHVEODNDXFx1RERFRig/OlxcdUQ4M0NbXFx1RERFQVxcdURERjJcXHVEREY0XFx1RERGNV0pfFxcdUQ4M0NcXHVEREVEKD86XFx1RDgzQ1tcXHVEREYwXFx1RERGMlxcdURERjNcXHVEREY3XFx1RERGOVxcdURERkFdKXxcXHVEODNDXFx1RERFQig/OlxcdUQ4M0NbXFx1RERFRS1cXHVEREYwXFx1RERGMlxcdURERjRcXHVEREY3XSl8WyNcXCowLTldXFx1RkUwRlxcdTIwRTN8XFx1RDgzQ1xcdURERTcoPzpcXHVEODNDW1xcdURERTZcXHVEREU3XFx1RERFOS1cXHVEREVGXFx1RERGMS1cXHVEREY0XFx1RERGNi1cXHVEREY5XFx1RERGQlxcdURERkNcXHVEREZFXFx1RERGRl0pfFxcdUQ4M0NcXHVEREU2KD86XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXSl8XFx1RDgzQ1xcdURERkYoPzpcXHVEODNDW1xcdURERTZcXHVEREYyXFx1RERGQ10pfFxcdUQ4M0NcXHVEREY1KD86XFx1RDgzQ1tcXHVEREU2XFx1RERFQS1cXHVEREVEXFx1RERGMC1cXHVEREYzXFx1RERGNy1cXHVEREY5XFx1RERGQ1xcdURERkVdKXxcXHVEODNDXFx1RERGQig/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBXFx1RERFQ1xcdURERUVcXHVEREYzXFx1RERGQV0pfFxcdUQ4M0NcXHVEREYzKD86XFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERUEtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGNFxcdURERjVcXHVEREY3XFx1RERGQVxcdURERkZdKXxcXHVEODNDXFx1REZGNFxcdURCNDBcXHVEQzY3XFx1REI0MFxcdURDNjIoPzpcXHVEQjQwXFx1REM3N1xcdURCNDBcXHVEQzZDXFx1REI0MFxcdURDNzN8XFx1REI0MFxcdURDNzNcXHVEQjQwXFx1REM2M1xcdURCNDBcXHVEQzc0fFxcdURCNDBcXHVEQzY1XFx1REI0MFxcdURDNkVcXHVEQjQwXFx1REM2NylcXHVEQjQwXFx1REM3RnxcXHVEODNEXFx1REM2OCg/OlxcdTIwMEQoPzpcXHUyNzY0XFx1RkUwRlxcdTIwMEQoPzpcXHVEODNEXFx1REM4QlxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY4fCg/Oig/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY2XFx1MjAwRFxcdUQ4M0RcXHVEQzY2fCg/Oig/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY3XFx1MjAwRCg/OlxcdUQ4M0RbXFx1REM2NlxcdURDNjddKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXSl8KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKVxcdTIwMEQoPzpcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXSkpfFxcdUQ4M0NcXHVEREY4KD86XFx1RDgzQ1tcXHVEREU2LVxcdURERUFcXHVEREVDLVxcdURERjRcXHVEREY3LVxcdURERjlcXHVEREZCXFx1RERGRC1cXHVEREZGXSl8XFx1RDgzQ1xcdURERjAoPzpcXHVEODNDW1xcdURERUFcXHVEREVDLVxcdURERUVcXHVEREYyXFx1RERGM1xcdURERjVcXHVEREY3XFx1RERGQ1xcdURERkVcXHVEREZGXSl8XFx1RDgzQ1xcdURERkUoPzpcXHVEODNDW1xcdURERUFcXHVEREY5XSl8XFx1RDgzQ1xcdURERUUoPzpcXHVEODNDW1xcdURERTgtXFx1RERFQVxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOV0pfFxcdUQ4M0NcXHVEREY5KD86XFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERTlcXHVEREVCLVxcdURERURcXHVEREVGLVxcdURERjRcXHVEREY3XFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRl0pfFxcdUQ4M0NcXHVEREVDKD86XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRVxcdURERjEtXFx1RERGM1xcdURERjUtXFx1RERGQVxcdURERkNcXHVEREZFXSl8XFx1RDgzQ1xcdURERkEoPzpcXHVEODNDW1xcdURERTZcXHVEREVDXFx1RERGMlxcdURERjNcXHVEREY4XFx1RERGRVxcdURERkZdKXxcXHVEODNDXFx1RERFQSg/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBXFx1RERFQ1xcdURERURcXHVEREY3LVxcdURERkFdKXxcXHVEODNDXFx1RERGQyg/OlxcdUQ4M0NbXFx1RERFQlxcdURERjhdKXwoPzpcXHUyNkY5fFxcdUQ4M0NbXFx1REZDQlxcdURGQ0NdfFxcdUQ4M0RcXHVERDc1KSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8KD86XFx1RDgzQ1tcXHVERkMzXFx1REZDNFxcdURGQ0FdfFxcdUQ4M0RbXFx1REM2RVxcdURDNzFcXHVEQzczXFx1REM3N1xcdURDODFcXHVEQzgyXFx1REM4NlxcdURDODdcXHVERTQ1LVxcdURFNDdcXHVERTRCXFx1REU0RFxcdURFNEVcXHVERUEzXFx1REVCNC1cXHVERUI2XXxcXHVEODNFW1xcdUREMjZcXHVERDM3LVxcdUREMzlcXHVERDNEXFx1REQzRVxcdURERDYtXFx1RERERF0pKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKXwoPzpbXFx1MjYxRFxcdTI3MEEtXFx1MjcwRF18XFx1RDgzQ1tcXHVERjg1XFx1REZDMlxcdURGQzddfFxcdUQ4M0RbXFx1REM0MlxcdURDNDNcXHVEQzQ2LVxcdURDNTBcXHVEQzY2XFx1REM2N1xcdURDNzBcXHVEQzcyXFx1REM3NC1cXHVEQzc2XFx1REM3OFxcdURDN0NcXHVEQzgzXFx1REM4NVxcdURDQUFcXHVERDc0XFx1REQ3QVxcdUREOTBcXHVERDk1XFx1REQ5NlxcdURFNENcXHVERTRGXFx1REVDMFxcdURFQ0NdfFxcdUQ4M0VbXFx1REQxOC1cXHVERDFDXFx1REQxRVxcdUREMUZcXHVERDMwLVxcdUREMzZcXHVEREQxLVxcdURERDVdKSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8XFx1RDgzRFxcdURDNjgoPzpcXHUyMDBEKD86KD86KD86XFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pXFx1MjAwRCk/XFx1RDgzRFxcdURDNjd8KD86KD86XFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pXFx1MjAwRCk/XFx1RDgzRFxcdURDNjYpfFxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8KD86W1xcdTI2MURcXHUyNkY5XFx1MjcwQS1cXHUyNzBEXXxcXHVEODNDW1xcdURGODVcXHVERkMyLVxcdURGQzRcXHVERkM3XFx1REZDQS1cXHVERkNDXXxcXHVEODNEW1xcdURDNDJcXHVEQzQzXFx1REM0Ni1cXHVEQzUwXFx1REM2Ni1cXHVEQzY5XFx1REM2RVxcdURDNzAtXFx1REM3OFxcdURDN0NcXHVEQzgxLVxcdURDODNcXHVEQzg1LVxcdURDODdcXHVEQ0FBXFx1REQ3NFxcdURENzVcXHVERDdBXFx1REQ5MFxcdUREOTVcXHVERDk2XFx1REU0NS1cXHVERTQ3XFx1REU0Qi1cXHVERTRGXFx1REVBM1xcdURFQjQtXFx1REVCNlxcdURFQzBcXHVERUNDXXxcXHVEODNFW1xcdUREMTgtXFx1REQxQ1xcdUREMUVcXHVERDFGXFx1REQyNlxcdUREMzAtXFx1REQzOVxcdUREM0RcXHVERDNFXFx1REREMS1cXHVEREREXSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3woPzpbXFx1MjMxQVxcdTIzMUJcXHUyM0U5LVxcdTIzRUNcXHUyM0YwXFx1MjNGM1xcdTI1RkRcXHUyNUZFXFx1MjYxNFxcdTI2MTVcXHUyNjQ4LVxcdTI2NTNcXHUyNjdGXFx1MjY5M1xcdTI2QTFcXHUyNkFBXFx1MjZBQlxcdTI2QkRcXHUyNkJFXFx1MjZDNFxcdTI2QzVcXHUyNkNFXFx1MjZENFxcdTI2RUFcXHUyNkYyXFx1MjZGM1xcdTI2RjVcXHUyNkZBXFx1MjZGRFxcdTI3MDVcXHUyNzBBXFx1MjcwQlxcdTI3MjhcXHUyNzRDXFx1Mjc0RVxcdTI3NTMtXFx1Mjc1NVxcdTI3NTdcXHUyNzk1LVxcdTI3OTdcXHUyN0IwXFx1MjdCRlxcdTJCMUJcXHUyQjFDXFx1MkI1MFxcdTJCNTVdfFxcdUQ4M0NbXFx1REMwNFxcdURDQ0ZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1RERFNi1cXHVEREZGXFx1REUwMVxcdURFMUFcXHVERTJGXFx1REUzMi1cXHVERTM2XFx1REUzOC1cXHVERTNBXFx1REU1MFxcdURFNTFcXHVERjAwLVxcdURGMjBcXHVERjJELVxcdURGMzVcXHVERjM3LVxcdURGN0NcXHVERjdFLVxcdURGOTNcXHVERkEwLVxcdURGQ0FcXHVERkNGLVxcdURGRDNcXHVERkUwLVxcdURGRjBcXHVERkY0XFx1REZGOC1cXHVERkZGXXxcXHVEODNEW1xcdURDMDAtXFx1REMzRVxcdURDNDBcXHVEQzQyLVxcdURDRkNcXHVEQ0ZGLVxcdUREM0RcXHVERDRCLVxcdURENEVcXHVERDUwLVxcdURENjdcXHVERDdBXFx1REQ5NVxcdUREOTZcXHVEREE0XFx1RERGQi1cXHVERTRGXFx1REU4MC1cXHVERUM1XFx1REVDQ1xcdURFRDAtXFx1REVEMlxcdURFRUJcXHVERUVDXFx1REVGNC1cXHVERUY4XXxcXHVEODNFW1xcdUREMTAtXFx1REQzQVxcdUREM0MtXFx1REQzRVxcdURENDAtXFx1REQ0NVxcdURENDctXFx1REQ0Q1xcdURENTAtXFx1REQ2QlxcdUREODAtXFx1REQ5N1xcdUREQzBcXHVEREQwLVxcdURERTZdKXwoPzpbI1xcKjAtOVxceEE5XFx4QUVcXHUyMDNDXFx1MjA0OVxcdTIxMjJcXHUyMTM5XFx1MjE5NC1cXHUyMTk5XFx1MjFBOVxcdTIxQUFcXHUyMzFBXFx1MjMxQlxcdTIzMjhcXHUyM0NGXFx1MjNFOS1cXHUyM0YzXFx1MjNGOC1cXHUyM0ZBXFx1MjRDMlxcdTI1QUFcXHUyNUFCXFx1MjVCNlxcdTI1QzBcXHUyNUZCLVxcdTI1RkVcXHUyNjAwLVxcdTI2MDRcXHUyNjBFXFx1MjYxMVxcdTI2MTRcXHUyNjE1XFx1MjYxOFxcdTI2MURcXHUyNjIwXFx1MjYyMlxcdTI2MjNcXHUyNjI2XFx1MjYyQVxcdTI2MkVcXHUyNjJGXFx1MjYzOC1cXHUyNjNBXFx1MjY0MFxcdTI2NDJcXHUyNjQ4LVxcdTI2NTNcXHUyNjYwXFx1MjY2M1xcdTI2NjVcXHUyNjY2XFx1MjY2OFxcdTI2N0JcXHUyNjdGXFx1MjY5Mi1cXHUyNjk3XFx1MjY5OVxcdTI2OUJcXHUyNjlDXFx1MjZBMFxcdTI2QTFcXHUyNkFBXFx1MjZBQlxcdTI2QjBcXHUyNkIxXFx1MjZCRFxcdTI2QkVcXHUyNkM0XFx1MjZDNVxcdTI2QzhcXHUyNkNFXFx1MjZDRlxcdTI2RDFcXHUyNkQzXFx1MjZENFxcdTI2RTlcXHUyNkVBXFx1MjZGMC1cXHUyNkY1XFx1MjZGNy1cXHUyNkZBXFx1MjZGRFxcdTI3MDJcXHUyNzA1XFx1MjcwOC1cXHUyNzBEXFx1MjcwRlxcdTI3MTJcXHUyNzE0XFx1MjcxNlxcdTI3MURcXHUyNzIxXFx1MjcyOFxcdTI3MzNcXHUyNzM0XFx1Mjc0NFxcdTI3NDdcXHUyNzRDXFx1Mjc0RVxcdTI3NTMtXFx1Mjc1NVxcdTI3NTdcXHUyNzYzXFx1Mjc2NFxcdTI3OTUtXFx1Mjc5N1xcdTI3QTFcXHUyN0IwXFx1MjdCRlxcdTI5MzRcXHUyOTM1XFx1MkIwNS1cXHUyQjA3XFx1MkIxQlxcdTJCMUNcXHUyQjUwXFx1MkI1NVxcdTMwMzBcXHUzMDNEXFx1MzI5N1xcdTMyOTldfFxcdUQ4M0NbXFx1REMwNFxcdURDQ0ZcXHVERDcwXFx1REQ3MVxcdUREN0VcXHVERDdGXFx1REQ4RVxcdUREOTEtXFx1REQ5QVxcdURERTYtXFx1RERGRlxcdURFMDFcXHVERTAyXFx1REUxQVxcdURFMkZcXHVERTMyLVxcdURFM0FcXHVERTUwXFx1REU1MVxcdURGMDAtXFx1REYyMVxcdURGMjQtXFx1REY5M1xcdURGOTZcXHVERjk3XFx1REY5OS1cXHVERjlCXFx1REY5RS1cXHVERkYwXFx1REZGMy1cXHVERkY1XFx1REZGNy1cXHVERkZGXXxcXHVEODNEW1xcdURDMDAtXFx1RENGRFxcdURDRkYtXFx1REQzRFxcdURENDktXFx1REQ0RVxcdURENTAtXFx1REQ2N1xcdURENkZcXHVERDcwXFx1REQ3My1cXHVERDdBXFx1REQ4N1xcdUREOEEtXFx1REQ4RFxcdUREOTBcXHVERDk1XFx1REQ5NlxcdUREQTRcXHVEREE1XFx1RERBOFxcdUREQjFcXHVEREIyXFx1RERCQ1xcdUREQzItXFx1RERDNFxcdURERDEtXFx1REREM1xcdUREREMtXFx1RERERVxcdURERTFcXHVEREUzXFx1RERFOFxcdURERUZcXHVEREYzXFx1RERGQS1cXHVERTRGXFx1REU4MC1cXHVERUM1XFx1REVDQi1cXHVERUQyXFx1REVFMC1cXHVERUU1XFx1REVFOVxcdURFRUJcXHVERUVDXFx1REVGMFxcdURFRjMtXFx1REVGOF18XFx1RDgzRVtcXHVERDEwLVxcdUREM0FcXHVERDNDLVxcdUREM0VcXHVERDQwLVxcdURENDVcXHVERDQ3LVxcdURENENcXHVERDUwLVxcdURENkJcXHVERDgwLVxcdUREOTdcXHVEREMwXFx1REREMC1cXHVEREU2XSlcXHVGRTBGKS87XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dChlKSB7XG4gIHZhciB0eXBlID0gZS5ub2RlVHlwZSxcbiAgICAgIHJlc3VsdCA9IFwiXCI7XG5cbiAgaWYgKHR5cGUgPT09IDEgfHwgdHlwZSA9PT0gOSB8fCB0eXBlID09PSAxMSkge1xuICAgIGlmICh0eXBlb2YgZS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIGUudGV4dENvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoZSA9IGUuZmlyc3RDaGlsZDsgZTsgZSA9IGUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgcmVzdWx0ICs9IGdldFRleHQoZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09IDMgfHwgdHlwZSA9PT0gNCkge1xuICAgIHJldHVybiBlLm5vZGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gc3BsaXRJbm5lckhUTUwoZWxlbWVudCwgZGVsaW1pdGVyLCB0cmltKSB7XG4gIHZhciBub2RlID0gZWxlbWVudC5maXJzdENoaWxkLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgcmVzdWx0LnB1c2guYXBwbHkocmVzdWx0LCBlbW9qaVNhZmVTcGxpdCgobm9kZS5ub2RlVmFsdWUgKyBcIlwiKS5yZXBsYWNlKC9eXFxuKy9nLCBcIlwiKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKSwgZGVsaW1pdGVyLCB0cmltKSk7XG4gICAgfSBlbHNlIGlmICgobm9kZS5ub2RlTmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCkgPT09IFwiYnJcIikge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSArPSBcIjxicj5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2gobm9kZS5vdXRlckhUTUwpO1xuICAgIH1cblxuICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qXG4vL3NtYWxsZXIga2IgdmVyc2lvbiB0aGF0IG9ubHkgaGFuZGxlcyB0aGUgc2ltcGxlciBlbW9qaSdzLCB3aGljaCBpcyBvZnRlbiBwZXJmZWN0bHkgYWRlcXVhdGUuXG5cbmxldCBfZW1vamkgPSBcIltcXHVFMDAwLVxcdUY4RkZdfFxcdUQ4M0NbXFx1REMwMC1cXHVERkZGXXxcXHVEODNEW1xcdURDMDAtXFx1REZGRl18W1xcdTI2OTQtXFx1MjY5N118XFx1RDgzRVtcXHVERDEwLVxcdURENURdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl1cIixcblx0X2Vtb2ppRXhwID0gbmV3IFJlZ0V4cChfZW1vamkpLFxuXHRfZW1vamlBbmRDaGFyc0V4cCA9IG5ldyBSZWdFeHAoX2Vtb2ppICsgXCJ8LlwiLCBcImdcIiksXG5cdF9lbW9qaVNhZmVTcGxpdCA9ICh0ZXh0LCBkZWxpbWl0ZXIsIHRyaW0pID0+IHtcblx0XHRpZiAodHJpbSkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZShfdHJpbUV4cCwgXCJcIik7XG5cdFx0fVxuXHRcdHJldHVybiAoKGRlbGltaXRlciA9PT0gXCJcIiB8fCAhZGVsaW1pdGVyKSAmJiBfZW1vamlFeHAudGVzdCh0ZXh0KSkgPyB0ZXh0Lm1hdGNoKF9lbW9qaUFuZENoYXJzRXhwKSA6IHRleHQuc3BsaXQoZGVsaW1pdGVyIHx8IFwiXCIpO1xuXHR9O1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbW9qaVNhZmVTcGxpdCh0ZXh0LCBkZWxpbWl0ZXIsIHRyaW0pIHtcbiAgdGV4dCArPSBcIlwiOyAvLyBtYWtlIHN1cmUgaXQncyBjYXN0IGFzIGEgc3RyaW5nLiBTb21lb25lIG1heSBwYXNzIGluIGEgbnVtYmVyLlxuXG4gIGlmICh0cmltKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShfdHJpbUV4cCwgXCJcIik7XG4gIH1cblxuICBpZiAoZGVsaW1pdGVyICYmIGRlbGltaXRlciAhPT0gXCJcIikge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpLnNwbGl0KGRlbGltaXRlcik7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICBsID0gdGV4dC5sZW5ndGgsXG4gICAgICBpID0gMCxcbiAgICAgIGosXG4gICAgICBjaGFyYWN0ZXI7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICBjaGFyYWN0ZXIgPSB0ZXh0LmNoYXJBdChpKTtcblxuICAgIGlmIChjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSA+PSAweEQ4MDAgJiYgY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgPD0gMHhEQkZGIHx8IHRleHQuY2hhckNvZGVBdChpICsgMSkgPj0gMHhGRTAwICYmIHRleHQuY2hhckNvZGVBdChpICsgMSkgPD0gMHhGRTBGKSB7XG4gICAgICAvL3NwZWNpYWwgZW1vamkgY2hhcmFjdGVycyB1c2UgMiBvciA0IHVuaWNvZGUgY2hhcmFjdGVycyB0aGF0IHdlIG11c3Qga2VlcCB0b2dldGhlci5cbiAgICAgIGogPSAoKHRleHQuc3Vic3RyKGksIDEyKS5zcGxpdChlbW9qaUV4cCkgfHwgW10pWzFdIHx8IFwiXCIpLmxlbmd0aCB8fCAyO1xuICAgICAgY2hhcmFjdGVyID0gdGV4dC5zdWJzdHIoaSwgaik7XG4gICAgICByZXN1bHQuZW1vamkgPSAxO1xuICAgICAgaSArPSBqIC0gMTtcbiAgICB9XG5cbiAgICByZXN1bHQucHVzaChjaGFyYWN0ZXIgPT09IFwiPlwiID8gXCImZ3Q7XCIgOiBjaGFyYWN0ZXIgPT09IFwiPFwiID8gXCImbHQ7XCIgOiBjaGFyYWN0ZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbmFtZWRfcmVmZXJlbmNlc18xID0gcmVxdWlyZShcIi4vbmFtZWQtcmVmZXJlbmNlc1wiKTtcbnZhciBudW1lcmljX3VuaWNvZGVfbWFwXzEgPSByZXF1aXJlKFwiLi9udW1lcmljLXVuaWNvZGUtbWFwXCIpO1xudmFyIHN1cnJvZ2F0ZV9wYWlyc18xID0gcmVxdWlyZShcIi4vc3Vycm9nYXRlLXBhaXJzXCIpO1xudmFyIGFsbE5hbWVkUmVmZXJlbmNlcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBuYW1lZF9yZWZlcmVuY2VzXzEubmFtZWRSZWZlcmVuY2VzKSwgeyBhbGw6IG5hbWVkX3JlZmVyZW5jZXNfMS5uYW1lZFJlZmVyZW5jZXMuaHRtbDUgfSk7XG52YXIgZW5jb2RlUmVnRXhwcyA9IHtcbiAgICBzcGVjaWFsQ2hhcnM6IC9bPD4nXCImXS9nLFxuICAgIG5vbkFzY2lpOiAvKD86Wzw+J1wiJlxcdTAwODAtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXSkvZyxcbiAgICBub25Bc2NpaVByaW50YWJsZTogLyg/Ols8PidcIiZcXHgwMS1cXHgwOFxceDExLVxceDE1XFx4MTctXFx4MUZcXHg3Zi1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKS9nLFxuICAgIGV4dGVuc2l2ZTogLyg/OltcXHgwMS1cXHgwY1xceDBlLVxceDFmXFx4MjEtXFx4MmNcXHgyZS1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3ZFxceDdmLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pL2dcbn07XG52YXIgZGVmYXVsdEVuY29kZU9wdGlvbnMgPSB7XG4gICAgbW9kZTogJ3NwZWNpYWxDaGFycycsXG4gICAgbGV2ZWw6ICdhbGwnLFxuICAgIG51bWVyaWM6ICdkZWNpbWFsJ1xufTtcbi8qKiBFbmNvZGVzIGFsbCB0aGUgbmVjZXNzYXJ5IChzcGVjaWZpZWQgYnkgYGxldmVsYCkgY2hhcmFjdGVycyBpbiB0aGUgdGV4dCAqL1xuZnVuY3Rpb24gZW5jb2RlKHRleHQsIF9hKSB7XG4gICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IGRlZmF1bHRFbmNvZGVPcHRpb25zIDogX2EsIF9jID0gX2IubW9kZSwgbW9kZSA9IF9jID09PSB2b2lkIDAgPyAnc3BlY2lhbENoYXJzJyA6IF9jLCBfZCA9IF9iLm51bWVyaWMsIG51bWVyaWMgPSBfZCA9PT0gdm9pZCAwID8gJ2RlY2ltYWwnIDogX2QsIF9lID0gX2IubGV2ZWwsIGxldmVsID0gX2UgPT09IHZvaWQgMCA/ICdhbGwnIDogX2U7XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIGVuY29kZVJlZ0V4cCA9IGVuY29kZVJlZ0V4cHNbbW9kZV07XG4gICAgdmFyIHJlZmVyZW5jZXMgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmNoYXJhY3RlcnM7XG4gICAgdmFyIGlzSGV4ID0gbnVtZXJpYyA9PT0gJ2hleGFkZWNpbWFsJztcbiAgICBlbmNvZGVSZWdFeHAubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgX2IgPSBlbmNvZGVSZWdFeHAuZXhlYyh0ZXh0KTtcbiAgICB2YXIgX2M7XG4gICAgaWYgKF9iKSB7XG4gICAgICAgIF9jID0gJyc7XG4gICAgICAgIHZhciBfZCA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChfZCAhPT0gX2IuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBfYyArPSB0ZXh0LnN1YnN0cmluZyhfZCwgX2IuaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9lID0gX2JbMF07XG4gICAgICAgICAgICB2YXIgcmVzdWx0XzEgPSByZWZlcmVuY2VzW19lXTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0XzEpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZV8xID0gX2UubGVuZ3RoID4gMSA/IHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChfZSwgMCkgOiBfZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgIHJlc3VsdF8xID0gKGlzSGV4ID8gJyYjeCcgKyBjb2RlXzEudG9TdHJpbmcoMTYpIDogJyYjJyArIGNvZGVfMSkgKyAnOyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfYyArPSByZXN1bHRfMTtcbiAgICAgICAgICAgIF9kID0gX2IuaW5kZXggKyBfZS5sZW5ndGg7XG4gICAgICAgIH0gd2hpbGUgKChfYiA9IGVuY29kZVJlZ0V4cC5leGVjKHRleHQpKSk7XG4gICAgICAgIGlmIChfZCAhPT0gdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIF9jICs9IHRleHQuc3Vic3RyaW5nKF9kKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgX2MgPVxuICAgICAgICAgICAgdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIF9jO1xufVxuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG52YXIgZGVmYXVsdERlY29kZU9wdGlvbnMgPSB7XG4gICAgc2NvcGU6ICdib2R5JyxcbiAgICBsZXZlbDogJ2FsbCdcbn07XG52YXIgc3RyaWN0ID0gLyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOy9nO1xudmFyIGF0dHJpYnV0ZSA9IC8mKD86I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKVs7PV0/L2c7XG52YXIgYmFzZURlY29kZVJlZ0V4cHMgPSB7XG4gICAgeG1sOiB7XG4gICAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSxcbiAgICAgICAgYm9keTogbmFtZWRfcmVmZXJlbmNlc18xLmJvZHlSZWdFeHBzLnhtbFxuICAgIH0sXG4gICAgaHRtbDQ6IHtcbiAgICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMuaHRtbDRcbiAgICB9LFxuICAgIGh0bWw1OiB7XG4gICAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSxcbiAgICAgICAgYm9keTogbmFtZWRfcmVmZXJlbmNlc18xLmJvZHlSZWdFeHBzLmh0bWw1XG4gICAgfVxufTtcbnZhciBkZWNvZGVSZWdFeHBzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VEZWNvZGVSZWdFeHBzKSwgeyBhbGw6IGJhc2VEZWNvZGVSZWdFeHBzLmh0bWw1IH0pO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgb3V0T2ZCb3VuZHNDaGFyID0gZnJvbUNoYXJDb2RlKDY1NTMzKTtcbnZhciBkZWZhdWx0RGVjb2RlRW50aXR5T3B0aW9ucyA9IHtcbiAgICBsZXZlbDogJ2FsbCdcbn07XG4vKiogRGVjb2RlcyBhIHNpbmdsZSBlbnRpdHkgKi9cbmZ1bmN0aW9uIGRlY29kZUVudGl0eShlbnRpdHksIF9hKSB7XG4gICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RGVjb2RlRW50aXR5T3B0aW9ucyA6IF9hKS5sZXZlbCwgbGV2ZWwgPSBfYiA9PT0gdm9pZCAwID8gJ2FsbCcgOiBfYjtcbiAgICBpZiAoIWVudGl0eSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBfYiA9IGVudGl0eTtcbiAgICB2YXIgZGVjb2RlRW50aXR5TGFzdENoYXJfMSA9IGVudGl0eVtlbnRpdHkubGVuZ3RoIC0gMV07XG4gICAgaWYgKGZhbHNlXG4gICAgICAgICYmIGRlY29kZUVudGl0eUxhc3RDaGFyXzEgPT09ICc9Jykge1xuICAgICAgICBfYiA9XG4gICAgICAgICAgICBlbnRpdHk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGZhbHNlXG4gICAgICAgICYmIGRlY29kZUVudGl0eUxhc3RDaGFyXzEgIT09ICc7Jykge1xuICAgICAgICBfYiA9XG4gICAgICAgICAgICBlbnRpdHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMSA9IGFsbE5hbWVkUmVmZXJlbmNlc1tsZXZlbF0uZW50aXRpZXNbZW50aXR5XTtcbiAgICAgICAgaWYgKGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzEpIHtcbiAgICAgICAgICAgIF9iID0gZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlbnRpdHlbMF0gPT09ICcmJyAmJiBlbnRpdHlbMV0gPT09ICcjJykge1xuICAgICAgICAgICAgdmFyIGRlY29kZVNlY29uZENoYXJfMSA9IGVudGl0eVsyXTtcbiAgICAgICAgICAgIHZhciBkZWNvZGVDb2RlXzEgPSBkZWNvZGVTZWNvbmRDaGFyXzEgPT0gJ3gnIHx8IGRlY29kZVNlY29uZENoYXJfMSA9PSAnWCdcbiAgICAgICAgICAgICAgICA/IHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMyksIDE2KVxuICAgICAgICAgICAgICAgIDogcGFyc2VJbnQoZW50aXR5LnN1YnN0cigyKSk7XG4gICAgICAgICAgICBfYiA9XG4gICAgICAgICAgICAgICAgZGVjb2RlQ29kZV8xID49IDB4MTBmZmZmXG4gICAgICAgICAgICAgICAgICAgID8gb3V0T2ZCb3VuZHNDaGFyXG4gICAgICAgICAgICAgICAgICAgIDogZGVjb2RlQ29kZV8xID4gNjU1MzVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc3Vycm9nYXRlX3BhaXJzXzEuZnJvbUNvZGVQb2ludChkZWNvZGVDb2RlXzEpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV8xXSB8fCBkZWNvZGVDb2RlXzEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfYjtcbn1cbmV4cG9ydHMuZGVjb2RlRW50aXR5ID0gZGVjb2RlRW50aXR5O1xuLyoqIERlY29kZXMgYWxsIGVudGl0aWVzIGluIHRoZSB0ZXh0ICovXG5mdW5jdGlvbiBkZWNvZGUodGV4dCwgX2EpIHtcbiAgICB2YXIgZGVjb2RlU2Vjb25kQ2hhcl8xID0gX2EgPT09IHZvaWQgMCA/IGRlZmF1bHREZWNvZGVPcHRpb25zIDogX2EsIGRlY29kZUNvZGVfMSA9IGRlY29kZVNlY29uZENoYXJfMS5sZXZlbCwgbGV2ZWwgPSBkZWNvZGVDb2RlXzEgPT09IHZvaWQgMCA/ICdhbGwnIDogZGVjb2RlQ29kZV8xLCBfYiA9IGRlY29kZVNlY29uZENoYXJfMS5zY29wZSwgc2NvcGUgPSBfYiA9PT0gdm9pZCAwID8gbGV2ZWwgPT09ICd4bWwnID8gJ3N0cmljdCcgOiAnYm9keScgOiBfYjtcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgZGVjb2RlUmVnRXhwID0gZGVjb2RlUmVnRXhwc1tsZXZlbF1bc2NvcGVdO1xuICAgIHZhciByZWZlcmVuY2VzID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5lbnRpdGllcztcbiAgICB2YXIgaXNBdHRyaWJ1dGUgPSBzY29wZSA9PT0gJ2F0dHJpYnV0ZSc7XG4gICAgdmFyIGlzU3RyaWN0ID0gc2NvcGUgPT09ICdzdHJpY3QnO1xuICAgIGRlY29kZVJlZ0V4cC5sYXN0SW5kZXggPSAwO1xuICAgIHZhciByZXBsYWNlTWF0Y2hfMSA9IGRlY29kZVJlZ0V4cC5leGVjKHRleHQpO1xuICAgIHZhciByZXBsYWNlUmVzdWx0XzE7XG4gICAgaWYgKHJlcGxhY2VNYXRjaF8xKSB7XG4gICAgICAgIHJlcGxhY2VSZXN1bHRfMSA9ICcnO1xuICAgICAgICB2YXIgcmVwbGFjZUxhc3RJbmRleF8xID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKHJlcGxhY2VMYXN0SW5kZXhfMSAhPT0gcmVwbGFjZU1hdGNoXzEuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXBsYWNlUmVzdWx0XzEgKz0gdGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleF8xLCByZXBsYWNlTWF0Y2hfMS5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVwbGFjZUlucHV0XzEgPSByZXBsYWNlTWF0Y2hfMVswXTtcbiAgICAgICAgICAgIHZhciBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xO1xuICAgICAgICAgICAgdmFyIGRlY29kZUVudGl0eUxhc3RDaGFyXzIgPSByZXBsYWNlSW5wdXRfMVtyZXBsYWNlSW5wdXRfMS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChpc0F0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICYmIGRlY29kZUVudGl0eUxhc3RDaGFyXzIgPT09ICc9Jykge1xuICAgICAgICAgICAgICAgIGRlY29kZVJlc3VsdF8xID0gcmVwbGFjZUlucHV0XzE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1N0cmljdFxuICAgICAgICAgICAgICAgICYmIGRlY29kZUVudGl0eUxhc3RDaGFyXzIgIT09ICc7Jykge1xuICAgICAgICAgICAgICAgIGRlY29kZVJlc3VsdF8xID0gcmVwbGFjZUlucHV0XzE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMiA9IHJlZmVyZW5jZXNbcmVwbGFjZUlucHV0XzFdO1xuICAgICAgICAgICAgICAgIGlmIChkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY29kZVJlc3VsdF8xID0gZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVwbGFjZUlucHV0XzFbMF0gPT09ICcmJyAmJiByZXBsYWNlSW5wdXRfMVsxXSA9PT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNvZGVTZWNvbmRDaGFyXzIgPSByZXBsYWNlSW5wdXRfMVsyXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY29kZUNvZGVfMiA9IGRlY29kZVNlY29uZENoYXJfMiA9PSAneCcgfHwgZGVjb2RlU2Vjb25kQ2hhcl8yID09ICdYJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyZXBsYWNlSW5wdXRfMS5zdWJzdHIoMyksIDE2KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwYXJzZUludChyZXBsYWNlSW5wdXRfMS5zdWJzdHIoMikpO1xuICAgICAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVDb2RlXzIgPj0gMHgxMGZmZmZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG91dE9mQm91bmRzQ2hhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGVjb2RlQ29kZV8yID4gNjU1MzVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzdXJyb2dhdGVfcGFpcnNfMS5mcm9tQ29kZVBvaW50KGRlY29kZUNvZGVfMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmcm9tQ2hhckNvZGUobnVtZXJpY191bmljb2RlX21hcF8xLm51bWVyaWNVbmljb2RlTWFwW2RlY29kZUNvZGVfMl0gfHwgZGVjb2RlQ29kZV8yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXBsYWNlUmVzdWx0XzEgKz0gZGVjb2RlUmVzdWx0XzE7XG4gICAgICAgICAgICByZXBsYWNlTGFzdEluZGV4XzEgPSByZXBsYWNlTWF0Y2hfMS5pbmRleCArIHJlcGxhY2VJbnB1dF8xLmxlbmd0aDtcbiAgICAgICAgfSB3aGlsZSAoKHJlcGxhY2VNYXRjaF8xID0gZGVjb2RlUmVnRXhwLmV4ZWModGV4dCkpKTtcbiAgICAgICAgaWYgKHJlcGxhY2VMYXN0SW5kZXhfMSAhPT0gdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSB0ZXh0LnN1YnN0cmluZyhyZXBsYWNlTGFzdEluZGV4XzEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBsYWNlUmVzdWx0XzEgPVxuICAgICAgICAgICAgdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcGxhY2VSZXN1bHRfMTtcbn1cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmJvZHlSZWdFeHBzPXt4bWw6LyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZyxodG1sNDovJig/Om5ic3B8aWV4Y2x8Y2VudHxwb3VuZHxjdXJyZW58eWVufGJydmJhcnxzZWN0fHVtbHxjb3B5fG9yZGZ8bGFxdW98bm90fHNoeXxyZWd8bWFjcnxkZWd8cGx1c21ufHN1cDJ8c3VwM3xhY3V0ZXxtaWNyb3xwYXJhfG1pZGRvdHxjZWRpbHxzdXAxfG9yZG18cmFxdW98ZnJhYzE0fGZyYWMxMnxmcmFjMzR8aXF1ZXN0fEFncmF2ZXxBYWN1dGV8QWNpcmN8QXRpbGRlfEF1bWx8QXJpbmd8QUVsaWd8Q2NlZGlsfEVncmF2ZXxFYWN1dGV8RWNpcmN8RXVtbHxJZ3JhdmV8SWFjdXRlfEljaXJjfEl1bWx8RVRIfE50aWxkZXxPZ3JhdmV8T2FjdXRlfE9jaXJjfE90aWxkZXxPdW1sfHRpbWVzfE9zbGFzaHxVZ3JhdmV8VWFjdXRlfFVjaXJjfFV1bWx8WWFjdXRlfFRIT1JOfHN6bGlnfGFncmF2ZXxhYWN1dGV8YWNpcmN8YXRpbGRlfGF1bWx8YXJpbmd8YWVsaWd8Y2NlZGlsfGVncmF2ZXxlYWN1dGV8ZWNpcmN8ZXVtbHxpZ3JhdmV8aWFjdXRlfGljaXJjfGl1bWx8ZXRofG50aWxkZXxvZ3JhdmV8b2FjdXRlfG9jaXJjfG90aWxkZXxvdW1sfGRpdmlkZXxvc2xhc2h8dWdyYXZlfHVhY3V0ZXx1Y2lyY3x1dW1sfHlhY3V0ZXx0aG9ybnx5dW1sfHF1b3R8YW1wfGx0fGd0fCNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7Py9nLGh0bWw1Oi8mKD86QUVsaWd8QU1QfEFhY3V0ZXxBY2lyY3xBZ3JhdmV8QXJpbmd8QXRpbGRlfEF1bWx8Q09QWXxDY2VkaWx8RVRIfEVhY3V0ZXxFY2lyY3xFZ3JhdmV8RXVtbHxHVHxJYWN1dGV8SWNpcmN8SWdyYXZlfEl1bWx8TFR8TnRpbGRlfE9hY3V0ZXxPY2lyY3xPZ3JhdmV8T3NsYXNofE90aWxkZXxPdW1sfFFVT1R8UkVHfFRIT1JOfFVhY3V0ZXxVY2lyY3xVZ3JhdmV8VXVtbHxZYWN1dGV8YWFjdXRlfGFjaXJjfGFjdXRlfGFlbGlnfGFncmF2ZXxhbXB8YXJpbmd8YXRpbGRlfGF1bWx8YnJ2YmFyfGNjZWRpbHxjZWRpbHxjZW50fGNvcHl8Y3VycmVufGRlZ3xkaXZpZGV8ZWFjdXRlfGVjaXJjfGVncmF2ZXxldGh8ZXVtbHxmcmFjMTJ8ZnJhYzE0fGZyYWMzNHxndHxpYWN1dGV8aWNpcmN8aWV4Y2x8aWdyYXZlfGlxdWVzdHxpdW1sfGxhcXVvfGx0fG1hY3J8bWljcm98bWlkZG90fG5ic3B8bm90fG50aWxkZXxvYWN1dGV8b2NpcmN8b2dyYXZlfG9yZGZ8b3JkbXxvc2xhc2h8b3RpbGRlfG91bWx8cGFyYXxwbHVzbW58cG91bmR8cXVvdHxyYXF1b3xyZWd8c2VjdHxzaHl8c3VwMXxzdXAyfHN1cDN8c3psaWd8dGhvcm58dGltZXN8dWFjdXRlfHVjaXJjfHVncmF2ZXx1bWx8dXVtbHx5YWN1dGV8eWVufHl1bWx8I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2d9O2V4cG9ydHMubmFtZWRSZWZlcmVuY2VzPXt4bWw6e2VudGl0aWVzOntcIiZsdDtcIjpcIjxcIixcIiZndDtcIjpcIj5cIixcIiZxdW90O1wiOidcIicsXCImYXBvcztcIjpcIidcIixcIiZhbXA7XCI6XCImXCJ9LGNoYXJhY3RlcnM6e1wiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImcXVvdDtcIixcIidcIjpcIiZhcG9zO1wiLFwiJlwiOlwiJmFtcDtcIn19LGh0bWw0OntlbnRpdGllczp7XCImYXBvcztcIjpcIidcIixcIiZuYnNwXCI6XCLCoFwiLFwiJm5ic3A7XCI6XCLCoFwiLFwiJmlleGNsXCI6XCLCoVwiLFwiJmlleGNsO1wiOlwiwqFcIixcIiZjZW50XCI6XCLColwiLFwiJmNlbnQ7XCI6XCLColwiLFwiJnBvdW5kXCI6XCLCo1wiLFwiJnBvdW5kO1wiOlwiwqNcIixcIiZjdXJyZW5cIjpcIsKkXCIsXCImY3VycmVuO1wiOlwiwqRcIixcIiZ5ZW5cIjpcIsKlXCIsXCImeWVuO1wiOlwiwqVcIixcIiZicnZiYXJcIjpcIsKmXCIsXCImYnJ2YmFyO1wiOlwiwqZcIixcIiZzZWN0XCI6XCLCp1wiLFwiJnNlY3Q7XCI6XCLCp1wiLFwiJnVtbFwiOlwiwqhcIixcIiZ1bWw7XCI6XCLCqFwiLFwiJmNvcHlcIjpcIsKpXCIsXCImY29weTtcIjpcIsKpXCIsXCImb3JkZlwiOlwiwqpcIixcIiZvcmRmO1wiOlwiwqpcIixcIiZsYXF1b1wiOlwiwqtcIixcIiZsYXF1bztcIjpcIsKrXCIsXCImbm90XCI6XCLCrFwiLFwiJm5vdDtcIjpcIsKsXCIsXCImc2h5XCI6XCLCrVwiLFwiJnNoeTtcIjpcIsKtXCIsXCImcmVnXCI6XCLCrlwiLFwiJnJlZztcIjpcIsKuXCIsXCImbWFjclwiOlwiwq9cIixcIiZtYWNyO1wiOlwiwq9cIixcIiZkZWdcIjpcIsKwXCIsXCImZGVnO1wiOlwiwrBcIixcIiZwbHVzbW5cIjpcIsKxXCIsXCImcGx1c21uO1wiOlwiwrFcIixcIiZzdXAyXCI6XCLCslwiLFwiJnN1cDI7XCI6XCLCslwiLFwiJnN1cDNcIjpcIsKzXCIsXCImc3VwMztcIjpcIsKzXCIsXCImYWN1dGVcIjpcIsK0XCIsXCImYWN1dGU7XCI6XCLCtFwiLFwiJm1pY3JvXCI6XCLCtVwiLFwiJm1pY3JvO1wiOlwiwrVcIixcIiZwYXJhXCI6XCLCtlwiLFwiJnBhcmE7XCI6XCLCtlwiLFwiJm1pZGRvdFwiOlwiwrdcIixcIiZtaWRkb3Q7XCI6XCLCt1wiLFwiJmNlZGlsXCI6XCLCuFwiLFwiJmNlZGlsO1wiOlwiwrhcIixcIiZzdXAxXCI6XCLCuVwiLFwiJnN1cDE7XCI6XCLCuVwiLFwiJm9yZG1cIjpcIsK6XCIsXCImb3JkbTtcIjpcIsK6XCIsXCImcmFxdW9cIjpcIsK7XCIsXCImcmFxdW87XCI6XCLCu1wiLFwiJmZyYWMxNFwiOlwiwrxcIixcIiZmcmFjMTQ7XCI6XCLCvFwiLFwiJmZyYWMxMlwiOlwiwr1cIixcIiZmcmFjMTI7XCI6XCLCvVwiLFwiJmZyYWMzNFwiOlwiwr5cIixcIiZmcmFjMzQ7XCI6XCLCvlwiLFwiJmlxdWVzdFwiOlwiwr9cIixcIiZpcXVlc3Q7XCI6XCLCv1wiLFwiJkFncmF2ZVwiOlwiw4BcIixcIiZBZ3JhdmU7XCI6XCLDgFwiLFwiJkFhY3V0ZVwiOlwiw4FcIixcIiZBYWN1dGU7XCI6XCLDgVwiLFwiJkFjaXJjXCI6XCLDglwiLFwiJkFjaXJjO1wiOlwiw4JcIixcIiZBdGlsZGVcIjpcIsODXCIsXCImQXRpbGRlO1wiOlwiw4NcIixcIiZBdW1sXCI6XCLDhFwiLFwiJkF1bWw7XCI6XCLDhFwiLFwiJkFyaW5nXCI6XCLDhVwiLFwiJkFyaW5nO1wiOlwiw4VcIixcIiZBRWxpZ1wiOlwiw4ZcIixcIiZBRWxpZztcIjpcIsOGXCIsXCImQ2NlZGlsXCI6XCLDh1wiLFwiJkNjZWRpbDtcIjpcIsOHXCIsXCImRWdyYXZlXCI6XCLDiFwiLFwiJkVncmF2ZTtcIjpcIsOIXCIsXCImRWFjdXRlXCI6XCLDiVwiLFwiJkVhY3V0ZTtcIjpcIsOJXCIsXCImRWNpcmNcIjpcIsOKXCIsXCImRWNpcmM7XCI6XCLDilwiLFwiJkV1bWxcIjpcIsOLXCIsXCImRXVtbDtcIjpcIsOLXCIsXCImSWdyYXZlXCI6XCLDjFwiLFwiJklncmF2ZTtcIjpcIsOMXCIsXCImSWFjdXRlXCI6XCLDjVwiLFwiJklhY3V0ZTtcIjpcIsONXCIsXCImSWNpcmNcIjpcIsOOXCIsXCImSWNpcmM7XCI6XCLDjlwiLFwiJkl1bWxcIjpcIsOPXCIsXCImSXVtbDtcIjpcIsOPXCIsXCImRVRIXCI6XCLDkFwiLFwiJkVUSDtcIjpcIsOQXCIsXCImTnRpbGRlXCI6XCLDkVwiLFwiJk50aWxkZTtcIjpcIsORXCIsXCImT2dyYXZlXCI6XCLDklwiLFwiJk9ncmF2ZTtcIjpcIsOSXCIsXCImT2FjdXRlXCI6XCLDk1wiLFwiJk9hY3V0ZTtcIjpcIsOTXCIsXCImT2NpcmNcIjpcIsOUXCIsXCImT2NpcmM7XCI6XCLDlFwiLFwiJk90aWxkZVwiOlwiw5VcIixcIiZPdGlsZGU7XCI6XCLDlVwiLFwiJk91bWxcIjpcIsOWXCIsXCImT3VtbDtcIjpcIsOWXCIsXCImdGltZXNcIjpcIsOXXCIsXCImdGltZXM7XCI6XCLDl1wiLFwiJk9zbGFzaFwiOlwiw5hcIixcIiZPc2xhc2g7XCI6XCLDmFwiLFwiJlVncmF2ZVwiOlwiw5lcIixcIiZVZ3JhdmU7XCI6XCLDmVwiLFwiJlVhY3V0ZVwiOlwiw5pcIixcIiZVYWN1dGU7XCI6XCLDmlwiLFwiJlVjaXJjXCI6XCLDm1wiLFwiJlVjaXJjO1wiOlwiw5tcIixcIiZVdW1sXCI6XCLDnFwiLFwiJlV1bWw7XCI6XCLDnFwiLFwiJllhY3V0ZVwiOlwiw51cIixcIiZZYWN1dGU7XCI6XCLDnVwiLFwiJlRIT1JOXCI6XCLDnlwiLFwiJlRIT1JOO1wiOlwiw55cIixcIiZzemxpZ1wiOlwiw59cIixcIiZzemxpZztcIjpcIsOfXCIsXCImYWdyYXZlXCI6XCLDoFwiLFwiJmFncmF2ZTtcIjpcIsOgXCIsXCImYWFjdXRlXCI6XCLDoVwiLFwiJmFhY3V0ZTtcIjpcIsOhXCIsXCImYWNpcmNcIjpcIsOiXCIsXCImYWNpcmM7XCI6XCLDolwiLFwiJmF0aWxkZVwiOlwiw6NcIixcIiZhdGlsZGU7XCI6XCLDo1wiLFwiJmF1bWxcIjpcIsOkXCIsXCImYXVtbDtcIjpcIsOkXCIsXCImYXJpbmdcIjpcIsOlXCIsXCImYXJpbmc7XCI6XCLDpVwiLFwiJmFlbGlnXCI6XCLDplwiLFwiJmFlbGlnO1wiOlwiw6ZcIixcIiZjY2VkaWxcIjpcIsOnXCIsXCImY2NlZGlsO1wiOlwiw6dcIixcIiZlZ3JhdmVcIjpcIsOoXCIsXCImZWdyYXZlO1wiOlwiw6hcIixcIiZlYWN1dGVcIjpcIsOpXCIsXCImZWFjdXRlO1wiOlwiw6lcIixcIiZlY2lyY1wiOlwiw6pcIixcIiZlY2lyYztcIjpcIsOqXCIsXCImZXVtbFwiOlwiw6tcIixcIiZldW1sO1wiOlwiw6tcIixcIiZpZ3JhdmVcIjpcIsOsXCIsXCImaWdyYXZlO1wiOlwiw6xcIixcIiZpYWN1dGVcIjpcIsOtXCIsXCImaWFjdXRlO1wiOlwiw61cIixcIiZpY2lyY1wiOlwiw65cIixcIiZpY2lyYztcIjpcIsOuXCIsXCImaXVtbFwiOlwiw69cIixcIiZpdW1sO1wiOlwiw69cIixcIiZldGhcIjpcIsOwXCIsXCImZXRoO1wiOlwiw7BcIixcIiZudGlsZGVcIjpcIsOxXCIsXCImbnRpbGRlO1wiOlwiw7FcIixcIiZvZ3JhdmVcIjpcIsOyXCIsXCImb2dyYXZlO1wiOlwiw7JcIixcIiZvYWN1dGVcIjpcIsOzXCIsXCImb2FjdXRlO1wiOlwiw7NcIixcIiZvY2lyY1wiOlwiw7RcIixcIiZvY2lyYztcIjpcIsO0XCIsXCImb3RpbGRlXCI6XCLDtVwiLFwiJm90aWxkZTtcIjpcIsO1XCIsXCImb3VtbFwiOlwiw7ZcIixcIiZvdW1sO1wiOlwiw7ZcIixcIiZkaXZpZGVcIjpcIsO3XCIsXCImZGl2aWRlO1wiOlwiw7dcIixcIiZvc2xhc2hcIjpcIsO4XCIsXCImb3NsYXNoO1wiOlwiw7hcIixcIiZ1Z3JhdmVcIjpcIsO5XCIsXCImdWdyYXZlO1wiOlwiw7lcIixcIiZ1YWN1dGVcIjpcIsO6XCIsXCImdWFjdXRlO1wiOlwiw7pcIixcIiZ1Y2lyY1wiOlwiw7tcIixcIiZ1Y2lyYztcIjpcIsO7XCIsXCImdXVtbFwiOlwiw7xcIixcIiZ1dW1sO1wiOlwiw7xcIixcIiZ5YWN1dGVcIjpcIsO9XCIsXCImeWFjdXRlO1wiOlwiw71cIixcIiZ0aG9yblwiOlwiw75cIixcIiZ0aG9ybjtcIjpcIsO+XCIsXCImeXVtbFwiOlwiw79cIixcIiZ5dW1sO1wiOlwiw79cIixcIiZxdW90XCI6J1wiJyxcIiZxdW90O1wiOidcIicsXCImYW1wXCI6XCImXCIsXCImYW1wO1wiOlwiJlwiLFwiJmx0XCI6XCI8XCIsXCImbHQ7XCI6XCI8XCIsXCImZ3RcIjpcIj5cIixcIiZndDtcIjpcIj5cIixcIiZPRWxpZztcIjpcIsWSXCIsXCImb2VsaWc7XCI6XCLFk1wiLFwiJlNjYXJvbjtcIjpcIsWgXCIsXCImc2Nhcm9uO1wiOlwixaFcIixcIiZZdW1sO1wiOlwixbhcIixcIiZjaXJjO1wiOlwiy4ZcIixcIiZ0aWxkZTtcIjpcIsucXCIsXCImZW5zcDtcIjpcIuKAglwiLFwiJmVtc3A7XCI6XCLigINcIixcIiZ0aGluc3A7XCI6XCLigIlcIixcIiZ6d25qO1wiOlwi4oCMXCIsXCImendqO1wiOlwi4oCNXCIsXCImbHJtO1wiOlwi4oCOXCIsXCImcmxtO1wiOlwi4oCPXCIsXCImbmRhc2g7XCI6XCLigJNcIixcIiZtZGFzaDtcIjpcIuKAlFwiLFwiJmxzcXVvO1wiOlwi4oCYXCIsXCImcnNxdW87XCI6XCLigJlcIixcIiZzYnF1bztcIjpcIuKAmlwiLFwiJmxkcXVvO1wiOlwi4oCcXCIsXCImcmRxdW87XCI6XCLigJ1cIixcIiZiZHF1bztcIjpcIuKAnlwiLFwiJmRhZ2dlcjtcIjpcIuKAoFwiLFwiJkRhZ2dlcjtcIjpcIuKAoVwiLFwiJnBlcm1pbDtcIjpcIuKAsFwiLFwiJmxzYXF1bztcIjpcIuKAuVwiLFwiJnJzYXF1bztcIjpcIuKAulwiLFwiJmV1cm87XCI6XCLigqxcIixcIiZmbm9mO1wiOlwixpJcIixcIiZBbHBoYTtcIjpcIs6RXCIsXCImQmV0YTtcIjpcIs6SXCIsXCImR2FtbWE7XCI6XCLOk1wiLFwiJkRlbHRhO1wiOlwizpRcIixcIiZFcHNpbG9uO1wiOlwizpVcIixcIiZaZXRhO1wiOlwizpZcIixcIiZFdGE7XCI6XCLOl1wiLFwiJlRoZXRhO1wiOlwizphcIixcIiZJb3RhO1wiOlwizplcIixcIiZLYXBwYTtcIjpcIs6aXCIsXCImTGFtYmRhO1wiOlwizptcIixcIiZNdTtcIjpcIs6cXCIsXCImTnU7XCI6XCLOnVwiLFwiJlhpO1wiOlwizp5cIixcIiZPbWljcm9uO1wiOlwizp9cIixcIiZQaTtcIjpcIs6gXCIsXCImUmhvO1wiOlwizqFcIixcIiZTaWdtYTtcIjpcIs6jXCIsXCImVGF1O1wiOlwizqRcIixcIiZVcHNpbG9uO1wiOlwizqVcIixcIiZQaGk7XCI6XCLOplwiLFwiJkNoaTtcIjpcIs6nXCIsXCImUHNpO1wiOlwizqhcIixcIiZPbWVnYTtcIjpcIs6pXCIsXCImYWxwaGE7XCI6XCLOsVwiLFwiJmJldGE7XCI6XCLOslwiLFwiJmdhbW1hO1wiOlwizrNcIixcIiZkZWx0YTtcIjpcIs60XCIsXCImZXBzaWxvbjtcIjpcIs61XCIsXCImemV0YTtcIjpcIs62XCIsXCImZXRhO1wiOlwizrdcIixcIiZ0aGV0YTtcIjpcIs64XCIsXCImaW90YTtcIjpcIs65XCIsXCIma2FwcGE7XCI6XCLOulwiLFwiJmxhbWJkYTtcIjpcIs67XCIsXCImbXU7XCI6XCLOvFwiLFwiJm51O1wiOlwizr1cIixcIiZ4aTtcIjpcIs6+XCIsXCImb21pY3JvbjtcIjpcIs6/XCIsXCImcGk7XCI6XCLPgFwiLFwiJnJobztcIjpcIs+BXCIsXCImc2lnbWFmO1wiOlwiz4JcIixcIiZzaWdtYTtcIjpcIs+DXCIsXCImdGF1O1wiOlwiz4RcIixcIiZ1cHNpbG9uO1wiOlwiz4VcIixcIiZwaGk7XCI6XCLPhlwiLFwiJmNoaTtcIjpcIs+HXCIsXCImcHNpO1wiOlwiz4hcIixcIiZvbWVnYTtcIjpcIs+JXCIsXCImdGhldGFzeW07XCI6XCLPkVwiLFwiJnVwc2loO1wiOlwiz5JcIixcIiZwaXY7XCI6XCLPllwiLFwiJmJ1bGw7XCI6XCLigKJcIixcIiZoZWxsaXA7XCI6XCLigKZcIixcIiZwcmltZTtcIjpcIuKAslwiLFwiJlByaW1lO1wiOlwi4oCzXCIsXCImb2xpbmU7XCI6XCLigL5cIixcIiZmcmFzbDtcIjpcIuKBhFwiLFwiJndlaWVycDtcIjpcIuKEmFwiLFwiJmltYWdlO1wiOlwi4oSRXCIsXCImcmVhbDtcIjpcIuKEnFwiLFwiJnRyYWRlO1wiOlwi4oSiXCIsXCImYWxlZnN5bTtcIjpcIuKEtVwiLFwiJmxhcnI7XCI6XCLihpBcIixcIiZ1YXJyO1wiOlwi4oaRXCIsXCImcmFycjtcIjpcIuKGklwiLFwiJmRhcnI7XCI6XCLihpNcIixcIiZoYXJyO1wiOlwi4oaUXCIsXCImY3JhcnI7XCI6XCLihrVcIixcIiZsQXJyO1wiOlwi4oeQXCIsXCImdUFycjtcIjpcIuKHkVwiLFwiJnJBcnI7XCI6XCLih5JcIixcIiZkQXJyO1wiOlwi4oeTXCIsXCImaEFycjtcIjpcIuKHlFwiLFwiJmZvcmFsbDtcIjpcIuKIgFwiLFwiJnBhcnQ7XCI6XCLiiIJcIixcIiZleGlzdDtcIjpcIuKIg1wiLFwiJmVtcHR5O1wiOlwi4oiFXCIsXCImbmFibGE7XCI6XCLiiIdcIixcIiZpc2luO1wiOlwi4oiIXCIsXCImbm90aW47XCI6XCLiiIlcIixcIiZuaTtcIjpcIuKIi1wiLFwiJnByb2Q7XCI6XCLiiI9cIixcIiZzdW07XCI6XCLiiJFcIixcIiZtaW51cztcIjpcIuKIklwiLFwiJmxvd2FzdDtcIjpcIuKIl1wiLFwiJnJhZGljO1wiOlwi4oiaXCIsXCImcHJvcDtcIjpcIuKInVwiLFwiJmluZmluO1wiOlwi4oieXCIsXCImYW5nO1wiOlwi4oigXCIsXCImYW5kO1wiOlwi4oinXCIsXCImb3I7XCI6XCLiiKhcIixcIiZjYXA7XCI6XCLiiKlcIixcIiZjdXA7XCI6XCLiiKpcIixcIiZpbnQ7XCI6XCLiiKtcIixcIiZ0aGVyZTQ7XCI6XCLiiLRcIixcIiZzaW07XCI6XCLiiLxcIixcIiZjb25nO1wiOlwi4omFXCIsXCImYXN5bXA7XCI6XCLiiYhcIixcIiZuZTtcIjpcIuKJoFwiLFwiJmVxdWl2O1wiOlwi4omhXCIsXCImbGU7XCI6XCLiiaRcIixcIiZnZTtcIjpcIuKJpVwiLFwiJnN1YjtcIjpcIuKKglwiLFwiJnN1cDtcIjpcIuKKg1wiLFwiJm5zdWI7XCI6XCLiioRcIixcIiZzdWJlO1wiOlwi4oqGXCIsXCImc3VwZTtcIjpcIuKKh1wiLFwiJm9wbHVzO1wiOlwi4oqVXCIsXCImb3RpbWVzO1wiOlwi4oqXXCIsXCImcGVycDtcIjpcIuKKpVwiLFwiJnNkb3Q7XCI6XCLii4VcIixcIiZsY2VpbDtcIjpcIuKMiFwiLFwiJnJjZWlsO1wiOlwi4oyJXCIsXCImbGZsb29yO1wiOlwi4oyKXCIsXCImcmZsb29yO1wiOlwi4oyLXCIsXCImbGFuZztcIjpcIuKMqVwiLFwiJnJhbmc7XCI6XCLijKpcIixcIiZsb3o7XCI6XCLil4pcIixcIiZzcGFkZXM7XCI6XCLimaBcIixcIiZjbHVicztcIjpcIuKZo1wiLFwiJmhlYXJ0cztcIjpcIuKZpVwiLFwiJmRpYW1zO1wiOlwi4pmmXCJ9LGNoYXJhY3RlcnM6e1wiJ1wiOlwiJmFwb3M7XCIsXCLCoFwiOlwiJm5ic3A7XCIsXCLCoVwiOlwiJmlleGNsO1wiLFwiwqJcIjpcIiZjZW50O1wiLFwiwqNcIjpcIiZwb3VuZDtcIixcIsKkXCI6XCImY3VycmVuO1wiLFwiwqVcIjpcIiZ5ZW47XCIsXCLCplwiOlwiJmJydmJhcjtcIixcIsKnXCI6XCImc2VjdDtcIixcIsKoXCI6XCImdW1sO1wiLFwiwqlcIjpcIiZjb3B5O1wiLFwiwqpcIjpcIiZvcmRmO1wiLFwiwqtcIjpcIiZsYXF1bztcIixcIsKsXCI6XCImbm90O1wiLFwiwq1cIjpcIiZzaHk7XCIsXCLCrlwiOlwiJnJlZztcIixcIsKvXCI6XCImbWFjcjtcIixcIsKwXCI6XCImZGVnO1wiLFwiwrFcIjpcIiZwbHVzbW47XCIsXCLCslwiOlwiJnN1cDI7XCIsXCLCs1wiOlwiJnN1cDM7XCIsXCLCtFwiOlwiJmFjdXRlO1wiLFwiwrVcIjpcIiZtaWNybztcIixcIsK2XCI6XCImcGFyYTtcIixcIsK3XCI6XCImbWlkZG90O1wiLFwiwrhcIjpcIiZjZWRpbDtcIixcIsK5XCI6XCImc3VwMTtcIixcIsK6XCI6XCImb3JkbTtcIixcIsK7XCI6XCImcmFxdW87XCIsXCLCvFwiOlwiJmZyYWMxNDtcIixcIsK9XCI6XCImZnJhYzEyO1wiLFwiwr5cIjpcIiZmcmFjMzQ7XCIsXCLCv1wiOlwiJmlxdWVzdDtcIixcIsOAXCI6XCImQWdyYXZlO1wiLFwiw4FcIjpcIiZBYWN1dGU7XCIsXCLDglwiOlwiJkFjaXJjO1wiLFwiw4NcIjpcIiZBdGlsZGU7XCIsXCLDhFwiOlwiJkF1bWw7XCIsXCLDhVwiOlwiJkFyaW5nO1wiLFwiw4ZcIjpcIiZBRWxpZztcIixcIsOHXCI6XCImQ2NlZGlsO1wiLFwiw4hcIjpcIiZFZ3JhdmU7XCIsXCLDiVwiOlwiJkVhY3V0ZTtcIixcIsOKXCI6XCImRWNpcmM7XCIsXCLDi1wiOlwiJkV1bWw7XCIsXCLDjFwiOlwiJklncmF2ZTtcIixcIsONXCI6XCImSWFjdXRlO1wiLFwiw45cIjpcIiZJY2lyYztcIixcIsOPXCI6XCImSXVtbDtcIixcIsOQXCI6XCImRVRIO1wiLFwiw5FcIjpcIiZOdGlsZGU7XCIsXCLDklwiOlwiJk9ncmF2ZTtcIixcIsOTXCI6XCImT2FjdXRlO1wiLFwiw5RcIjpcIiZPY2lyYztcIixcIsOVXCI6XCImT3RpbGRlO1wiLFwiw5ZcIjpcIiZPdW1sO1wiLFwiw5dcIjpcIiZ0aW1lcztcIixcIsOYXCI6XCImT3NsYXNoO1wiLFwiw5lcIjpcIiZVZ3JhdmU7XCIsXCLDmlwiOlwiJlVhY3V0ZTtcIixcIsObXCI6XCImVWNpcmM7XCIsXCLDnFwiOlwiJlV1bWw7XCIsXCLDnVwiOlwiJllhY3V0ZTtcIixcIsOeXCI6XCImVEhPUk47XCIsXCLDn1wiOlwiJnN6bGlnO1wiLFwiw6BcIjpcIiZhZ3JhdmU7XCIsXCLDoVwiOlwiJmFhY3V0ZTtcIixcIsOiXCI6XCImYWNpcmM7XCIsXCLDo1wiOlwiJmF0aWxkZTtcIixcIsOkXCI6XCImYXVtbDtcIixcIsOlXCI6XCImYXJpbmc7XCIsXCLDplwiOlwiJmFlbGlnO1wiLFwiw6dcIjpcIiZjY2VkaWw7XCIsXCLDqFwiOlwiJmVncmF2ZTtcIixcIsOpXCI6XCImZWFjdXRlO1wiLFwiw6pcIjpcIiZlY2lyYztcIixcIsOrXCI6XCImZXVtbDtcIixcIsOsXCI6XCImaWdyYXZlO1wiLFwiw61cIjpcIiZpYWN1dGU7XCIsXCLDrlwiOlwiJmljaXJjO1wiLFwiw69cIjpcIiZpdW1sO1wiLFwiw7BcIjpcIiZldGg7XCIsXCLDsVwiOlwiJm50aWxkZTtcIixcIsOyXCI6XCImb2dyYXZlO1wiLFwiw7NcIjpcIiZvYWN1dGU7XCIsXCLDtFwiOlwiJm9jaXJjO1wiLFwiw7VcIjpcIiZvdGlsZGU7XCIsXCLDtlwiOlwiJm91bWw7XCIsXCLDt1wiOlwiJmRpdmlkZTtcIixcIsO4XCI6XCImb3NsYXNoO1wiLFwiw7lcIjpcIiZ1Z3JhdmU7XCIsXCLDulwiOlwiJnVhY3V0ZTtcIixcIsO7XCI6XCImdWNpcmM7XCIsXCLDvFwiOlwiJnV1bWw7XCIsXCLDvVwiOlwiJnlhY3V0ZTtcIixcIsO+XCI6XCImdGhvcm47XCIsXCLDv1wiOlwiJnl1bWw7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJlwiOlwiJmFtcDtcIixcIjxcIjpcIiZsdDtcIixcIj5cIjpcIiZndDtcIixcIsWSXCI6XCImT0VsaWc7XCIsXCLFk1wiOlwiJm9lbGlnO1wiLFwixaBcIjpcIiZTY2Fyb247XCIsXCLFoVwiOlwiJnNjYXJvbjtcIixcIsW4XCI6XCImWXVtbDtcIixcIsuGXCI6XCImY2lyYztcIixcIsucXCI6XCImdGlsZGU7XCIsXCLigIJcIjpcIiZlbnNwO1wiLFwi4oCDXCI6XCImZW1zcDtcIixcIuKAiVwiOlwiJnRoaW5zcDtcIixcIuKAjFwiOlwiJnp3bmo7XCIsXCLigI1cIjpcIiZ6d2o7XCIsXCLigI5cIjpcIiZscm07XCIsXCLigI9cIjpcIiZybG07XCIsXCLigJNcIjpcIiZuZGFzaDtcIixcIuKAlFwiOlwiJm1kYXNoO1wiLFwi4oCYXCI6XCImbHNxdW87XCIsXCLigJlcIjpcIiZyc3F1bztcIixcIuKAmlwiOlwiJnNicXVvO1wiLFwi4oCcXCI6XCImbGRxdW87XCIsXCLigJ1cIjpcIiZyZHF1bztcIixcIuKAnlwiOlwiJmJkcXVvO1wiLFwi4oCgXCI6XCImZGFnZ2VyO1wiLFwi4oChXCI6XCImRGFnZ2VyO1wiLFwi4oCwXCI6XCImcGVybWlsO1wiLFwi4oC5XCI6XCImbHNhcXVvO1wiLFwi4oC6XCI6XCImcnNhcXVvO1wiLFwi4oKsXCI6XCImZXVybztcIixcIsaSXCI6XCImZm5vZjtcIixcIs6RXCI6XCImQWxwaGE7XCIsXCLOklwiOlwiJkJldGE7XCIsXCLOk1wiOlwiJkdhbW1hO1wiLFwizpRcIjpcIiZEZWx0YTtcIixcIs6VXCI6XCImRXBzaWxvbjtcIixcIs6WXCI6XCImWmV0YTtcIixcIs6XXCI6XCImRXRhO1wiLFwizphcIjpcIiZUaGV0YTtcIixcIs6ZXCI6XCImSW90YTtcIixcIs6aXCI6XCImS2FwcGE7XCIsXCLOm1wiOlwiJkxhbWJkYTtcIixcIs6cXCI6XCImTXU7XCIsXCLOnVwiOlwiJk51O1wiLFwizp5cIjpcIiZYaTtcIixcIs6fXCI6XCImT21pY3JvbjtcIixcIs6gXCI6XCImUGk7XCIsXCLOoVwiOlwiJlJobztcIixcIs6jXCI6XCImU2lnbWE7XCIsXCLOpFwiOlwiJlRhdTtcIixcIs6lXCI6XCImVXBzaWxvbjtcIixcIs6mXCI6XCImUGhpO1wiLFwizqdcIjpcIiZDaGk7XCIsXCLOqFwiOlwiJlBzaTtcIixcIs6pXCI6XCImT21lZ2E7XCIsXCLOsVwiOlwiJmFscGhhO1wiLFwizrJcIjpcIiZiZXRhO1wiLFwizrNcIjpcIiZnYW1tYTtcIixcIs60XCI6XCImZGVsdGE7XCIsXCLOtVwiOlwiJmVwc2lsb247XCIsXCLOtlwiOlwiJnpldGE7XCIsXCLOt1wiOlwiJmV0YTtcIixcIs64XCI6XCImdGhldGE7XCIsXCLOuVwiOlwiJmlvdGE7XCIsXCLOulwiOlwiJmthcHBhO1wiLFwizrtcIjpcIiZsYW1iZGE7XCIsXCLOvFwiOlwiJm11O1wiLFwizr1cIjpcIiZudTtcIixcIs6+XCI6XCImeGk7XCIsXCLOv1wiOlwiJm9taWNyb247XCIsXCLPgFwiOlwiJnBpO1wiLFwiz4FcIjpcIiZyaG87XCIsXCLPglwiOlwiJnNpZ21hZjtcIixcIs+DXCI6XCImc2lnbWE7XCIsXCLPhFwiOlwiJnRhdTtcIixcIs+FXCI6XCImdXBzaWxvbjtcIixcIs+GXCI6XCImcGhpO1wiLFwiz4dcIjpcIiZjaGk7XCIsXCLPiFwiOlwiJnBzaTtcIixcIs+JXCI6XCImb21lZ2E7XCIsXCLPkVwiOlwiJnRoZXRhc3ltO1wiLFwiz5JcIjpcIiZ1cHNpaDtcIixcIs+WXCI6XCImcGl2O1wiLFwi4oCiXCI6XCImYnVsbDtcIixcIuKAplwiOlwiJmhlbGxpcDtcIixcIuKAslwiOlwiJnByaW1lO1wiLFwi4oCzXCI6XCImUHJpbWU7XCIsXCLigL5cIjpcIiZvbGluZTtcIixcIuKBhFwiOlwiJmZyYXNsO1wiLFwi4oSYXCI6XCImd2VpZXJwO1wiLFwi4oSRXCI6XCImaW1hZ2U7XCIsXCLihJxcIjpcIiZyZWFsO1wiLFwi4oSiXCI6XCImdHJhZGU7XCIsXCLihLVcIjpcIiZhbGVmc3ltO1wiLFwi4oaQXCI6XCImbGFycjtcIixcIuKGkVwiOlwiJnVhcnI7XCIsXCLihpJcIjpcIiZyYXJyO1wiLFwi4oaTXCI6XCImZGFycjtcIixcIuKGlFwiOlwiJmhhcnI7XCIsXCLihrVcIjpcIiZjcmFycjtcIixcIuKHkFwiOlwiJmxBcnI7XCIsXCLih5FcIjpcIiZ1QXJyO1wiLFwi4oeSXCI6XCImckFycjtcIixcIuKHk1wiOlwiJmRBcnI7XCIsXCLih5RcIjpcIiZoQXJyO1wiLFwi4oiAXCI6XCImZm9yYWxsO1wiLFwi4oiCXCI6XCImcGFydDtcIixcIuKIg1wiOlwiJmV4aXN0O1wiLFwi4oiFXCI6XCImZW1wdHk7XCIsXCLiiIdcIjpcIiZuYWJsYTtcIixcIuKIiFwiOlwiJmlzaW47XCIsXCLiiIlcIjpcIiZub3RpbjtcIixcIuKIi1wiOlwiJm5pO1wiLFwi4oiPXCI6XCImcHJvZDtcIixcIuKIkVwiOlwiJnN1bTtcIixcIuKIklwiOlwiJm1pbnVzO1wiLFwi4oiXXCI6XCImbG93YXN0O1wiLFwi4oiaXCI6XCImcmFkaWM7XCIsXCLiiJ1cIjpcIiZwcm9wO1wiLFwi4oieXCI6XCImaW5maW47XCIsXCLiiKBcIjpcIiZhbmc7XCIsXCLiiKdcIjpcIiZhbmQ7XCIsXCLiiKhcIjpcIiZvcjtcIixcIuKIqVwiOlwiJmNhcDtcIixcIuKIqlwiOlwiJmN1cDtcIixcIuKIq1wiOlwiJmludDtcIixcIuKItFwiOlwiJnRoZXJlNDtcIixcIuKIvFwiOlwiJnNpbTtcIixcIuKJhVwiOlwiJmNvbmc7XCIsXCLiiYhcIjpcIiZhc3ltcDtcIixcIuKJoFwiOlwiJm5lO1wiLFwi4omhXCI6XCImZXF1aXY7XCIsXCLiiaRcIjpcIiZsZTtcIixcIuKJpVwiOlwiJmdlO1wiLFwi4oqCXCI6XCImc3ViO1wiLFwi4oqDXCI6XCImc3VwO1wiLFwi4oqEXCI6XCImbnN1YjtcIixcIuKKhlwiOlwiJnN1YmU7XCIsXCLiiodcIjpcIiZzdXBlO1wiLFwi4oqVXCI6XCImb3BsdXM7XCIsXCLiipdcIjpcIiZvdGltZXM7XCIsXCLiiqVcIjpcIiZwZXJwO1wiLFwi4ouFXCI6XCImc2RvdDtcIixcIuKMiFwiOlwiJmxjZWlsO1wiLFwi4oyJXCI6XCImcmNlaWw7XCIsXCLijIpcIjpcIiZsZmxvb3I7XCIsXCLijItcIjpcIiZyZmxvb3I7XCIsXCLijKlcIjpcIiZsYW5nO1wiLFwi4oyqXCI6XCImcmFuZztcIixcIuKXilwiOlwiJmxvejtcIixcIuKZoFwiOlwiJnNwYWRlcztcIixcIuKZo1wiOlwiJmNsdWJzO1wiLFwi4pmlXCI6XCImaGVhcnRzO1wiLFwi4pmmXCI6XCImZGlhbXM7XCJ9fSxodG1sNTp7ZW50aXRpZXM6e1wiJkFFbGlnXCI6XCLDhlwiLFwiJkFFbGlnO1wiOlwiw4ZcIixcIiZBTVBcIjpcIiZcIixcIiZBTVA7XCI6XCImXCIsXCImQWFjdXRlXCI6XCLDgVwiLFwiJkFhY3V0ZTtcIjpcIsOBXCIsXCImQWJyZXZlO1wiOlwixIJcIixcIiZBY2lyY1wiOlwiw4JcIixcIiZBY2lyYztcIjpcIsOCXCIsXCImQWN5O1wiOlwi0JBcIixcIiZBZnI7XCI6XCLwnZSEXCIsXCImQWdyYXZlXCI6XCLDgFwiLFwiJkFncmF2ZTtcIjpcIsOAXCIsXCImQWxwaGE7XCI6XCLOkVwiLFwiJkFtYWNyO1wiOlwixIBcIixcIiZBbmQ7XCI6XCLiqZNcIixcIiZBb2dvbjtcIjpcIsSEXCIsXCImQW9wZjtcIjpcIvCdlLhcIixcIiZBcHBseUZ1bmN0aW9uO1wiOlwi4oGhXCIsXCImQXJpbmdcIjpcIsOFXCIsXCImQXJpbmc7XCI6XCLDhVwiLFwiJkFzY3I7XCI6XCLwnZKcXCIsXCImQXNzaWduO1wiOlwi4omUXCIsXCImQXRpbGRlXCI6XCLDg1wiLFwiJkF0aWxkZTtcIjpcIsODXCIsXCImQXVtbFwiOlwiw4RcIixcIiZBdW1sO1wiOlwiw4RcIixcIiZCYWNrc2xhc2g7XCI6XCLiiJZcIixcIiZCYXJ2O1wiOlwi4qunXCIsXCImQmFyd2VkO1wiOlwi4oyGXCIsXCImQmN5O1wiOlwi0JFcIixcIiZCZWNhdXNlO1wiOlwi4oi1XCIsXCImQmVybm91bGxpcztcIjpcIuKErFwiLFwiJkJldGE7XCI6XCLOklwiLFwiJkJmcjtcIjpcIvCdlIVcIixcIiZCb3BmO1wiOlwi8J2UuVwiLFwiJkJyZXZlO1wiOlwiy5hcIixcIiZCc2NyO1wiOlwi4oSsXCIsXCImQnVtcGVxO1wiOlwi4omOXCIsXCImQ0hjeTtcIjpcItCnXCIsXCImQ09QWVwiOlwiwqlcIixcIiZDT1BZO1wiOlwiwqlcIixcIiZDYWN1dGU7XCI6XCLEhlwiLFwiJkNhcDtcIjpcIuKLklwiLFwiJkNhcGl0YWxEaWZmZXJlbnRpYWxEO1wiOlwi4oWFXCIsXCImQ2F5bGV5cztcIjpcIuKErVwiLFwiJkNjYXJvbjtcIjpcIsSMXCIsXCImQ2NlZGlsXCI6XCLDh1wiLFwiJkNjZWRpbDtcIjpcIsOHXCIsXCImQ2NpcmM7XCI6XCLEiFwiLFwiJkNjb25pbnQ7XCI6XCLiiLBcIixcIiZDZG90O1wiOlwixIpcIixcIiZDZWRpbGxhO1wiOlwiwrhcIixcIiZDZW50ZXJEb3Q7XCI6XCLCt1wiLFwiJkNmcjtcIjpcIuKErVwiLFwiJkNoaTtcIjpcIs6nXCIsXCImQ2lyY2xlRG90O1wiOlwi4oqZXCIsXCImQ2lyY2xlTWludXM7XCI6XCLiipZcIixcIiZDaXJjbGVQbHVzO1wiOlwi4oqVXCIsXCImQ2lyY2xlVGltZXM7XCI6XCLiipdcIixcIiZDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCI6XCLiiLJcIixcIiZDbG9zZUN1cmx5RG91YmxlUXVvdGU7XCI6XCLigJ1cIixcIiZDbG9zZUN1cmx5UXVvdGU7XCI6XCLigJlcIixcIiZDb2xvbjtcIjpcIuKIt1wiLFwiJkNvbG9uZTtcIjpcIuKptFwiLFwiJkNvbmdydWVudDtcIjpcIuKJoVwiLFwiJkNvbmludDtcIjpcIuKIr1wiLFwiJkNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIrlwiLFwiJkNvcGY7XCI6XCLihIJcIixcIiZDb3Byb2R1Y3Q7XCI6XCLiiJBcIixcIiZDb3VudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsO1wiOlwi4oizXCIsXCImQ3Jvc3M7XCI6XCLiqK9cIixcIiZDc2NyO1wiOlwi8J2SnlwiLFwiJkN1cDtcIjpcIuKLk1wiLFwiJkN1cENhcDtcIjpcIuKJjVwiLFwiJkREO1wiOlwi4oWFXCIsXCImRERvdHJhaGQ7XCI6XCLipJFcIixcIiZESmN5O1wiOlwi0IJcIixcIiZEU2N5O1wiOlwi0IVcIixcIiZEWmN5O1wiOlwi0I9cIixcIiZEYWdnZXI7XCI6XCLigKFcIixcIiZEYXJyO1wiOlwi4oahXCIsXCImRGFzaHY7XCI6XCLiq6RcIixcIiZEY2Fyb247XCI6XCLEjlwiLFwiJkRjeTtcIjpcItCUXCIsXCImRGVsO1wiOlwi4oiHXCIsXCImRGVsdGE7XCI6XCLOlFwiLFwiJkRmcjtcIjpcIvCdlIdcIixcIiZEaWFjcml0aWNhbEFjdXRlO1wiOlwiwrRcIixcIiZEaWFjcml0aWNhbERvdDtcIjpcIsuZXCIsXCImRGlhY3JpdGljYWxEb3VibGVBY3V0ZTtcIjpcIsudXCIsXCImRGlhY3JpdGljYWxHcmF2ZTtcIjpcImBcIixcIiZEaWFjcml0aWNhbFRpbGRlO1wiOlwiy5xcIixcIiZEaWFtb25kO1wiOlwi4ouEXCIsXCImRGlmZmVyZW50aWFsRDtcIjpcIuKFhlwiLFwiJkRvcGY7XCI6XCLwnZS7XCIsXCImRG90O1wiOlwiwqhcIixcIiZEb3REb3Q7XCI6XCLig5xcIixcIiZEb3RFcXVhbDtcIjpcIuKJkFwiLFwiJkRvdWJsZUNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIr1wiLFwiJkRvdWJsZURvdDtcIjpcIsKoXCIsXCImRG91YmxlRG93bkFycm93O1wiOlwi4oeTXCIsXCImRG91YmxlTGVmdEFycm93O1wiOlwi4oeQXCIsXCImRG91YmxlTGVmdFJpZ2h0QXJyb3c7XCI6XCLih5RcIixcIiZEb3VibGVMZWZ0VGVlO1wiOlwi4qukXCIsXCImRG91YmxlTG9uZ0xlZnRBcnJvdztcIjpcIuKfuFwiLFwiJkRvdWJsZUxvbmdMZWZ0UmlnaHRBcnJvdztcIjpcIuKfulwiLFwiJkRvdWJsZUxvbmdSaWdodEFycm93O1wiOlwi4p+5XCIsXCImRG91YmxlUmlnaHRBcnJvdztcIjpcIuKHklwiLFwiJkRvdWJsZVJpZ2h0VGVlO1wiOlwi4oqoXCIsXCImRG91YmxlVXBBcnJvdztcIjpcIuKHkVwiLFwiJkRvdWJsZVVwRG93bkFycm93O1wiOlwi4oeVXCIsXCImRG91YmxlVmVydGljYWxCYXI7XCI6XCLiiKVcIixcIiZEb3duQXJyb3c7XCI6XCLihpNcIixcIiZEb3duQXJyb3dCYXI7XCI6XCLipJNcIixcIiZEb3duQXJyb3dVcEFycm93O1wiOlwi4oe1XCIsXCImRG93bkJyZXZlO1wiOlwizJFcIixcIiZEb3duTGVmdFJpZ2h0VmVjdG9yO1wiOlwi4qWQXCIsXCImRG93bkxlZnRUZWVWZWN0b3I7XCI6XCLipZ5cIixcIiZEb3duTGVmdFZlY3RvcjtcIjpcIuKGvVwiLFwiJkRvd25MZWZ0VmVjdG9yQmFyO1wiOlwi4qWWXCIsXCImRG93blJpZ2h0VGVlVmVjdG9yO1wiOlwi4qWfXCIsXCImRG93blJpZ2h0VmVjdG9yO1wiOlwi4oeBXCIsXCImRG93blJpZ2h0VmVjdG9yQmFyO1wiOlwi4qWXXCIsXCImRG93blRlZTtcIjpcIuKKpFwiLFwiJkRvd25UZWVBcnJvdztcIjpcIuKGp1wiLFwiJkRvd25hcnJvdztcIjpcIuKHk1wiLFwiJkRzY3I7XCI6XCLwnZKfXCIsXCImRHN0cm9rO1wiOlwixJBcIixcIiZFTkc7XCI6XCLFilwiLFwiJkVUSFwiOlwiw5BcIixcIiZFVEg7XCI6XCLDkFwiLFwiJkVhY3V0ZVwiOlwiw4lcIixcIiZFYWN1dGU7XCI6XCLDiVwiLFwiJkVjYXJvbjtcIjpcIsSaXCIsXCImRWNpcmNcIjpcIsOKXCIsXCImRWNpcmM7XCI6XCLDilwiLFwiJkVjeTtcIjpcItCtXCIsXCImRWRvdDtcIjpcIsSWXCIsXCImRWZyO1wiOlwi8J2UiFwiLFwiJkVncmF2ZVwiOlwiw4hcIixcIiZFZ3JhdmU7XCI6XCLDiFwiLFwiJkVsZW1lbnQ7XCI6XCLiiIhcIixcIiZFbWFjcjtcIjpcIsSSXCIsXCImRW1wdHlTbWFsbFNxdWFyZTtcIjpcIuKXu1wiLFwiJkVtcHR5VmVyeVNtYWxsU3F1YXJlO1wiOlwi4parXCIsXCImRW9nb247XCI6XCLEmFwiLFwiJkVvcGY7XCI6XCLwnZS8XCIsXCImRXBzaWxvbjtcIjpcIs6VXCIsXCImRXF1YWw7XCI6XCLiqbVcIixcIiZFcXVhbFRpbGRlO1wiOlwi4omCXCIsXCImRXF1aWxpYnJpdW07XCI6XCLih4xcIixcIiZFc2NyO1wiOlwi4oSwXCIsXCImRXNpbTtcIjpcIuKps1wiLFwiJkV0YTtcIjpcIs6XXCIsXCImRXVtbFwiOlwiw4tcIixcIiZFdW1sO1wiOlwiw4tcIixcIiZFeGlzdHM7XCI6XCLiiINcIixcIiZFeHBvbmVudGlhbEU7XCI6XCLihYdcIixcIiZGY3k7XCI6XCLQpFwiLFwiJkZmcjtcIjpcIvCdlIlcIixcIiZGaWxsZWRTbWFsbFNxdWFyZTtcIjpcIuKXvFwiLFwiJkZpbGxlZFZlcnlTbWFsbFNxdWFyZTtcIjpcIuKWqlwiLFwiJkZvcGY7XCI6XCLwnZS9XCIsXCImRm9yQWxsO1wiOlwi4oiAXCIsXCImRm91cmllcnRyZjtcIjpcIuKEsVwiLFwiJkZzY3I7XCI6XCLihLFcIixcIiZHSmN5O1wiOlwi0INcIixcIiZHVFwiOlwiPlwiLFwiJkdUO1wiOlwiPlwiLFwiJkdhbW1hO1wiOlwizpNcIixcIiZHYW1tYWQ7XCI6XCLPnFwiLFwiJkdicmV2ZTtcIjpcIsSeXCIsXCImR2NlZGlsO1wiOlwixKJcIixcIiZHY2lyYztcIjpcIsScXCIsXCImR2N5O1wiOlwi0JNcIixcIiZHZG90O1wiOlwixKBcIixcIiZHZnI7XCI6XCLwnZSKXCIsXCImR2c7XCI6XCLii5lcIixcIiZHb3BmO1wiOlwi8J2UvlwiLFwiJkdyZWF0ZXJFcXVhbDtcIjpcIuKJpVwiLFwiJkdyZWF0ZXJFcXVhbExlc3M7XCI6XCLii5tcIixcIiZHcmVhdGVyRnVsbEVxdWFsO1wiOlwi4omnXCIsXCImR3JlYXRlckdyZWF0ZXI7XCI6XCLiqqJcIixcIiZHcmVhdGVyTGVzcztcIjpcIuKJt1wiLFwiJkdyZWF0ZXJTbGFudEVxdWFsO1wiOlwi4qm+XCIsXCImR3JlYXRlclRpbGRlO1wiOlwi4omzXCIsXCImR3NjcjtcIjpcIvCdkqJcIixcIiZHdDtcIjpcIuKJq1wiLFwiJkhBUkRjeTtcIjpcItCqXCIsXCImSGFjZWs7XCI6XCLLh1wiLFwiJkhhdDtcIjpcIl5cIixcIiZIY2lyYztcIjpcIsSkXCIsXCImSGZyO1wiOlwi4oSMXCIsXCImSGlsYmVydFNwYWNlO1wiOlwi4oSLXCIsXCImSG9wZjtcIjpcIuKEjVwiLFwiJkhvcml6b250YWxMaW5lO1wiOlwi4pSAXCIsXCImSHNjcjtcIjpcIuKEi1wiLFwiJkhzdHJvaztcIjpcIsSmXCIsXCImSHVtcERvd25IdW1wO1wiOlwi4omOXCIsXCImSHVtcEVxdWFsO1wiOlwi4omPXCIsXCImSUVjeTtcIjpcItCVXCIsXCImSUpsaWc7XCI6XCLEslwiLFwiJklPY3k7XCI6XCLQgVwiLFwiJklhY3V0ZVwiOlwiw41cIixcIiZJYWN1dGU7XCI6XCLDjVwiLFwiJkljaXJjXCI6XCLDjlwiLFwiJkljaXJjO1wiOlwiw45cIixcIiZJY3k7XCI6XCLQmFwiLFwiJklkb3Q7XCI6XCLEsFwiLFwiJklmcjtcIjpcIuKEkVwiLFwiJklncmF2ZVwiOlwiw4xcIixcIiZJZ3JhdmU7XCI6XCLDjFwiLFwiJkltO1wiOlwi4oSRXCIsXCImSW1hY3I7XCI6XCLEqlwiLFwiJkltYWdpbmFyeUk7XCI6XCLihYhcIixcIiZJbXBsaWVzO1wiOlwi4oeSXCIsXCImSW50O1wiOlwi4oisXCIsXCImSW50ZWdyYWw7XCI6XCLiiKtcIixcIiZJbnRlcnNlY3Rpb247XCI6XCLii4JcIixcIiZJbnZpc2libGVDb21tYTtcIjpcIuKBo1wiLFwiJkludmlzaWJsZVRpbWVzO1wiOlwi4oGiXCIsXCImSW9nb247XCI6XCLErlwiLFwiJklvcGY7XCI6XCLwnZWAXCIsXCImSW90YTtcIjpcIs6ZXCIsXCImSXNjcjtcIjpcIuKEkFwiLFwiJkl0aWxkZTtcIjpcIsSoXCIsXCImSXVrY3k7XCI6XCLQhlwiLFwiJkl1bWxcIjpcIsOPXCIsXCImSXVtbDtcIjpcIsOPXCIsXCImSmNpcmM7XCI6XCLEtFwiLFwiJkpjeTtcIjpcItCZXCIsXCImSmZyO1wiOlwi8J2UjVwiLFwiJkpvcGY7XCI6XCLwnZWBXCIsXCImSnNjcjtcIjpcIvCdkqVcIixcIiZKc2VyY3k7XCI6XCLQiFwiLFwiJkp1a2N5O1wiOlwi0IRcIixcIiZLSGN5O1wiOlwi0KVcIixcIiZLSmN5O1wiOlwi0IxcIixcIiZLYXBwYTtcIjpcIs6aXCIsXCImS2NlZGlsO1wiOlwixLZcIixcIiZLY3k7XCI6XCLQmlwiLFwiJktmcjtcIjpcIvCdlI5cIixcIiZLb3BmO1wiOlwi8J2VglwiLFwiJktzY3I7XCI6XCLwnZKmXCIsXCImTEpjeTtcIjpcItCJXCIsXCImTFRcIjpcIjxcIixcIiZMVDtcIjpcIjxcIixcIiZMYWN1dGU7XCI6XCLEuVwiLFwiJkxhbWJkYTtcIjpcIs6bXCIsXCImTGFuZztcIjpcIuKfqlwiLFwiJkxhcGxhY2V0cmY7XCI6XCLihJJcIixcIiZMYXJyO1wiOlwi4oaeXCIsXCImTGNhcm9uO1wiOlwixL1cIixcIiZMY2VkaWw7XCI6XCLEu1wiLFwiJkxjeTtcIjpcItCbXCIsXCImTGVmdEFuZ2xlQnJhY2tldDtcIjpcIuKfqFwiLFwiJkxlZnRBcnJvdztcIjpcIuKGkFwiLFwiJkxlZnRBcnJvd0JhcjtcIjpcIuKHpFwiLFwiJkxlZnRBcnJvd1JpZ2h0QXJyb3c7XCI6XCLih4ZcIixcIiZMZWZ0Q2VpbGluZztcIjpcIuKMiFwiLFwiJkxlZnREb3VibGVCcmFja2V0O1wiOlwi4p+mXCIsXCImTGVmdERvd25UZWVWZWN0b3I7XCI6XCLipaFcIixcIiZMZWZ0RG93blZlY3RvcjtcIjpcIuKHg1wiLFwiJkxlZnREb3duVmVjdG9yQmFyO1wiOlwi4qWZXCIsXCImTGVmdEZsb29yO1wiOlwi4oyKXCIsXCImTGVmdFJpZ2h0QXJyb3c7XCI6XCLihpRcIixcIiZMZWZ0UmlnaHRWZWN0b3I7XCI6XCLipY5cIixcIiZMZWZ0VGVlO1wiOlwi4oqjXCIsXCImTGVmdFRlZUFycm93O1wiOlwi4oakXCIsXCImTGVmdFRlZVZlY3RvcjtcIjpcIuKlmlwiLFwiJkxlZnRUcmlhbmdsZTtcIjpcIuKKslwiLFwiJkxlZnRUcmlhbmdsZUJhcjtcIjpcIuKnj1wiLFwiJkxlZnRUcmlhbmdsZUVxdWFsO1wiOlwi4oq0XCIsXCImTGVmdFVwRG93blZlY3RvcjtcIjpcIuKlkVwiLFwiJkxlZnRVcFRlZVZlY3RvcjtcIjpcIuKloFwiLFwiJkxlZnRVcFZlY3RvcjtcIjpcIuKGv1wiLFwiJkxlZnRVcFZlY3RvckJhcjtcIjpcIuKlmFwiLFwiJkxlZnRWZWN0b3I7XCI6XCLihrxcIixcIiZMZWZ0VmVjdG9yQmFyO1wiOlwi4qWSXCIsXCImTGVmdGFycm93O1wiOlwi4oeQXCIsXCImTGVmdHJpZ2h0YXJyb3c7XCI6XCLih5RcIixcIiZMZXNzRXF1YWxHcmVhdGVyO1wiOlwi4ouaXCIsXCImTGVzc0Z1bGxFcXVhbDtcIjpcIuKJplwiLFwiJkxlc3NHcmVhdGVyO1wiOlwi4om2XCIsXCImTGVzc0xlc3M7XCI6XCLiqqFcIixcIiZMZXNzU2xhbnRFcXVhbDtcIjpcIuKpvVwiLFwiJkxlc3NUaWxkZTtcIjpcIuKJslwiLFwiJkxmcjtcIjpcIvCdlI9cIixcIiZMbDtcIjpcIuKLmFwiLFwiJkxsZWZ0YXJyb3c7XCI6XCLih5pcIixcIiZMbWlkb3Q7XCI6XCLEv1wiLFwiJkxvbmdMZWZ0QXJyb3c7XCI6XCLin7VcIixcIiZMb25nTGVmdFJpZ2h0QXJyb3c7XCI6XCLin7dcIixcIiZMb25nUmlnaHRBcnJvdztcIjpcIuKftlwiLFwiJkxvbmdsZWZ0YXJyb3c7XCI6XCLin7hcIixcIiZMb25nbGVmdHJpZ2h0YXJyb3c7XCI6XCLin7pcIixcIiZMb25ncmlnaHRhcnJvdztcIjpcIuKfuVwiLFwiJkxvcGY7XCI6XCLwnZWDXCIsXCImTG93ZXJMZWZ0QXJyb3c7XCI6XCLihplcIixcIiZMb3dlclJpZ2h0QXJyb3c7XCI6XCLihphcIixcIiZMc2NyO1wiOlwi4oSSXCIsXCImTHNoO1wiOlwi4oawXCIsXCImTHN0cm9rO1wiOlwixYFcIixcIiZMdDtcIjpcIuKJqlwiLFwiJk1hcDtcIjpcIuKkhVwiLFwiJk1jeTtcIjpcItCcXCIsXCImTWVkaXVtU3BhY2U7XCI6XCLigZ9cIixcIiZNZWxsaW50cmY7XCI6XCLihLNcIixcIiZNZnI7XCI6XCLwnZSQXCIsXCImTWludXNQbHVzO1wiOlwi4oiTXCIsXCImTW9wZjtcIjpcIvCdlYRcIixcIiZNc2NyO1wiOlwi4oSzXCIsXCImTXU7XCI6XCLOnFwiLFwiJk5KY3k7XCI6XCLQilwiLFwiJk5hY3V0ZTtcIjpcIsWDXCIsXCImTmNhcm9uO1wiOlwixYdcIixcIiZOY2VkaWw7XCI6XCLFhVwiLFwiJk5jeTtcIjpcItCdXCIsXCImTmVnYXRpdmVNZWRpdW1TcGFjZTtcIjpcIuKAi1wiLFwiJk5lZ2F0aXZlVGhpY2tTcGFjZTtcIjpcIuKAi1wiLFwiJk5lZ2F0aXZlVGhpblNwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVWZXJ5VGhpblNwYWNlO1wiOlwi4oCLXCIsXCImTmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6XCLiiatcIixcIiZOZXN0ZWRMZXNzTGVzcztcIjpcIuKJqlwiLFwiJk5ld0xpbmU7XCI6XCJcXG5cIixcIiZOZnI7XCI6XCLwnZSRXCIsXCImTm9CcmVhaztcIjpcIuKBoFwiLFwiJk5vbkJyZWFraW5nU3BhY2U7XCI6XCLCoFwiLFwiJk5vcGY7XCI6XCLihJVcIixcIiZOb3Q7XCI6XCLiq6xcIixcIiZOb3RDb25ncnVlbnQ7XCI6XCLiiaJcIixcIiZOb3RDdXBDYXA7XCI6XCLiia1cIixcIiZOb3REb3VibGVWZXJ0aWNhbEJhcjtcIjpcIuKIplwiLFwiJk5vdEVsZW1lbnQ7XCI6XCLiiIlcIixcIiZOb3RFcXVhbDtcIjpcIuKJoFwiLFwiJk5vdEVxdWFsVGlsZGU7XCI6XCLiiYLMuFwiLFwiJk5vdEV4aXN0cztcIjpcIuKIhFwiLFwiJk5vdEdyZWF0ZXI7XCI6XCLiia9cIixcIiZOb3RHcmVhdGVyRXF1YWw7XCI6XCLiibFcIixcIiZOb3RHcmVhdGVyRnVsbEVxdWFsO1wiOlwi4omnzLhcIixcIiZOb3RHcmVhdGVyR3JlYXRlcjtcIjpcIuKJq8y4XCIsXCImTm90R3JlYXRlckxlc3M7XCI6XCLiiblcIixcIiZOb3RHcmVhdGVyU2xhbnRFcXVhbDtcIjpcIuKpvsy4XCIsXCImTm90R3JlYXRlclRpbGRlO1wiOlwi4om1XCIsXCImTm90SHVtcERvd25IdW1wO1wiOlwi4omOzLhcIixcIiZOb3RIdW1wRXF1YWw7XCI6XCLiiY/MuFwiLFwiJk5vdExlZnRUcmlhbmdsZTtcIjpcIuKLqlwiLFwiJk5vdExlZnRUcmlhbmdsZUJhcjtcIjpcIuKnj8y4XCIsXCImTm90TGVmdFRyaWFuZ2xlRXF1YWw7XCI6XCLii6xcIixcIiZOb3RMZXNzO1wiOlwi4omuXCIsXCImTm90TGVzc0VxdWFsO1wiOlwi4omwXCIsXCImTm90TGVzc0dyZWF0ZXI7XCI6XCLiibhcIixcIiZOb3RMZXNzTGVzcztcIjpcIuKJqsy4XCIsXCImTm90TGVzc1NsYW50RXF1YWw7XCI6XCLiqb3MuFwiLFwiJk5vdExlc3NUaWxkZTtcIjpcIuKJtFwiLFwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiOlwi4qqizLhcIixcIiZOb3ROZXN0ZWRMZXNzTGVzcztcIjpcIuKqocy4XCIsXCImTm90UHJlY2VkZXM7XCI6XCLiioBcIixcIiZOb3RQcmVjZWRlc0VxdWFsO1wiOlwi4qqvzLhcIixcIiZOb3RQcmVjZWRlc1NsYW50RXF1YWw7XCI6XCLii6BcIixcIiZOb3RSZXZlcnNlRWxlbWVudDtcIjpcIuKIjFwiLFwiJk5vdFJpZ2h0VHJpYW5nbGU7XCI6XCLii6tcIixcIiZOb3RSaWdodFRyaWFuZ2xlQmFyO1wiOlwi4qeQzLhcIixcIiZOb3RSaWdodFRyaWFuZ2xlRXF1YWw7XCI6XCLii61cIixcIiZOb3RTcXVhcmVTdWJzZXQ7XCI6XCLiio/MuFwiLFwiJk5vdFNxdWFyZVN1YnNldEVxdWFsO1wiOlwi4ouiXCIsXCImTm90U3F1YXJlU3VwZXJzZXQ7XCI6XCLiipDMuFwiLFwiJk5vdFNxdWFyZVN1cGVyc2V0RXF1YWw7XCI6XCLii6NcIixcIiZOb3RTdWJzZXQ7XCI6XCLiioLig5JcIixcIiZOb3RTdWJzZXRFcXVhbDtcIjpcIuKKiFwiLFwiJk5vdFN1Y2NlZWRzO1wiOlwi4oqBXCIsXCImTm90U3VjY2VlZHNFcXVhbDtcIjpcIuKqsMy4XCIsXCImTm90U3VjY2VlZHNTbGFudEVxdWFsO1wiOlwi4ouhXCIsXCImTm90U3VjY2VlZHNUaWxkZTtcIjpcIuKJv8y4XCIsXCImTm90U3VwZXJzZXQ7XCI6XCLiioPig5JcIixcIiZOb3RTdXBlcnNldEVxdWFsO1wiOlwi4oqJXCIsXCImTm90VGlsZGU7XCI6XCLiiYFcIixcIiZOb3RUaWxkZUVxdWFsO1wiOlwi4omEXCIsXCImTm90VGlsZGVGdWxsRXF1YWw7XCI6XCLiiYdcIixcIiZOb3RUaWxkZVRpbGRlO1wiOlwi4omJXCIsXCImTm90VmVydGljYWxCYXI7XCI6XCLiiKRcIixcIiZOc2NyO1wiOlwi8J2SqVwiLFwiJk50aWxkZVwiOlwiw5FcIixcIiZOdGlsZGU7XCI6XCLDkVwiLFwiJk51O1wiOlwizp1cIixcIiZPRWxpZztcIjpcIsWSXCIsXCImT2FjdXRlXCI6XCLDk1wiLFwiJk9hY3V0ZTtcIjpcIsOTXCIsXCImT2NpcmNcIjpcIsOUXCIsXCImT2NpcmM7XCI6XCLDlFwiLFwiJk9jeTtcIjpcItCeXCIsXCImT2RibGFjO1wiOlwixZBcIixcIiZPZnI7XCI6XCLwnZSSXCIsXCImT2dyYXZlXCI6XCLDklwiLFwiJk9ncmF2ZTtcIjpcIsOSXCIsXCImT21hY3I7XCI6XCLFjFwiLFwiJk9tZWdhO1wiOlwizqlcIixcIiZPbWljcm9uO1wiOlwizp9cIixcIiZPb3BmO1wiOlwi8J2VhlwiLFwiJk9wZW5DdXJseURvdWJsZVF1b3RlO1wiOlwi4oCcXCIsXCImT3BlbkN1cmx5UXVvdGU7XCI6XCLigJhcIixcIiZPcjtcIjpcIuKplFwiLFwiJk9zY3I7XCI6XCLwnZKqXCIsXCImT3NsYXNoXCI6XCLDmFwiLFwiJk9zbGFzaDtcIjpcIsOYXCIsXCImT3RpbGRlXCI6XCLDlVwiLFwiJk90aWxkZTtcIjpcIsOVXCIsXCImT3RpbWVzO1wiOlwi4qi3XCIsXCImT3VtbFwiOlwiw5ZcIixcIiZPdW1sO1wiOlwiw5ZcIixcIiZPdmVyQmFyO1wiOlwi4oC+XCIsXCImT3ZlckJyYWNlO1wiOlwi4o+eXCIsXCImT3ZlckJyYWNrZXQ7XCI6XCLijrRcIixcIiZPdmVyUGFyZW50aGVzaXM7XCI6XCLij5xcIixcIiZQYXJ0aWFsRDtcIjpcIuKIglwiLFwiJlBjeTtcIjpcItCfXCIsXCImUGZyO1wiOlwi8J2Uk1wiLFwiJlBoaTtcIjpcIs6mXCIsXCImUGk7XCI6XCLOoFwiLFwiJlBsdXNNaW51cztcIjpcIsKxXCIsXCImUG9pbmNhcmVwbGFuZTtcIjpcIuKEjFwiLFwiJlBvcGY7XCI6XCLihJlcIixcIiZQcjtcIjpcIuKqu1wiLFwiJlByZWNlZGVzO1wiOlwi4om6XCIsXCImUHJlY2VkZXNFcXVhbDtcIjpcIuKqr1wiLFwiJlByZWNlZGVzU2xhbnRFcXVhbDtcIjpcIuKJvFwiLFwiJlByZWNlZGVzVGlsZGU7XCI6XCLiib5cIixcIiZQcmltZTtcIjpcIuKAs1wiLFwiJlByb2R1Y3Q7XCI6XCLiiI9cIixcIiZQcm9wb3J0aW9uO1wiOlwi4oi3XCIsXCImUHJvcG9ydGlvbmFsO1wiOlwi4oidXCIsXCImUHNjcjtcIjpcIvCdkqtcIixcIiZQc2k7XCI6XCLOqFwiLFwiJlFVT1RcIjonXCInLFwiJlFVT1Q7XCI6J1wiJyxcIiZRZnI7XCI6XCLwnZSUXCIsXCImUW9wZjtcIjpcIuKEmlwiLFwiJlFzY3I7XCI6XCLwnZKsXCIsXCImUkJhcnI7XCI6XCLipJBcIixcIiZSRUdcIjpcIsKuXCIsXCImUkVHO1wiOlwiwq5cIixcIiZSYWN1dGU7XCI6XCLFlFwiLFwiJlJhbmc7XCI6XCLin6tcIixcIiZSYXJyO1wiOlwi4oagXCIsXCImUmFycnRsO1wiOlwi4qSWXCIsXCImUmNhcm9uO1wiOlwixZhcIixcIiZSY2VkaWw7XCI6XCLFllwiLFwiJlJjeTtcIjpcItCgXCIsXCImUmU7XCI6XCLihJxcIixcIiZSZXZlcnNlRWxlbWVudDtcIjpcIuKIi1wiLFwiJlJldmVyc2VFcXVpbGlicml1bTtcIjpcIuKHi1wiLFwiJlJldmVyc2VVcEVxdWlsaWJyaXVtO1wiOlwi4qWvXCIsXCImUmZyO1wiOlwi4oScXCIsXCImUmhvO1wiOlwizqFcIixcIiZSaWdodEFuZ2xlQnJhY2tldDtcIjpcIuKfqVwiLFwiJlJpZ2h0QXJyb3c7XCI6XCLihpJcIixcIiZSaWdodEFycm93QmFyO1wiOlwi4oelXCIsXCImUmlnaHRBcnJvd0xlZnRBcnJvdztcIjpcIuKHhFwiLFwiJlJpZ2h0Q2VpbGluZztcIjpcIuKMiVwiLFwiJlJpZ2h0RG91YmxlQnJhY2tldDtcIjpcIuKfp1wiLFwiJlJpZ2h0RG93blRlZVZlY3RvcjtcIjpcIuKlnVwiLFwiJlJpZ2h0RG93blZlY3RvcjtcIjpcIuKHglwiLFwiJlJpZ2h0RG93blZlY3RvckJhcjtcIjpcIuKllVwiLFwiJlJpZ2h0Rmxvb3I7XCI6XCLijItcIixcIiZSaWdodFRlZTtcIjpcIuKKolwiLFwiJlJpZ2h0VGVlQXJyb3c7XCI6XCLihqZcIixcIiZSaWdodFRlZVZlY3RvcjtcIjpcIuKlm1wiLFwiJlJpZ2h0VHJpYW5nbGU7XCI6XCLiirNcIixcIiZSaWdodFRyaWFuZ2xlQmFyO1wiOlwi4qeQXCIsXCImUmlnaHRUcmlhbmdsZUVxdWFsO1wiOlwi4oq1XCIsXCImUmlnaHRVcERvd25WZWN0b3I7XCI6XCLipY9cIixcIiZSaWdodFVwVGVlVmVjdG9yO1wiOlwi4qWcXCIsXCImUmlnaHRVcFZlY3RvcjtcIjpcIuKGvlwiLFwiJlJpZ2h0VXBWZWN0b3JCYXI7XCI6XCLipZRcIixcIiZSaWdodFZlY3RvcjtcIjpcIuKHgFwiLFwiJlJpZ2h0VmVjdG9yQmFyO1wiOlwi4qWTXCIsXCImUmlnaHRhcnJvdztcIjpcIuKHklwiLFwiJlJvcGY7XCI6XCLihJ1cIixcIiZSb3VuZEltcGxpZXM7XCI6XCLipbBcIixcIiZScmlnaHRhcnJvdztcIjpcIuKHm1wiLFwiJlJzY3I7XCI6XCLihJtcIixcIiZSc2g7XCI6XCLihrFcIixcIiZSdWxlRGVsYXllZDtcIjpcIuKntFwiLFwiJlNIQ0hjeTtcIjpcItCpXCIsXCImU0hjeTtcIjpcItCoXCIsXCImU09GVGN5O1wiOlwi0KxcIixcIiZTYWN1dGU7XCI6XCLFmlwiLFwiJlNjO1wiOlwi4qq8XCIsXCImU2Nhcm9uO1wiOlwixaBcIixcIiZTY2VkaWw7XCI6XCLFnlwiLFwiJlNjaXJjO1wiOlwixZxcIixcIiZTY3k7XCI6XCLQoVwiLFwiJlNmcjtcIjpcIvCdlJZcIixcIiZTaG9ydERvd25BcnJvdztcIjpcIuKGk1wiLFwiJlNob3J0TGVmdEFycm93O1wiOlwi4oaQXCIsXCImU2hvcnRSaWdodEFycm93O1wiOlwi4oaSXCIsXCImU2hvcnRVcEFycm93O1wiOlwi4oaRXCIsXCImU2lnbWE7XCI6XCLOo1wiLFwiJlNtYWxsQ2lyY2xlO1wiOlwi4oiYXCIsXCImU29wZjtcIjpcIvCdlYpcIixcIiZTcXJ0O1wiOlwi4oiaXCIsXCImU3F1YXJlO1wiOlwi4pahXCIsXCImU3F1YXJlSW50ZXJzZWN0aW9uO1wiOlwi4oqTXCIsXCImU3F1YXJlU3Vic2V0O1wiOlwi4oqPXCIsXCImU3F1YXJlU3Vic2V0RXF1YWw7XCI6XCLiipFcIixcIiZTcXVhcmVTdXBlcnNldDtcIjpcIuKKkFwiLFwiJlNxdWFyZVN1cGVyc2V0RXF1YWw7XCI6XCLiipJcIixcIiZTcXVhcmVVbmlvbjtcIjpcIuKKlFwiLFwiJlNzY3I7XCI6XCLwnZKuXCIsXCImU3RhcjtcIjpcIuKLhlwiLFwiJlN1YjtcIjpcIuKLkFwiLFwiJlN1YnNldDtcIjpcIuKLkFwiLFwiJlN1YnNldEVxdWFsO1wiOlwi4oqGXCIsXCImU3VjY2VlZHM7XCI6XCLiibtcIixcIiZTdWNjZWVkc0VxdWFsO1wiOlwi4qqwXCIsXCImU3VjY2VlZHNTbGFudEVxdWFsO1wiOlwi4om9XCIsXCImU3VjY2VlZHNUaWxkZTtcIjpcIuKJv1wiLFwiJlN1Y2hUaGF0O1wiOlwi4oiLXCIsXCImU3VtO1wiOlwi4oiRXCIsXCImU3VwO1wiOlwi4ouRXCIsXCImU3VwZXJzZXQ7XCI6XCLiioNcIixcIiZTdXBlcnNldEVxdWFsO1wiOlwi4oqHXCIsXCImU3Vwc2V0O1wiOlwi4ouRXCIsXCImVEhPUk5cIjpcIsOeXCIsXCImVEhPUk47XCI6XCLDnlwiLFwiJlRSQURFO1wiOlwi4oSiXCIsXCImVFNIY3k7XCI6XCLQi1wiLFwiJlRTY3k7XCI6XCLQplwiLFwiJlRhYjtcIjpcIlxcdFwiLFwiJlRhdTtcIjpcIs6kXCIsXCImVGNhcm9uO1wiOlwixaRcIixcIiZUY2VkaWw7XCI6XCLFolwiLFwiJlRjeTtcIjpcItCiXCIsXCImVGZyO1wiOlwi8J2Ul1wiLFwiJlRoZXJlZm9yZTtcIjpcIuKItFwiLFwiJlRoZXRhO1wiOlwizphcIixcIiZUaGlja1NwYWNlO1wiOlwi4oGf4oCKXCIsXCImVGhpblNwYWNlO1wiOlwi4oCJXCIsXCImVGlsZGU7XCI6XCLiiLxcIixcIiZUaWxkZUVxdWFsO1wiOlwi4omDXCIsXCImVGlsZGVGdWxsRXF1YWw7XCI6XCLiiYVcIixcIiZUaWxkZVRpbGRlO1wiOlwi4omIXCIsXCImVG9wZjtcIjpcIvCdlYtcIixcIiZUcmlwbGVEb3Q7XCI6XCLig5tcIixcIiZUc2NyO1wiOlwi8J2Sr1wiLFwiJlRzdHJvaztcIjpcIsWmXCIsXCImVWFjdXRlXCI6XCLDmlwiLFwiJlVhY3V0ZTtcIjpcIsOaXCIsXCImVWFycjtcIjpcIuKGn1wiLFwiJlVhcnJvY2lyO1wiOlwi4qWJXCIsXCImVWJyY3k7XCI6XCLQjlwiLFwiJlVicmV2ZTtcIjpcIsWsXCIsXCImVWNpcmNcIjpcIsObXCIsXCImVWNpcmM7XCI6XCLDm1wiLFwiJlVjeTtcIjpcItCjXCIsXCImVWRibGFjO1wiOlwixbBcIixcIiZVZnI7XCI6XCLwnZSYXCIsXCImVWdyYXZlXCI6XCLDmVwiLFwiJlVncmF2ZTtcIjpcIsOZXCIsXCImVW1hY3I7XCI6XCLFqlwiLFwiJlVuZGVyQmFyO1wiOlwiX1wiLFwiJlVuZGVyQnJhY2U7XCI6XCLij59cIixcIiZVbmRlckJyYWNrZXQ7XCI6XCLijrVcIixcIiZVbmRlclBhcmVudGhlc2lzO1wiOlwi4o+dXCIsXCImVW5pb247XCI6XCLii4NcIixcIiZVbmlvblBsdXM7XCI6XCLiio5cIixcIiZVb2dvbjtcIjpcIsWyXCIsXCImVW9wZjtcIjpcIvCdlYxcIixcIiZVcEFycm93O1wiOlwi4oaRXCIsXCImVXBBcnJvd0JhcjtcIjpcIuKkklwiLFwiJlVwQXJyb3dEb3duQXJyb3c7XCI6XCLih4VcIixcIiZVcERvd25BcnJvdztcIjpcIuKGlVwiLFwiJlVwRXF1aWxpYnJpdW07XCI6XCLipa5cIixcIiZVcFRlZTtcIjpcIuKKpVwiLFwiJlVwVGVlQXJyb3c7XCI6XCLihqVcIixcIiZVcGFycm93O1wiOlwi4oeRXCIsXCImVXBkb3duYXJyb3c7XCI6XCLih5VcIixcIiZVcHBlckxlZnRBcnJvdztcIjpcIuKGllwiLFwiJlVwcGVyUmlnaHRBcnJvdztcIjpcIuKGl1wiLFwiJlVwc2k7XCI6XCLPklwiLFwiJlVwc2lsb247XCI6XCLOpVwiLFwiJlVyaW5nO1wiOlwixa5cIixcIiZVc2NyO1wiOlwi8J2SsFwiLFwiJlV0aWxkZTtcIjpcIsWoXCIsXCImVXVtbFwiOlwiw5xcIixcIiZVdW1sO1wiOlwiw5xcIixcIiZWRGFzaDtcIjpcIuKKq1wiLFwiJlZiYXI7XCI6XCLiq6tcIixcIiZWY3k7XCI6XCLQklwiLFwiJlZkYXNoO1wiOlwi4oqpXCIsXCImVmRhc2hsO1wiOlwi4qumXCIsXCImVmVlO1wiOlwi4ouBXCIsXCImVmVyYmFyO1wiOlwi4oCWXCIsXCImVmVydDtcIjpcIuKAllwiLFwiJlZlcnRpY2FsQmFyO1wiOlwi4oijXCIsXCImVmVydGljYWxMaW5lO1wiOlwifFwiLFwiJlZlcnRpY2FsU2VwYXJhdG9yO1wiOlwi4p2YXCIsXCImVmVydGljYWxUaWxkZTtcIjpcIuKJgFwiLFwiJlZlcnlUaGluU3BhY2U7XCI6XCLigIpcIixcIiZWZnI7XCI6XCLwnZSZXCIsXCImVm9wZjtcIjpcIvCdlY1cIixcIiZWc2NyO1wiOlwi8J2SsVwiLFwiJlZ2ZGFzaDtcIjpcIuKKqlwiLFwiJldjaXJjO1wiOlwixbRcIixcIiZXZWRnZTtcIjpcIuKLgFwiLFwiJldmcjtcIjpcIvCdlJpcIixcIiZXb3BmO1wiOlwi8J2VjlwiLFwiJldzY3I7XCI6XCLwnZKyXCIsXCImWGZyO1wiOlwi8J2Um1wiLFwiJlhpO1wiOlwizp5cIixcIiZYb3BmO1wiOlwi8J2Vj1wiLFwiJlhzY3I7XCI6XCLwnZKzXCIsXCImWUFjeTtcIjpcItCvXCIsXCImWUljeTtcIjpcItCHXCIsXCImWVVjeTtcIjpcItCuXCIsXCImWWFjdXRlXCI6XCLDnVwiLFwiJllhY3V0ZTtcIjpcIsOdXCIsXCImWWNpcmM7XCI6XCLFtlwiLFwiJlljeTtcIjpcItCrXCIsXCImWWZyO1wiOlwi8J2UnFwiLFwiJllvcGY7XCI6XCLwnZWQXCIsXCImWXNjcjtcIjpcIvCdkrRcIixcIiZZdW1sO1wiOlwixbhcIixcIiZaSGN5O1wiOlwi0JZcIixcIiZaYWN1dGU7XCI6XCLFuVwiLFwiJlpjYXJvbjtcIjpcIsW9XCIsXCImWmN5O1wiOlwi0JdcIixcIiZaZG90O1wiOlwixbtcIixcIiZaZXJvV2lkdGhTcGFjZTtcIjpcIuKAi1wiLFwiJlpldGE7XCI6XCLOllwiLFwiJlpmcjtcIjpcIuKEqFwiLFwiJlpvcGY7XCI6XCLihKRcIixcIiZac2NyO1wiOlwi8J2StVwiLFwiJmFhY3V0ZVwiOlwiw6FcIixcIiZhYWN1dGU7XCI6XCLDoVwiLFwiJmFicmV2ZTtcIjpcIsSDXCIsXCImYWM7XCI6XCLiiL5cIixcIiZhY0U7XCI6XCLiiL7Ms1wiLFwiJmFjZDtcIjpcIuKIv1wiLFwiJmFjaXJjXCI6XCLDolwiLFwiJmFjaXJjO1wiOlwiw6JcIixcIiZhY3V0ZVwiOlwiwrRcIixcIiZhY3V0ZTtcIjpcIsK0XCIsXCImYWN5O1wiOlwi0LBcIixcIiZhZWxpZ1wiOlwiw6ZcIixcIiZhZWxpZztcIjpcIsOmXCIsXCImYWY7XCI6XCLigaFcIixcIiZhZnI7XCI6XCLwnZSeXCIsXCImYWdyYXZlXCI6XCLDoFwiLFwiJmFncmF2ZTtcIjpcIsOgXCIsXCImYWxlZnN5bTtcIjpcIuKEtVwiLFwiJmFsZXBoO1wiOlwi4oS1XCIsXCImYWxwaGE7XCI6XCLOsVwiLFwiJmFtYWNyO1wiOlwixIFcIixcIiZhbWFsZztcIjpcIuKov1wiLFwiJmFtcFwiOlwiJlwiLFwiJmFtcDtcIjpcIiZcIixcIiZhbmQ7XCI6XCLiiKdcIixcIiZhbmRhbmQ7XCI6XCLiqZVcIixcIiZhbmRkO1wiOlwi4qmcXCIsXCImYW5kc2xvcGU7XCI6XCLiqZhcIixcIiZhbmR2O1wiOlwi4qmaXCIsXCImYW5nO1wiOlwi4oigXCIsXCImYW5nZTtcIjpcIuKmpFwiLFwiJmFuZ2xlO1wiOlwi4oigXCIsXCImYW5nbXNkO1wiOlwi4oihXCIsXCImYW5nbXNkYWE7XCI6XCLipqhcIixcIiZhbmdtc2RhYjtcIjpcIuKmqVwiLFwiJmFuZ21zZGFjO1wiOlwi4qaqXCIsXCImYW5nbXNkYWQ7XCI6XCLipqtcIixcIiZhbmdtc2RhZTtcIjpcIuKmrFwiLFwiJmFuZ21zZGFmO1wiOlwi4qatXCIsXCImYW5nbXNkYWc7XCI6XCLipq5cIixcIiZhbmdtc2RhaDtcIjpcIuKmr1wiLFwiJmFuZ3J0O1wiOlwi4oifXCIsXCImYW5ncnR2YjtcIjpcIuKKvlwiLFwiJmFuZ3J0dmJkO1wiOlwi4qadXCIsXCImYW5nc3BoO1wiOlwi4oiiXCIsXCImYW5nc3Q7XCI6XCLDhVwiLFwiJmFuZ3phcnI7XCI6XCLijbxcIixcIiZhb2dvbjtcIjpcIsSFXCIsXCImYW9wZjtcIjpcIvCdlZJcIixcIiZhcDtcIjpcIuKJiFwiLFwiJmFwRTtcIjpcIuKpsFwiLFwiJmFwYWNpcjtcIjpcIuKpr1wiLFwiJmFwZTtcIjpcIuKJilwiLFwiJmFwaWQ7XCI6XCLiiYtcIixcIiZhcG9zO1wiOlwiJ1wiLFwiJmFwcHJveDtcIjpcIuKJiFwiLFwiJmFwcHJveGVxO1wiOlwi4omKXCIsXCImYXJpbmdcIjpcIsOlXCIsXCImYXJpbmc7XCI6XCLDpVwiLFwiJmFzY3I7XCI6XCLwnZK2XCIsXCImYXN0O1wiOlwiKlwiLFwiJmFzeW1wO1wiOlwi4omIXCIsXCImYXN5bXBlcTtcIjpcIuKJjVwiLFwiJmF0aWxkZVwiOlwiw6NcIixcIiZhdGlsZGU7XCI6XCLDo1wiLFwiJmF1bWxcIjpcIsOkXCIsXCImYXVtbDtcIjpcIsOkXCIsXCImYXdjb25pbnQ7XCI6XCLiiLNcIixcIiZhd2ludDtcIjpcIuKokVwiLFwiJmJOb3Q7XCI6XCLiq61cIixcIiZiYWNrY29uZztcIjpcIuKJjFwiLFwiJmJhY2tlcHNpbG9uO1wiOlwiz7ZcIixcIiZiYWNrcHJpbWU7XCI6XCLigLVcIixcIiZiYWNrc2ltO1wiOlwi4oi9XCIsXCImYmFja3NpbWVxO1wiOlwi4ouNXCIsXCImYmFydmVlO1wiOlwi4oq9XCIsXCImYmFyd2VkO1wiOlwi4oyFXCIsXCImYmFyd2VkZ2U7XCI6XCLijIVcIixcIiZiYnJrO1wiOlwi4o61XCIsXCImYmJya3Ricms7XCI6XCLijrZcIixcIiZiY29uZztcIjpcIuKJjFwiLFwiJmJjeTtcIjpcItCxXCIsXCImYmRxdW87XCI6XCLigJ5cIixcIiZiZWNhdXM7XCI6XCLiiLVcIixcIiZiZWNhdXNlO1wiOlwi4oi1XCIsXCImYmVtcHR5djtcIjpcIuKmsFwiLFwiJmJlcHNpO1wiOlwiz7ZcIixcIiZiZXJub3U7XCI6XCLihKxcIixcIiZiZXRhO1wiOlwizrJcIixcIiZiZXRoO1wiOlwi4oS2XCIsXCImYmV0d2VlbjtcIjpcIuKJrFwiLFwiJmJmcjtcIjpcIvCdlJ9cIixcIiZiaWdjYXA7XCI6XCLii4JcIixcIiZiaWdjaXJjO1wiOlwi4pevXCIsXCImYmlnY3VwO1wiOlwi4ouDXCIsXCImYmlnb2RvdDtcIjpcIuKogFwiLFwiJmJpZ29wbHVzO1wiOlwi4qiBXCIsXCImYmlnb3RpbWVzO1wiOlwi4qiCXCIsXCImYmlnc3FjdXA7XCI6XCLiqIZcIixcIiZiaWdzdGFyO1wiOlwi4piFXCIsXCImYmlndHJpYW5nbGVkb3duO1wiOlwi4pa9XCIsXCImYmlndHJpYW5nbGV1cDtcIjpcIuKWs1wiLFwiJmJpZ3VwbHVzO1wiOlwi4qiEXCIsXCImYmlndmVlO1wiOlwi4ouBXCIsXCImYmlnd2VkZ2U7XCI6XCLii4BcIixcIiZia2Fyb3c7XCI6XCLipI1cIixcIiZibGFja2xvemVuZ2U7XCI6XCLip6tcIixcIiZibGFja3NxdWFyZTtcIjpcIuKWqlwiLFwiJmJsYWNrdHJpYW5nbGU7XCI6XCLilrRcIixcIiZibGFja3RyaWFuZ2xlZG93bjtcIjpcIuKWvlwiLFwiJmJsYWNrdHJpYW5nbGVsZWZ0O1wiOlwi4peCXCIsXCImYmxhY2t0cmlhbmdsZXJpZ2h0O1wiOlwi4pa4XCIsXCImYmxhbms7XCI6XCLikKNcIixcIiZibGsxMjtcIjpcIuKWklwiLFwiJmJsazE0O1wiOlwi4paRXCIsXCImYmxrMzQ7XCI6XCLilpNcIixcIiZibG9jaztcIjpcIuKWiFwiLFwiJmJuZTtcIjpcIj3ig6VcIixcIiZibmVxdWl2O1wiOlwi4omh4oOlXCIsXCImYm5vdDtcIjpcIuKMkFwiLFwiJmJvcGY7XCI6XCLwnZWTXCIsXCImYm90O1wiOlwi4oqlXCIsXCImYm90dG9tO1wiOlwi4oqlXCIsXCImYm93dGllO1wiOlwi4ouIXCIsXCImYm94REw7XCI6XCLilZdcIixcIiZib3hEUjtcIjpcIuKVlFwiLFwiJmJveERsO1wiOlwi4pWWXCIsXCImYm94RHI7XCI6XCLilZNcIixcIiZib3hIO1wiOlwi4pWQXCIsXCImYm94SEQ7XCI6XCLilaZcIixcIiZib3hIVTtcIjpcIuKVqVwiLFwiJmJveEhkO1wiOlwi4pWkXCIsXCImYm94SHU7XCI6XCLiladcIixcIiZib3hVTDtcIjpcIuKVnVwiLFwiJmJveFVSO1wiOlwi4pWaXCIsXCImYm94VWw7XCI6XCLilZxcIixcIiZib3hVcjtcIjpcIuKVmVwiLFwiJmJveFY7XCI6XCLilZFcIixcIiZib3hWSDtcIjpcIuKVrFwiLFwiJmJveFZMO1wiOlwi4pWjXCIsXCImYm94VlI7XCI6XCLilaBcIixcIiZib3hWaDtcIjpcIuKVq1wiLFwiJmJveFZsO1wiOlwi4pWiXCIsXCImYm94VnI7XCI6XCLilZ9cIixcIiZib3hib3g7XCI6XCLip4lcIixcIiZib3hkTDtcIjpcIuKVlVwiLFwiJmJveGRSO1wiOlwi4pWSXCIsXCImYm94ZGw7XCI6XCLilJBcIixcIiZib3hkcjtcIjpcIuKUjFwiLFwiJmJveGg7XCI6XCLilIBcIixcIiZib3hoRDtcIjpcIuKVpVwiLFwiJmJveGhVO1wiOlwi4pWoXCIsXCImYm94aGQ7XCI6XCLilKxcIixcIiZib3hodTtcIjpcIuKUtFwiLFwiJmJveG1pbnVzO1wiOlwi4oqfXCIsXCImYm94cGx1cztcIjpcIuKKnlwiLFwiJmJveHRpbWVzO1wiOlwi4oqgXCIsXCImYm94dUw7XCI6XCLilZtcIixcIiZib3h1UjtcIjpcIuKVmFwiLFwiJmJveHVsO1wiOlwi4pSYXCIsXCImYm94dXI7XCI6XCLilJRcIixcIiZib3h2O1wiOlwi4pSCXCIsXCImYm94dkg7XCI6XCLilapcIixcIiZib3h2TDtcIjpcIuKVoVwiLFwiJmJveHZSO1wiOlwi4pWeXCIsXCImYm94dmg7XCI6XCLilLxcIixcIiZib3h2bDtcIjpcIuKUpFwiLFwiJmJveHZyO1wiOlwi4pScXCIsXCImYnByaW1lO1wiOlwi4oC1XCIsXCImYnJldmU7XCI6XCLLmFwiLFwiJmJydmJhclwiOlwiwqZcIixcIiZicnZiYXI7XCI6XCLCplwiLFwiJmJzY3I7XCI6XCLwnZK3XCIsXCImYnNlbWk7XCI6XCLigY9cIixcIiZic2ltO1wiOlwi4oi9XCIsXCImYnNpbWU7XCI6XCLii41cIixcIiZic29sO1wiOlwiXFxcXFwiLFwiJmJzb2xiO1wiOlwi4qeFXCIsXCImYnNvbGhzdWI7XCI6XCLin4hcIixcIiZidWxsO1wiOlwi4oCiXCIsXCImYnVsbGV0O1wiOlwi4oCiXCIsXCImYnVtcDtcIjpcIuKJjlwiLFwiJmJ1bXBFO1wiOlwi4qquXCIsXCImYnVtcGU7XCI6XCLiiY9cIixcIiZidW1wZXE7XCI6XCLiiY9cIixcIiZjYWN1dGU7XCI6XCLEh1wiLFwiJmNhcDtcIjpcIuKIqVwiLFwiJmNhcGFuZDtcIjpcIuKphFwiLFwiJmNhcGJyY3VwO1wiOlwi4qmJXCIsXCImY2FwY2FwO1wiOlwi4qmLXCIsXCImY2FwY3VwO1wiOlwi4qmHXCIsXCImY2FwZG90O1wiOlwi4qmAXCIsXCImY2FwcztcIjpcIuKIqe+4gFwiLFwiJmNhcmV0O1wiOlwi4oGBXCIsXCImY2Fyb247XCI6XCLLh1wiLFwiJmNjYXBzO1wiOlwi4qmNXCIsXCImY2Nhcm9uO1wiOlwixI1cIixcIiZjY2VkaWxcIjpcIsOnXCIsXCImY2NlZGlsO1wiOlwiw6dcIixcIiZjY2lyYztcIjpcIsSJXCIsXCImY2N1cHM7XCI6XCLiqYxcIixcIiZjY3Vwc3NtO1wiOlwi4qmQXCIsXCImY2RvdDtcIjpcIsSLXCIsXCImY2VkaWxcIjpcIsK4XCIsXCImY2VkaWw7XCI6XCLCuFwiLFwiJmNlbXB0eXY7XCI6XCLiprJcIixcIiZjZW50XCI6XCLColwiLFwiJmNlbnQ7XCI6XCLColwiLFwiJmNlbnRlcmRvdDtcIjpcIsK3XCIsXCImY2ZyO1wiOlwi8J2UoFwiLFwiJmNoY3k7XCI6XCLRh1wiLFwiJmNoZWNrO1wiOlwi4pyTXCIsXCImY2hlY2ttYXJrO1wiOlwi4pyTXCIsXCImY2hpO1wiOlwiz4dcIixcIiZjaXI7XCI6XCLil4tcIixcIiZjaXJFO1wiOlwi4qeDXCIsXCImY2lyYztcIjpcIsuGXCIsXCImY2lyY2VxO1wiOlwi4omXXCIsXCImY2lyY2xlYXJyb3dsZWZ0O1wiOlwi4oa6XCIsXCImY2lyY2xlYXJyb3dyaWdodDtcIjpcIuKGu1wiLFwiJmNpcmNsZWRSO1wiOlwiwq5cIixcIiZjaXJjbGVkUztcIjpcIuKTiFwiLFwiJmNpcmNsZWRhc3Q7XCI6XCLiiptcIixcIiZjaXJjbGVkY2lyYztcIjpcIuKKmlwiLFwiJmNpcmNsZWRkYXNoO1wiOlwi4oqdXCIsXCImY2lyZTtcIjpcIuKJl1wiLFwiJmNpcmZuaW50O1wiOlwi4qiQXCIsXCImY2lybWlkO1wiOlwi4quvXCIsXCImY2lyc2NpcjtcIjpcIuKnglwiLFwiJmNsdWJzO1wiOlwi4pmjXCIsXCImY2x1YnN1aXQ7XCI6XCLimaNcIixcIiZjb2xvbjtcIjpcIjpcIixcIiZjb2xvbmU7XCI6XCLiiZRcIixcIiZjb2xvbmVxO1wiOlwi4omUXCIsXCImY29tbWE7XCI6XCIsXCIsXCImY29tbWF0O1wiOlwiQFwiLFwiJmNvbXA7XCI6XCLiiIFcIixcIiZjb21wZm47XCI6XCLiiJhcIixcIiZjb21wbGVtZW50O1wiOlwi4oiBXCIsXCImY29tcGxleGVzO1wiOlwi4oSCXCIsXCImY29uZztcIjpcIuKJhVwiLFwiJmNvbmdkb3Q7XCI6XCLiqa1cIixcIiZjb25pbnQ7XCI6XCLiiK5cIixcIiZjb3BmO1wiOlwi8J2VlFwiLFwiJmNvcHJvZDtcIjpcIuKIkFwiLFwiJmNvcHlcIjpcIsKpXCIsXCImY29weTtcIjpcIsKpXCIsXCImY29weXNyO1wiOlwi4oSXXCIsXCImY3JhcnI7XCI6XCLihrVcIixcIiZjcm9zcztcIjpcIuKcl1wiLFwiJmNzY3I7XCI6XCLwnZK4XCIsXCImY3N1YjtcIjpcIuKrj1wiLFwiJmNzdWJlO1wiOlwi4quRXCIsXCImY3N1cDtcIjpcIuKrkFwiLFwiJmNzdXBlO1wiOlwi4quSXCIsXCImY3Rkb3Q7XCI6XCLii69cIixcIiZjdWRhcnJsO1wiOlwi4qS4XCIsXCImY3VkYXJycjtcIjpcIuKktVwiLFwiJmN1ZXByO1wiOlwi4oueXCIsXCImY3Vlc2M7XCI6XCLii59cIixcIiZjdWxhcnI7XCI6XCLihrZcIixcIiZjdWxhcnJwO1wiOlwi4qS9XCIsXCImY3VwO1wiOlwi4oiqXCIsXCImY3VwYnJjYXA7XCI6XCLiqYhcIixcIiZjdXBjYXA7XCI6XCLiqYZcIixcIiZjdXBjdXA7XCI6XCLiqYpcIixcIiZjdXBkb3Q7XCI6XCLiio1cIixcIiZjdXBvcjtcIjpcIuKphVwiLFwiJmN1cHM7XCI6XCLiiKrvuIBcIixcIiZjdXJhcnI7XCI6XCLihrdcIixcIiZjdXJhcnJtO1wiOlwi4qS8XCIsXCImY3VybHllcXByZWM7XCI6XCLii55cIixcIiZjdXJseWVxc3VjYztcIjpcIuKLn1wiLFwiJmN1cmx5dmVlO1wiOlwi4ouOXCIsXCImY3VybHl3ZWRnZTtcIjpcIuKLj1wiLFwiJmN1cnJlblwiOlwiwqRcIixcIiZjdXJyZW47XCI6XCLCpFwiLFwiJmN1cnZlYXJyb3dsZWZ0O1wiOlwi4oa2XCIsXCImY3VydmVhcnJvd3JpZ2h0O1wiOlwi4oa3XCIsXCImY3V2ZWU7XCI6XCLii45cIixcIiZjdXdlZDtcIjpcIuKLj1wiLFwiJmN3Y29uaW50O1wiOlwi4oiyXCIsXCImY3dpbnQ7XCI6XCLiiLFcIixcIiZjeWxjdHk7XCI6XCLijK1cIixcIiZkQXJyO1wiOlwi4oeTXCIsXCImZEhhcjtcIjpcIuKlpVwiLFwiJmRhZ2dlcjtcIjpcIuKAoFwiLFwiJmRhbGV0aDtcIjpcIuKEuFwiLFwiJmRhcnI7XCI6XCLihpNcIixcIiZkYXNoO1wiOlwi4oCQXCIsXCImZGFzaHY7XCI6XCLiiqNcIixcIiZkYmthcm93O1wiOlwi4qSPXCIsXCImZGJsYWM7XCI6XCLLnVwiLFwiJmRjYXJvbjtcIjpcIsSPXCIsXCImZGN5O1wiOlwi0LRcIixcIiZkZDtcIjpcIuKFhlwiLFwiJmRkYWdnZXI7XCI6XCLigKFcIixcIiZkZGFycjtcIjpcIuKHilwiLFwiJmRkb3RzZXE7XCI6XCLiqbdcIixcIiZkZWdcIjpcIsKwXCIsXCImZGVnO1wiOlwiwrBcIixcIiZkZWx0YTtcIjpcIs60XCIsXCImZGVtcHR5djtcIjpcIuKmsVwiLFwiJmRmaXNodDtcIjpcIuKlv1wiLFwiJmRmcjtcIjpcIvCdlKFcIixcIiZkaGFybDtcIjpcIuKHg1wiLFwiJmRoYXJyO1wiOlwi4oeCXCIsXCImZGlhbTtcIjpcIuKLhFwiLFwiJmRpYW1vbmQ7XCI6XCLii4RcIixcIiZkaWFtb25kc3VpdDtcIjpcIuKZplwiLFwiJmRpYW1zO1wiOlwi4pmmXCIsXCImZGllO1wiOlwiwqhcIixcIiZkaWdhbW1hO1wiOlwiz51cIixcIiZkaXNpbjtcIjpcIuKLslwiLFwiJmRpdjtcIjpcIsO3XCIsXCImZGl2aWRlXCI6XCLDt1wiLFwiJmRpdmlkZTtcIjpcIsO3XCIsXCImZGl2aWRlb250aW1lcztcIjpcIuKLh1wiLFwiJmRpdm9ueDtcIjpcIuKLh1wiLFwiJmRqY3k7XCI6XCLRklwiLFwiJmRsY29ybjtcIjpcIuKMnlwiLFwiJmRsY3JvcDtcIjpcIuKMjVwiLFwiJmRvbGxhcjtcIjpcIiRcIixcIiZkb3BmO1wiOlwi8J2VlVwiLFwiJmRvdDtcIjpcIsuZXCIsXCImZG90ZXE7XCI6XCLiiZBcIixcIiZkb3RlcWRvdDtcIjpcIuKJkVwiLFwiJmRvdG1pbnVzO1wiOlwi4oi4XCIsXCImZG90cGx1cztcIjpcIuKIlFwiLFwiJmRvdHNxdWFyZTtcIjpcIuKKoVwiLFwiJmRvdWJsZWJhcndlZGdlO1wiOlwi4oyGXCIsXCImZG93bmFycm93O1wiOlwi4oaTXCIsXCImZG93bmRvd25hcnJvd3M7XCI6XCLih4pcIixcIiZkb3duaGFycG9vbmxlZnQ7XCI6XCLih4NcIixcIiZkb3duaGFycG9vbnJpZ2h0O1wiOlwi4oeCXCIsXCImZHJia2Fyb3c7XCI6XCLipJBcIixcIiZkcmNvcm47XCI6XCLijJ9cIixcIiZkcmNyb3A7XCI6XCLijIxcIixcIiZkc2NyO1wiOlwi8J2SuVwiLFwiJmRzY3k7XCI6XCLRlVwiLFwiJmRzb2w7XCI6XCLip7ZcIixcIiZkc3Ryb2s7XCI6XCLEkVwiLFwiJmR0ZG90O1wiOlwi4ouxXCIsXCImZHRyaTtcIjpcIuKWv1wiLFwiJmR0cmlmO1wiOlwi4pa+XCIsXCImZHVhcnI7XCI6XCLih7VcIixcIiZkdWhhcjtcIjpcIuKlr1wiLFwiJmR3YW5nbGU7XCI6XCLipqZcIixcIiZkemN5O1wiOlwi0Z9cIixcIiZkemlncmFycjtcIjpcIuKfv1wiLFwiJmVERG90O1wiOlwi4qm3XCIsXCImZURvdDtcIjpcIuKJkVwiLFwiJmVhY3V0ZVwiOlwiw6lcIixcIiZlYWN1dGU7XCI6XCLDqVwiLFwiJmVhc3RlcjtcIjpcIuKprlwiLFwiJmVjYXJvbjtcIjpcIsSbXCIsXCImZWNpcjtcIjpcIuKJllwiLFwiJmVjaXJjXCI6XCLDqlwiLFwiJmVjaXJjO1wiOlwiw6pcIixcIiZlY29sb247XCI6XCLiiZVcIixcIiZlY3k7XCI6XCLRjVwiLFwiJmVkb3Q7XCI6XCLEl1wiLFwiJmVlO1wiOlwi4oWHXCIsXCImZWZEb3Q7XCI6XCLiiZJcIixcIiZlZnI7XCI6XCLwnZSiXCIsXCImZWc7XCI6XCLiqppcIixcIiZlZ3JhdmVcIjpcIsOoXCIsXCImZWdyYXZlO1wiOlwiw6hcIixcIiZlZ3M7XCI6XCLiqpZcIixcIiZlZ3Nkb3Q7XCI6XCLiqphcIixcIiZlbDtcIjpcIuKqmVwiLFwiJmVsaW50ZXJzO1wiOlwi4o+nXCIsXCImZWxsO1wiOlwi4oSTXCIsXCImZWxzO1wiOlwi4qqVXCIsXCImZWxzZG90O1wiOlwi4qqXXCIsXCImZW1hY3I7XCI6XCLEk1wiLFwiJmVtcHR5O1wiOlwi4oiFXCIsXCImZW1wdHlzZXQ7XCI6XCLiiIVcIixcIiZlbXB0eXY7XCI6XCLiiIVcIixcIiZlbXNwMTM7XCI6XCLigIRcIixcIiZlbXNwMTQ7XCI6XCLigIVcIixcIiZlbXNwO1wiOlwi4oCDXCIsXCImZW5nO1wiOlwixYtcIixcIiZlbnNwO1wiOlwi4oCCXCIsXCImZW9nb247XCI6XCLEmVwiLFwiJmVvcGY7XCI6XCLwnZWWXCIsXCImZXBhcjtcIjpcIuKLlVwiLFwiJmVwYXJzbDtcIjpcIuKno1wiLFwiJmVwbHVzO1wiOlwi4qmxXCIsXCImZXBzaTtcIjpcIs61XCIsXCImZXBzaWxvbjtcIjpcIs61XCIsXCImZXBzaXY7XCI6XCLPtVwiLFwiJmVxY2lyYztcIjpcIuKJllwiLFwiJmVxY29sb247XCI6XCLiiZVcIixcIiZlcXNpbTtcIjpcIuKJglwiLFwiJmVxc2xhbnRndHI7XCI6XCLiqpZcIixcIiZlcXNsYW50bGVzcztcIjpcIuKqlVwiLFwiJmVxdWFscztcIjpcIj1cIixcIiZlcXVlc3Q7XCI6XCLiiZ9cIixcIiZlcXVpdjtcIjpcIuKJoVwiLFwiJmVxdWl2REQ7XCI6XCLiqbhcIixcIiZlcXZwYXJzbDtcIjpcIuKnpVwiLFwiJmVyRG90O1wiOlwi4omTXCIsXCImZXJhcnI7XCI6XCLipbFcIixcIiZlc2NyO1wiOlwi4oSvXCIsXCImZXNkb3Q7XCI6XCLiiZBcIixcIiZlc2ltO1wiOlwi4omCXCIsXCImZXRhO1wiOlwizrdcIixcIiZldGhcIjpcIsOwXCIsXCImZXRoO1wiOlwiw7BcIixcIiZldW1sXCI6XCLDq1wiLFwiJmV1bWw7XCI6XCLDq1wiLFwiJmV1cm87XCI6XCLigqxcIixcIiZleGNsO1wiOlwiIVwiLFwiJmV4aXN0O1wiOlwi4oiDXCIsXCImZXhwZWN0YXRpb247XCI6XCLihLBcIixcIiZleHBvbmVudGlhbGU7XCI6XCLihYdcIixcIiZmYWxsaW5nZG90c2VxO1wiOlwi4omSXCIsXCImZmN5O1wiOlwi0YRcIixcIiZmZW1hbGU7XCI6XCLimYBcIixcIiZmZmlsaWc7XCI6XCLvrINcIixcIiZmZmxpZztcIjpcIu+sgFwiLFwiJmZmbGxpZztcIjpcIu+shFwiLFwiJmZmcjtcIjpcIvCdlKNcIixcIiZmaWxpZztcIjpcIu+sgVwiLFwiJmZqbGlnO1wiOlwiZmpcIixcIiZmbGF0O1wiOlwi4pmtXCIsXCImZmxsaWc7XCI6XCLvrIJcIixcIiZmbHRucztcIjpcIuKWsVwiLFwiJmZub2Y7XCI6XCLGklwiLFwiJmZvcGY7XCI6XCLwnZWXXCIsXCImZm9yYWxsO1wiOlwi4oiAXCIsXCImZm9yaztcIjpcIuKLlFwiLFwiJmZvcmt2O1wiOlwi4quZXCIsXCImZnBhcnRpbnQ7XCI6XCLiqI1cIixcIiZmcmFjMTJcIjpcIsK9XCIsXCImZnJhYzEyO1wiOlwiwr1cIixcIiZmcmFjMTM7XCI6XCLihZNcIixcIiZmcmFjMTRcIjpcIsK8XCIsXCImZnJhYzE0O1wiOlwiwrxcIixcIiZmcmFjMTU7XCI6XCLihZVcIixcIiZmcmFjMTY7XCI6XCLihZlcIixcIiZmcmFjMTg7XCI6XCLihZtcIixcIiZmcmFjMjM7XCI6XCLihZRcIixcIiZmcmFjMjU7XCI6XCLihZZcIixcIiZmcmFjMzRcIjpcIsK+XCIsXCImZnJhYzM0O1wiOlwiwr5cIixcIiZmcmFjMzU7XCI6XCLihZdcIixcIiZmcmFjMzg7XCI6XCLihZxcIixcIiZmcmFjNDU7XCI6XCLihZhcIixcIiZmcmFjNTY7XCI6XCLihZpcIixcIiZmcmFjNTg7XCI6XCLihZ1cIixcIiZmcmFjNzg7XCI6XCLihZ5cIixcIiZmcmFzbDtcIjpcIuKBhFwiLFwiJmZyb3duO1wiOlwi4oyiXCIsXCImZnNjcjtcIjpcIvCdkrtcIixcIiZnRTtcIjpcIuKJp1wiLFwiJmdFbDtcIjpcIuKqjFwiLFwiJmdhY3V0ZTtcIjpcIse1XCIsXCImZ2FtbWE7XCI6XCLOs1wiLFwiJmdhbW1hZDtcIjpcIs+dXCIsXCImZ2FwO1wiOlwi4qqGXCIsXCImZ2JyZXZlO1wiOlwixJ9cIixcIiZnY2lyYztcIjpcIsSdXCIsXCImZ2N5O1wiOlwi0LNcIixcIiZnZG90O1wiOlwixKFcIixcIiZnZTtcIjpcIuKJpVwiLFwiJmdlbDtcIjpcIuKLm1wiLFwiJmdlcTtcIjpcIuKJpVwiLFwiJmdlcXE7XCI6XCLiiadcIixcIiZnZXFzbGFudDtcIjpcIuKpvlwiLFwiJmdlcztcIjpcIuKpvlwiLFwiJmdlc2NjO1wiOlwi4qqpXCIsXCImZ2VzZG90O1wiOlwi4qqAXCIsXCImZ2VzZG90bztcIjpcIuKqglwiLFwiJmdlc2RvdG9sO1wiOlwi4qqEXCIsXCImZ2VzbDtcIjpcIuKLm++4gFwiLFwiJmdlc2xlcztcIjpcIuKqlFwiLFwiJmdmcjtcIjpcIvCdlKRcIixcIiZnZztcIjpcIuKJq1wiLFwiJmdnZztcIjpcIuKLmVwiLFwiJmdpbWVsO1wiOlwi4oS3XCIsXCImZ2pjeTtcIjpcItGTXCIsXCImZ2w7XCI6XCLiibdcIixcIiZnbEU7XCI6XCLiqpJcIixcIiZnbGE7XCI6XCLiqqVcIixcIiZnbGo7XCI6XCLiqqRcIixcIiZnbkU7XCI6XCLiialcIixcIiZnbmFwO1wiOlwi4qqKXCIsXCImZ25hcHByb3g7XCI6XCLiqopcIixcIiZnbmU7XCI6XCLiqohcIixcIiZnbmVxO1wiOlwi4qqIXCIsXCImZ25lcXE7XCI6XCLiialcIixcIiZnbnNpbTtcIjpcIuKLp1wiLFwiJmdvcGY7XCI6XCLwnZWYXCIsXCImZ3JhdmU7XCI6XCJgXCIsXCImZ3NjcjtcIjpcIuKEilwiLFwiJmdzaW07XCI6XCLiibNcIixcIiZnc2ltZTtcIjpcIuKqjlwiLFwiJmdzaW1sO1wiOlwi4qqQXCIsXCImZ3RcIjpcIj5cIixcIiZndDtcIjpcIj5cIixcIiZndGNjO1wiOlwi4qqnXCIsXCImZ3RjaXI7XCI6XCLiqbpcIixcIiZndGRvdDtcIjpcIuKLl1wiLFwiJmd0bFBhcjtcIjpcIuKmlVwiLFwiJmd0cXVlc3Q7XCI6XCLiqbxcIixcIiZndHJhcHByb3g7XCI6XCLiqoZcIixcIiZndHJhcnI7XCI6XCLipbhcIixcIiZndHJkb3Q7XCI6XCLii5dcIixcIiZndHJlcWxlc3M7XCI6XCLii5tcIixcIiZndHJlcXFsZXNzO1wiOlwi4qqMXCIsXCImZ3RybGVzcztcIjpcIuKJt1wiLFwiJmd0cnNpbTtcIjpcIuKJs1wiLFwiJmd2ZXJ0bmVxcTtcIjpcIuKJqe+4gFwiLFwiJmd2bkU7XCI6XCLiianvuIBcIixcIiZoQXJyO1wiOlwi4oeUXCIsXCImaGFpcnNwO1wiOlwi4oCKXCIsXCImaGFsZjtcIjpcIsK9XCIsXCImaGFtaWx0O1wiOlwi4oSLXCIsXCImaGFyZGN5O1wiOlwi0YpcIixcIiZoYXJyO1wiOlwi4oaUXCIsXCImaGFycmNpcjtcIjpcIuKliFwiLFwiJmhhcnJ3O1wiOlwi4oatXCIsXCImaGJhcjtcIjpcIuKEj1wiLFwiJmhjaXJjO1wiOlwixKVcIixcIiZoZWFydHM7XCI6XCLimaVcIixcIiZoZWFydHN1aXQ7XCI6XCLimaVcIixcIiZoZWxsaXA7XCI6XCLigKZcIixcIiZoZXJjb247XCI6XCLiirlcIixcIiZoZnI7XCI6XCLwnZSlXCIsXCImaGtzZWFyb3c7XCI6XCLipKVcIixcIiZoa3N3YXJvdztcIjpcIuKkplwiLFwiJmhvYXJyO1wiOlwi4oe/XCIsXCImaG9tdGh0O1wiOlwi4oi7XCIsXCImaG9va2xlZnRhcnJvdztcIjpcIuKGqVwiLFwiJmhvb2tyaWdodGFycm93O1wiOlwi4oaqXCIsXCImaG9wZjtcIjpcIvCdlZlcIixcIiZob3JiYXI7XCI6XCLigJVcIixcIiZoc2NyO1wiOlwi8J2SvVwiLFwiJmhzbGFzaDtcIjpcIuKEj1wiLFwiJmhzdHJvaztcIjpcIsSnXCIsXCImaHlidWxsO1wiOlwi4oGDXCIsXCImaHlwaGVuO1wiOlwi4oCQXCIsXCImaWFjdXRlXCI6XCLDrVwiLFwiJmlhY3V0ZTtcIjpcIsOtXCIsXCImaWM7XCI6XCLigaNcIixcIiZpY2lyY1wiOlwiw65cIixcIiZpY2lyYztcIjpcIsOuXCIsXCImaWN5O1wiOlwi0LhcIixcIiZpZWN5O1wiOlwi0LVcIixcIiZpZXhjbFwiOlwiwqFcIixcIiZpZXhjbDtcIjpcIsKhXCIsXCImaWZmO1wiOlwi4oeUXCIsXCImaWZyO1wiOlwi8J2UplwiLFwiJmlncmF2ZVwiOlwiw6xcIixcIiZpZ3JhdmU7XCI6XCLDrFwiLFwiJmlpO1wiOlwi4oWIXCIsXCImaWlpaW50O1wiOlwi4qiMXCIsXCImaWlpbnQ7XCI6XCLiiK1cIixcIiZpaW5maW47XCI6XCLip5xcIixcIiZpaW90YTtcIjpcIuKEqVwiLFwiJmlqbGlnO1wiOlwixLNcIixcIiZpbWFjcjtcIjpcIsSrXCIsXCImaW1hZ2U7XCI6XCLihJFcIixcIiZpbWFnbGluZTtcIjpcIuKEkFwiLFwiJmltYWdwYXJ0O1wiOlwi4oSRXCIsXCImaW1hdGg7XCI6XCLEsVwiLFwiJmltb2Y7XCI6XCLiirdcIixcIiZpbXBlZDtcIjpcIsa1XCIsXCImaW47XCI6XCLiiIhcIixcIiZpbmNhcmU7XCI6XCLihIVcIixcIiZpbmZpbjtcIjpcIuKInlwiLFwiJmluZmludGllO1wiOlwi4qedXCIsXCImaW5vZG90O1wiOlwixLFcIixcIiZpbnQ7XCI6XCLiiKtcIixcIiZpbnRjYWw7XCI6XCLiirpcIixcIiZpbnRlZ2VycztcIjpcIuKEpFwiLFwiJmludGVyY2FsO1wiOlwi4oq6XCIsXCImaW50bGFyaGs7XCI6XCLiqJdcIixcIiZpbnRwcm9kO1wiOlwi4qi8XCIsXCImaW9jeTtcIjpcItGRXCIsXCImaW9nb247XCI6XCLEr1wiLFwiJmlvcGY7XCI6XCLwnZWaXCIsXCImaW90YTtcIjpcIs65XCIsXCImaXByb2Q7XCI6XCLiqLxcIixcIiZpcXVlc3RcIjpcIsK/XCIsXCImaXF1ZXN0O1wiOlwiwr9cIixcIiZpc2NyO1wiOlwi8J2SvlwiLFwiJmlzaW47XCI6XCLiiIhcIixcIiZpc2luRTtcIjpcIuKLuVwiLFwiJmlzaW5kb3Q7XCI6XCLii7VcIixcIiZpc2lucztcIjpcIuKLtFwiLFwiJmlzaW5zdjtcIjpcIuKLs1wiLFwiJmlzaW52O1wiOlwi4oiIXCIsXCImaXQ7XCI6XCLigaJcIixcIiZpdGlsZGU7XCI6XCLEqVwiLFwiJml1a2N5O1wiOlwi0ZZcIixcIiZpdW1sXCI6XCLDr1wiLFwiJml1bWw7XCI6XCLDr1wiLFwiJmpjaXJjO1wiOlwixLVcIixcIiZqY3k7XCI6XCLQuVwiLFwiJmpmcjtcIjpcIvCdlKdcIixcIiZqbWF0aDtcIjpcIsi3XCIsXCImam9wZjtcIjpcIvCdlZtcIixcIiZqc2NyO1wiOlwi8J2Sv1wiLFwiJmpzZXJjeTtcIjpcItGYXCIsXCImanVrY3k7XCI6XCLRlFwiLFwiJmthcHBhO1wiOlwizrpcIixcIiZrYXBwYXY7XCI6XCLPsFwiLFwiJmtjZWRpbDtcIjpcIsS3XCIsXCIma2N5O1wiOlwi0LpcIixcIiZrZnI7XCI6XCLwnZSoXCIsXCIma2dyZWVuO1wiOlwixLhcIixcIiZraGN5O1wiOlwi0YVcIixcIiZramN5O1wiOlwi0ZxcIixcIiZrb3BmO1wiOlwi8J2VnFwiLFwiJmtzY3I7XCI6XCLwnZOAXCIsXCImbEFhcnI7XCI6XCLih5pcIixcIiZsQXJyO1wiOlwi4oeQXCIsXCImbEF0YWlsO1wiOlwi4qSbXCIsXCImbEJhcnI7XCI6XCLipI5cIixcIiZsRTtcIjpcIuKJplwiLFwiJmxFZztcIjpcIuKqi1wiLFwiJmxIYXI7XCI6XCLipaJcIixcIiZsYWN1dGU7XCI6XCLEulwiLFwiJmxhZW1wdHl2O1wiOlwi4qa0XCIsXCImbGFncmFuO1wiOlwi4oSSXCIsXCImbGFtYmRhO1wiOlwizrtcIixcIiZsYW5nO1wiOlwi4p+oXCIsXCImbGFuZ2Q7XCI6XCLippFcIixcIiZsYW5nbGU7XCI6XCLin6hcIixcIiZsYXA7XCI6XCLiqoVcIixcIiZsYXF1b1wiOlwiwqtcIixcIiZsYXF1bztcIjpcIsKrXCIsXCImbGFycjtcIjpcIuKGkFwiLFwiJmxhcnJiO1wiOlwi4oekXCIsXCImbGFycmJmcztcIjpcIuKkn1wiLFwiJmxhcnJmcztcIjpcIuKknVwiLFwiJmxhcnJoaztcIjpcIuKGqVwiLFwiJmxhcnJscDtcIjpcIuKGq1wiLFwiJmxhcnJwbDtcIjpcIuKkuVwiLFwiJmxhcnJzaW07XCI6XCLipbNcIixcIiZsYXJydGw7XCI6XCLihqJcIixcIiZsYXQ7XCI6XCLiqqtcIixcIiZsYXRhaWw7XCI6XCLipJlcIixcIiZsYXRlO1wiOlwi4qqtXCIsXCImbGF0ZXM7XCI6XCLiqq3vuIBcIixcIiZsYmFycjtcIjpcIuKkjFwiLFwiJmxiYnJrO1wiOlwi4p2yXCIsXCImbGJyYWNlO1wiOlwie1wiLFwiJmxicmFjaztcIjpcIltcIixcIiZsYnJrZTtcIjpcIuKmi1wiLFwiJmxicmtzbGQ7XCI6XCLipo9cIixcIiZsYnJrc2x1O1wiOlwi4qaNXCIsXCImbGNhcm9uO1wiOlwixL5cIixcIiZsY2VkaWw7XCI6XCLEvFwiLFwiJmxjZWlsO1wiOlwi4oyIXCIsXCImbGN1YjtcIjpcIntcIixcIiZsY3k7XCI6XCLQu1wiLFwiJmxkY2E7XCI6XCLipLZcIixcIiZsZHF1bztcIjpcIuKAnFwiLFwiJmxkcXVvcjtcIjpcIuKAnlwiLFwiJmxkcmRoYXI7XCI6XCLipadcIixcIiZsZHJ1c2hhcjtcIjpcIuKli1wiLFwiJmxkc2g7XCI6XCLihrJcIixcIiZsZTtcIjpcIuKJpFwiLFwiJmxlZnRhcnJvdztcIjpcIuKGkFwiLFwiJmxlZnRhcnJvd3RhaWw7XCI6XCLihqJcIixcIiZsZWZ0aGFycG9vbmRvd247XCI6XCLihr1cIixcIiZsZWZ0aGFycG9vbnVwO1wiOlwi4oa8XCIsXCImbGVmdGxlZnRhcnJvd3M7XCI6XCLih4dcIixcIiZsZWZ0cmlnaHRhcnJvdztcIjpcIuKGlFwiLFwiJmxlZnRyaWdodGFycm93cztcIjpcIuKHhlwiLFwiJmxlZnRyaWdodGhhcnBvb25zO1wiOlwi4oeLXCIsXCImbGVmdHJpZ2h0c3F1aWdhcnJvdztcIjpcIuKGrVwiLFwiJmxlZnR0aHJlZXRpbWVzO1wiOlwi4ouLXCIsXCImbGVnO1wiOlwi4ouaXCIsXCImbGVxO1wiOlwi4omkXCIsXCImbGVxcTtcIjpcIuKJplwiLFwiJmxlcXNsYW50O1wiOlwi4qm9XCIsXCImbGVzO1wiOlwi4qm9XCIsXCImbGVzY2M7XCI6XCLiqqhcIixcIiZsZXNkb3Q7XCI6XCLiqb9cIixcIiZsZXNkb3RvO1wiOlwi4qqBXCIsXCImbGVzZG90b3I7XCI6XCLiqoNcIixcIiZsZXNnO1wiOlwi4oua77iAXCIsXCImbGVzZ2VzO1wiOlwi4qqTXCIsXCImbGVzc2FwcHJveDtcIjpcIuKqhVwiLFwiJmxlc3Nkb3Q7XCI6XCLii5ZcIixcIiZsZXNzZXFndHI7XCI6XCLii5pcIixcIiZsZXNzZXFxZ3RyO1wiOlwi4qqLXCIsXCImbGVzc2d0cjtcIjpcIuKJtlwiLFwiJmxlc3NzaW07XCI6XCLiibJcIixcIiZsZmlzaHQ7XCI6XCLipbxcIixcIiZsZmxvb3I7XCI6XCLijIpcIixcIiZsZnI7XCI6XCLwnZSpXCIsXCImbGc7XCI6XCLiibZcIixcIiZsZ0U7XCI6XCLiqpFcIixcIiZsaGFyZDtcIjpcIuKGvVwiLFwiJmxoYXJ1O1wiOlwi4oa8XCIsXCImbGhhcnVsO1wiOlwi4qWqXCIsXCImbGhibGs7XCI6XCLiloRcIixcIiZsamN5O1wiOlwi0ZlcIixcIiZsbDtcIjpcIuKJqlwiLFwiJmxsYXJyO1wiOlwi4oeHXCIsXCImbGxjb3JuZXI7XCI6XCLijJ5cIixcIiZsbGhhcmQ7XCI6XCLipatcIixcIiZsbHRyaTtcIjpcIuKXulwiLFwiJmxtaWRvdDtcIjpcIsWAXCIsXCImbG1vdXN0O1wiOlwi4o6wXCIsXCImbG1vdXN0YWNoZTtcIjpcIuKOsFwiLFwiJmxuRTtcIjpcIuKJqFwiLFwiJmxuYXA7XCI6XCLiqolcIixcIiZsbmFwcHJveDtcIjpcIuKqiVwiLFwiJmxuZTtcIjpcIuKqh1wiLFwiJmxuZXE7XCI6XCLiqodcIixcIiZsbmVxcTtcIjpcIuKJqFwiLFwiJmxuc2ltO1wiOlwi4oumXCIsXCImbG9hbmc7XCI6XCLin6xcIixcIiZsb2FycjtcIjpcIuKHvVwiLFwiJmxvYnJrO1wiOlwi4p+mXCIsXCImbG9uZ2xlZnRhcnJvdztcIjpcIuKftVwiLFwiJmxvbmdsZWZ0cmlnaHRhcnJvdztcIjpcIuKft1wiLFwiJmxvbmdtYXBzdG87XCI6XCLin7xcIixcIiZsb25ncmlnaHRhcnJvdztcIjpcIuKftlwiLFwiJmxvb3BhcnJvd2xlZnQ7XCI6XCLihqtcIixcIiZsb29wYXJyb3dyaWdodDtcIjpcIuKGrFwiLFwiJmxvcGFyO1wiOlwi4qaFXCIsXCImbG9wZjtcIjpcIvCdlZ1cIixcIiZsb3BsdXM7XCI6XCLiqK1cIixcIiZsb3RpbWVzO1wiOlwi4qi0XCIsXCImbG93YXN0O1wiOlwi4oiXXCIsXCImbG93YmFyO1wiOlwiX1wiLFwiJmxvejtcIjpcIuKXilwiLFwiJmxvemVuZ2U7XCI6XCLil4pcIixcIiZsb3pmO1wiOlwi4qerXCIsXCImbHBhcjtcIjpcIihcIixcIiZscGFybHQ7XCI6XCLippNcIixcIiZscmFycjtcIjpcIuKHhlwiLFwiJmxyY29ybmVyO1wiOlwi4oyfXCIsXCImbHJoYXI7XCI6XCLih4tcIixcIiZscmhhcmQ7XCI6XCLipa1cIixcIiZscm07XCI6XCLigI5cIixcIiZscnRyaTtcIjpcIuKKv1wiLFwiJmxzYXF1bztcIjpcIuKAuVwiLFwiJmxzY3I7XCI6XCLwnZOBXCIsXCImbHNoO1wiOlwi4oawXCIsXCImbHNpbTtcIjpcIuKJslwiLFwiJmxzaW1lO1wiOlwi4qqNXCIsXCImbHNpbWc7XCI6XCLiqo9cIixcIiZsc3FiO1wiOlwiW1wiLFwiJmxzcXVvO1wiOlwi4oCYXCIsXCImbHNxdW9yO1wiOlwi4oCaXCIsXCImbHN0cm9rO1wiOlwixYJcIixcIiZsdFwiOlwiPFwiLFwiJmx0O1wiOlwiPFwiLFwiJmx0Y2M7XCI6XCLiqqZcIixcIiZsdGNpcjtcIjpcIuKpuVwiLFwiJmx0ZG90O1wiOlwi4ouWXCIsXCImbHRocmVlO1wiOlwi4ouLXCIsXCImbHRpbWVzO1wiOlwi4ouJXCIsXCImbHRsYXJyO1wiOlwi4qW2XCIsXCImbHRxdWVzdDtcIjpcIuKpu1wiLFwiJmx0clBhcjtcIjpcIuKmllwiLFwiJmx0cmk7XCI6XCLil4NcIixcIiZsdHJpZTtcIjpcIuKKtFwiLFwiJmx0cmlmO1wiOlwi4peCXCIsXCImbHVyZHNoYXI7XCI6XCLipYpcIixcIiZsdXJ1aGFyO1wiOlwi4qWmXCIsXCImbHZlcnRuZXFxO1wiOlwi4omo77iAXCIsXCImbHZuRTtcIjpcIuKJqO+4gFwiLFwiJm1ERG90O1wiOlwi4oi6XCIsXCImbWFjclwiOlwiwq9cIixcIiZtYWNyO1wiOlwiwq9cIixcIiZtYWxlO1wiOlwi4pmCXCIsXCImbWFsdDtcIjpcIuKcoFwiLFwiJm1hbHRlc2U7XCI6XCLinKBcIixcIiZtYXA7XCI6XCLihqZcIixcIiZtYXBzdG87XCI6XCLihqZcIixcIiZtYXBzdG9kb3duO1wiOlwi4oanXCIsXCImbWFwc3RvbGVmdDtcIjpcIuKGpFwiLFwiJm1hcHN0b3VwO1wiOlwi4oalXCIsXCImbWFya2VyO1wiOlwi4pauXCIsXCImbWNvbW1hO1wiOlwi4qipXCIsXCImbWN5O1wiOlwi0LxcIixcIiZtZGFzaDtcIjpcIuKAlFwiLFwiJm1lYXN1cmVkYW5nbGU7XCI6XCLiiKFcIixcIiZtZnI7XCI6XCLwnZSqXCIsXCImbWhvO1wiOlwi4oSnXCIsXCImbWljcm9cIjpcIsK1XCIsXCImbWljcm87XCI6XCLCtVwiLFwiJm1pZDtcIjpcIuKIo1wiLFwiJm1pZGFzdDtcIjpcIipcIixcIiZtaWRjaXI7XCI6XCLiq7BcIixcIiZtaWRkb3RcIjpcIsK3XCIsXCImbWlkZG90O1wiOlwiwrdcIixcIiZtaW51cztcIjpcIuKIklwiLFwiJm1pbnVzYjtcIjpcIuKKn1wiLFwiJm1pbnVzZDtcIjpcIuKIuFwiLFwiJm1pbnVzZHU7XCI6XCLiqKpcIixcIiZtbGNwO1wiOlwi4qubXCIsXCImbWxkcjtcIjpcIuKAplwiLFwiJm1ucGx1cztcIjpcIuKIk1wiLFwiJm1vZGVscztcIjpcIuKKp1wiLFwiJm1vcGY7XCI6XCLwnZWeXCIsXCImbXA7XCI6XCLiiJNcIixcIiZtc2NyO1wiOlwi8J2TglwiLFwiJm1zdHBvcztcIjpcIuKIvlwiLFwiJm11O1wiOlwizrxcIixcIiZtdWx0aW1hcDtcIjpcIuKKuFwiLFwiJm11bWFwO1wiOlwi4oq4XCIsXCImbkdnO1wiOlwi4ouZzLhcIixcIiZuR3Q7XCI6XCLiiavig5JcIixcIiZuR3R2O1wiOlwi4omrzLhcIixcIiZuTGVmdGFycm93O1wiOlwi4oeNXCIsXCImbkxlZnRyaWdodGFycm93O1wiOlwi4oeOXCIsXCImbkxsO1wiOlwi4ouYzLhcIixcIiZuTHQ7XCI6XCLiiarig5JcIixcIiZuTHR2O1wiOlwi4omqzLhcIixcIiZuUmlnaHRhcnJvdztcIjpcIuKHj1wiLFwiJm5WRGFzaDtcIjpcIuKKr1wiLFwiJm5WZGFzaDtcIjpcIuKKrlwiLFwiJm5hYmxhO1wiOlwi4oiHXCIsXCImbmFjdXRlO1wiOlwixYRcIixcIiZuYW5nO1wiOlwi4oig4oOSXCIsXCImbmFwO1wiOlwi4omJXCIsXCImbmFwRTtcIjpcIuKpsMy4XCIsXCImbmFwaWQ7XCI6XCLiiYvMuFwiLFwiJm5hcG9zO1wiOlwixYlcIixcIiZuYXBwcm94O1wiOlwi4omJXCIsXCImbmF0dXI7XCI6XCLima5cIixcIiZuYXR1cmFsO1wiOlwi4pmuXCIsXCImbmF0dXJhbHM7XCI6XCLihJVcIixcIiZuYnNwXCI6XCLCoFwiLFwiJm5ic3A7XCI6XCLCoFwiLFwiJm5idW1wO1wiOlwi4omOzLhcIixcIiZuYnVtcGU7XCI6XCLiiY/MuFwiLFwiJm5jYXA7XCI6XCLiqYNcIixcIiZuY2Fyb247XCI6XCLFiFwiLFwiJm5jZWRpbDtcIjpcIsWGXCIsXCImbmNvbmc7XCI6XCLiiYdcIixcIiZuY29uZ2RvdDtcIjpcIuKprcy4XCIsXCImbmN1cDtcIjpcIuKpglwiLFwiJm5jeTtcIjpcItC9XCIsXCImbmRhc2g7XCI6XCLigJNcIixcIiZuZTtcIjpcIuKJoFwiLFwiJm5lQXJyO1wiOlwi4oeXXCIsXCImbmVhcmhrO1wiOlwi4qSkXCIsXCImbmVhcnI7XCI6XCLihpdcIixcIiZuZWFycm93O1wiOlwi4oaXXCIsXCImbmVkb3Q7XCI6XCLiiZDMuFwiLFwiJm5lcXVpdjtcIjpcIuKJolwiLFwiJm5lc2VhcjtcIjpcIuKkqFwiLFwiJm5lc2ltO1wiOlwi4omCzLhcIixcIiZuZXhpc3Q7XCI6XCLiiIRcIixcIiZuZXhpc3RzO1wiOlwi4oiEXCIsXCImbmZyO1wiOlwi8J2Uq1wiLFwiJm5nRTtcIjpcIuKJp8y4XCIsXCImbmdlO1wiOlwi4omxXCIsXCImbmdlcTtcIjpcIuKJsVwiLFwiJm5nZXFxO1wiOlwi4omnzLhcIixcIiZuZ2Vxc2xhbnQ7XCI6XCLiqb7MuFwiLFwiJm5nZXM7XCI6XCLiqb7MuFwiLFwiJm5nc2ltO1wiOlwi4om1XCIsXCImbmd0O1wiOlwi4omvXCIsXCImbmd0cjtcIjpcIuKJr1wiLFwiJm5oQXJyO1wiOlwi4oeOXCIsXCImbmhhcnI7XCI6XCLihq5cIixcIiZuaHBhcjtcIjpcIuKrslwiLFwiJm5pO1wiOlwi4oiLXCIsXCImbmlzO1wiOlwi4ou8XCIsXCImbmlzZDtcIjpcIuKLulwiLFwiJm5pdjtcIjpcIuKIi1wiLFwiJm5qY3k7XCI6XCLRmlwiLFwiJm5sQXJyO1wiOlwi4oeNXCIsXCImbmxFO1wiOlwi4ommzLhcIixcIiZubGFycjtcIjpcIuKGmlwiLFwiJm5sZHI7XCI6XCLigKVcIixcIiZubGU7XCI6XCLiibBcIixcIiZubGVmdGFycm93O1wiOlwi4oaaXCIsXCImbmxlZnRyaWdodGFycm93O1wiOlwi4oauXCIsXCImbmxlcTtcIjpcIuKJsFwiLFwiJm5sZXFxO1wiOlwi4ommzLhcIixcIiZubGVxc2xhbnQ7XCI6XCLiqb3MuFwiLFwiJm5sZXM7XCI6XCLiqb3MuFwiLFwiJm5sZXNzO1wiOlwi4omuXCIsXCImbmxzaW07XCI6XCLiibRcIixcIiZubHQ7XCI6XCLiia5cIixcIiZubHRyaTtcIjpcIuKLqlwiLFwiJm5sdHJpZTtcIjpcIuKLrFwiLFwiJm5taWQ7XCI6XCLiiKRcIixcIiZub3BmO1wiOlwi8J2Vn1wiLFwiJm5vdFwiOlwiwqxcIixcIiZub3Q7XCI6XCLCrFwiLFwiJm5vdGluO1wiOlwi4oiJXCIsXCImbm90aW5FO1wiOlwi4ou5zLhcIixcIiZub3RpbmRvdDtcIjpcIuKLtcy4XCIsXCImbm90aW52YTtcIjpcIuKIiVwiLFwiJm5vdGludmI7XCI6XCLii7dcIixcIiZub3RpbnZjO1wiOlwi4ou2XCIsXCImbm90bmk7XCI6XCLiiIxcIixcIiZub3RuaXZhO1wiOlwi4oiMXCIsXCImbm90bml2YjtcIjpcIuKLvlwiLFwiJm5vdG5pdmM7XCI6XCLii71cIixcIiZucGFyO1wiOlwi4oimXCIsXCImbnBhcmFsbGVsO1wiOlwi4oimXCIsXCImbnBhcnNsO1wiOlwi4qu94oOlXCIsXCImbnBhcnQ7XCI6XCLiiILMuFwiLFwiJm5wb2xpbnQ7XCI6XCLiqJRcIixcIiZucHI7XCI6XCLiioBcIixcIiZucHJjdWU7XCI6XCLii6BcIixcIiZucHJlO1wiOlwi4qqvzLhcIixcIiZucHJlYztcIjpcIuKKgFwiLFwiJm5wcmVjZXE7XCI6XCLiqq/MuFwiLFwiJm5yQXJyO1wiOlwi4oePXCIsXCImbnJhcnI7XCI6XCLihptcIixcIiZucmFycmM7XCI6XCLipLPMuFwiLFwiJm5yYXJydztcIjpcIuKGncy4XCIsXCImbnJpZ2h0YXJyb3c7XCI6XCLihptcIixcIiZucnRyaTtcIjpcIuKLq1wiLFwiJm5ydHJpZTtcIjpcIuKLrVwiLFwiJm5zYztcIjpcIuKKgVwiLFwiJm5zY2N1ZTtcIjpcIuKLoVwiLFwiJm5zY2U7XCI6XCLiqrDMuFwiLFwiJm5zY3I7XCI6XCLwnZODXCIsXCImbnNob3J0bWlkO1wiOlwi4oikXCIsXCImbnNob3J0cGFyYWxsZWw7XCI6XCLiiKZcIixcIiZuc2ltO1wiOlwi4omBXCIsXCImbnNpbWU7XCI6XCLiiYRcIixcIiZuc2ltZXE7XCI6XCLiiYRcIixcIiZuc21pZDtcIjpcIuKIpFwiLFwiJm5zcGFyO1wiOlwi4oimXCIsXCImbnNxc3ViZTtcIjpcIuKLolwiLFwiJm5zcXN1cGU7XCI6XCLii6NcIixcIiZuc3ViO1wiOlwi4oqEXCIsXCImbnN1YkU7XCI6XCLiq4XMuFwiLFwiJm5zdWJlO1wiOlwi4oqIXCIsXCImbnN1YnNldDtcIjpcIuKKguKDklwiLFwiJm5zdWJzZXRlcTtcIjpcIuKKiFwiLFwiJm5zdWJzZXRlcXE7XCI6XCLiq4XMuFwiLFwiJm5zdWNjO1wiOlwi4oqBXCIsXCImbnN1Y2NlcTtcIjpcIuKqsMy4XCIsXCImbnN1cDtcIjpcIuKKhVwiLFwiJm5zdXBFO1wiOlwi4quGzLhcIixcIiZuc3VwZTtcIjpcIuKKiVwiLFwiJm5zdXBzZXQ7XCI6XCLiioPig5JcIixcIiZuc3Vwc2V0ZXE7XCI6XCLiiolcIixcIiZuc3Vwc2V0ZXFxO1wiOlwi4quGzLhcIixcIiZudGdsO1wiOlwi4om5XCIsXCImbnRpbGRlXCI6XCLDsVwiLFwiJm50aWxkZTtcIjpcIsOxXCIsXCImbnRsZztcIjpcIuKJuFwiLFwiJm50cmlhbmdsZWxlZnQ7XCI6XCLii6pcIixcIiZudHJpYW5nbGVsZWZ0ZXE7XCI6XCLii6xcIixcIiZudHJpYW5nbGVyaWdodDtcIjpcIuKLq1wiLFwiJm50cmlhbmdsZXJpZ2h0ZXE7XCI6XCLii61cIixcIiZudTtcIjpcIs69XCIsXCImbnVtO1wiOlwiI1wiLFwiJm51bWVybztcIjpcIuKEllwiLFwiJm51bXNwO1wiOlwi4oCHXCIsXCImbnZEYXNoO1wiOlwi4oqtXCIsXCImbnZIYXJyO1wiOlwi4qSEXCIsXCImbnZhcDtcIjpcIuKJjeKDklwiLFwiJm52ZGFzaDtcIjpcIuKKrFwiLFwiJm52Z2U7XCI6XCLiiaXig5JcIixcIiZudmd0O1wiOlwiPuKDklwiLFwiJm52aW5maW47XCI6XCLip55cIixcIiZudmxBcnI7XCI6XCLipIJcIixcIiZudmxlO1wiOlwi4omk4oOSXCIsXCImbnZsdDtcIjpcIjzig5JcIixcIiZudmx0cmllO1wiOlwi4oq04oOSXCIsXCImbnZyQXJyO1wiOlwi4qSDXCIsXCImbnZydHJpZTtcIjpcIuKKteKDklwiLFwiJm52c2ltO1wiOlwi4oi84oOSXCIsXCImbndBcnI7XCI6XCLih5ZcIixcIiZud2FyaGs7XCI6XCLipKNcIixcIiZud2FycjtcIjpcIuKGllwiLFwiJm53YXJyb3c7XCI6XCLihpZcIixcIiZud25lYXI7XCI6XCLipKdcIixcIiZvUztcIjpcIuKTiFwiLFwiJm9hY3V0ZVwiOlwiw7NcIixcIiZvYWN1dGU7XCI6XCLDs1wiLFwiJm9hc3Q7XCI6XCLiiptcIixcIiZvY2lyO1wiOlwi4oqaXCIsXCImb2NpcmNcIjpcIsO0XCIsXCImb2NpcmM7XCI6XCLDtFwiLFwiJm9jeTtcIjpcItC+XCIsXCImb2Rhc2g7XCI6XCLiip1cIixcIiZvZGJsYWM7XCI6XCLFkVwiLFwiJm9kaXY7XCI6XCLiqLhcIixcIiZvZG90O1wiOlwi4oqZXCIsXCImb2Rzb2xkO1wiOlwi4qa8XCIsXCImb2VsaWc7XCI6XCLFk1wiLFwiJm9mY2lyO1wiOlwi4qa/XCIsXCImb2ZyO1wiOlwi8J2UrFwiLFwiJm9nb247XCI6XCLLm1wiLFwiJm9ncmF2ZVwiOlwiw7JcIixcIiZvZ3JhdmU7XCI6XCLDslwiLFwiJm9ndDtcIjpcIuKngVwiLFwiJm9oYmFyO1wiOlwi4qa1XCIsXCImb2htO1wiOlwizqlcIixcIiZvaW50O1wiOlwi4oiuXCIsXCImb2xhcnI7XCI6XCLihrpcIixcIiZvbGNpcjtcIjpcIuKmvlwiLFwiJm9sY3Jvc3M7XCI6XCLiprtcIixcIiZvbGluZTtcIjpcIuKAvlwiLFwiJm9sdDtcIjpcIuKngFwiLFwiJm9tYWNyO1wiOlwixY1cIixcIiZvbWVnYTtcIjpcIs+JXCIsXCImb21pY3JvbjtcIjpcIs6/XCIsXCImb21pZDtcIjpcIuKmtlwiLFwiJm9taW51cztcIjpcIuKKllwiLFwiJm9vcGY7XCI6XCLwnZWgXCIsXCImb3BhcjtcIjpcIuKmt1wiLFwiJm9wZXJwO1wiOlwi4qa5XCIsXCImb3BsdXM7XCI6XCLiipVcIixcIiZvcjtcIjpcIuKIqFwiLFwiJm9yYXJyO1wiOlwi4oa7XCIsXCImb3JkO1wiOlwi4qmdXCIsXCImb3JkZXI7XCI6XCLihLRcIixcIiZvcmRlcm9mO1wiOlwi4oS0XCIsXCImb3JkZlwiOlwiwqpcIixcIiZvcmRmO1wiOlwiwqpcIixcIiZvcmRtXCI6XCLCulwiLFwiJm9yZG07XCI6XCLCulwiLFwiJm9yaWdvZjtcIjpcIuKKtlwiLFwiJm9yb3I7XCI6XCLiqZZcIixcIiZvcnNsb3BlO1wiOlwi4qmXXCIsXCImb3J2O1wiOlwi4qmbXCIsXCImb3NjcjtcIjpcIuKEtFwiLFwiJm9zbGFzaFwiOlwiw7hcIixcIiZvc2xhc2g7XCI6XCLDuFwiLFwiJm9zb2w7XCI6XCLiiphcIixcIiZvdGlsZGVcIjpcIsO1XCIsXCImb3RpbGRlO1wiOlwiw7VcIixcIiZvdGltZXM7XCI6XCLiipdcIixcIiZvdGltZXNhcztcIjpcIuKotlwiLFwiJm91bWxcIjpcIsO2XCIsXCImb3VtbDtcIjpcIsO2XCIsXCImb3ZiYXI7XCI6XCLijL1cIixcIiZwYXI7XCI6XCLiiKVcIixcIiZwYXJhXCI6XCLCtlwiLFwiJnBhcmE7XCI6XCLCtlwiLFwiJnBhcmFsbGVsO1wiOlwi4oilXCIsXCImcGFyc2ltO1wiOlwi4quzXCIsXCImcGFyc2w7XCI6XCLiq71cIixcIiZwYXJ0O1wiOlwi4oiCXCIsXCImcGN5O1wiOlwi0L9cIixcIiZwZXJjbnQ7XCI6XCIlXCIsXCImcGVyaW9kO1wiOlwiLlwiLFwiJnBlcm1pbDtcIjpcIuKAsFwiLFwiJnBlcnA7XCI6XCLiiqVcIixcIiZwZXJ0ZW5rO1wiOlwi4oCxXCIsXCImcGZyO1wiOlwi8J2UrVwiLFwiJnBoaTtcIjpcIs+GXCIsXCImcGhpdjtcIjpcIs+VXCIsXCImcGhtbWF0O1wiOlwi4oSzXCIsXCImcGhvbmU7XCI6XCLimI5cIixcIiZwaTtcIjpcIs+AXCIsXCImcGl0Y2hmb3JrO1wiOlwi4ouUXCIsXCImcGl2O1wiOlwiz5ZcIixcIiZwbGFuY2s7XCI6XCLihI9cIixcIiZwbGFuY2toO1wiOlwi4oSOXCIsXCImcGxhbmt2O1wiOlwi4oSPXCIsXCImcGx1cztcIjpcIitcIixcIiZwbHVzYWNpcjtcIjpcIuKoo1wiLFwiJnBsdXNiO1wiOlwi4oqeXCIsXCImcGx1c2NpcjtcIjpcIuKoolwiLFwiJnBsdXNkbztcIjpcIuKIlFwiLFwiJnBsdXNkdTtcIjpcIuKopVwiLFwiJnBsdXNlO1wiOlwi4qmyXCIsXCImcGx1c21uXCI6XCLCsVwiLFwiJnBsdXNtbjtcIjpcIsKxXCIsXCImcGx1c3NpbTtcIjpcIuKoplwiLFwiJnBsdXN0d287XCI6XCLiqKdcIixcIiZwbTtcIjpcIsKxXCIsXCImcG9pbnRpbnQ7XCI6XCLiqJVcIixcIiZwb3BmO1wiOlwi8J2VoVwiLFwiJnBvdW5kXCI6XCLCo1wiLFwiJnBvdW5kO1wiOlwiwqNcIixcIiZwcjtcIjpcIuKJulwiLFwiJnByRTtcIjpcIuKqs1wiLFwiJnByYXA7XCI6XCLiqrdcIixcIiZwcmN1ZTtcIjpcIuKJvFwiLFwiJnByZTtcIjpcIuKqr1wiLFwiJnByZWM7XCI6XCLiibpcIixcIiZwcmVjYXBwcm94O1wiOlwi4qq3XCIsXCImcHJlY2N1cmx5ZXE7XCI6XCLiibxcIixcIiZwcmVjZXE7XCI6XCLiqq9cIixcIiZwcmVjbmFwcHJveDtcIjpcIuKquVwiLFwiJnByZWNuZXFxO1wiOlwi4qq1XCIsXCImcHJlY25zaW07XCI6XCLii6hcIixcIiZwcmVjc2ltO1wiOlwi4om+XCIsXCImcHJpbWU7XCI6XCLigLJcIixcIiZwcmltZXM7XCI6XCLihJlcIixcIiZwcm5FO1wiOlwi4qq1XCIsXCImcHJuYXA7XCI6XCLiqrlcIixcIiZwcm5zaW07XCI6XCLii6hcIixcIiZwcm9kO1wiOlwi4oiPXCIsXCImcHJvZmFsYXI7XCI6XCLijK5cIixcIiZwcm9mbGluZTtcIjpcIuKMklwiLFwiJnByb2ZzdXJmO1wiOlwi4oyTXCIsXCImcHJvcDtcIjpcIuKInVwiLFwiJnByb3B0bztcIjpcIuKInVwiLFwiJnByc2ltO1wiOlwi4om+XCIsXCImcHJ1cmVsO1wiOlwi4oqwXCIsXCImcHNjcjtcIjpcIvCdk4VcIixcIiZwc2k7XCI6XCLPiFwiLFwiJnB1bmNzcDtcIjpcIuKAiFwiLFwiJnFmcjtcIjpcIvCdlK5cIixcIiZxaW50O1wiOlwi4qiMXCIsXCImcW9wZjtcIjpcIvCdlaJcIixcIiZxcHJpbWU7XCI6XCLigZdcIixcIiZxc2NyO1wiOlwi8J2ThlwiLFwiJnF1YXRlcm5pb25zO1wiOlwi4oSNXCIsXCImcXVhdGludDtcIjpcIuKollwiLFwiJnF1ZXN0O1wiOlwiP1wiLFwiJnF1ZXN0ZXE7XCI6XCLiiZ9cIixcIiZxdW90XCI6J1wiJyxcIiZxdW90O1wiOidcIicsXCImckFhcnI7XCI6XCLih5tcIixcIiZyQXJyO1wiOlwi4oeSXCIsXCImckF0YWlsO1wiOlwi4qScXCIsXCImckJhcnI7XCI6XCLipI9cIixcIiZySGFyO1wiOlwi4qWkXCIsXCImcmFjZTtcIjpcIuKIvcyxXCIsXCImcmFjdXRlO1wiOlwixZVcIixcIiZyYWRpYztcIjpcIuKImlwiLFwiJnJhZW1wdHl2O1wiOlwi4qazXCIsXCImcmFuZztcIjpcIuKfqVwiLFwiJnJhbmdkO1wiOlwi4qaSXCIsXCImcmFuZ2U7XCI6XCLipqVcIixcIiZyYW5nbGU7XCI6XCLin6lcIixcIiZyYXF1b1wiOlwiwrtcIixcIiZyYXF1bztcIjpcIsK7XCIsXCImcmFycjtcIjpcIuKGklwiLFwiJnJhcnJhcDtcIjpcIuKltVwiLFwiJnJhcnJiO1wiOlwi4oelXCIsXCImcmFycmJmcztcIjpcIuKkoFwiLFwiJnJhcnJjO1wiOlwi4qSzXCIsXCImcmFycmZzO1wiOlwi4qSeXCIsXCImcmFycmhrO1wiOlwi4oaqXCIsXCImcmFycmxwO1wiOlwi4oasXCIsXCImcmFycnBsO1wiOlwi4qWFXCIsXCImcmFycnNpbTtcIjpcIuKltFwiLFwiJnJhcnJ0bDtcIjpcIuKGo1wiLFwiJnJhcnJ3O1wiOlwi4oadXCIsXCImcmF0YWlsO1wiOlwi4qSaXCIsXCImcmF0aW87XCI6XCLiiLZcIixcIiZyYXRpb25hbHM7XCI6XCLihJpcIixcIiZyYmFycjtcIjpcIuKkjVwiLFwiJnJiYnJrO1wiOlwi4p2zXCIsXCImcmJyYWNlO1wiOlwifVwiLFwiJnJicmFjaztcIjpcIl1cIixcIiZyYnJrZTtcIjpcIuKmjFwiLFwiJnJicmtzbGQ7XCI6XCLipo5cIixcIiZyYnJrc2x1O1wiOlwi4qaQXCIsXCImcmNhcm9uO1wiOlwixZlcIixcIiZyY2VkaWw7XCI6XCLFl1wiLFwiJnJjZWlsO1wiOlwi4oyJXCIsXCImcmN1YjtcIjpcIn1cIixcIiZyY3k7XCI6XCLRgFwiLFwiJnJkY2E7XCI6XCLipLdcIixcIiZyZGxkaGFyO1wiOlwi4qWpXCIsXCImcmRxdW87XCI6XCLigJ1cIixcIiZyZHF1b3I7XCI6XCLigJ1cIixcIiZyZHNoO1wiOlwi4oazXCIsXCImcmVhbDtcIjpcIuKEnFwiLFwiJnJlYWxpbmU7XCI6XCLihJtcIixcIiZyZWFscGFydDtcIjpcIuKEnFwiLFwiJnJlYWxzO1wiOlwi4oSdXCIsXCImcmVjdDtcIjpcIuKWrVwiLFwiJnJlZ1wiOlwiwq5cIixcIiZyZWc7XCI6XCLCrlwiLFwiJnJmaXNodDtcIjpcIuKlvVwiLFwiJnJmbG9vcjtcIjpcIuKMi1wiLFwiJnJmcjtcIjpcIvCdlK9cIixcIiZyaGFyZDtcIjpcIuKHgVwiLFwiJnJoYXJ1O1wiOlwi4oeAXCIsXCImcmhhcnVsO1wiOlwi4qWsXCIsXCImcmhvO1wiOlwiz4FcIixcIiZyaG92O1wiOlwiz7FcIixcIiZyaWdodGFycm93O1wiOlwi4oaSXCIsXCImcmlnaHRhcnJvd3RhaWw7XCI6XCLihqNcIixcIiZyaWdodGhhcnBvb25kb3duO1wiOlwi4oeBXCIsXCImcmlnaHRoYXJwb29udXA7XCI6XCLih4BcIixcIiZyaWdodGxlZnRhcnJvd3M7XCI6XCLih4RcIixcIiZyaWdodGxlZnRoYXJwb29ucztcIjpcIuKHjFwiLFwiJnJpZ2h0cmlnaHRhcnJvd3M7XCI6XCLih4lcIixcIiZyaWdodHNxdWlnYXJyb3c7XCI6XCLihp1cIixcIiZyaWdodHRocmVldGltZXM7XCI6XCLii4xcIixcIiZyaW5nO1wiOlwiy5pcIixcIiZyaXNpbmdkb3RzZXE7XCI6XCLiiZNcIixcIiZybGFycjtcIjpcIuKHhFwiLFwiJnJsaGFyO1wiOlwi4oeMXCIsXCImcmxtO1wiOlwi4oCPXCIsXCImcm1vdXN0O1wiOlwi4o6xXCIsXCImcm1vdXN0YWNoZTtcIjpcIuKOsVwiLFwiJnJubWlkO1wiOlwi4quuXCIsXCImcm9hbmc7XCI6XCLin61cIixcIiZyb2FycjtcIjpcIuKHvlwiLFwiJnJvYnJrO1wiOlwi4p+nXCIsXCImcm9wYXI7XCI6XCLipoZcIixcIiZyb3BmO1wiOlwi8J2Vo1wiLFwiJnJvcGx1cztcIjpcIuKorlwiLFwiJnJvdGltZXM7XCI6XCLiqLVcIixcIiZycGFyO1wiOlwiKVwiLFwiJnJwYXJndDtcIjpcIuKmlFwiLFwiJnJwcG9saW50O1wiOlwi4qiSXCIsXCImcnJhcnI7XCI6XCLih4lcIixcIiZyc2FxdW87XCI6XCLigLpcIixcIiZyc2NyO1wiOlwi8J2Th1wiLFwiJnJzaDtcIjpcIuKGsVwiLFwiJnJzcWI7XCI6XCJdXCIsXCImcnNxdW87XCI6XCLigJlcIixcIiZyc3F1b3I7XCI6XCLigJlcIixcIiZydGhyZWU7XCI6XCLii4xcIixcIiZydGltZXM7XCI6XCLii4pcIixcIiZydHJpO1wiOlwi4pa5XCIsXCImcnRyaWU7XCI6XCLiirVcIixcIiZydHJpZjtcIjpcIuKWuFwiLFwiJnJ0cmlsdHJpO1wiOlwi4qeOXCIsXCImcnVsdWhhcjtcIjpcIuKlqFwiLFwiJnJ4O1wiOlwi4oSeXCIsXCImc2FjdXRlO1wiOlwixZtcIixcIiZzYnF1bztcIjpcIuKAmlwiLFwiJnNjO1wiOlwi4om7XCIsXCImc2NFO1wiOlwi4qq0XCIsXCImc2NhcDtcIjpcIuKquFwiLFwiJnNjYXJvbjtcIjpcIsWhXCIsXCImc2NjdWU7XCI6XCLiib1cIixcIiZzY2U7XCI6XCLiqrBcIixcIiZzY2VkaWw7XCI6XCLFn1wiLFwiJnNjaXJjO1wiOlwixZ1cIixcIiZzY25FO1wiOlwi4qq2XCIsXCImc2NuYXA7XCI6XCLiqrpcIixcIiZzY25zaW07XCI6XCLii6lcIixcIiZzY3BvbGludDtcIjpcIuKok1wiLFwiJnNjc2ltO1wiOlwi4om/XCIsXCImc2N5O1wiOlwi0YFcIixcIiZzZG90O1wiOlwi4ouFXCIsXCImc2RvdGI7XCI6XCLiiqFcIixcIiZzZG90ZTtcIjpcIuKpplwiLFwiJnNlQXJyO1wiOlwi4oeYXCIsXCImc2VhcmhrO1wiOlwi4qSlXCIsXCImc2VhcnI7XCI6XCLihphcIixcIiZzZWFycm93O1wiOlwi4oaYXCIsXCImc2VjdFwiOlwiwqdcIixcIiZzZWN0O1wiOlwiwqdcIixcIiZzZW1pO1wiOlwiO1wiLFwiJnNlc3dhcjtcIjpcIuKkqVwiLFwiJnNldG1pbnVzO1wiOlwi4oiWXCIsXCImc2V0bW47XCI6XCLiiJZcIixcIiZzZXh0O1wiOlwi4py2XCIsXCImc2ZyO1wiOlwi8J2UsFwiLFwiJnNmcm93bjtcIjpcIuKMolwiLFwiJnNoYXJwO1wiOlwi4pmvXCIsXCImc2hjaGN5O1wiOlwi0YlcIixcIiZzaGN5O1wiOlwi0YhcIixcIiZzaG9ydG1pZDtcIjpcIuKIo1wiLFwiJnNob3J0cGFyYWxsZWw7XCI6XCLiiKVcIixcIiZzaHlcIjpcIsKtXCIsXCImc2h5O1wiOlwiwq1cIixcIiZzaWdtYTtcIjpcIs+DXCIsXCImc2lnbWFmO1wiOlwiz4JcIixcIiZzaWdtYXY7XCI6XCLPglwiLFwiJnNpbTtcIjpcIuKIvFwiLFwiJnNpbWRvdDtcIjpcIuKpqlwiLFwiJnNpbWU7XCI6XCLiiYNcIixcIiZzaW1lcTtcIjpcIuKJg1wiLFwiJnNpbWc7XCI6XCLiqp5cIixcIiZzaW1nRTtcIjpcIuKqoFwiLFwiJnNpbWw7XCI6XCLiqp1cIixcIiZzaW1sRTtcIjpcIuKqn1wiLFwiJnNpbW5lO1wiOlwi4omGXCIsXCImc2ltcGx1cztcIjpcIuKopFwiLFwiJnNpbXJhcnI7XCI6XCLipbJcIixcIiZzbGFycjtcIjpcIuKGkFwiLFwiJnNtYWxsc2V0bWludXM7XCI6XCLiiJZcIixcIiZzbWFzaHA7XCI6XCLiqLNcIixcIiZzbWVwYXJzbDtcIjpcIuKnpFwiLFwiJnNtaWQ7XCI6XCLiiKNcIixcIiZzbWlsZTtcIjpcIuKMo1wiLFwiJnNtdDtcIjpcIuKqqlwiLFwiJnNtdGU7XCI6XCLiqqxcIixcIiZzbXRlcztcIjpcIuKqrO+4gFwiLFwiJnNvZnRjeTtcIjpcItGMXCIsXCImc29sO1wiOlwiL1wiLFwiJnNvbGI7XCI6XCLip4RcIixcIiZzb2xiYXI7XCI6XCLijL9cIixcIiZzb3BmO1wiOlwi8J2VpFwiLFwiJnNwYWRlcztcIjpcIuKZoFwiLFwiJnNwYWRlc3VpdDtcIjpcIuKZoFwiLFwiJnNwYXI7XCI6XCLiiKVcIixcIiZzcWNhcDtcIjpcIuKKk1wiLFwiJnNxY2FwcztcIjpcIuKKk++4gFwiLFwiJnNxY3VwO1wiOlwi4oqUXCIsXCImc3FjdXBzO1wiOlwi4oqU77iAXCIsXCImc3FzdWI7XCI6XCLiio9cIixcIiZzcXN1YmU7XCI6XCLiipFcIixcIiZzcXN1YnNldDtcIjpcIuKKj1wiLFwiJnNxc3Vic2V0ZXE7XCI6XCLiipFcIixcIiZzcXN1cDtcIjpcIuKKkFwiLFwiJnNxc3VwZTtcIjpcIuKKklwiLFwiJnNxc3Vwc2V0O1wiOlwi4oqQXCIsXCImc3FzdXBzZXRlcTtcIjpcIuKKklwiLFwiJnNxdTtcIjpcIuKWoVwiLFwiJnNxdWFyZTtcIjpcIuKWoVwiLFwiJnNxdWFyZjtcIjpcIuKWqlwiLFwiJnNxdWY7XCI6XCLilqpcIixcIiZzcmFycjtcIjpcIuKGklwiLFwiJnNzY3I7XCI6XCLwnZOIXCIsXCImc3NldG1uO1wiOlwi4oiWXCIsXCImc3NtaWxlO1wiOlwi4oyjXCIsXCImc3N0YXJmO1wiOlwi4ouGXCIsXCImc3RhcjtcIjpcIuKYhlwiLFwiJnN0YXJmO1wiOlwi4piFXCIsXCImc3RyYWlnaHRlcHNpbG9uO1wiOlwiz7VcIixcIiZzdHJhaWdodHBoaTtcIjpcIs+VXCIsXCImc3RybnM7XCI6XCLCr1wiLFwiJnN1YjtcIjpcIuKKglwiLFwiJnN1YkU7XCI6XCLiq4VcIixcIiZzdWJkb3Q7XCI6XCLiqr1cIixcIiZzdWJlO1wiOlwi4oqGXCIsXCImc3ViZWRvdDtcIjpcIuKrg1wiLFwiJnN1Ym11bHQ7XCI6XCLiq4FcIixcIiZzdWJuRTtcIjpcIuKri1wiLFwiJnN1Ym5lO1wiOlwi4oqKXCIsXCImc3VicGx1cztcIjpcIuKqv1wiLFwiJnN1YnJhcnI7XCI6XCLipblcIixcIiZzdWJzZXQ7XCI6XCLiioJcIixcIiZzdWJzZXRlcTtcIjpcIuKKhlwiLFwiJnN1YnNldGVxcTtcIjpcIuKrhVwiLFwiJnN1YnNldG5lcTtcIjpcIuKKilwiLFwiJnN1YnNldG5lcXE7XCI6XCLiq4tcIixcIiZzdWJzaW07XCI6XCLiq4dcIixcIiZzdWJzdWI7XCI6XCLiq5VcIixcIiZzdWJzdXA7XCI6XCLiq5NcIixcIiZzdWNjO1wiOlwi4om7XCIsXCImc3VjY2FwcHJveDtcIjpcIuKquFwiLFwiJnN1Y2NjdXJseWVxO1wiOlwi4om9XCIsXCImc3VjY2VxO1wiOlwi4qqwXCIsXCImc3VjY25hcHByb3g7XCI6XCLiqrpcIixcIiZzdWNjbmVxcTtcIjpcIuKqtlwiLFwiJnN1Y2Nuc2ltO1wiOlwi4oupXCIsXCImc3VjY3NpbTtcIjpcIuKJv1wiLFwiJnN1bTtcIjpcIuKIkVwiLFwiJnN1bmc7XCI6XCLimapcIixcIiZzdXAxXCI6XCLCuVwiLFwiJnN1cDE7XCI6XCLCuVwiLFwiJnN1cDJcIjpcIsKyXCIsXCImc3VwMjtcIjpcIsKyXCIsXCImc3VwM1wiOlwiwrNcIixcIiZzdXAzO1wiOlwiwrNcIixcIiZzdXA7XCI6XCLiioNcIixcIiZzdXBFO1wiOlwi4quGXCIsXCImc3VwZG90O1wiOlwi4qq+XCIsXCImc3VwZHN1YjtcIjpcIuKrmFwiLFwiJnN1cGU7XCI6XCLiiodcIixcIiZzdXBlZG90O1wiOlwi4quEXCIsXCImc3VwaHNvbDtcIjpcIuKfiVwiLFwiJnN1cGhzdWI7XCI6XCLiq5dcIixcIiZzdXBsYXJyO1wiOlwi4qW7XCIsXCImc3VwbXVsdDtcIjpcIuKrglwiLFwiJnN1cG5FO1wiOlwi4quMXCIsXCImc3VwbmU7XCI6XCLiiotcIixcIiZzdXBwbHVzO1wiOlwi4quAXCIsXCImc3Vwc2V0O1wiOlwi4oqDXCIsXCImc3Vwc2V0ZXE7XCI6XCLiiodcIixcIiZzdXBzZXRlcXE7XCI6XCLiq4ZcIixcIiZzdXBzZXRuZXE7XCI6XCLiiotcIixcIiZzdXBzZXRuZXFxO1wiOlwi4quMXCIsXCImc3Vwc2ltO1wiOlwi4quIXCIsXCImc3Vwc3ViO1wiOlwi4quUXCIsXCImc3Vwc3VwO1wiOlwi4quWXCIsXCImc3dBcnI7XCI6XCLih5lcIixcIiZzd2FyaGs7XCI6XCLipKZcIixcIiZzd2FycjtcIjpcIuKGmVwiLFwiJnN3YXJyb3c7XCI6XCLihplcIixcIiZzd253YXI7XCI6XCLipKpcIixcIiZzemxpZ1wiOlwiw59cIixcIiZzemxpZztcIjpcIsOfXCIsXCImdGFyZ2V0O1wiOlwi4oyWXCIsXCImdGF1O1wiOlwiz4RcIixcIiZ0YnJrO1wiOlwi4o60XCIsXCImdGNhcm9uO1wiOlwixaVcIixcIiZ0Y2VkaWw7XCI6XCLFo1wiLFwiJnRjeTtcIjpcItGCXCIsXCImdGRvdDtcIjpcIuKDm1wiLFwiJnRlbHJlYztcIjpcIuKMlVwiLFwiJnRmcjtcIjpcIvCdlLFcIixcIiZ0aGVyZTQ7XCI6XCLiiLRcIixcIiZ0aGVyZWZvcmU7XCI6XCLiiLRcIixcIiZ0aGV0YTtcIjpcIs64XCIsXCImdGhldGFzeW07XCI6XCLPkVwiLFwiJnRoZXRhdjtcIjpcIs+RXCIsXCImdGhpY2thcHByb3g7XCI6XCLiiYhcIixcIiZ0aGlja3NpbTtcIjpcIuKIvFwiLFwiJnRoaW5zcDtcIjpcIuKAiVwiLFwiJnRoa2FwO1wiOlwi4omIXCIsXCImdGhrc2ltO1wiOlwi4oi8XCIsXCImdGhvcm5cIjpcIsO+XCIsXCImdGhvcm47XCI6XCLDvlwiLFwiJnRpbGRlO1wiOlwiy5xcIixcIiZ0aW1lc1wiOlwiw5dcIixcIiZ0aW1lcztcIjpcIsOXXCIsXCImdGltZXNiO1wiOlwi4oqgXCIsXCImdGltZXNiYXI7XCI6XCLiqLFcIixcIiZ0aW1lc2Q7XCI6XCLiqLBcIixcIiZ0aW50O1wiOlwi4oitXCIsXCImdG9lYTtcIjpcIuKkqFwiLFwiJnRvcDtcIjpcIuKKpFwiLFwiJnRvcGJvdDtcIjpcIuKMtlwiLFwiJnRvcGNpcjtcIjpcIuKrsVwiLFwiJnRvcGY7XCI6XCLwnZWlXCIsXCImdG9wZm9yaztcIjpcIuKrmlwiLFwiJnRvc2E7XCI6XCLipKlcIixcIiZ0cHJpbWU7XCI6XCLigLRcIixcIiZ0cmFkZTtcIjpcIuKEolwiLFwiJnRyaWFuZ2xlO1wiOlwi4pa1XCIsXCImdHJpYW5nbGVkb3duO1wiOlwi4pa/XCIsXCImdHJpYW5nbGVsZWZ0O1wiOlwi4peDXCIsXCImdHJpYW5nbGVsZWZ0ZXE7XCI6XCLiirRcIixcIiZ0cmlhbmdsZXE7XCI6XCLiiZxcIixcIiZ0cmlhbmdsZXJpZ2h0O1wiOlwi4pa5XCIsXCImdHJpYW5nbGVyaWdodGVxO1wiOlwi4oq1XCIsXCImdHJpZG90O1wiOlwi4pesXCIsXCImdHJpZTtcIjpcIuKJnFwiLFwiJnRyaW1pbnVzO1wiOlwi4qi6XCIsXCImdHJpcGx1cztcIjpcIuKouVwiLFwiJnRyaXNiO1wiOlwi4qeNXCIsXCImdHJpdGltZTtcIjpcIuKou1wiLFwiJnRycGV6aXVtO1wiOlwi4o+iXCIsXCImdHNjcjtcIjpcIvCdk4lcIixcIiZ0c2N5O1wiOlwi0YZcIixcIiZ0c2hjeTtcIjpcItGbXCIsXCImdHN0cm9rO1wiOlwixadcIixcIiZ0d2l4dDtcIjpcIuKJrFwiLFwiJnR3b2hlYWRsZWZ0YXJyb3c7XCI6XCLihp5cIixcIiZ0d29oZWFkcmlnaHRhcnJvdztcIjpcIuKGoFwiLFwiJnVBcnI7XCI6XCLih5FcIixcIiZ1SGFyO1wiOlwi4qWjXCIsXCImdWFjdXRlXCI6XCLDulwiLFwiJnVhY3V0ZTtcIjpcIsO6XCIsXCImdWFycjtcIjpcIuKGkVwiLFwiJnVicmN5O1wiOlwi0Z5cIixcIiZ1YnJldmU7XCI6XCLFrVwiLFwiJnVjaXJjXCI6XCLDu1wiLFwiJnVjaXJjO1wiOlwiw7tcIixcIiZ1Y3k7XCI6XCLRg1wiLFwiJnVkYXJyO1wiOlwi4oeFXCIsXCImdWRibGFjO1wiOlwixbFcIixcIiZ1ZGhhcjtcIjpcIuKlrlwiLFwiJnVmaXNodDtcIjpcIuKlvlwiLFwiJnVmcjtcIjpcIvCdlLJcIixcIiZ1Z3JhdmVcIjpcIsO5XCIsXCImdWdyYXZlO1wiOlwiw7lcIixcIiZ1aGFybDtcIjpcIuKGv1wiLFwiJnVoYXJyO1wiOlwi4oa+XCIsXCImdWhibGs7XCI6XCLiloBcIixcIiZ1bGNvcm47XCI6XCLijJxcIixcIiZ1bGNvcm5lcjtcIjpcIuKMnFwiLFwiJnVsY3JvcDtcIjpcIuKMj1wiLFwiJnVsdHJpO1wiOlwi4pe4XCIsXCImdW1hY3I7XCI6XCLFq1wiLFwiJnVtbFwiOlwiwqhcIixcIiZ1bWw7XCI6XCLCqFwiLFwiJnVvZ29uO1wiOlwixbNcIixcIiZ1b3BmO1wiOlwi8J2VplwiLFwiJnVwYXJyb3c7XCI6XCLihpFcIixcIiZ1cGRvd25hcnJvdztcIjpcIuKGlVwiLFwiJnVwaGFycG9vbmxlZnQ7XCI6XCLihr9cIixcIiZ1cGhhcnBvb25yaWdodDtcIjpcIuKGvlwiLFwiJnVwbHVzO1wiOlwi4oqOXCIsXCImdXBzaTtcIjpcIs+FXCIsXCImdXBzaWg7XCI6XCLPklwiLFwiJnVwc2lsb247XCI6XCLPhVwiLFwiJnVwdXBhcnJvd3M7XCI6XCLih4hcIixcIiZ1cmNvcm47XCI6XCLijJ1cIixcIiZ1cmNvcm5lcjtcIjpcIuKMnVwiLFwiJnVyY3JvcDtcIjpcIuKMjlwiLFwiJnVyaW5nO1wiOlwixa9cIixcIiZ1cnRyaTtcIjpcIuKXuVwiLFwiJnVzY3I7XCI6XCLwnZOKXCIsXCImdXRkb3Q7XCI6XCLii7BcIixcIiZ1dGlsZGU7XCI6XCLFqVwiLFwiJnV0cmk7XCI6XCLilrVcIixcIiZ1dHJpZjtcIjpcIuKWtFwiLFwiJnV1YXJyO1wiOlwi4oeIXCIsXCImdXVtbFwiOlwiw7xcIixcIiZ1dW1sO1wiOlwiw7xcIixcIiZ1d2FuZ2xlO1wiOlwi4qanXCIsXCImdkFycjtcIjpcIuKHlVwiLFwiJnZCYXI7XCI6XCLiq6hcIixcIiZ2QmFydjtcIjpcIuKrqVwiLFwiJnZEYXNoO1wiOlwi4oqoXCIsXCImdmFuZ3J0O1wiOlwi4qacXCIsXCImdmFyZXBzaWxvbjtcIjpcIs+1XCIsXCImdmFya2FwcGE7XCI6XCLPsFwiLFwiJnZhcm5vdGhpbmc7XCI6XCLiiIVcIixcIiZ2YXJwaGk7XCI6XCLPlVwiLFwiJnZhcnBpO1wiOlwiz5ZcIixcIiZ2YXJwcm9wdG87XCI6XCLiiJ1cIixcIiZ2YXJyO1wiOlwi4oaVXCIsXCImdmFycmhvO1wiOlwiz7FcIixcIiZ2YXJzaWdtYTtcIjpcIs+CXCIsXCImdmFyc3Vic2V0bmVxO1wiOlwi4oqK77iAXCIsXCImdmFyc3Vic2V0bmVxcTtcIjpcIuKri++4gFwiLFwiJnZhcnN1cHNldG5lcTtcIjpcIuKKi++4gFwiLFwiJnZhcnN1cHNldG5lcXE7XCI6XCLiq4zvuIBcIixcIiZ2YXJ0aGV0YTtcIjpcIs+RXCIsXCImdmFydHJpYW5nbGVsZWZ0O1wiOlwi4oqyXCIsXCImdmFydHJpYW5nbGVyaWdodDtcIjpcIuKKs1wiLFwiJnZjeTtcIjpcItCyXCIsXCImdmRhc2g7XCI6XCLiiqJcIixcIiZ2ZWU7XCI6XCLiiKhcIixcIiZ2ZWViYXI7XCI6XCLiirtcIixcIiZ2ZWVlcTtcIjpcIuKJmlwiLFwiJnZlbGxpcDtcIjpcIuKLrlwiLFwiJnZlcmJhcjtcIjpcInxcIixcIiZ2ZXJ0O1wiOlwifFwiLFwiJnZmcjtcIjpcIvCdlLNcIixcIiZ2bHRyaTtcIjpcIuKKslwiLFwiJnZuc3ViO1wiOlwi4oqC4oOSXCIsXCImdm5zdXA7XCI6XCLiioPig5JcIixcIiZ2b3BmO1wiOlwi8J2Vp1wiLFwiJnZwcm9wO1wiOlwi4oidXCIsXCImdnJ0cmk7XCI6XCLiirNcIixcIiZ2c2NyO1wiOlwi8J2Ti1wiLFwiJnZzdWJuRTtcIjpcIuKri++4gFwiLFwiJnZzdWJuZTtcIjpcIuKKiu+4gFwiLFwiJnZzdXBuRTtcIjpcIuKrjO+4gFwiLFwiJnZzdXBuZTtcIjpcIuKKi++4gFwiLFwiJnZ6aWd6YWc7XCI6XCLipppcIixcIiZ3Y2lyYztcIjpcIsW1XCIsXCImd2VkYmFyO1wiOlwi4qmfXCIsXCImd2VkZ2U7XCI6XCLiiKdcIixcIiZ3ZWRnZXE7XCI6XCLiiZlcIixcIiZ3ZWllcnA7XCI6XCLihJhcIixcIiZ3ZnI7XCI6XCLwnZS0XCIsXCImd29wZjtcIjpcIvCdlahcIixcIiZ3cDtcIjpcIuKEmFwiLFwiJndyO1wiOlwi4omAXCIsXCImd3JlYXRoO1wiOlwi4omAXCIsXCImd3NjcjtcIjpcIvCdk4xcIixcIiZ4Y2FwO1wiOlwi4ouCXCIsXCImeGNpcmM7XCI6XCLil69cIixcIiZ4Y3VwO1wiOlwi4ouDXCIsXCImeGR0cmk7XCI6XCLilr1cIixcIiZ4ZnI7XCI6XCLwnZS1XCIsXCImeGhBcnI7XCI6XCLin7pcIixcIiZ4aGFycjtcIjpcIuKft1wiLFwiJnhpO1wiOlwizr5cIixcIiZ4bEFycjtcIjpcIuKfuFwiLFwiJnhsYXJyO1wiOlwi4p+1XCIsXCImeG1hcDtcIjpcIuKfvFwiLFwiJnhuaXM7XCI6XCLii7tcIixcIiZ4b2RvdDtcIjpcIuKogFwiLFwiJnhvcGY7XCI6XCLwnZWpXCIsXCImeG9wbHVzO1wiOlwi4qiBXCIsXCImeG90aW1lO1wiOlwi4qiCXCIsXCImeHJBcnI7XCI6XCLin7lcIixcIiZ4cmFycjtcIjpcIuKftlwiLFwiJnhzY3I7XCI6XCLwnZONXCIsXCImeHNxY3VwO1wiOlwi4qiGXCIsXCImeHVwbHVzO1wiOlwi4qiEXCIsXCImeHV0cmk7XCI6XCLilrNcIixcIiZ4dmVlO1wiOlwi4ouBXCIsXCImeHdlZGdlO1wiOlwi4ouAXCIsXCImeWFjdXRlXCI6XCLDvVwiLFwiJnlhY3V0ZTtcIjpcIsO9XCIsXCImeWFjeTtcIjpcItGPXCIsXCImeWNpcmM7XCI6XCLFt1wiLFwiJnljeTtcIjpcItGLXCIsXCImeWVuXCI6XCLCpVwiLFwiJnllbjtcIjpcIsKlXCIsXCImeWZyO1wiOlwi8J2UtlwiLFwiJnlpY3k7XCI6XCLRl1wiLFwiJnlvcGY7XCI6XCLwnZWqXCIsXCImeXNjcjtcIjpcIvCdk45cIixcIiZ5dWN5O1wiOlwi0Y5cIixcIiZ5dW1sXCI6XCLDv1wiLFwiJnl1bWw7XCI6XCLDv1wiLFwiJnphY3V0ZTtcIjpcIsW6XCIsXCImemNhcm9uO1wiOlwixb5cIixcIiZ6Y3k7XCI6XCLQt1wiLFwiJnpkb3Q7XCI6XCLFvFwiLFwiJnplZXRyZjtcIjpcIuKEqFwiLFwiJnpldGE7XCI6XCLOtlwiLFwiJnpmcjtcIjpcIvCdlLdcIixcIiZ6aGN5O1wiOlwi0LZcIixcIiZ6aWdyYXJyO1wiOlwi4oedXCIsXCImem9wZjtcIjpcIvCdlatcIixcIiZ6c2NyO1wiOlwi8J2Tj1wiLFwiJnp3ajtcIjpcIuKAjVwiLFwiJnp3bmo7XCI6XCLigIxcIn0sY2hhcmFjdGVyczp7XCLDhlwiOlwiJkFFbGlnO1wiLFwiJlwiOlwiJmFtcDtcIixcIsOBXCI6XCImQWFjdXRlO1wiLFwixIJcIjpcIiZBYnJldmU7XCIsXCLDglwiOlwiJkFjaXJjO1wiLFwi0JBcIjpcIiZBY3k7XCIsXCLwnZSEXCI6XCImQWZyO1wiLFwiw4BcIjpcIiZBZ3JhdmU7XCIsXCLOkVwiOlwiJkFscGhhO1wiLFwixIBcIjpcIiZBbWFjcjtcIixcIuKpk1wiOlwiJkFuZDtcIixcIsSEXCI6XCImQW9nb247XCIsXCLwnZS4XCI6XCImQW9wZjtcIixcIuKBoVwiOlwiJmFmO1wiLFwiw4VcIjpcIiZhbmdzdDtcIixcIvCdkpxcIjpcIiZBc2NyO1wiLFwi4omUXCI6XCImY29sb25lcTtcIixcIsODXCI6XCImQXRpbGRlO1wiLFwiw4RcIjpcIiZBdW1sO1wiLFwi4oiWXCI6XCImc3NldG1uO1wiLFwi4qunXCI6XCImQmFydjtcIixcIuKMhlwiOlwiJmRvdWJsZWJhcndlZGdlO1wiLFwi0JFcIjpcIiZCY3k7XCIsXCLiiLVcIjpcIiZiZWNhdXNlO1wiLFwi4oSsXCI6XCImYmVybm91O1wiLFwizpJcIjpcIiZCZXRhO1wiLFwi8J2UhVwiOlwiJkJmcjtcIixcIvCdlLlcIjpcIiZCb3BmO1wiLFwiy5hcIjpcIiZicmV2ZTtcIixcIuKJjlwiOlwiJmJ1bXA7XCIsXCLQp1wiOlwiJkNIY3k7XCIsXCLCqVwiOlwiJmNvcHk7XCIsXCLEhlwiOlwiJkNhY3V0ZTtcIixcIuKLklwiOlwiJkNhcDtcIixcIuKFhVwiOlwiJkREO1wiLFwi4oStXCI6XCImQ2ZyO1wiLFwixIxcIjpcIiZDY2Fyb247XCIsXCLDh1wiOlwiJkNjZWRpbDtcIixcIsSIXCI6XCImQ2NpcmM7XCIsXCLiiLBcIjpcIiZDY29uaW50O1wiLFwixIpcIjpcIiZDZG90O1wiLFwiwrhcIjpcIiZjZWRpbDtcIixcIsK3XCI6XCImbWlkZG90O1wiLFwizqdcIjpcIiZDaGk7XCIsXCLiiplcIjpcIiZvZG90O1wiLFwi4oqWXCI6XCImb21pbnVzO1wiLFwi4oqVXCI6XCImb3BsdXM7XCIsXCLiipdcIjpcIiZvdGltZXM7XCIsXCLiiLJcIjpcIiZjd2NvbmludDtcIixcIuKAnVwiOlwiJnJkcXVvcjtcIixcIuKAmVwiOlwiJnJzcXVvcjtcIixcIuKIt1wiOlwiJlByb3BvcnRpb247XCIsXCLiqbRcIjpcIiZDb2xvbmU7XCIsXCLiiaFcIjpcIiZlcXVpdjtcIixcIuKIr1wiOlwiJkRvdWJsZUNvbnRvdXJJbnRlZ3JhbDtcIixcIuKIrlwiOlwiJm9pbnQ7XCIsXCLihIJcIjpcIiZjb21wbGV4ZXM7XCIsXCLiiJBcIjpcIiZjb3Byb2Q7XCIsXCLiiLNcIjpcIiZhd2NvbmludDtcIixcIuKor1wiOlwiJkNyb3NzO1wiLFwi8J2SnlwiOlwiJkNzY3I7XCIsXCLii5NcIjpcIiZDdXA7XCIsXCLiiY1cIjpcIiZhc3ltcGVxO1wiLFwi4qSRXCI6XCImRERvdHJhaGQ7XCIsXCLQglwiOlwiJkRKY3k7XCIsXCLQhVwiOlwiJkRTY3k7XCIsXCLQj1wiOlwiJkRaY3k7XCIsXCLigKFcIjpcIiZkZGFnZ2VyO1wiLFwi4oahXCI6XCImRGFycjtcIixcIuKrpFwiOlwiJkRvdWJsZUxlZnRUZWU7XCIsXCLEjlwiOlwiJkRjYXJvbjtcIixcItCUXCI6XCImRGN5O1wiLFwi4oiHXCI6XCImbmFibGE7XCIsXCLOlFwiOlwiJkRlbHRhO1wiLFwi8J2Uh1wiOlwiJkRmcjtcIixcIsK0XCI6XCImYWN1dGU7XCIsXCLLmVwiOlwiJmRvdDtcIixcIsudXCI6XCImZGJsYWM7XCIsXCJgXCI6XCImZ3JhdmU7XCIsXCLLnFwiOlwiJnRpbGRlO1wiLFwi4ouEXCI6XCImZGlhbW9uZDtcIixcIuKFhlwiOlwiJmRkO1wiLFwi8J2Uu1wiOlwiJkRvcGY7XCIsXCLCqFwiOlwiJnVtbDtcIixcIuKDnFwiOlwiJkRvdERvdDtcIixcIuKJkFwiOlwiJmVzZG90O1wiLFwi4oeTXCI6XCImZEFycjtcIixcIuKHkFwiOlwiJmxBcnI7XCIsXCLih5RcIjpcIiZpZmY7XCIsXCLin7hcIjpcIiZ4bEFycjtcIixcIuKfulwiOlwiJnhoQXJyO1wiLFwi4p+5XCI6XCImeHJBcnI7XCIsXCLih5JcIjpcIiZyQXJyO1wiLFwi4oqoXCI6XCImdkRhc2g7XCIsXCLih5FcIjpcIiZ1QXJyO1wiLFwi4oeVXCI6XCImdkFycjtcIixcIuKIpVwiOlwiJnNwYXI7XCIsXCLihpNcIjpcIiZkb3duYXJyb3c7XCIsXCLipJNcIjpcIiZEb3duQXJyb3dCYXI7XCIsXCLih7VcIjpcIiZkdWFycjtcIixcIsyRXCI6XCImRG93bkJyZXZlO1wiLFwi4qWQXCI6XCImRG93bkxlZnRSaWdodFZlY3RvcjtcIixcIuKlnlwiOlwiJkRvd25MZWZ0VGVlVmVjdG9yO1wiLFwi4oa9XCI6XCImbGhhcmQ7XCIsXCLipZZcIjpcIiZEb3duTGVmdFZlY3RvckJhcjtcIixcIuKln1wiOlwiJkRvd25SaWdodFRlZVZlY3RvcjtcIixcIuKHgVwiOlwiJnJpZ2h0aGFycG9vbmRvd247XCIsXCLipZdcIjpcIiZEb3duUmlnaHRWZWN0b3JCYXI7XCIsXCLiiqRcIjpcIiZ0b3A7XCIsXCLihqdcIjpcIiZtYXBzdG9kb3duO1wiLFwi8J2Sn1wiOlwiJkRzY3I7XCIsXCLEkFwiOlwiJkRzdHJvaztcIixcIsWKXCI6XCImRU5HO1wiLFwiw5BcIjpcIiZFVEg7XCIsXCLDiVwiOlwiJkVhY3V0ZTtcIixcIsSaXCI6XCImRWNhcm9uO1wiLFwiw4pcIjpcIiZFY2lyYztcIixcItCtXCI6XCImRWN5O1wiLFwixJZcIjpcIiZFZG90O1wiLFwi8J2UiFwiOlwiJkVmcjtcIixcIsOIXCI6XCImRWdyYXZlO1wiLFwi4oiIXCI6XCImaXNpbnY7XCIsXCLEklwiOlwiJkVtYWNyO1wiLFwi4pe7XCI6XCImRW1wdHlTbWFsbFNxdWFyZTtcIixcIuKWq1wiOlwiJkVtcHR5VmVyeVNtYWxsU3F1YXJlO1wiLFwixJhcIjpcIiZFb2dvbjtcIixcIvCdlLxcIjpcIiZFb3BmO1wiLFwizpVcIjpcIiZFcHNpbG9uO1wiLFwi4qm1XCI6XCImRXF1YWw7XCIsXCLiiYJcIjpcIiZlc2ltO1wiLFwi4oeMXCI6XCImcmxoYXI7XCIsXCLihLBcIjpcIiZleHBlY3RhdGlvbjtcIixcIuKps1wiOlwiJkVzaW07XCIsXCLOl1wiOlwiJkV0YTtcIixcIsOLXCI6XCImRXVtbDtcIixcIuKIg1wiOlwiJmV4aXN0O1wiLFwi4oWHXCI6XCImZXhwb25lbnRpYWxlO1wiLFwi0KRcIjpcIiZGY3k7XCIsXCLwnZSJXCI6XCImRmZyO1wiLFwi4pe8XCI6XCImRmlsbGVkU21hbGxTcXVhcmU7XCIsXCLilqpcIjpcIiZzcXVmO1wiLFwi8J2UvVwiOlwiJkZvcGY7XCIsXCLiiIBcIjpcIiZmb3JhbGw7XCIsXCLihLFcIjpcIiZGc2NyO1wiLFwi0INcIjpcIiZHSmN5O1wiLFwiPlwiOlwiJmd0O1wiLFwizpNcIjpcIiZHYW1tYTtcIixcIs+cXCI6XCImR2FtbWFkO1wiLFwixJ5cIjpcIiZHYnJldmU7XCIsXCLEolwiOlwiJkdjZWRpbDtcIixcIsScXCI6XCImR2NpcmM7XCIsXCLQk1wiOlwiJkdjeTtcIixcIsSgXCI6XCImR2RvdDtcIixcIvCdlIpcIjpcIiZHZnI7XCIsXCLii5lcIjpcIiZnZ2c7XCIsXCLwnZS+XCI6XCImR29wZjtcIixcIuKJpVwiOlwiJmdlcTtcIixcIuKLm1wiOlwiJmd0cmVxbGVzcztcIixcIuKJp1wiOlwiJmdlcXE7XCIsXCLiqqJcIjpcIiZHcmVhdGVyR3JlYXRlcjtcIixcIuKJt1wiOlwiJmd0cmxlc3M7XCIsXCLiqb5cIjpcIiZnZXM7XCIsXCLiibNcIjpcIiZndHJzaW07XCIsXCLwnZKiXCI6XCImR3NjcjtcIixcIuKJq1wiOlwiJmdnO1wiLFwi0KpcIjpcIiZIQVJEY3k7XCIsXCLLh1wiOlwiJmNhcm9uO1wiLFwiXlwiOlwiJkhhdDtcIixcIsSkXCI6XCImSGNpcmM7XCIsXCLihIxcIjpcIiZQb2luY2FyZXBsYW5lO1wiLFwi4oSLXCI6XCImaGFtaWx0O1wiLFwi4oSNXCI6XCImcXVhdGVybmlvbnM7XCIsXCLilIBcIjpcIiZib3hoO1wiLFwixKZcIjpcIiZIc3Ryb2s7XCIsXCLiiY9cIjpcIiZidW1wZXE7XCIsXCLQlVwiOlwiJklFY3k7XCIsXCLEslwiOlwiJklKbGlnO1wiLFwi0IFcIjpcIiZJT2N5O1wiLFwiw41cIjpcIiZJYWN1dGU7XCIsXCLDjlwiOlwiJkljaXJjO1wiLFwi0JhcIjpcIiZJY3k7XCIsXCLEsFwiOlwiJklkb3Q7XCIsXCLihJFcIjpcIiZpbWFncGFydDtcIixcIsOMXCI6XCImSWdyYXZlO1wiLFwixKpcIjpcIiZJbWFjcjtcIixcIuKFiFwiOlwiJmlpO1wiLFwi4oisXCI6XCImSW50O1wiLFwi4oirXCI6XCImaW50O1wiLFwi4ouCXCI6XCImeGNhcDtcIixcIuKBo1wiOlwiJmljO1wiLFwi4oGiXCI6XCImaXQ7XCIsXCLErlwiOlwiJklvZ29uO1wiLFwi8J2VgFwiOlwiJklvcGY7XCIsXCLOmVwiOlwiJklvdGE7XCIsXCLihJBcIjpcIiZpbWFnbGluZTtcIixcIsSoXCI6XCImSXRpbGRlO1wiLFwi0IZcIjpcIiZJdWtjeTtcIixcIsOPXCI6XCImSXVtbDtcIixcIsS0XCI6XCImSmNpcmM7XCIsXCLQmVwiOlwiJkpjeTtcIixcIvCdlI1cIjpcIiZKZnI7XCIsXCLwnZWBXCI6XCImSm9wZjtcIixcIvCdkqVcIjpcIiZKc2NyO1wiLFwi0IhcIjpcIiZKc2VyY3k7XCIsXCLQhFwiOlwiJkp1a2N5O1wiLFwi0KVcIjpcIiZLSGN5O1wiLFwi0IxcIjpcIiZLSmN5O1wiLFwizppcIjpcIiZLYXBwYTtcIixcIsS2XCI6XCImS2NlZGlsO1wiLFwi0JpcIjpcIiZLY3k7XCIsXCLwnZSOXCI6XCImS2ZyO1wiLFwi8J2VglwiOlwiJktvcGY7XCIsXCLwnZKmXCI6XCImS3NjcjtcIixcItCJXCI6XCImTEpjeTtcIixcIjxcIjpcIiZsdDtcIixcIsS5XCI6XCImTGFjdXRlO1wiLFwizptcIjpcIiZMYW1iZGE7XCIsXCLin6pcIjpcIiZMYW5nO1wiLFwi4oSSXCI6XCImbGFncmFuO1wiLFwi4oaeXCI6XCImdHdvaGVhZGxlZnRhcnJvdztcIixcIsS9XCI6XCImTGNhcm9uO1wiLFwixLtcIjpcIiZMY2VkaWw7XCIsXCLQm1wiOlwiJkxjeTtcIixcIuKfqFwiOlwiJmxhbmdsZTtcIixcIuKGkFwiOlwiJnNsYXJyO1wiLFwi4oekXCI6XCImbGFycmI7XCIsXCLih4ZcIjpcIiZscmFycjtcIixcIuKMiFwiOlwiJmxjZWlsO1wiLFwi4p+mXCI6XCImbG9icms7XCIsXCLipaFcIjpcIiZMZWZ0RG93blRlZVZlY3RvcjtcIixcIuKHg1wiOlwiJmRvd25oYXJwb29ubGVmdDtcIixcIuKlmVwiOlwiJkxlZnREb3duVmVjdG9yQmFyO1wiLFwi4oyKXCI6XCImbGZsb29yO1wiLFwi4oaUXCI6XCImbGVmdHJpZ2h0YXJyb3c7XCIsXCLipY5cIjpcIiZMZWZ0UmlnaHRWZWN0b3I7XCIsXCLiiqNcIjpcIiZkYXNodjtcIixcIuKGpFwiOlwiJm1hcHN0b2xlZnQ7XCIsXCLipZpcIjpcIiZMZWZ0VGVlVmVjdG9yO1wiLFwi4oqyXCI6XCImdmx0cmk7XCIsXCLip49cIjpcIiZMZWZ0VHJpYW5nbGVCYXI7XCIsXCLiirRcIjpcIiZ0cmlhbmdsZWxlZnRlcTtcIixcIuKlkVwiOlwiJkxlZnRVcERvd25WZWN0b3I7XCIsXCLipaBcIjpcIiZMZWZ0VXBUZWVWZWN0b3I7XCIsXCLihr9cIjpcIiZ1cGhhcnBvb25sZWZ0O1wiLFwi4qWYXCI6XCImTGVmdFVwVmVjdG9yQmFyO1wiLFwi4oa8XCI6XCImbGhhcnU7XCIsXCLipZJcIjpcIiZMZWZ0VmVjdG9yQmFyO1wiLFwi4ouaXCI6XCImbGVzc2VxZ3RyO1wiLFwi4ommXCI6XCImbGVxcTtcIixcIuKJtlwiOlwiJmxnO1wiLFwi4qqhXCI6XCImTGVzc0xlc3M7XCIsXCLiqb1cIjpcIiZsZXM7XCIsXCLiibJcIjpcIiZsc2ltO1wiLFwi8J2Uj1wiOlwiJkxmcjtcIixcIuKLmFwiOlwiJkxsO1wiLFwi4oeaXCI6XCImbEFhcnI7XCIsXCLEv1wiOlwiJkxtaWRvdDtcIixcIuKftVwiOlwiJnhsYXJyO1wiLFwi4p+3XCI6XCImeGhhcnI7XCIsXCLin7ZcIjpcIiZ4cmFycjtcIixcIvCdlYNcIjpcIiZMb3BmO1wiLFwi4oaZXCI6XCImc3dhcnJvdztcIixcIuKGmFwiOlwiJnNlYXJyb3c7XCIsXCLihrBcIjpcIiZsc2g7XCIsXCLFgVwiOlwiJkxzdHJvaztcIixcIuKJqlwiOlwiJmxsO1wiLFwi4qSFXCI6XCImTWFwO1wiLFwi0JxcIjpcIiZNY3k7XCIsXCLigZ9cIjpcIiZNZWRpdW1TcGFjZTtcIixcIuKEs1wiOlwiJnBobW1hdDtcIixcIvCdlJBcIjpcIiZNZnI7XCIsXCLiiJNcIjpcIiZtcDtcIixcIvCdlYRcIjpcIiZNb3BmO1wiLFwizpxcIjpcIiZNdTtcIixcItCKXCI6XCImTkpjeTtcIixcIsWDXCI6XCImTmFjdXRlO1wiLFwixYdcIjpcIiZOY2Fyb247XCIsXCLFhVwiOlwiJk5jZWRpbDtcIixcItCdXCI6XCImTmN5O1wiLFwi4oCLXCI6XCImWmVyb1dpZHRoU3BhY2U7XCIsXCJcXG5cIjpcIiZOZXdMaW5lO1wiLFwi8J2UkVwiOlwiJk5mcjtcIixcIuKBoFwiOlwiJk5vQnJlYWs7XCIsXCLCoFwiOlwiJm5ic3A7XCIsXCLihJVcIjpcIiZuYXR1cmFscztcIixcIuKrrFwiOlwiJk5vdDtcIixcIuKJolwiOlwiJm5lcXVpdjtcIixcIuKJrVwiOlwiJk5vdEN1cENhcDtcIixcIuKIplwiOlwiJm5zcGFyO1wiLFwi4oiJXCI6XCImbm90aW52YTtcIixcIuKJoFwiOlwiJm5lO1wiLFwi4omCzLhcIjpcIiZuZXNpbTtcIixcIuKIhFwiOlwiJm5leGlzdHM7XCIsXCLiia9cIjpcIiZuZ3RyO1wiLFwi4omxXCI6XCImbmdlcTtcIixcIuKJp8y4XCI6XCImbmdlcXE7XCIsXCLiiavMuFwiOlwiJm5HdHY7XCIsXCLiiblcIjpcIiZudGdsO1wiLFwi4qm+zLhcIjpcIiZuZ2VzO1wiLFwi4om1XCI6XCImbmdzaW07XCIsXCLiiY7MuFwiOlwiJm5idW1wO1wiLFwi4omPzLhcIjpcIiZuYnVtcGU7XCIsXCLii6pcIjpcIiZudHJpYW5nbGVsZWZ0O1wiLFwi4qePzLhcIjpcIiZOb3RMZWZ0VHJpYW5nbGVCYXI7XCIsXCLii6xcIjpcIiZudHJpYW5nbGVsZWZ0ZXE7XCIsXCLiia5cIjpcIiZubHQ7XCIsXCLiibBcIjpcIiZubGVxO1wiLFwi4om4XCI6XCImbnRsZztcIixcIuKJqsy4XCI6XCImbkx0djtcIixcIuKpvcy4XCI6XCImbmxlcztcIixcIuKJtFwiOlwiJm5sc2ltO1wiLFwi4qqizLhcIjpcIiZOb3ROZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIixcIuKqocy4XCI6XCImTm90TmVzdGVkTGVzc0xlc3M7XCIsXCLiioBcIjpcIiZucHJlYztcIixcIuKqr8y4XCI6XCImbnByZWNlcTtcIixcIuKLoFwiOlwiJm5wcmN1ZTtcIixcIuKIjFwiOlwiJm5vdG5pdmE7XCIsXCLii6tcIjpcIiZudHJpYW5nbGVyaWdodDtcIixcIuKnkMy4XCI6XCImTm90UmlnaHRUcmlhbmdsZUJhcjtcIixcIuKLrVwiOlwiJm50cmlhbmdsZXJpZ2h0ZXE7XCIsXCLiio/MuFwiOlwiJk5vdFNxdWFyZVN1YnNldDtcIixcIuKLolwiOlwiJm5zcXN1YmU7XCIsXCLiipDMuFwiOlwiJk5vdFNxdWFyZVN1cGVyc2V0O1wiLFwi4oujXCI6XCImbnNxc3VwZTtcIixcIuKKguKDklwiOlwiJnZuc3ViO1wiLFwi4oqIXCI6XCImbnN1YnNldGVxO1wiLFwi4oqBXCI6XCImbnN1Y2M7XCIsXCLiqrDMuFwiOlwiJm5zdWNjZXE7XCIsXCLii6FcIjpcIiZuc2NjdWU7XCIsXCLiib/MuFwiOlwiJk5vdFN1Y2NlZWRzVGlsZGU7XCIsXCLiioPig5JcIjpcIiZ2bnN1cDtcIixcIuKKiVwiOlwiJm5zdXBzZXRlcTtcIixcIuKJgVwiOlwiJm5zaW07XCIsXCLiiYRcIjpcIiZuc2ltZXE7XCIsXCLiiYdcIjpcIiZuY29uZztcIixcIuKJiVwiOlwiJm5hcHByb3g7XCIsXCLiiKRcIjpcIiZuc21pZDtcIixcIvCdkqlcIjpcIiZOc2NyO1wiLFwiw5FcIjpcIiZOdGlsZGU7XCIsXCLOnVwiOlwiJk51O1wiLFwixZJcIjpcIiZPRWxpZztcIixcIsOTXCI6XCImT2FjdXRlO1wiLFwiw5RcIjpcIiZPY2lyYztcIixcItCeXCI6XCImT2N5O1wiLFwixZBcIjpcIiZPZGJsYWM7XCIsXCLwnZSSXCI6XCImT2ZyO1wiLFwiw5JcIjpcIiZPZ3JhdmU7XCIsXCLFjFwiOlwiJk9tYWNyO1wiLFwizqlcIjpcIiZvaG07XCIsXCLOn1wiOlwiJk9taWNyb247XCIsXCLwnZWGXCI6XCImT29wZjtcIixcIuKAnFwiOlwiJmxkcXVvO1wiLFwi4oCYXCI6XCImbHNxdW87XCIsXCLiqZRcIjpcIiZPcjtcIixcIvCdkqpcIjpcIiZPc2NyO1wiLFwiw5hcIjpcIiZPc2xhc2g7XCIsXCLDlVwiOlwiJk90aWxkZTtcIixcIuKot1wiOlwiJk90aW1lcztcIixcIsOWXCI6XCImT3VtbDtcIixcIuKAvlwiOlwiJm9saW5lO1wiLFwi4o+eXCI6XCImT3ZlckJyYWNlO1wiLFwi4o60XCI6XCImdGJyaztcIixcIuKPnFwiOlwiJk92ZXJQYXJlbnRoZXNpcztcIixcIuKIglwiOlwiJnBhcnQ7XCIsXCLQn1wiOlwiJlBjeTtcIixcIvCdlJNcIjpcIiZQZnI7XCIsXCLOplwiOlwiJlBoaTtcIixcIs6gXCI6XCImUGk7XCIsXCLCsVwiOlwiJnBtO1wiLFwi4oSZXCI6XCImcHJpbWVzO1wiLFwi4qq7XCI6XCImUHI7XCIsXCLiibpcIjpcIiZwcmVjO1wiLFwi4qqvXCI6XCImcHJlY2VxO1wiLFwi4om8XCI6XCImcHJlY2N1cmx5ZXE7XCIsXCLiib5cIjpcIiZwcnNpbTtcIixcIuKAs1wiOlwiJlByaW1lO1wiLFwi4oiPXCI6XCImcHJvZDtcIixcIuKInVwiOlwiJnZwcm9wO1wiLFwi8J2Sq1wiOlwiJlBzY3I7XCIsXCLOqFwiOlwiJlBzaTtcIiwnXCInOlwiJnF1b3Q7XCIsXCLwnZSUXCI6XCImUWZyO1wiLFwi4oSaXCI6XCImcmF0aW9uYWxzO1wiLFwi8J2SrFwiOlwiJlFzY3I7XCIsXCLipJBcIjpcIiZkcmJrYXJvdztcIixcIsKuXCI6XCImcmVnO1wiLFwixZRcIjpcIiZSYWN1dGU7XCIsXCLin6tcIjpcIiZSYW5nO1wiLFwi4oagXCI6XCImdHdvaGVhZHJpZ2h0YXJyb3c7XCIsXCLipJZcIjpcIiZSYXJydGw7XCIsXCLFmFwiOlwiJlJjYXJvbjtcIixcIsWWXCI6XCImUmNlZGlsO1wiLFwi0KBcIjpcIiZSY3k7XCIsXCLihJxcIjpcIiZyZWFscGFydDtcIixcIuKIi1wiOlwiJm5pdjtcIixcIuKHi1wiOlwiJmxyaGFyO1wiLFwi4qWvXCI6XCImZHVoYXI7XCIsXCLOoVwiOlwiJlJobztcIixcIuKfqVwiOlwiJnJhbmdsZTtcIixcIuKGklwiOlwiJnNyYXJyO1wiLFwi4oelXCI6XCImcmFycmI7XCIsXCLih4RcIjpcIiZybGFycjtcIixcIuKMiVwiOlwiJnJjZWlsO1wiLFwi4p+nXCI6XCImcm9icms7XCIsXCLipZ1cIjpcIiZSaWdodERvd25UZWVWZWN0b3I7XCIsXCLih4JcIjpcIiZkb3duaGFycG9vbnJpZ2h0O1wiLFwi4qWVXCI6XCImUmlnaHREb3duVmVjdG9yQmFyO1wiLFwi4oyLXCI6XCImcmZsb29yO1wiLFwi4oqiXCI6XCImdmRhc2g7XCIsXCLihqZcIjpcIiZtYXBzdG87XCIsXCLipZtcIjpcIiZSaWdodFRlZVZlY3RvcjtcIixcIuKKs1wiOlwiJnZydHJpO1wiLFwi4qeQXCI6XCImUmlnaHRUcmlhbmdsZUJhcjtcIixcIuKKtVwiOlwiJnRyaWFuZ2xlcmlnaHRlcTtcIixcIuKlj1wiOlwiJlJpZ2h0VXBEb3duVmVjdG9yO1wiLFwi4qWcXCI6XCImUmlnaHRVcFRlZVZlY3RvcjtcIixcIuKGvlwiOlwiJnVwaGFycG9vbnJpZ2h0O1wiLFwi4qWUXCI6XCImUmlnaHRVcFZlY3RvckJhcjtcIixcIuKHgFwiOlwiJnJpZ2h0aGFycG9vbnVwO1wiLFwi4qWTXCI6XCImUmlnaHRWZWN0b3JCYXI7XCIsXCLihJ1cIjpcIiZyZWFscztcIixcIuKlsFwiOlwiJlJvdW5kSW1wbGllcztcIixcIuKHm1wiOlwiJnJBYXJyO1wiLFwi4oSbXCI6XCImcmVhbGluZTtcIixcIuKGsVwiOlwiJnJzaDtcIixcIuKntFwiOlwiJlJ1bGVEZWxheWVkO1wiLFwi0KlcIjpcIiZTSENIY3k7XCIsXCLQqFwiOlwiJlNIY3k7XCIsXCLQrFwiOlwiJlNPRlRjeTtcIixcIsWaXCI6XCImU2FjdXRlO1wiLFwi4qq8XCI6XCImU2M7XCIsXCLFoFwiOlwiJlNjYXJvbjtcIixcIsWeXCI6XCImU2NlZGlsO1wiLFwixZxcIjpcIiZTY2lyYztcIixcItChXCI6XCImU2N5O1wiLFwi8J2UllwiOlwiJlNmcjtcIixcIuKGkVwiOlwiJnVwYXJyb3c7XCIsXCLOo1wiOlwiJlNpZ21hO1wiLFwi4oiYXCI6XCImY29tcGZuO1wiLFwi8J2VilwiOlwiJlNvcGY7XCIsXCLiiJpcIjpcIiZyYWRpYztcIixcIuKWoVwiOlwiJnNxdWFyZTtcIixcIuKKk1wiOlwiJnNxY2FwO1wiLFwi4oqPXCI6XCImc3FzdWJzZXQ7XCIsXCLiipFcIjpcIiZzcXN1YnNldGVxO1wiLFwi4oqQXCI6XCImc3FzdXBzZXQ7XCIsXCLiipJcIjpcIiZzcXN1cHNldGVxO1wiLFwi4oqUXCI6XCImc3FjdXA7XCIsXCLwnZKuXCI6XCImU3NjcjtcIixcIuKLhlwiOlwiJnNzdGFyZjtcIixcIuKLkFwiOlwiJlN1YnNldDtcIixcIuKKhlwiOlwiJnN1YnNldGVxO1wiLFwi4om7XCI6XCImc3VjYztcIixcIuKqsFwiOlwiJnN1Y2NlcTtcIixcIuKJvVwiOlwiJnN1Y2NjdXJseWVxO1wiLFwi4om/XCI6XCImc3VjY3NpbTtcIixcIuKIkVwiOlwiJnN1bTtcIixcIuKLkVwiOlwiJlN1cHNldDtcIixcIuKKg1wiOlwiJnN1cHNldDtcIixcIuKKh1wiOlwiJnN1cHNldGVxO1wiLFwiw55cIjpcIiZUSE9STjtcIixcIuKEolwiOlwiJnRyYWRlO1wiLFwi0ItcIjpcIiZUU0hjeTtcIixcItCmXCI6XCImVFNjeTtcIixcIlxcdFwiOlwiJlRhYjtcIixcIs6kXCI6XCImVGF1O1wiLFwixaRcIjpcIiZUY2Fyb247XCIsXCLFolwiOlwiJlRjZWRpbDtcIixcItCiXCI6XCImVGN5O1wiLFwi8J2Ul1wiOlwiJlRmcjtcIixcIuKItFwiOlwiJnRoZXJlZm9yZTtcIixcIs6YXCI6XCImVGhldGE7XCIsXCLigZ/igIpcIjpcIiZUaGlja1NwYWNlO1wiLFwi4oCJXCI6XCImdGhpbnNwO1wiLFwi4oi8XCI6XCImdGhrc2ltO1wiLFwi4omDXCI6XCImc2ltZXE7XCIsXCLiiYVcIjpcIiZjb25nO1wiLFwi4omIXCI6XCImdGhrYXA7XCIsXCLwnZWLXCI6XCImVG9wZjtcIixcIuKDm1wiOlwiJnRkb3Q7XCIsXCLwnZKvXCI6XCImVHNjcjtcIixcIsWmXCI6XCImVHN0cm9rO1wiLFwiw5pcIjpcIiZVYWN1dGU7XCIsXCLihp9cIjpcIiZVYXJyO1wiLFwi4qWJXCI6XCImVWFycm9jaXI7XCIsXCLQjlwiOlwiJlVicmN5O1wiLFwixaxcIjpcIiZVYnJldmU7XCIsXCLDm1wiOlwiJlVjaXJjO1wiLFwi0KNcIjpcIiZVY3k7XCIsXCLFsFwiOlwiJlVkYmxhYztcIixcIvCdlJhcIjpcIiZVZnI7XCIsXCLDmVwiOlwiJlVncmF2ZTtcIixcIsWqXCI6XCImVW1hY3I7XCIsXzpcIiZsb3diYXI7XCIsXCLij59cIjpcIiZVbmRlckJyYWNlO1wiLFwi4o61XCI6XCImYmJyaztcIixcIuKPnVwiOlwiJlVuZGVyUGFyZW50aGVzaXM7XCIsXCLii4NcIjpcIiZ4Y3VwO1wiLFwi4oqOXCI6XCImdXBsdXM7XCIsXCLFslwiOlwiJlVvZ29uO1wiLFwi8J2VjFwiOlwiJlVvcGY7XCIsXCLipJJcIjpcIiZVcEFycm93QmFyO1wiLFwi4oeFXCI6XCImdWRhcnI7XCIsXCLihpVcIjpcIiZ2YXJyO1wiLFwi4qWuXCI6XCImdWRoYXI7XCIsXCLiiqVcIjpcIiZwZXJwO1wiLFwi4oalXCI6XCImbWFwc3RvdXA7XCIsXCLihpZcIjpcIiZud2Fycm93O1wiLFwi4oaXXCI6XCImbmVhcnJvdztcIixcIs+SXCI6XCImdXBzaWg7XCIsXCLOpVwiOlwiJlVwc2lsb247XCIsXCLFrlwiOlwiJlVyaW5nO1wiLFwi8J2SsFwiOlwiJlVzY3I7XCIsXCLFqFwiOlwiJlV0aWxkZTtcIixcIsOcXCI6XCImVXVtbDtcIixcIuKKq1wiOlwiJlZEYXNoO1wiLFwi4qurXCI6XCImVmJhcjtcIixcItCSXCI6XCImVmN5O1wiLFwi4oqpXCI6XCImVmRhc2g7XCIsXCLiq6ZcIjpcIiZWZGFzaGw7XCIsXCLii4FcIjpcIiZ4dmVlO1wiLFwi4oCWXCI6XCImVmVydDtcIixcIuKIo1wiOlwiJnNtaWQ7XCIsXCJ8XCI6XCImdmVydDtcIixcIuKdmFwiOlwiJlZlcnRpY2FsU2VwYXJhdG9yO1wiLFwi4omAXCI6XCImd3JlYXRoO1wiLFwi4oCKXCI6XCImaGFpcnNwO1wiLFwi8J2UmVwiOlwiJlZmcjtcIixcIvCdlY1cIjpcIiZWb3BmO1wiLFwi8J2SsVwiOlwiJlZzY3I7XCIsXCLiiqpcIjpcIiZWdmRhc2g7XCIsXCLFtFwiOlwiJldjaXJjO1wiLFwi4ouAXCI6XCImeHdlZGdlO1wiLFwi8J2UmlwiOlwiJldmcjtcIixcIvCdlY5cIjpcIiZXb3BmO1wiLFwi8J2SslwiOlwiJldzY3I7XCIsXCLwnZSbXCI6XCImWGZyO1wiLFwizp5cIjpcIiZYaTtcIixcIvCdlY9cIjpcIiZYb3BmO1wiLFwi8J2Ss1wiOlwiJlhzY3I7XCIsXCLQr1wiOlwiJllBY3k7XCIsXCLQh1wiOlwiJllJY3k7XCIsXCLQrlwiOlwiJllVY3k7XCIsXCLDnVwiOlwiJllhY3V0ZTtcIixcIsW2XCI6XCImWWNpcmM7XCIsXCLQq1wiOlwiJlljeTtcIixcIvCdlJxcIjpcIiZZZnI7XCIsXCLwnZWQXCI6XCImWW9wZjtcIixcIvCdkrRcIjpcIiZZc2NyO1wiLFwixbhcIjpcIiZZdW1sO1wiLFwi0JZcIjpcIiZaSGN5O1wiLFwixblcIjpcIiZaYWN1dGU7XCIsXCLFvVwiOlwiJlpjYXJvbjtcIixcItCXXCI6XCImWmN5O1wiLFwixbtcIjpcIiZaZG90O1wiLFwizpZcIjpcIiZaZXRhO1wiLFwi4oSoXCI6XCImemVldHJmO1wiLFwi4oSkXCI6XCImaW50ZWdlcnM7XCIsXCLwnZK1XCI6XCImWnNjcjtcIixcIsOhXCI6XCImYWFjdXRlO1wiLFwixINcIjpcIiZhYnJldmU7XCIsXCLiiL5cIjpcIiZtc3Rwb3M7XCIsXCLiiL7Ms1wiOlwiJmFjRTtcIixcIuKIv1wiOlwiJmFjZDtcIixcIsOiXCI6XCImYWNpcmM7XCIsXCLQsFwiOlwiJmFjeTtcIixcIsOmXCI6XCImYWVsaWc7XCIsXCLwnZSeXCI6XCImYWZyO1wiLFwiw6BcIjpcIiZhZ3JhdmU7XCIsXCLihLVcIjpcIiZhbGVwaDtcIixcIs6xXCI6XCImYWxwaGE7XCIsXCLEgVwiOlwiJmFtYWNyO1wiLFwi4qi/XCI6XCImYW1hbGc7XCIsXCLiiKdcIjpcIiZ3ZWRnZTtcIixcIuKplVwiOlwiJmFuZGFuZDtcIixcIuKpnFwiOlwiJmFuZGQ7XCIsXCLiqZhcIjpcIiZhbmRzbG9wZTtcIixcIuKpmlwiOlwiJmFuZHY7XCIsXCLiiKBcIjpcIiZhbmdsZTtcIixcIuKmpFwiOlwiJmFuZ2U7XCIsXCLiiKFcIjpcIiZtZWFzdXJlZGFuZ2xlO1wiLFwi4qaoXCI6XCImYW5nbXNkYWE7XCIsXCLipqlcIjpcIiZhbmdtc2RhYjtcIixcIuKmqlwiOlwiJmFuZ21zZGFjO1wiLFwi4qarXCI6XCImYW5nbXNkYWQ7XCIsXCLipqxcIjpcIiZhbmdtc2RhZTtcIixcIuKmrVwiOlwiJmFuZ21zZGFmO1wiLFwi4qauXCI6XCImYW5nbXNkYWc7XCIsXCLipq9cIjpcIiZhbmdtc2RhaDtcIixcIuKIn1wiOlwiJmFuZ3J0O1wiLFwi4oq+XCI6XCImYW5ncnR2YjtcIixcIuKmnVwiOlwiJmFuZ3J0dmJkO1wiLFwi4oiiXCI6XCImYW5nc3BoO1wiLFwi4o28XCI6XCImYW5nemFycjtcIixcIsSFXCI6XCImYW9nb247XCIsXCLwnZWSXCI6XCImYW9wZjtcIixcIuKpsFwiOlwiJmFwRTtcIixcIuKpr1wiOlwiJmFwYWNpcjtcIixcIuKJilwiOlwiJmFwcHJveGVxO1wiLFwi4omLXCI6XCImYXBpZDtcIixcIidcIjpcIiZhcG9zO1wiLFwiw6VcIjpcIiZhcmluZztcIixcIvCdkrZcIjpcIiZhc2NyO1wiLFwiKlwiOlwiJm1pZGFzdDtcIixcIsOjXCI6XCImYXRpbGRlO1wiLFwiw6RcIjpcIiZhdW1sO1wiLFwi4qiRXCI6XCImYXdpbnQ7XCIsXCLiq61cIjpcIiZiTm90O1wiLFwi4omMXCI6XCImYmNvbmc7XCIsXCLPtlwiOlwiJmJlcHNpO1wiLFwi4oC1XCI6XCImYnByaW1lO1wiLFwi4oi9XCI6XCImYnNpbTtcIixcIuKLjVwiOlwiJmJzaW1lO1wiLFwi4oq9XCI6XCImYmFydmVlO1wiLFwi4oyFXCI6XCImYmFyd2VkZ2U7XCIsXCLijrZcIjpcIiZiYnJrdGJyaztcIixcItCxXCI6XCImYmN5O1wiLFwi4oCeXCI6XCImbGRxdW9yO1wiLFwi4qawXCI6XCImYmVtcHR5djtcIixcIs6yXCI6XCImYmV0YTtcIixcIuKEtlwiOlwiJmJldGg7XCIsXCLiiaxcIjpcIiZ0d2l4dDtcIixcIvCdlJ9cIjpcIiZiZnI7XCIsXCLil69cIjpcIiZ4Y2lyYztcIixcIuKogFwiOlwiJnhvZG90O1wiLFwi4qiBXCI6XCImeG9wbHVzO1wiLFwi4qiCXCI6XCImeG90aW1lO1wiLFwi4qiGXCI6XCImeHNxY3VwO1wiLFwi4piFXCI6XCImc3RhcmY7XCIsXCLilr1cIjpcIiZ4ZHRyaTtcIixcIuKWs1wiOlwiJnh1dHJpO1wiLFwi4qiEXCI6XCImeHVwbHVzO1wiLFwi4qSNXCI6XCImcmJhcnI7XCIsXCLip6tcIjpcIiZsb3pmO1wiLFwi4pa0XCI6XCImdXRyaWY7XCIsXCLilr5cIjpcIiZkdHJpZjtcIixcIuKXglwiOlwiJmx0cmlmO1wiLFwi4pa4XCI6XCImcnRyaWY7XCIsXCLikKNcIjpcIiZibGFuaztcIixcIuKWklwiOlwiJmJsazEyO1wiLFwi4paRXCI6XCImYmxrMTQ7XCIsXCLilpNcIjpcIiZibGszNDtcIixcIuKWiFwiOlwiJmJsb2NrO1wiLFwiPeKDpVwiOlwiJmJuZTtcIixcIuKJoeKDpVwiOlwiJmJuZXF1aXY7XCIsXCLijJBcIjpcIiZibm90O1wiLFwi8J2Vk1wiOlwiJmJvcGY7XCIsXCLii4hcIjpcIiZib3d0aWU7XCIsXCLilZdcIjpcIiZib3hETDtcIixcIuKVlFwiOlwiJmJveERSO1wiLFwi4pWWXCI6XCImYm94RGw7XCIsXCLilZNcIjpcIiZib3hEcjtcIixcIuKVkFwiOlwiJmJveEg7XCIsXCLilaZcIjpcIiZib3hIRDtcIixcIuKVqVwiOlwiJmJveEhVO1wiLFwi4pWkXCI6XCImYm94SGQ7XCIsXCLiladcIjpcIiZib3hIdTtcIixcIuKVnVwiOlwiJmJveFVMO1wiLFwi4pWaXCI6XCImYm94VVI7XCIsXCLilZxcIjpcIiZib3hVbDtcIixcIuKVmVwiOlwiJmJveFVyO1wiLFwi4pWRXCI6XCImYm94VjtcIixcIuKVrFwiOlwiJmJveFZIO1wiLFwi4pWjXCI6XCImYm94Vkw7XCIsXCLilaBcIjpcIiZib3hWUjtcIixcIuKVq1wiOlwiJmJveFZoO1wiLFwi4pWiXCI6XCImYm94Vmw7XCIsXCLilZ9cIjpcIiZib3hWcjtcIixcIuKniVwiOlwiJmJveGJveDtcIixcIuKVlVwiOlwiJmJveGRMO1wiLFwi4pWSXCI6XCImYm94ZFI7XCIsXCLilJBcIjpcIiZib3hkbDtcIixcIuKUjFwiOlwiJmJveGRyO1wiLFwi4pWlXCI6XCImYm94aEQ7XCIsXCLilahcIjpcIiZib3hoVTtcIixcIuKUrFwiOlwiJmJveGhkO1wiLFwi4pS0XCI6XCImYm94aHU7XCIsXCLiip9cIjpcIiZtaW51c2I7XCIsXCLiip5cIjpcIiZwbHVzYjtcIixcIuKKoFwiOlwiJnRpbWVzYjtcIixcIuKVm1wiOlwiJmJveHVMO1wiLFwi4pWYXCI6XCImYm94dVI7XCIsXCLilJhcIjpcIiZib3h1bDtcIixcIuKUlFwiOlwiJmJveHVyO1wiLFwi4pSCXCI6XCImYm94djtcIixcIuKVqlwiOlwiJmJveHZIO1wiLFwi4pWhXCI6XCImYm94dkw7XCIsXCLilZ5cIjpcIiZib3h2UjtcIixcIuKUvFwiOlwiJmJveHZoO1wiLFwi4pSkXCI6XCImYm94dmw7XCIsXCLilJxcIjpcIiZib3h2cjtcIixcIsKmXCI6XCImYnJ2YmFyO1wiLFwi8J2St1wiOlwiJmJzY3I7XCIsXCLigY9cIjpcIiZic2VtaTtcIixcIlxcXFxcIjpcIiZic29sO1wiLFwi4qeFXCI6XCImYnNvbGI7XCIsXCLin4hcIjpcIiZic29saHN1YjtcIixcIuKAolwiOlwiJmJ1bGxldDtcIixcIuKqrlwiOlwiJmJ1bXBFO1wiLFwixIdcIjpcIiZjYWN1dGU7XCIsXCLiiKlcIjpcIiZjYXA7XCIsXCLiqYRcIjpcIiZjYXBhbmQ7XCIsXCLiqYlcIjpcIiZjYXBicmN1cDtcIixcIuKpi1wiOlwiJmNhcGNhcDtcIixcIuKph1wiOlwiJmNhcGN1cDtcIixcIuKpgFwiOlwiJmNhcGRvdDtcIixcIuKIqe+4gFwiOlwiJmNhcHM7XCIsXCLigYFcIjpcIiZjYXJldDtcIixcIuKpjVwiOlwiJmNjYXBzO1wiLFwixI1cIjpcIiZjY2Fyb247XCIsXCLDp1wiOlwiJmNjZWRpbDtcIixcIsSJXCI6XCImY2NpcmM7XCIsXCLiqYxcIjpcIiZjY3VwcztcIixcIuKpkFwiOlwiJmNjdXBzc207XCIsXCLEi1wiOlwiJmNkb3Q7XCIsXCLiprJcIjpcIiZjZW1wdHl2O1wiLFwiwqJcIjpcIiZjZW50O1wiLFwi8J2UoFwiOlwiJmNmcjtcIixcItGHXCI6XCImY2hjeTtcIixcIuKck1wiOlwiJmNoZWNrbWFyaztcIixcIs+HXCI6XCImY2hpO1wiLFwi4peLXCI6XCImY2lyO1wiLFwi4qeDXCI6XCImY2lyRTtcIixcIsuGXCI6XCImY2lyYztcIixcIuKJl1wiOlwiJmNpcmU7XCIsXCLihrpcIjpcIiZvbGFycjtcIixcIuKGu1wiOlwiJm9yYXJyO1wiLFwi4pOIXCI6XCImb1M7XCIsXCLiiptcIjpcIiZvYXN0O1wiLFwi4oqaXCI6XCImb2NpcjtcIixcIuKKnVwiOlwiJm9kYXNoO1wiLFwi4qiQXCI6XCImY2lyZm5pbnQ7XCIsXCLiq69cIjpcIiZjaXJtaWQ7XCIsXCLip4JcIjpcIiZjaXJzY2lyO1wiLFwi4pmjXCI6XCImY2x1YnN1aXQ7XCIsXCI6XCI6XCImY29sb247XCIsXCIsXCI6XCImY29tbWE7XCIsXCJAXCI6XCImY29tbWF0O1wiLFwi4oiBXCI6XCImY29tcGxlbWVudDtcIixcIuKprVwiOlwiJmNvbmdkb3Q7XCIsXCLwnZWUXCI6XCImY29wZjtcIixcIuKEl1wiOlwiJmNvcHlzcjtcIixcIuKGtVwiOlwiJmNyYXJyO1wiLFwi4pyXXCI6XCImY3Jvc3M7XCIsXCLwnZK4XCI6XCImY3NjcjtcIixcIuKrj1wiOlwiJmNzdWI7XCIsXCLiq5FcIjpcIiZjc3ViZTtcIixcIuKrkFwiOlwiJmNzdXA7XCIsXCLiq5JcIjpcIiZjc3VwZTtcIixcIuKLr1wiOlwiJmN0ZG90O1wiLFwi4qS4XCI6XCImY3VkYXJybDtcIixcIuKktVwiOlwiJmN1ZGFycnI7XCIsXCLii55cIjpcIiZjdXJseWVxcHJlYztcIixcIuKLn1wiOlwiJmN1cmx5ZXFzdWNjO1wiLFwi4oa2XCI6XCImY3VydmVhcnJvd2xlZnQ7XCIsXCLipL1cIjpcIiZjdWxhcnJwO1wiLFwi4oiqXCI6XCImY3VwO1wiLFwi4qmIXCI6XCImY3VwYnJjYXA7XCIsXCLiqYZcIjpcIiZjdXBjYXA7XCIsXCLiqYpcIjpcIiZjdXBjdXA7XCIsXCLiio1cIjpcIiZjdXBkb3Q7XCIsXCLiqYVcIjpcIiZjdXBvcjtcIixcIuKIqu+4gFwiOlwiJmN1cHM7XCIsXCLihrdcIjpcIiZjdXJ2ZWFycm93cmlnaHQ7XCIsXCLipLxcIjpcIiZjdXJhcnJtO1wiLFwi4ouOXCI6XCImY3V2ZWU7XCIsXCLii49cIjpcIiZjdXdlZDtcIixcIsKkXCI6XCImY3VycmVuO1wiLFwi4oixXCI6XCImY3dpbnQ7XCIsXCLijK1cIjpcIiZjeWxjdHk7XCIsXCLipaVcIjpcIiZkSGFyO1wiLFwi4oCgXCI6XCImZGFnZ2VyO1wiLFwi4oS4XCI6XCImZGFsZXRoO1wiLFwi4oCQXCI6XCImaHlwaGVuO1wiLFwi4qSPXCI6XCImckJhcnI7XCIsXCLEj1wiOlwiJmRjYXJvbjtcIixcItC0XCI6XCImZGN5O1wiLFwi4oeKXCI6XCImZG93bmRvd25hcnJvd3M7XCIsXCLiqbdcIjpcIiZlRERvdDtcIixcIsKwXCI6XCImZGVnO1wiLFwizrRcIjpcIiZkZWx0YTtcIixcIuKmsVwiOlwiJmRlbXB0eXY7XCIsXCLipb9cIjpcIiZkZmlzaHQ7XCIsXCLwnZShXCI6XCImZGZyO1wiLFwi4pmmXCI6XCImZGlhbXM7XCIsXCLPnVwiOlwiJmdhbW1hZDtcIixcIuKLslwiOlwiJmRpc2luO1wiLFwiw7dcIjpcIiZkaXZpZGU7XCIsXCLii4dcIjpcIiZkaXZvbng7XCIsXCLRklwiOlwiJmRqY3k7XCIsXCLijJ5cIjpcIiZsbGNvcm5lcjtcIixcIuKMjVwiOlwiJmRsY3JvcDtcIiwkOlwiJmRvbGxhcjtcIixcIvCdlZVcIjpcIiZkb3BmO1wiLFwi4omRXCI6XCImZURvdDtcIixcIuKIuFwiOlwiJm1pbnVzZDtcIixcIuKIlFwiOlwiJnBsdXNkbztcIixcIuKKoVwiOlwiJnNkb3RiO1wiLFwi4oyfXCI6XCImbHJjb3JuZXI7XCIsXCLijIxcIjpcIiZkcmNyb3A7XCIsXCLwnZK5XCI6XCImZHNjcjtcIixcItGVXCI6XCImZHNjeTtcIixcIuKntlwiOlwiJmRzb2w7XCIsXCLEkVwiOlwiJmRzdHJvaztcIixcIuKLsVwiOlwiJmR0ZG90O1wiLFwi4pa/XCI6XCImdHJpYW5nbGVkb3duO1wiLFwi4qamXCI6XCImZHdhbmdsZTtcIixcItGfXCI6XCImZHpjeTtcIixcIuKfv1wiOlwiJmR6aWdyYXJyO1wiLFwiw6lcIjpcIiZlYWN1dGU7XCIsXCLiqa5cIjpcIiZlYXN0ZXI7XCIsXCLEm1wiOlwiJmVjYXJvbjtcIixcIuKJllwiOlwiJmVxY2lyYztcIixcIsOqXCI6XCImZWNpcmM7XCIsXCLiiZVcIjpcIiZlcWNvbG9uO1wiLFwi0Y1cIjpcIiZlY3k7XCIsXCLEl1wiOlwiJmVkb3Q7XCIsXCLiiZJcIjpcIiZmYWxsaW5nZG90c2VxO1wiLFwi8J2UolwiOlwiJmVmcjtcIixcIuKqmlwiOlwiJmVnO1wiLFwiw6hcIjpcIiZlZ3JhdmU7XCIsXCLiqpZcIjpcIiZlcXNsYW50Z3RyO1wiLFwi4qqYXCI6XCImZWdzZG90O1wiLFwi4qqZXCI6XCImZWw7XCIsXCLij6dcIjpcIiZlbGludGVycztcIixcIuKEk1wiOlwiJmVsbDtcIixcIuKqlVwiOlwiJmVxc2xhbnRsZXNzO1wiLFwi4qqXXCI6XCImZWxzZG90O1wiLFwixJNcIjpcIiZlbWFjcjtcIixcIuKIhVwiOlwiJnZhcm5vdGhpbmc7XCIsXCLigIRcIjpcIiZlbXNwMTM7XCIsXCLigIVcIjpcIiZlbXNwMTQ7XCIsXCLigINcIjpcIiZlbXNwO1wiLFwixYtcIjpcIiZlbmc7XCIsXCLigIJcIjpcIiZlbnNwO1wiLFwixJlcIjpcIiZlb2dvbjtcIixcIvCdlZZcIjpcIiZlb3BmO1wiLFwi4ouVXCI6XCImZXBhcjtcIixcIuKno1wiOlwiJmVwYXJzbDtcIixcIuKpsVwiOlwiJmVwbHVzO1wiLFwizrVcIjpcIiZlcHNpbG9uO1wiLFwiz7VcIjpcIiZ2YXJlcHNpbG9uO1wiLFwiPVwiOlwiJmVxdWFscztcIixcIuKJn1wiOlwiJnF1ZXN0ZXE7XCIsXCLiqbhcIjpcIiZlcXVpdkREO1wiLFwi4qelXCI6XCImZXF2cGFyc2w7XCIsXCLiiZNcIjpcIiZyaXNpbmdkb3RzZXE7XCIsXCLipbFcIjpcIiZlcmFycjtcIixcIuKEr1wiOlwiJmVzY3I7XCIsXCLOt1wiOlwiJmV0YTtcIixcIsOwXCI6XCImZXRoO1wiLFwiw6tcIjpcIiZldW1sO1wiLFwi4oKsXCI6XCImZXVybztcIixcIiFcIjpcIiZleGNsO1wiLFwi0YRcIjpcIiZmY3k7XCIsXCLimYBcIjpcIiZmZW1hbGU7XCIsXCLvrINcIjpcIiZmZmlsaWc7XCIsXCLvrIBcIjpcIiZmZmxpZztcIixcIu+shFwiOlwiJmZmbGxpZztcIixcIvCdlKNcIjpcIiZmZnI7XCIsXCLvrIFcIjpcIiZmaWxpZztcIixmajpcIiZmamxpZztcIixcIuKZrVwiOlwiJmZsYXQ7XCIsXCLvrIJcIjpcIiZmbGxpZztcIixcIuKWsVwiOlwiJmZsdG5zO1wiLFwixpJcIjpcIiZmbm9mO1wiLFwi8J2Vl1wiOlwiJmZvcGY7XCIsXCLii5RcIjpcIiZwaXRjaGZvcms7XCIsXCLiq5lcIjpcIiZmb3JrdjtcIixcIuKojVwiOlwiJmZwYXJ0aW50O1wiLFwiwr1cIjpcIiZoYWxmO1wiLFwi4oWTXCI6XCImZnJhYzEzO1wiLFwiwrxcIjpcIiZmcmFjMTQ7XCIsXCLihZVcIjpcIiZmcmFjMTU7XCIsXCLihZlcIjpcIiZmcmFjMTY7XCIsXCLihZtcIjpcIiZmcmFjMTg7XCIsXCLihZRcIjpcIiZmcmFjMjM7XCIsXCLihZZcIjpcIiZmcmFjMjU7XCIsXCLCvlwiOlwiJmZyYWMzNDtcIixcIuKFl1wiOlwiJmZyYWMzNTtcIixcIuKFnFwiOlwiJmZyYWMzODtcIixcIuKFmFwiOlwiJmZyYWM0NTtcIixcIuKFmlwiOlwiJmZyYWM1NjtcIixcIuKFnVwiOlwiJmZyYWM1ODtcIixcIuKFnlwiOlwiJmZyYWM3ODtcIixcIuKBhFwiOlwiJmZyYXNsO1wiLFwi4oyiXCI6XCImc2Zyb3duO1wiLFwi8J2Su1wiOlwiJmZzY3I7XCIsXCLiqoxcIjpcIiZndHJlcXFsZXNzO1wiLFwix7VcIjpcIiZnYWN1dGU7XCIsXCLOs1wiOlwiJmdhbW1hO1wiLFwi4qqGXCI6XCImZ3RyYXBwcm94O1wiLFwixJ9cIjpcIiZnYnJldmU7XCIsXCLEnVwiOlwiJmdjaXJjO1wiLFwi0LNcIjpcIiZnY3k7XCIsXCLEoVwiOlwiJmdkb3Q7XCIsXCLiqqlcIjpcIiZnZXNjYztcIixcIuKqgFwiOlwiJmdlc2RvdDtcIixcIuKqglwiOlwiJmdlc2RvdG87XCIsXCLiqoRcIjpcIiZnZXNkb3RvbDtcIixcIuKLm++4gFwiOlwiJmdlc2w7XCIsXCLiqpRcIjpcIiZnZXNsZXM7XCIsXCLwnZSkXCI6XCImZ2ZyO1wiLFwi4oS3XCI6XCImZ2ltZWw7XCIsXCLRk1wiOlwiJmdqY3k7XCIsXCLiqpJcIjpcIiZnbEU7XCIsXCLiqqVcIjpcIiZnbGE7XCIsXCLiqqRcIjpcIiZnbGo7XCIsXCLiialcIjpcIiZnbmVxcTtcIixcIuKqilwiOlwiJmduYXBwcm94O1wiLFwi4qqIXCI6XCImZ25lcTtcIixcIuKLp1wiOlwiJmduc2ltO1wiLFwi8J2VmFwiOlwiJmdvcGY7XCIsXCLihIpcIjpcIiZnc2NyO1wiLFwi4qqOXCI6XCImZ3NpbWU7XCIsXCLiqpBcIjpcIiZnc2ltbDtcIixcIuKqp1wiOlwiJmd0Y2M7XCIsXCLiqbpcIjpcIiZndGNpcjtcIixcIuKLl1wiOlwiJmd0cmRvdDtcIixcIuKmlVwiOlwiJmd0bFBhcjtcIixcIuKpvFwiOlwiJmd0cXVlc3Q7XCIsXCLipbhcIjpcIiZndHJhcnI7XCIsXCLiianvuIBcIjpcIiZndm5FO1wiLFwi0YpcIjpcIiZoYXJkY3k7XCIsXCLipYhcIjpcIiZoYXJyY2lyO1wiLFwi4oatXCI6XCImbGVmdHJpZ2h0c3F1aWdhcnJvdztcIixcIuKEj1wiOlwiJnBsYW5rdjtcIixcIsSlXCI6XCImaGNpcmM7XCIsXCLimaVcIjpcIiZoZWFydHN1aXQ7XCIsXCLigKZcIjpcIiZtbGRyO1wiLFwi4oq5XCI6XCImaGVyY29uO1wiLFwi8J2UpVwiOlwiJmhmcjtcIixcIuKkpVwiOlwiJnNlYXJoaztcIixcIuKkplwiOlwiJnN3YXJoaztcIixcIuKHv1wiOlwiJmhvYXJyO1wiLFwi4oi7XCI6XCImaG9tdGh0O1wiLFwi4oapXCI6XCImbGFycmhrO1wiLFwi4oaqXCI6XCImcmFycmhrO1wiLFwi8J2VmVwiOlwiJmhvcGY7XCIsXCLigJVcIjpcIiZob3JiYXI7XCIsXCLwnZK9XCI6XCImaHNjcjtcIixcIsSnXCI6XCImaHN0cm9rO1wiLFwi4oGDXCI6XCImaHlidWxsO1wiLFwiw61cIjpcIiZpYWN1dGU7XCIsXCLDrlwiOlwiJmljaXJjO1wiLFwi0LhcIjpcIiZpY3k7XCIsXCLQtVwiOlwiJmllY3k7XCIsXCLCoVwiOlwiJmlleGNsO1wiLFwi8J2UplwiOlwiJmlmcjtcIixcIsOsXCI6XCImaWdyYXZlO1wiLFwi4qiMXCI6XCImcWludDtcIixcIuKIrVwiOlwiJnRpbnQ7XCIsXCLip5xcIjpcIiZpaW5maW47XCIsXCLihKlcIjpcIiZpaW90YTtcIixcIsSzXCI6XCImaWpsaWc7XCIsXCLEq1wiOlwiJmltYWNyO1wiLFwixLFcIjpcIiZpbm9kb3Q7XCIsXCLiirdcIjpcIiZpbW9mO1wiLFwixrVcIjpcIiZpbXBlZDtcIixcIuKEhVwiOlwiJmluY2FyZTtcIixcIuKInlwiOlwiJmluZmluO1wiLFwi4qedXCI6XCImaW5maW50aWU7XCIsXCLiirpcIjpcIiZpbnRlcmNhbDtcIixcIuKol1wiOlwiJmludGxhcmhrO1wiLFwi4qi8XCI6XCImaXByb2Q7XCIsXCLRkVwiOlwiJmlvY3k7XCIsXCLEr1wiOlwiJmlvZ29uO1wiLFwi8J2VmlwiOlwiJmlvcGY7XCIsXCLOuVwiOlwiJmlvdGE7XCIsXCLCv1wiOlwiJmlxdWVzdDtcIixcIvCdkr5cIjpcIiZpc2NyO1wiLFwi4ou5XCI6XCImaXNpbkU7XCIsXCLii7VcIjpcIiZpc2luZG90O1wiLFwi4ou0XCI6XCImaXNpbnM7XCIsXCLii7NcIjpcIiZpc2luc3Y7XCIsXCLEqVwiOlwiJml0aWxkZTtcIixcItGWXCI6XCImaXVrY3k7XCIsXCLDr1wiOlwiJml1bWw7XCIsXCLEtVwiOlwiJmpjaXJjO1wiLFwi0LlcIjpcIiZqY3k7XCIsXCLwnZSnXCI6XCImamZyO1wiLFwiyLdcIjpcIiZqbWF0aDtcIixcIvCdlZtcIjpcIiZqb3BmO1wiLFwi8J2Sv1wiOlwiJmpzY3I7XCIsXCLRmFwiOlwiJmpzZXJjeTtcIixcItGUXCI6XCImanVrY3k7XCIsXCLOulwiOlwiJmthcHBhO1wiLFwiz7BcIjpcIiZ2YXJrYXBwYTtcIixcIsS3XCI6XCIma2NlZGlsO1wiLFwi0LpcIjpcIiZrY3k7XCIsXCLwnZSoXCI6XCIma2ZyO1wiLFwixLhcIjpcIiZrZ3JlZW47XCIsXCLRhVwiOlwiJmtoY3k7XCIsXCLRnFwiOlwiJmtqY3k7XCIsXCLwnZWcXCI6XCIma29wZjtcIixcIvCdk4BcIjpcIiZrc2NyO1wiLFwi4qSbXCI6XCImbEF0YWlsO1wiLFwi4qSOXCI6XCImbEJhcnI7XCIsXCLiqotcIjpcIiZsZXNzZXFxZ3RyO1wiLFwi4qWiXCI6XCImbEhhcjtcIixcIsS6XCI6XCImbGFjdXRlO1wiLFwi4qa0XCI6XCImbGFlbXB0eXY7XCIsXCLOu1wiOlwiJmxhbWJkYTtcIixcIuKmkVwiOlwiJmxhbmdkO1wiLFwi4qqFXCI6XCImbGVzc2FwcHJveDtcIixcIsKrXCI6XCImbGFxdW87XCIsXCLipJ9cIjpcIiZsYXJyYmZzO1wiLFwi4qSdXCI6XCImbGFycmZzO1wiLFwi4oarXCI6XCImbG9vcGFycm93bGVmdDtcIixcIuKkuVwiOlwiJmxhcnJwbDtcIixcIuKls1wiOlwiJmxhcnJzaW07XCIsXCLihqJcIjpcIiZsZWZ0YXJyb3d0YWlsO1wiLFwi4qqrXCI6XCImbGF0O1wiLFwi4qSZXCI6XCImbGF0YWlsO1wiLFwi4qqtXCI6XCImbGF0ZTtcIixcIuKqre+4gFwiOlwiJmxhdGVzO1wiLFwi4qSMXCI6XCImbGJhcnI7XCIsXCLinbJcIjpcIiZsYmJyaztcIixcIntcIjpcIiZsY3ViO1wiLFwiW1wiOlwiJmxzcWI7XCIsXCLipotcIjpcIiZsYnJrZTtcIixcIuKmj1wiOlwiJmxicmtzbGQ7XCIsXCLipo1cIjpcIiZsYnJrc2x1O1wiLFwixL5cIjpcIiZsY2Fyb247XCIsXCLEvFwiOlwiJmxjZWRpbDtcIixcItC7XCI6XCImbGN5O1wiLFwi4qS2XCI6XCImbGRjYTtcIixcIuKlp1wiOlwiJmxkcmRoYXI7XCIsXCLipYtcIjpcIiZsZHJ1c2hhcjtcIixcIuKGslwiOlwiJmxkc2g7XCIsXCLiiaRcIjpcIiZsZXE7XCIsXCLih4dcIjpcIiZsbGFycjtcIixcIuKLi1wiOlwiJmx0aHJlZTtcIixcIuKqqFwiOlwiJmxlc2NjO1wiLFwi4qm/XCI6XCImbGVzZG90O1wiLFwi4qqBXCI6XCImbGVzZG90bztcIixcIuKqg1wiOlwiJmxlc2RvdG9yO1wiLFwi4oua77iAXCI6XCImbGVzZztcIixcIuKqk1wiOlwiJmxlc2dlcztcIixcIuKLllwiOlwiJmx0ZG90O1wiLFwi4qW8XCI6XCImbGZpc2h0O1wiLFwi8J2UqVwiOlwiJmxmcjtcIixcIuKqkVwiOlwiJmxnRTtcIixcIuKlqlwiOlwiJmxoYXJ1bDtcIixcIuKWhFwiOlwiJmxoYmxrO1wiLFwi0ZlcIjpcIiZsamN5O1wiLFwi4qWrXCI6XCImbGxoYXJkO1wiLFwi4pe6XCI6XCImbGx0cmk7XCIsXCLFgFwiOlwiJmxtaWRvdDtcIixcIuKOsFwiOlwiJmxtb3VzdGFjaGU7XCIsXCLiiahcIjpcIiZsbmVxcTtcIixcIuKqiVwiOlwiJmxuYXBwcm94O1wiLFwi4qqHXCI6XCImbG5lcTtcIixcIuKLplwiOlwiJmxuc2ltO1wiLFwi4p+sXCI6XCImbG9hbmc7XCIsXCLih71cIjpcIiZsb2FycjtcIixcIuKfvFwiOlwiJnhtYXA7XCIsXCLihqxcIjpcIiZyYXJybHA7XCIsXCLipoVcIjpcIiZsb3BhcjtcIixcIvCdlZ1cIjpcIiZsb3BmO1wiLFwi4qitXCI6XCImbG9wbHVzO1wiLFwi4qi0XCI6XCImbG90aW1lcztcIixcIuKIl1wiOlwiJmxvd2FzdDtcIixcIuKXilwiOlwiJmxvemVuZ2U7XCIsXCIoXCI6XCImbHBhcjtcIixcIuKmk1wiOlwiJmxwYXJsdDtcIixcIuKlrVwiOlwiJmxyaGFyZDtcIixcIuKAjlwiOlwiJmxybTtcIixcIuKKv1wiOlwiJmxydHJpO1wiLFwi4oC5XCI6XCImbHNhcXVvO1wiLFwi8J2TgVwiOlwiJmxzY3I7XCIsXCLiqo1cIjpcIiZsc2ltZTtcIixcIuKqj1wiOlwiJmxzaW1nO1wiLFwi4oCaXCI6XCImc2JxdW87XCIsXCLFglwiOlwiJmxzdHJvaztcIixcIuKqplwiOlwiJmx0Y2M7XCIsXCLiqblcIjpcIiZsdGNpcjtcIixcIuKLiVwiOlwiJmx0aW1lcztcIixcIuKltlwiOlwiJmx0bGFycjtcIixcIuKpu1wiOlwiJmx0cXVlc3Q7XCIsXCLippZcIjpcIiZsdHJQYXI7XCIsXCLil4NcIjpcIiZ0cmlhbmdsZWxlZnQ7XCIsXCLipYpcIjpcIiZsdXJkc2hhcjtcIixcIuKlplwiOlwiJmx1cnVoYXI7XCIsXCLiiajvuIBcIjpcIiZsdm5FO1wiLFwi4oi6XCI6XCImbUREb3Q7XCIsXCLCr1wiOlwiJnN0cm5zO1wiLFwi4pmCXCI6XCImbWFsZTtcIixcIuKcoFwiOlwiJm1hbHRlc2U7XCIsXCLilq5cIjpcIiZtYXJrZXI7XCIsXCLiqKlcIjpcIiZtY29tbWE7XCIsXCLQvFwiOlwiJm1jeTtcIixcIuKAlFwiOlwiJm1kYXNoO1wiLFwi8J2UqlwiOlwiJm1mcjtcIixcIuKEp1wiOlwiJm1obztcIixcIsK1XCI6XCImbWljcm87XCIsXCLiq7BcIjpcIiZtaWRjaXI7XCIsXCLiiJJcIjpcIiZtaW51cztcIixcIuKoqlwiOlwiJm1pbnVzZHU7XCIsXCLiq5tcIjpcIiZtbGNwO1wiLFwi4oqnXCI6XCImbW9kZWxzO1wiLFwi8J2VnlwiOlwiJm1vcGY7XCIsXCLwnZOCXCI6XCImbXNjcjtcIixcIs68XCI6XCImbXU7XCIsXCLiirhcIjpcIiZtdW1hcDtcIixcIuKLmcy4XCI6XCImbkdnO1wiLFwi4omr4oOSXCI6XCImbkd0O1wiLFwi4oeNXCI6XCImbmxBcnI7XCIsXCLih45cIjpcIiZuaEFycjtcIixcIuKLmMy4XCI6XCImbkxsO1wiLFwi4omq4oOSXCI6XCImbkx0O1wiLFwi4oePXCI6XCImbnJBcnI7XCIsXCLiiq9cIjpcIiZuVkRhc2g7XCIsXCLiiq5cIjpcIiZuVmRhc2g7XCIsXCLFhFwiOlwiJm5hY3V0ZTtcIixcIuKIoOKDklwiOlwiJm5hbmc7XCIsXCLiqbDMuFwiOlwiJm5hcEU7XCIsXCLiiYvMuFwiOlwiJm5hcGlkO1wiLFwixYlcIjpcIiZuYXBvcztcIixcIuKZrlwiOlwiJm5hdHVyYWw7XCIsXCLiqYNcIjpcIiZuY2FwO1wiLFwixYhcIjpcIiZuY2Fyb247XCIsXCLFhlwiOlwiJm5jZWRpbDtcIixcIuKprcy4XCI6XCImbmNvbmdkb3Q7XCIsXCLiqYJcIjpcIiZuY3VwO1wiLFwi0L1cIjpcIiZuY3k7XCIsXCLigJNcIjpcIiZuZGFzaDtcIixcIuKHl1wiOlwiJm5lQXJyO1wiLFwi4qSkXCI6XCImbmVhcmhrO1wiLFwi4omQzLhcIjpcIiZuZWRvdDtcIixcIuKkqFwiOlwiJnRvZWE7XCIsXCLwnZSrXCI6XCImbmZyO1wiLFwi4oauXCI6XCImbmxlZnRyaWdodGFycm93O1wiLFwi4quyXCI6XCImbmhwYXI7XCIsXCLii7xcIjpcIiZuaXM7XCIsXCLii7pcIjpcIiZuaXNkO1wiLFwi0ZpcIjpcIiZuamN5O1wiLFwi4ommzLhcIjpcIiZubGVxcTtcIixcIuKGmlwiOlwiJm5sZWZ0YXJyb3c7XCIsXCLigKVcIjpcIiZubGRyO1wiLFwi8J2Vn1wiOlwiJm5vcGY7XCIsXCLCrFwiOlwiJm5vdDtcIixcIuKLucy4XCI6XCImbm90aW5FO1wiLFwi4ou1zLhcIjpcIiZub3RpbmRvdDtcIixcIuKLt1wiOlwiJm5vdGludmI7XCIsXCLii7ZcIjpcIiZub3RpbnZjO1wiLFwi4ou+XCI6XCImbm90bml2YjtcIixcIuKLvVwiOlwiJm5vdG5pdmM7XCIsXCLiq73ig6VcIjpcIiZucGFyc2w7XCIsXCLiiILMuFwiOlwiJm5wYXJ0O1wiLFwi4qiUXCI6XCImbnBvbGludDtcIixcIuKGm1wiOlwiJm5yaWdodGFycm93O1wiLFwi4qSzzLhcIjpcIiZucmFycmM7XCIsXCLihp3MuFwiOlwiJm5yYXJydztcIixcIvCdk4NcIjpcIiZuc2NyO1wiLFwi4oqEXCI6XCImbnN1YjtcIixcIuKrhcy4XCI6XCImbnN1YnNldGVxcTtcIixcIuKKhVwiOlwiJm5zdXA7XCIsXCLiq4bMuFwiOlwiJm5zdXBzZXRlcXE7XCIsXCLDsVwiOlwiJm50aWxkZTtcIixcIs69XCI6XCImbnU7XCIsXCIjXCI6XCImbnVtO1wiLFwi4oSWXCI6XCImbnVtZXJvO1wiLFwi4oCHXCI6XCImbnVtc3A7XCIsXCLiiq1cIjpcIiZudkRhc2g7XCIsXCLipIRcIjpcIiZudkhhcnI7XCIsXCLiiY3ig5JcIjpcIiZudmFwO1wiLFwi4oqsXCI6XCImbnZkYXNoO1wiLFwi4oml4oOSXCI6XCImbnZnZTtcIixcIj7ig5JcIjpcIiZudmd0O1wiLFwi4qeeXCI6XCImbnZpbmZpbjtcIixcIuKkglwiOlwiJm52bEFycjtcIixcIuKJpOKDklwiOlwiJm52bGU7XCIsXCI84oOSXCI6XCImbnZsdDtcIixcIuKKtOKDklwiOlwiJm52bHRyaWU7XCIsXCLipINcIjpcIiZudnJBcnI7XCIsXCLiirXig5JcIjpcIiZudnJ0cmllO1wiLFwi4oi84oOSXCI6XCImbnZzaW07XCIsXCLih5ZcIjpcIiZud0FycjtcIixcIuKko1wiOlwiJm53YXJoaztcIixcIuKkp1wiOlwiJm53bmVhcjtcIixcIsOzXCI6XCImb2FjdXRlO1wiLFwiw7RcIjpcIiZvY2lyYztcIixcItC+XCI6XCImb2N5O1wiLFwixZFcIjpcIiZvZGJsYWM7XCIsXCLiqLhcIjpcIiZvZGl2O1wiLFwi4qa8XCI6XCImb2Rzb2xkO1wiLFwixZNcIjpcIiZvZWxpZztcIixcIuKmv1wiOlwiJm9mY2lyO1wiLFwi8J2UrFwiOlwiJm9mcjtcIixcIsubXCI6XCImb2dvbjtcIixcIsOyXCI6XCImb2dyYXZlO1wiLFwi4qeBXCI6XCImb2d0O1wiLFwi4qa1XCI6XCImb2hiYXI7XCIsXCLipr5cIjpcIiZvbGNpcjtcIixcIuKmu1wiOlwiJm9sY3Jvc3M7XCIsXCLip4BcIjpcIiZvbHQ7XCIsXCLFjVwiOlwiJm9tYWNyO1wiLFwiz4lcIjpcIiZvbWVnYTtcIixcIs6/XCI6XCImb21pY3JvbjtcIixcIuKmtlwiOlwiJm9taWQ7XCIsXCLwnZWgXCI6XCImb29wZjtcIixcIuKmt1wiOlwiJm9wYXI7XCIsXCLiprlcIjpcIiZvcGVycDtcIixcIuKIqFwiOlwiJnZlZTtcIixcIuKpnVwiOlwiJm9yZDtcIixcIuKEtFwiOlwiJm9zY3I7XCIsXCLCqlwiOlwiJm9yZGY7XCIsXCLCulwiOlwiJm9yZG07XCIsXCLiirZcIjpcIiZvcmlnb2Y7XCIsXCLiqZZcIjpcIiZvcm9yO1wiLFwi4qmXXCI6XCImb3JzbG9wZTtcIixcIuKpm1wiOlwiJm9ydjtcIixcIsO4XCI6XCImb3NsYXNoO1wiLFwi4oqYXCI6XCImb3NvbDtcIixcIsO1XCI6XCImb3RpbGRlO1wiLFwi4qi2XCI6XCImb3RpbWVzYXM7XCIsXCLDtlwiOlwiJm91bWw7XCIsXCLijL1cIjpcIiZvdmJhcjtcIixcIsK2XCI6XCImcGFyYTtcIixcIuKrs1wiOlwiJnBhcnNpbTtcIixcIuKrvVwiOlwiJnBhcnNsO1wiLFwi0L9cIjpcIiZwY3k7XCIsXCIlXCI6XCImcGVyY250O1wiLFwiLlwiOlwiJnBlcmlvZDtcIixcIuKAsFwiOlwiJnBlcm1pbDtcIixcIuKAsVwiOlwiJnBlcnRlbms7XCIsXCLwnZStXCI6XCImcGZyO1wiLFwiz4ZcIjpcIiZwaGk7XCIsXCLPlVwiOlwiJnZhcnBoaTtcIixcIuKYjlwiOlwiJnBob25lO1wiLFwiz4BcIjpcIiZwaTtcIixcIs+WXCI6XCImdmFycGk7XCIsXCLihI5cIjpcIiZwbGFuY2toO1wiLFwiK1wiOlwiJnBsdXM7XCIsXCLiqKNcIjpcIiZwbHVzYWNpcjtcIixcIuKoolwiOlwiJnBsdXNjaXI7XCIsXCLiqKVcIjpcIiZwbHVzZHU7XCIsXCLiqbJcIjpcIiZwbHVzZTtcIixcIuKoplwiOlwiJnBsdXNzaW07XCIsXCLiqKdcIjpcIiZwbHVzdHdvO1wiLFwi4qiVXCI6XCImcG9pbnRpbnQ7XCIsXCLwnZWhXCI6XCImcG9wZjtcIixcIsKjXCI6XCImcG91bmQ7XCIsXCLiqrNcIjpcIiZwckU7XCIsXCLiqrdcIjpcIiZwcmVjYXBwcm94O1wiLFwi4qq5XCI6XCImcHJuYXA7XCIsXCLiqrVcIjpcIiZwcm5FO1wiLFwi4ouoXCI6XCImcHJuc2ltO1wiLFwi4oCyXCI6XCImcHJpbWU7XCIsXCLijK5cIjpcIiZwcm9mYWxhcjtcIixcIuKMklwiOlwiJnByb2ZsaW5lO1wiLFwi4oyTXCI6XCImcHJvZnN1cmY7XCIsXCLiirBcIjpcIiZwcnVyZWw7XCIsXCLwnZOFXCI6XCImcHNjcjtcIixcIs+IXCI6XCImcHNpO1wiLFwi4oCIXCI6XCImcHVuY3NwO1wiLFwi8J2UrlwiOlwiJnFmcjtcIixcIvCdlaJcIjpcIiZxb3BmO1wiLFwi4oGXXCI6XCImcXByaW1lO1wiLFwi8J2ThlwiOlwiJnFzY3I7XCIsXCLiqJZcIjpcIiZxdWF0aW50O1wiLFwiP1wiOlwiJnF1ZXN0O1wiLFwi4qScXCI6XCImckF0YWlsO1wiLFwi4qWkXCI6XCImckhhcjtcIixcIuKIvcyxXCI6XCImcmFjZTtcIixcIsWVXCI6XCImcmFjdXRlO1wiLFwi4qazXCI6XCImcmFlbXB0eXY7XCIsXCLippJcIjpcIiZyYW5nZDtcIixcIuKmpVwiOlwiJnJhbmdlO1wiLFwiwrtcIjpcIiZyYXF1bztcIixcIuKltVwiOlwiJnJhcnJhcDtcIixcIuKkoFwiOlwiJnJhcnJiZnM7XCIsXCLipLNcIjpcIiZyYXJyYztcIixcIuKknlwiOlwiJnJhcnJmcztcIixcIuKlhVwiOlwiJnJhcnJwbDtcIixcIuKltFwiOlwiJnJhcnJzaW07XCIsXCLihqNcIjpcIiZyaWdodGFycm93dGFpbDtcIixcIuKGnVwiOlwiJnJpZ2h0c3F1aWdhcnJvdztcIixcIuKkmlwiOlwiJnJhdGFpbDtcIixcIuKItlwiOlwiJnJhdGlvO1wiLFwi4p2zXCI6XCImcmJicms7XCIsXCJ9XCI6XCImcmN1YjtcIixcIl1cIjpcIiZyc3FiO1wiLFwi4qaMXCI6XCImcmJya2U7XCIsXCLipo5cIjpcIiZyYnJrc2xkO1wiLFwi4qaQXCI6XCImcmJya3NsdTtcIixcIsWZXCI6XCImcmNhcm9uO1wiLFwixZdcIjpcIiZyY2VkaWw7XCIsXCLRgFwiOlwiJnJjeTtcIixcIuKkt1wiOlwiJnJkY2E7XCIsXCLipalcIjpcIiZyZGxkaGFyO1wiLFwi4oazXCI6XCImcmRzaDtcIixcIuKWrVwiOlwiJnJlY3Q7XCIsXCLipb1cIjpcIiZyZmlzaHQ7XCIsXCLwnZSvXCI6XCImcmZyO1wiLFwi4qWsXCI6XCImcmhhcnVsO1wiLFwiz4FcIjpcIiZyaG87XCIsXCLPsVwiOlwiJnZhcnJobztcIixcIuKHiVwiOlwiJnJyYXJyO1wiLFwi4ouMXCI6XCImcnRocmVlO1wiLFwiy5pcIjpcIiZyaW5nO1wiLFwi4oCPXCI6XCImcmxtO1wiLFwi4o6xXCI6XCImcm1vdXN0YWNoZTtcIixcIuKrrlwiOlwiJnJubWlkO1wiLFwi4p+tXCI6XCImcm9hbmc7XCIsXCLih75cIjpcIiZyb2FycjtcIixcIuKmhlwiOlwiJnJvcGFyO1wiLFwi8J2Vo1wiOlwiJnJvcGY7XCIsXCLiqK5cIjpcIiZyb3BsdXM7XCIsXCLiqLVcIjpcIiZyb3RpbWVzO1wiLFwiKVwiOlwiJnJwYXI7XCIsXCLippRcIjpcIiZycGFyZ3Q7XCIsXCLiqJJcIjpcIiZycHBvbGludDtcIixcIuKAulwiOlwiJnJzYXF1bztcIixcIvCdk4dcIjpcIiZyc2NyO1wiLFwi4ouKXCI6XCImcnRpbWVzO1wiLFwi4pa5XCI6XCImdHJpYW5nbGVyaWdodDtcIixcIuKnjlwiOlwiJnJ0cmlsdHJpO1wiLFwi4qWoXCI6XCImcnVsdWhhcjtcIixcIuKEnlwiOlwiJnJ4O1wiLFwixZtcIjpcIiZzYWN1dGU7XCIsXCLiqrRcIjpcIiZzY0U7XCIsXCLiqrhcIjpcIiZzdWNjYXBwcm94O1wiLFwixaFcIjpcIiZzY2Fyb247XCIsXCLFn1wiOlwiJnNjZWRpbDtcIixcIsWdXCI6XCImc2NpcmM7XCIsXCLiqrZcIjpcIiZzdWNjbmVxcTtcIixcIuKqulwiOlwiJnN1Y2NuYXBwcm94O1wiLFwi4oupXCI6XCImc3VjY25zaW07XCIsXCLiqJNcIjpcIiZzY3BvbGludDtcIixcItGBXCI6XCImc2N5O1wiLFwi4ouFXCI6XCImc2RvdDtcIixcIuKpplwiOlwiJnNkb3RlO1wiLFwi4oeYXCI6XCImc2VBcnI7XCIsXCLCp1wiOlwiJnNlY3Q7XCIsXCI7XCI6XCImc2VtaTtcIixcIuKkqVwiOlwiJnRvc2E7XCIsXCLinLZcIjpcIiZzZXh0O1wiLFwi8J2UsFwiOlwiJnNmcjtcIixcIuKZr1wiOlwiJnNoYXJwO1wiLFwi0YlcIjpcIiZzaGNoY3k7XCIsXCLRiFwiOlwiJnNoY3k7XCIsXCLCrVwiOlwiJnNoeTtcIixcIs+DXCI6XCImc2lnbWE7XCIsXCLPglwiOlwiJnZhcnNpZ21hO1wiLFwi4qmqXCI6XCImc2ltZG90O1wiLFwi4qqeXCI6XCImc2ltZztcIixcIuKqoFwiOlwiJnNpbWdFO1wiLFwi4qqdXCI6XCImc2ltbDtcIixcIuKqn1wiOlwiJnNpbWxFO1wiLFwi4omGXCI6XCImc2ltbmU7XCIsXCLiqKRcIjpcIiZzaW1wbHVzO1wiLFwi4qWyXCI6XCImc2ltcmFycjtcIixcIuKos1wiOlwiJnNtYXNocDtcIixcIuKnpFwiOlwiJnNtZXBhcnNsO1wiLFwi4oyjXCI6XCImc3NtaWxlO1wiLFwi4qqqXCI6XCImc210O1wiLFwi4qqsXCI6XCImc210ZTtcIixcIuKqrO+4gFwiOlwiJnNtdGVzO1wiLFwi0YxcIjpcIiZzb2Z0Y3k7XCIsXCIvXCI6XCImc29sO1wiLFwi4qeEXCI6XCImc29sYjtcIixcIuKMv1wiOlwiJnNvbGJhcjtcIixcIvCdlaRcIjpcIiZzb3BmO1wiLFwi4pmgXCI6XCImc3BhZGVzdWl0O1wiLFwi4oqT77iAXCI6XCImc3FjYXBzO1wiLFwi4oqU77iAXCI6XCImc3FjdXBzO1wiLFwi8J2TiFwiOlwiJnNzY3I7XCIsXCLimIZcIjpcIiZzdGFyO1wiLFwi4oqCXCI6XCImc3Vic2V0O1wiLFwi4quFXCI6XCImc3Vic2V0ZXFxO1wiLFwi4qq9XCI6XCImc3ViZG90O1wiLFwi4quDXCI6XCImc3ViZWRvdDtcIixcIuKrgVwiOlwiJnN1Ym11bHQ7XCIsXCLiq4tcIjpcIiZzdWJzZXRuZXFxO1wiLFwi4oqKXCI6XCImc3Vic2V0bmVxO1wiLFwi4qq/XCI6XCImc3VicGx1cztcIixcIuKluVwiOlwiJnN1YnJhcnI7XCIsXCLiq4dcIjpcIiZzdWJzaW07XCIsXCLiq5VcIjpcIiZzdWJzdWI7XCIsXCLiq5NcIjpcIiZzdWJzdXA7XCIsXCLimapcIjpcIiZzdW5nO1wiLFwiwrlcIjpcIiZzdXAxO1wiLFwiwrJcIjpcIiZzdXAyO1wiLFwiwrNcIjpcIiZzdXAzO1wiLFwi4quGXCI6XCImc3Vwc2V0ZXFxO1wiLFwi4qq+XCI6XCImc3VwZG90O1wiLFwi4quYXCI6XCImc3VwZHN1YjtcIixcIuKrhFwiOlwiJnN1cGVkb3Q7XCIsXCLin4lcIjpcIiZzdXBoc29sO1wiLFwi4quXXCI6XCImc3VwaHN1YjtcIixcIuKlu1wiOlwiJnN1cGxhcnI7XCIsXCLiq4JcIjpcIiZzdXBtdWx0O1wiLFwi4quMXCI6XCImc3Vwc2V0bmVxcTtcIixcIuKKi1wiOlwiJnN1cHNldG5lcTtcIixcIuKrgFwiOlwiJnN1cHBsdXM7XCIsXCLiq4hcIjpcIiZzdXBzaW07XCIsXCLiq5RcIjpcIiZzdXBzdWI7XCIsXCLiq5ZcIjpcIiZzdXBzdXA7XCIsXCLih5lcIjpcIiZzd0FycjtcIixcIuKkqlwiOlwiJnN3bndhcjtcIixcIsOfXCI6XCImc3psaWc7XCIsXCLijJZcIjpcIiZ0YXJnZXQ7XCIsXCLPhFwiOlwiJnRhdTtcIixcIsWlXCI6XCImdGNhcm9uO1wiLFwixaNcIjpcIiZ0Y2VkaWw7XCIsXCLRglwiOlwiJnRjeTtcIixcIuKMlVwiOlwiJnRlbHJlYztcIixcIvCdlLFcIjpcIiZ0ZnI7XCIsXCLOuFwiOlwiJnRoZXRhO1wiLFwiz5FcIjpcIiZ2YXJ0aGV0YTtcIixcIsO+XCI6XCImdGhvcm47XCIsXCLDl1wiOlwiJnRpbWVzO1wiLFwi4qixXCI6XCImdGltZXNiYXI7XCIsXCLiqLBcIjpcIiZ0aW1lc2Q7XCIsXCLijLZcIjpcIiZ0b3Bib3Q7XCIsXCLiq7FcIjpcIiZ0b3BjaXI7XCIsXCLwnZWlXCI6XCImdG9wZjtcIixcIuKrmlwiOlwiJnRvcGZvcms7XCIsXCLigLRcIjpcIiZ0cHJpbWU7XCIsXCLilrVcIjpcIiZ1dHJpO1wiLFwi4omcXCI6XCImdHJpZTtcIixcIuKXrFwiOlwiJnRyaWRvdDtcIixcIuKoulwiOlwiJnRyaW1pbnVzO1wiLFwi4qi5XCI6XCImdHJpcGx1cztcIixcIuKnjVwiOlwiJnRyaXNiO1wiLFwi4qi7XCI6XCImdHJpdGltZTtcIixcIuKPolwiOlwiJnRycGV6aXVtO1wiLFwi8J2TiVwiOlwiJnRzY3I7XCIsXCLRhlwiOlwiJnRzY3k7XCIsXCLRm1wiOlwiJnRzaGN5O1wiLFwixadcIjpcIiZ0c3Ryb2s7XCIsXCLipaNcIjpcIiZ1SGFyO1wiLFwiw7pcIjpcIiZ1YWN1dGU7XCIsXCLRnlwiOlwiJnVicmN5O1wiLFwixa1cIjpcIiZ1YnJldmU7XCIsXCLDu1wiOlwiJnVjaXJjO1wiLFwi0YNcIjpcIiZ1Y3k7XCIsXCLFsVwiOlwiJnVkYmxhYztcIixcIuKlvlwiOlwiJnVmaXNodDtcIixcIvCdlLJcIjpcIiZ1ZnI7XCIsXCLDuVwiOlwiJnVncmF2ZTtcIixcIuKWgFwiOlwiJnVoYmxrO1wiLFwi4oycXCI6XCImdWxjb3JuZXI7XCIsXCLijI9cIjpcIiZ1bGNyb3A7XCIsXCLil7hcIjpcIiZ1bHRyaTtcIixcIsWrXCI6XCImdW1hY3I7XCIsXCLFs1wiOlwiJnVvZ29uO1wiLFwi8J2VplwiOlwiJnVvcGY7XCIsXCLPhVwiOlwiJnVwc2lsb247XCIsXCLih4hcIjpcIiZ1dWFycjtcIixcIuKMnVwiOlwiJnVyY29ybmVyO1wiLFwi4oyOXCI6XCImdXJjcm9wO1wiLFwixa9cIjpcIiZ1cmluZztcIixcIuKXuVwiOlwiJnVydHJpO1wiLFwi8J2TilwiOlwiJnVzY3I7XCIsXCLii7BcIjpcIiZ1dGRvdDtcIixcIsWpXCI6XCImdXRpbGRlO1wiLFwiw7xcIjpcIiZ1dW1sO1wiLFwi4qanXCI6XCImdXdhbmdsZTtcIixcIuKrqFwiOlwiJnZCYXI7XCIsXCLiq6lcIjpcIiZ2QmFydjtcIixcIuKmnFwiOlwiJnZhbmdydDtcIixcIuKKiu+4gFwiOlwiJnZzdWJuZTtcIixcIuKri++4gFwiOlwiJnZzdWJuRTtcIixcIuKKi++4gFwiOlwiJnZzdXBuZTtcIixcIuKrjO+4gFwiOlwiJnZzdXBuRTtcIixcItCyXCI6XCImdmN5O1wiLFwi4oq7XCI6XCImdmVlYmFyO1wiLFwi4omaXCI6XCImdmVlZXE7XCIsXCLii65cIjpcIiZ2ZWxsaXA7XCIsXCLwnZSzXCI6XCImdmZyO1wiLFwi8J2Vp1wiOlwiJnZvcGY7XCIsXCLwnZOLXCI6XCImdnNjcjtcIixcIuKmmlwiOlwiJnZ6aWd6YWc7XCIsXCLFtVwiOlwiJndjaXJjO1wiLFwi4qmfXCI6XCImd2VkYmFyO1wiLFwi4omZXCI6XCImd2VkZ2VxO1wiLFwi4oSYXCI6XCImd3A7XCIsXCLwnZS0XCI6XCImd2ZyO1wiLFwi8J2VqFwiOlwiJndvcGY7XCIsXCLwnZOMXCI6XCImd3NjcjtcIixcIvCdlLVcIjpcIiZ4ZnI7XCIsXCLOvlwiOlwiJnhpO1wiLFwi4ou7XCI6XCImeG5pcztcIixcIvCdlalcIjpcIiZ4b3BmO1wiLFwi8J2TjVwiOlwiJnhzY3I7XCIsXCLDvVwiOlwiJnlhY3V0ZTtcIixcItGPXCI6XCImeWFjeTtcIixcIsW3XCI6XCImeWNpcmM7XCIsXCLRi1wiOlwiJnljeTtcIixcIsKlXCI6XCImeWVuO1wiLFwi8J2UtlwiOlwiJnlmcjtcIixcItGXXCI6XCImeWljeTtcIixcIvCdlapcIjpcIiZ5b3BmO1wiLFwi8J2TjlwiOlwiJnlzY3I7XCIsXCLRjlwiOlwiJnl1Y3k7XCIsXCLDv1wiOlwiJnl1bWw7XCIsXCLFulwiOlwiJnphY3V0ZTtcIixcIsW+XCI6XCImemNhcm9uO1wiLFwi0LdcIjpcIiZ6Y3k7XCIsXCLFvFwiOlwiJnpkb3Q7XCIsXCLOtlwiOlwiJnpldGE7XCIsXCLwnZS3XCI6XCImemZyO1wiLFwi0LZcIjpcIiZ6aGN5O1wiLFwi4oedXCI6XCImemlncmFycjtcIixcIvCdlatcIjpcIiZ6b3BmO1wiLFwi8J2Tj1wiOlwiJnpzY3I7XCIsXCLigI1cIjpcIiZ6d2o7XCIsXCLigIxcIjpcIiZ6d25qO1wifX19OyIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5udW1lcmljVW5pY29kZU1hcD17MDo2NTUzMywxMjg6ODM2NCwxMzA6ODIxOCwxMzE6NDAyLDEzMjo4MjIyLDEzMzo4MjMwLDEzNDo4MjI0LDEzNTo4MjI1LDEzNjo3MTAsMTM3OjgyNDAsMTM4OjM1MiwxMzk6ODI0OSwxNDA6MzM4LDE0MjozODEsMTQ1OjgyMTYsMTQ2OjgyMTcsMTQ3OjgyMjAsMTQ4OjgyMjEsMTQ5OjgyMjYsMTUwOjgyMTEsMTUxOjgyMTIsMTUyOjczMiwxNTM6ODQ4MiwxNTQ6MzUzLDE1NTo4MjUwLDE1NjozMzksMTU4OjM4MiwxNTk6Mzc2fTsiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZnJvbUNvZGVQb2ludD1TdHJpbmcuZnJvbUNvZGVQb2ludHx8ZnVuY3Rpb24oYXN0cmFsQ29kZVBvaW50KXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShNYXRoLmZsb29yKChhc3RyYWxDb2RlUG9pbnQtNjU1MzYpLzEwMjQpKzU1Mjk2LChhc3RyYWxDb2RlUG9pbnQtNjU1MzYpJTEwMjQrNTYzMjApfTtleHBvcnRzLmdldENvZGVQb2ludD1TdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0P2Z1bmN0aW9uKGlucHV0LHBvc2l0aW9uKXtyZXR1cm4gaW5wdXQuY29kZVBvaW50QXQocG9zaXRpb24pfTpmdW5jdGlvbihpbnB1dCxwb3NpdGlvbil7cmV0dXJuKGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pLTU1Mjk2KSoxMDI0K2lucHV0LmNoYXJDb2RlQXQocG9zaXRpb24rMSktNTYzMjArNjU1MzZ9O2V4cG9ydHMuaGlnaFN1cnJvZ2F0ZUZyb209NTUyOTY7ZXhwb3J0cy5oaWdoU3Vycm9nYXRlVG89NTYzMTk7IiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpLFxuICAgIHNldENhY2hlQWRkID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVBZGQnKSxcbiAgICBzZXRDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX3NldENhY2hlSGFzJyk7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRDYWNoZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RWFjaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY3JlYXRlQmFzZUVhY2ggPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRWFjaDtcbiIsInZhciBjcmVhdGVCYXNlRm9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUZvcicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvcjtcbiIsInZhciBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3JPd247XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0O1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXNJbjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNUeXBlZEFycmF5O1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVIYXM7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdEZ1bmN0aW9uO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFBhdGg7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQnlUYWc7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmljdENvbXBhcmFibGU7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9BcnJheTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwidmFyIG1lbW9pemVDYXBwZWQgPSByZXF1aXJlKCcuL19tZW1vaXplQ2FwcGVkJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdUb1BhdGg7XG4iLCJ2YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvS2V5O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZvckVhY2gnKTtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBjYXN0RnVuY3Rpb24gPSByZXF1aXJlKCcuL19jYXN0RnVuY3Rpb24nKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQHNlZSBfLmZvckVhY2hSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICpcbiAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGNhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2g7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsInZhciBiYXNlSGFzSW4gPSByZXF1aXJlKCcuL19iYXNlSGFzSW4nKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzSW47XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VNYXAgPSByZXF1aXJlKCcuL19iYXNlTWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICpcbiAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAqICAgcmV0dXJuIG4gKiBuO1xuICogfVxuICpcbiAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdXG4gKlxuICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICovXG5mdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXA7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZTtcbiIsInZhciBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKSxcbiAgICBiYXNlUHJvcGVydHlEZWVwID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5RGVlcCcpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0eTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKlxuICBlc2xpbnQtZGlzYWJsZVxuICBuby1jb25zb2xlLFxuICBmdW5jLW5hbWVzXG4qL1xudmFyIG5vcm1hbGl6ZVVybCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS11cmxcIik7XG5cbnZhciBzcmNCeU1vZHVsZUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBub0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiO1xudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIHRpbWUpIHtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZnVuY3Rpb25DYWxsID0gZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb25DYWxsLCB0aW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpIHtcbiAgdmFyIHNyYyA9IHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdO1xuXG4gIGlmICghc3JjKSB7XG4gICAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICAgIHNyYyA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuICAgICAgdmFyIGxhc3RTY3JpcHRUYWcgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChsYXN0U2NyaXB0VGFnKSB7XG4gICAgICAgIHNyYyA9IGxhc3RTY3JpcHRUYWcuc3JjO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdID0gc3JjO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlTWFwKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzcGxpdFJlc3VsdCA9IHNyYy5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBzcGxpdFJlc3VsdCAmJiBzcGxpdFJlc3VsdFsxXTtcblxuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoXCIuanNcIiwgXCIuY3NzXCIpXTtcbiAgICB9XG5cbiAgICBpZiAoIWZpbGVNYXApIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoXCIuanNcIiwgXCIuY3NzXCIpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZU1hcC5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uIChtYXBSdWxlKSB7XG4gICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChmaWxlbmFtZSwgXCJcXFxcLmpzJFwiKSwgXCJnXCIpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVybChzcmMucmVwbGFjZShyZWcsIFwiXCIuY29uY2F0KG1hcFJ1bGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLCBmaWxlbmFtZSksIFwiLmNzc1wiKSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDc3MoZWwsIHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICAgIHVybCA9IGVsLmhyZWYuc3BsaXQoXCI/XCIpWzBdO1xuICB9XG5cbiAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbC5pc0xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAvLyBXZSBzZWVtIHRvIGJlIGFib3V0IHRvIHJlcGxhY2UgYSBjc3MgbGluayB0aGF0IGhhc24ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNoYW5naW5nIHRoZSBzYW1lIGZpbGUgbW9yZSB0aGFuIG9uY2UuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF1cmwgfHwgISh1cmwuaW5kZXhPZihcIi5jc3NcIikgPiAtMSkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICBlbC52aXNpdGVkID0gdHJ1ZTtcbiAgdmFyIG5ld0VsID0gZWwuY2xvbmVOb2RlKCk7XG4gIG5ld0VsLmlzTG9hZGVkID0gZmFsc2U7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmhyZWYgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7XG5cbiAgaWYgKGVsLm5leHRTaWJsaW5nKSB7XG4gICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGVsLm5leHRTaWJsaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld0VsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSZWxvYWRVcmwoaHJlZiwgc3JjKSB7XG4gIHZhciByZXQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZiwge1xuICAgIHN0cmlwV1dXOiBmYWxzZVxuICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuXG4gIHNyYy5zb21lKGZ1bmN0aW9uICh1cmwpIHtcbiAgICBpZiAoaHJlZi5pbmRleE9mKHNyYykgPiAtMSkge1xuICAgICAgcmV0ID0gdXJsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlKHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpO1xuICB2YXIgbG9hZGVkID0gZmFsc2U7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHVybCA9IGdldFJlbG9hZFVybChlbC5ocmVmLCBzcmMpO1xuXG4gICAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHVybCkge1xuICAgICAgdXBkYXRlQ3NzKGVsLCB1cmwpO1xuICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbG9hZGVkO1xufVxuXG5mdW5jdGlvbiByZWxvYWRBbGwoKSB7XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXBkYXRlQ3NzKGVsKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzVXJsUmVxdWVzdCh1cmwpIHtcbiAgLy8gQW4gVVJMIGlzIG5vdCBhbiByZXF1ZXN0IGlmXG4gIC8vIEl0IGlzIG5vdCBodHRwIG9yIGh0dHBzXG4gIGlmICghL15bYS16QS1aXVthLXpBLVpcXGQrXFwtLl0qOi8udGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIGlmIChub0RvY3VtZW50KSB7XG4gICAgY29uc29sZS5sb2coXCJubyB3aW5kb3cuZG9jdW1lbnQgZm91bmQsIHdpbGwgbm90IEhNUiBDU1NcIik7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cblxuICB2YXIgZ2V0U2NyaXB0U3JjID0gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcblxuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coXCJbSE1SXSBEZXRlY3RlZCBsb2NhbCBjc3MgbW9kdWxlcy4gUmVsb2FkIGFsbCBjc3NcIik7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVsb2FkZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW0hNUl0gY3NzIHJlbG9hZCAlc1wiLCBzcmMuam9pbihcIiBcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIltITVJdIFJlbG9hZCBhbGwgY3NzXCIpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlYm91bmNlKHVwZGF0ZSwgNTApO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVybChwYXRoQ29tcG9uZW50cykge1xuICByZXR1cm4gcGF0aENvbXBvbmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgaXRlbSkge1xuICAgIHN3aXRjaCAoaXRlbSkge1xuICAgICAgY2FzZSBcIi4uXCI6XG4gICAgICAgIGFjY3VtdWxhdG9yLnBvcCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIi5cIjpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCBbXSkuam9pbihcIi9cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybFN0cmluZykge1xuICB1cmxTdHJpbmcgPSB1cmxTdHJpbmcudHJpbSgpO1xuXG4gIGlmICgvXmRhdGE6L2kudGVzdCh1cmxTdHJpbmcpKSB7XG4gICAgcmV0dXJuIHVybFN0cmluZztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHVybFN0cmluZy5pbmRleE9mKFwiLy9cIikgIT09IC0xID8gdXJsU3RyaW5nLnNwbGl0KFwiLy9cIilbMF0gKyBcIi8vXCIgOiBcIlwiO1xuICB2YXIgY29tcG9uZW50cyA9IHVybFN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAocHJvdG9jb2wsIFwiaVwiKSwgXCJcIikuc3BsaXQoXCIvXCIpO1xuICB2YXIgaG9zdCA9IGNvbXBvbmVudHNbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLywgXCJcIik7XG4gIGNvbXBvbmVudHNbMF0gPSBcIlwiO1xuICB2YXIgcGF0aCA9IG5vcm1hbGl6ZVVybChjb21wb25lbnRzKTtcbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGg7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvbm9ybWFsaXplV2hlZWwuanMnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhIShcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgd2luZG93LmRvY3VtZW50ICYmXG4gIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG4pO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG4gICAgY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMDQtcHJlc2VudCBGYWNlYm9vay4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVXNlckFnZW50X0RFUFJFQ0FURURcbiAqL1xuXG4vKipcbiAqICBQcm92aWRlcyBlbnRpcmVseSBjbGllbnQtc2lkZSBVc2VyIEFnZW50IGFuZCBPUyBkZXRlY3Rpb24uIFlvdSBzaG91bGQgcHJlZmVyXG4gKiAgdGhlIG5vbi1kZXByZWNhdGVkIFVzZXJBZ2VudCBtb2R1bGUgd2hlbiBwb3NzaWJsZSwgd2hpY2ggZXhwb3NlcyBvdXJcbiAqICBhdXRob3JpdGF0aXZlIHNlcnZlci1zaWRlIFBIUC1iYXNlZCBkZXRlY3Rpb24gdG8gdGhlIGNsaWVudC5cbiAqXG4gKiAgVXNhZ2UgaXMgc3RyYWlnaHRmb3J3YXJkOlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpKSB7XG4gKiAgICAgIC8vICBJRVxuICogICAgfVxuICpcbiAqICBZb3UgY2FuIGFsc28gZG8gdmVyc2lvbiBjaGVja3M6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPj0gNykge1xuICogICAgICAvLyAgSUU3IG9yIGJldHRlclxuICogICAgfVxuICpcbiAqICBUaGUgYnJvd3NlciBmdW5jdGlvbnMgd2lsbCByZXR1cm4gTmFOIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IG1hdGNoLCBzb1xuICogIHlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNvbXBhcmVzIHRoZSBvdGhlciB3YXk6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPCA3KSB7XG4gKiAgICAgIC8vICBJRTYgb3Igd29yc2VcbiAqICAgIH1cbiAqXG4gKiAgTm90ZSB0aGF0IHRoZSB2ZXJzaW9uIGlzIGEgZmxvYXQgYW5kIG1heSBpbmNsdWRlIGEgbWlub3IgdmVyc2lvbiBudW1iZXIsXG4gKiAgc28geW91IHNob3VsZCBhbHdheXMgdXNlIHJhbmdlIG9wZXJhdG9ycyB0byBwZXJmb3JtIGNvbXBhcmlzb25zLCBub3RcbiAqICBzdHJpY3QgZXF1YWxpdHkuXG4gKlxuICogICoqTm90ZToqKiBZb3Ugc2hvdWxkICoqc3Ryb25nbHkqKiBwcmVmZXIgY2FwYWJpbGl0eSBkZXRlY3Rpb24gdG8gYnJvd3NlclxuICogIHZlcnNpb24gZGV0ZWN0aW9uIHdoZXJlIGl0J3MgcmVhc29uYWJsZTpcbiAqXG4gKiAgICBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL3N1cHBvcnQuaHRtbFxuICpcbiAqICBGdXJ0aGVyLCB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIG1hdHVyZSB3cmFwcGVyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlc1xuICogIHdoaWNoIGFic3RyYWN0IGF3YXkgbWFueSBicm93c2VyIGlycmVndWxhcml0aWVzLiBDaGVjayB0aGUgZG9jdW1lbnRhdGlvbixcbiAqICBncmVwIGZvciB0aGluZ3MsIG9yIGFzayBvbiBqYXZhc2NyaXB0QGxpc3RzLmZhY2Vib29rLmNvbSBiZWZvcmUgd3JpdGluZyB5ZXRcbiAqICBhbm90aGVyIGNvcHkgb2YgXCJldmVudCB8fCB3aW5kb3cuZXZlbnRcIi5cbiAqXG4gKi9cblxudmFyIF9wb3B1bGF0ZWQgPSBmYWxzZTtcblxuLy8gQnJvd3NlcnNcbnZhciBfaWUsIF9maXJlZm94LCBfb3BlcmEsIF93ZWJraXQsIF9jaHJvbWU7XG5cbi8vIEFjdHVhbCBJRSBicm93c2VyIGZvciBjb21wYXRpYmlsaXR5IG1vZGVcbnZhciBfaWVfcmVhbF92ZXJzaW9uO1xuXG4vLyBQbGF0Zm9ybXNcbnZhciBfb3N4LCBfd2luZG93cywgX2xpbnV4LCBfYW5kcm9pZDtcblxuLy8gQXJjaGl0ZWN0dXJlc1xudmFyIF93aW42NDtcblxuLy8gRGV2aWNlc1xudmFyIF9pcGhvbmUsIF9pcGFkLCBfbmF0aXZlO1xuXG52YXIgX21vYmlsZTtcblxuZnVuY3Rpb24gX3BvcHVsYXRlKCkge1xuICBpZiAoX3BvcHVsYXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIF9wb3B1bGF0ZWQgPSB0cnVlO1xuXG4gIC8vIFRvIHdvcmsgYXJvdW5kIGJ1Z2d5IEpTIGxpYnJhcmllcyB0aGF0IGNhbid0IGhhbmRsZSBtdWx0aS1kaWdpdFxuICAvLyB2ZXJzaW9uIG51bWJlcnMsIE9wZXJhIDEwJ3MgdXNlciBhZ2VudCBzdHJpbmcgY2xhaW1zIGl0J3MgT3BlcmFcbiAgLy8gOSwgdGhlbiBsYXRlciBpbmNsdWRlcyBhIFZlcnNpb24vWC5ZIGZpZWxkOlxuICAvL1xuICAvLyBPcGVyYS85LjgwIChmb28pIFByZXN0by8yLjIuMTUgVmVyc2lvbi8xMC4xMFxuICB2YXIgdWFzID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGFnZW50ID0gLyg/Ok1TSUUuKFxcZCtcXC5cXGQrKSl8KD86KD86RmlyZWZveHxHcmFuUGFyYWRpc298SWNld2Vhc2VsKS4oXFxkK1xcLlxcZCspKXwoPzpPcGVyYSg/Oi4rVmVyc2lvbi58LikoXFxkK1xcLlxcZCspKXwoPzpBcHBsZVdlYktpdC4oXFxkKyg/OlxcLlxcZCspPykpfCg/OlRyaWRlbnRcXC9cXGQrXFwuXFxkKy4qcnY6KFxcZCtcXC5cXGQrKSkvLmV4ZWModWFzKTtcbiAgdmFyIG9zICAgID0gLyhNYWMgT1MgWCl8KFdpbmRvd3MpfChMaW51eCkvLmV4ZWModWFzKTtcblxuICBfaXBob25lID0gL1xcYihpUGhvbmV8aVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2lwYWQgPSAvXFxiKGlQW2FvXWQpLy5leGVjKHVhcyk7XG4gIF9hbmRyb2lkID0gL0FuZHJvaWQvaS5leGVjKHVhcyk7XG4gIF9uYXRpdmUgPSAvRkJBTlxcL1xcdys7L2kuZXhlYyh1YXMpO1xuICBfbW9iaWxlID0gL01vYmlsZS9pLmV4ZWModWFzKTtcblxuICAvLyBOb3RlIHRoYXQgdGhlIElFIHRlYW0gYmxvZyB3b3VsZCBoYXZlIHlvdSBiZWxpZXZlIHlvdSBzaG91bGQgYmUgY2hlY2tpbmdcbiAgLy8gZm9yICdXaW42NDsgeDY0Jy4gIEJ1dCBNU0ROIHRoZW4gcmV2ZWFscyB0aGF0IHlvdSBjYW4gYWN0dWFsbHkgYmUgY29taW5nXG4gIC8vIGZyb20gZWl0aGVyIHg2NCBvciBpYTY0OyAgc28gdWx0aW1hdGVseSwgeW91IHNob3VsZCBqdXN0IGNoZWNrIGZvciBXaW42NFxuICAvLyBhcyBpbiBpbmRpY2F0b3Igb2Ygd2hldGhlciB5b3UncmUgaW4gNjQtYml0IElFLiAgMzItYml0IElFIG9uIDY0LWJpdFxuICAvLyBXaW5kb3dzIHdpbGwgc2VuZCAnV09XNjQnIGluc3RlYWQuXG4gIF93aW42NCA9ICEhKC9XaW42NC8uZXhlYyh1YXMpKTtcblxuICBpZiAoYWdlbnQpIHtcbiAgICBfaWUgPSBhZ2VudFsxXSA/IHBhcnNlRmxvYXQoYWdlbnRbMV0pIDogKFxuICAgICAgICAgIGFnZW50WzVdID8gcGFyc2VGbG9hdChhZ2VudFs1XSkgOiBOYU4pO1xuICAgIC8vIElFIGNvbXBhdGliaWxpdHkgbW9kZVxuICAgIGlmIChfaWUgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSB7XG4gICAgICBfaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG4gICAgfVxuICAgIC8vIGdyYWIgdGhlIFwidHJ1ZVwiIGllIHZlcnNpb24gZnJvbSB0aGUgdHJpZGVudCB0b2tlbiBpZiBhdmFpbGFibGVcbiAgICB2YXIgdHJpZGVudCA9IC8oPzpUcmlkZW50XFwvKFxcZCsuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgX2llX3JlYWxfdmVyc2lvbiA9IHRyaWRlbnQgPyBwYXJzZUZsb2F0KHRyaWRlbnRbMV0pICsgNCA6IF9pZTtcblxuICAgIF9maXJlZm94ID0gYWdlbnRbMl0gPyBwYXJzZUZsb2F0KGFnZW50WzJdKSA6IE5hTjtcbiAgICBfb3BlcmEgICA9IGFnZW50WzNdID8gcGFyc2VGbG9hdChhZ2VudFszXSkgOiBOYU47XG4gICAgX3dlYmtpdCAgPSBhZ2VudFs0XSA/IHBhcnNlRmxvYXQoYWdlbnRbNF0pIDogTmFOO1xuICAgIGlmIChfd2Via2l0KSB7XG4gICAgICAvLyBXZSBkbyBub3QgYWRkIHRoZSByZWdleHAgdG8gdGhlIGFib3ZlIHRlc3QsIGJlY2F1c2UgaXQgd2lsbCBhbHdheXNcbiAgICAgIC8vIG1hdGNoICdzYWZhcmknIG9ubHkgc2luY2UgJ0FwcGxlV2ViS2l0JyBhcHBlYXJzIGJlZm9yZSAnQ2hyb21lJyBpblxuICAgICAgLy8gdGhlIHVzZXJBZ2VudCBzdHJpbmcuXG4gICAgICBhZ2VudCA9IC8oPzpDaHJvbWVcXC8oXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICAgICAgX2Nocm9tZSA9IGFnZW50ICYmIGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiBOYU47XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jaHJvbWUgPSBOYU47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9pZSA9IF9maXJlZm94ID0gX29wZXJhID0gX2Nocm9tZSA9IF93ZWJraXQgPSBOYU47XG4gIH1cblxuICBpZiAob3MpIHtcbiAgICBpZiAob3NbMV0pIHtcbiAgICAgIC8vIERldGVjdCBPUyBYIHZlcnNpb24uICBJZiBubyB2ZXJzaW9uIG51bWJlciBtYXRjaGVzLCBzZXQgX29zeCB0byB0cnVlLlxuICAgICAgLy8gVmVyc2lvbiBleGFtcGxlczogIDEwLCAxMF82XzEsIDEwLjdcbiAgICAgIC8vIFBhcnNlcyB2ZXJzaW9uIG51bWJlciBhcyBhIGZsb2F0LCB0YWtpbmcgb25seSBmaXJzdCB0d28gc2V0cyBvZlxuICAgICAgLy8gZGlnaXRzLiAgSWYgb25seSBvbmUgc2V0IG9mIGRpZ2l0cyBpcyBmb3VuZCwgcmV0dXJucyBqdXN0IHRoZSBtYWpvclxuICAgICAgLy8gdmVyc2lvbiBudW1iZXIuXG4gICAgICB2YXIgdmVyID0gLyg/Ok1hYyBPUyBYIChcXGQrKD86Wy5fXVxcZCspPykpLy5leGVjKHVhcyk7XG5cbiAgICAgIF9vc3ggPSB2ZXIgPyBwYXJzZUZsb2F0KHZlclsxXS5yZXBsYWNlKCdfJywgJy4nKSkgOiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBfb3N4ID0gZmFsc2U7XG4gICAgfVxuICAgIF93aW5kb3dzID0gISFvc1syXTtcbiAgICBfbGludXggICA9ICEhb3NbM107XG4gIH0gZWxzZSB7XG4gICAgX29zeCA9IF93aW5kb3dzID0gX2xpbnV4ID0gZmFsc2U7XG4gIH1cbn1cblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0ge1xuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIEludGVybmV0IEV4cGxvcmVyLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBpZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgd2UncmUgaW4gSW50ZXJuZXQgRXhwbG9yZXIgY29tcGF0aWJpbGl0eSBtb2RlLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgdHJ1ZSBpZiBpbiBjb21wYXRpYmlsaXR5IG1vZGUsIGZhbHNlIGlmXG4gICAqIG5vdCBjb21wYXRpYmlsaXR5IG1vZGUgb3Igbm90IGllXG4gICAqL1xuICBpZUNvbXBhdGliaWxpdHlNb2RlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pZV9yZWFsX3ZlcnNpb24gPiBfaWUpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgNjQtYml0IElFLiAgUmVhbGx5LCB0aGlzIGlzIGtpbmQgb2Ygd2VhayBzYXVjZTsgIHdlXG4gICAqIG9ubHkgbmVlZCB0aGlzIGJlY2F1c2UgU2t5cGUgY2FuJ3QgaGFuZGxlIDY0LWJpdCBJRSB5ZXQuICBXZSBuZWVkIHRvIHJlbW92ZVxuICAgKiB0aGlzIHdoZW4gd2UgZG9uJ3QgbmVlZCBpdCAtLSB0cmFja2VkIGJ5ICM2MDE5NTcuXG4gICAqL1xuICBpZTY0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSAmJiBfd2luNjQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgRmlyZWZveC5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgZmlyZWZveDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9maXJlZm94O1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgT3BlcmEuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIG9wZXJhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX29wZXJhO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgV2ViS2l0LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICB3ZWJraXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2Via2l0O1xuICB9LFxuXG4gIC8qKlxuICAgKiAgRm9yIFB1c2hcbiAgICogIFdJTEwgQkUgUkVNT1ZFRCBWRVJZIFNPT04uIFVzZSBVc2VyQWdlbnRfREVQUkVDQVRFRC53ZWJraXRcbiAgICovXG4gIHNhZmFyaTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIGEgQ2hyb21lIGJyb3dzZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGNocm9tZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfY2hyb21lO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIFdpbmRvd3MuXG4gICAqXG4gICAqICBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgV2luZG93cy5cbiAgICovXG4gIHdpbmRvd3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2luZG93cztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBNYWMgT1MgWC5cbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8Ym9vbCAgIFJldHVybnMgYSBmbG9hdCBpZiBhIHZlcnNpb24gbnVtYmVyIGlzIGRldGVjdGVkLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIHRydWUvZmFsc2UuXG4gICAqL1xuICBvc3g6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3N4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIExpbnV4LlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgc29tZSBmbGF2b3Igb2YgTGludXguXG4gICAqL1xuICBsaW51eDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9saW51eDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUgb3IgaVBvZCBwbGF0Zm9ybS5cbiAgICpcbiAgICogQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlciBpcyBydW5uaW5nIHNvbWUgZmxhdm9yIG9mIHRoZVxuICAgKiAgICBpUGhvbmUgT1MuXG4gICAqL1xuICBpcGhvbmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBob25lO1xuICB9LFxuXG4gIG1vYmlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IChfaXBob25lIHx8IF9pcGFkIHx8IF9hbmRyb2lkIHx8IF9tb2JpbGUpO1xuICB9LFxuXG4gIG5hdGl2ZUFwcDogZnVuY3Rpb24oKSB7XG4gICAgLy8gd2Vidmlld3MgaW5zaWRlIG9mIHRoZSBuYXRpdmUgYXBwc1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfbmF0aXZlO1xuICB9LFxuXG4gIGFuZHJvaWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfYW5kcm9pZDtcbiAgfSxcblxuICBpcGFkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2lwYWQ7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXNlckFnZW50X0RFUFJFQ0FURUQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNFdmVudFN1cHBvcnRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9XG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiZcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gY2FwdHVyZSBDaGVjayBpZiB0aGUgY2FwdHVyZSBwaGFzZSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCwgY2FwdHVyZSkge1xuICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fFxuICAgICAgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBub3JtYWxpemVXaGVlbFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnRfREVQUkVDQVRFRCA9IHJlcXVpcmUoJy4vVXNlckFnZW50X0RFUFJFQ0FURUQnKTtcblxudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcblxuXG4vLyBSZWFzb25hYmxlIGRlZmF1bHRzXG52YXIgUElYRUxfU1RFUCAgPSAxMDtcbnZhciBMSU5FX0hFSUdIVCA9IDQwO1xudmFyIFBBR0VfSEVJR0hUID0gODAwO1xuXG4vKipcbiAqIE1vdXNlIHdoZWVsIChhbmQgMi1maW5nZXIgdHJhY2twYWQpIHN1cHBvcnQgb24gdGhlIHdlYiBzdWNrcy4gIEl0IGlzXG4gKiBjb21wbGljYXRlZCwgdGh1cyB0aGlzIGRvYyBpcyBsb25nIGFuZCAoaG9wZWZ1bGx5KSBkZXRhaWxlZCBlbm91Z2ggdG8gYW5zd2VyXG4gKiB5b3VyIHF1ZXN0aW9ucy5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byByZWFjdCB0byB0aGUgbW91c2Ugd2hlZWwgaW4gYSBwcmVkaWN0YWJsZSB3YXksIHRoaXMgY29kZSBpc1xuICogbGlrZSB5b3VyIGJlc3Rlc3QgZnJpZW5kLiAqIGh1Z3MgKlxuICpcbiAqIEFzIG9mIHRvZGF5LCB0aGVyZSBhcmUgNCBET00gZXZlbnQgdHlwZXMgeW91IGNhbiBsaXN0ZW4gdG86XG4gKlxuICogICAnd2hlZWwnICAgICAgICAgICAgICAgIC0tIENocm9tZSgzMSspLCBGRigxNyspLCBJRSg5KylcbiAqICAgJ21vdXNld2hlZWwnICAgICAgICAgICAtLSBDaHJvbWUsIElFKDYrKSwgT3BlcmEsIFNhZmFyaVxuICogICAnTW96TW91c2VQaXhlbFNjcm9sbCcgIC0tIEZGKDMuNSBvbmx5ISkgKDIwMTAtMjAxMykgLS0gZG9uJ3QgYm90aGVyIVxuICogICAnRE9NTW91c2VTY3JvbGwnICAgICAgIC0tIEZGKDAuOS43Kykgc2luY2UgMjAwM1xuICpcbiAqIFNvIHdoYXQgdG8gZG8/ICBUaGUgaXMgdGhlIGJlc3Q6XG4gKlxuICogICBub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUoKTtcbiAqXG4gKiBJbiB5b3VyIGV2ZW50IGNhbGxiYWNrLCB1c2UgdGhpcyBjb2RlIHRvIGdldCBzYW5lIGludGVycHJldGF0aW9uIG9mIHRoZVxuICogZGVsdGFzLiAgVGhpcyBjb2RlIHdpbGwgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6XG4gKlxuICogICBzcGluWCAgIC0tIG5vcm1hbGl6ZWQgc3BpbiBzcGVlZCAodXNlIGZvciB6b29tKSAtIHggcGxhbmVcbiAqICAgc3BpblkgICAtLSBcIiAtIHkgcGxhbmVcbiAqICAgcGl4ZWxYICAtLSBub3JtYWxpemVkIGRpc3RhbmNlICh0byBwaXhlbHMpIC0geCBwbGFuZVxuICogICBwaXhlbFkgIC0tIFwiIC0geSBwbGFuZVxuICpcbiAqIFdoZWVsIHZhbHVlcyBhcmUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIgYXNzdW1pbmcgeW91IGFyZSB1c2luZyB0aGUgd2hlZWwgdG9cbiAqIHNjcm9sbCBhIHdlYiBwYWdlIGJ5IGEgbnVtYmVyIG9mIGxpbmVzIG9yIHBpeGVscyAob3IgcGFnZXMpLiAgVmFsdWVzIGNhbiB2YXJ5XG4gKiBzaWduaWZpY2FudGx5IG9uIGRpZmZlcmVudCBwbGF0Zm9ybXMgYW5kIGJyb3dzZXJzLCBmb3JnZXR0aW5nIHRoYXQgeW91IGNhblxuICogc2Nyb2xsIGF0IGRpZmZlcmVudCBzcGVlZHMuICBTb21lIGRldmljZXMgKGxpa2UgdHJhY2twYWRzKSBlbWl0IG1vcmUgZXZlbnRzXG4gKiBhdCBzbWFsbGVyIGluY3JlbWVudHMgd2l0aCBmaW5lIGdyYW51bGFyaXR5LCBhbmQgc29tZSBlbWl0IG1hc3NpdmUganVtcHMgd2l0aFxuICogbGluZWFyIHNwZWVkIG9yIGFjY2VsZXJhdGlvbi5cbiAqXG4gKiBUaGlzIGNvZGUgZG9lcyBpdHMgYmVzdCB0byBub3JtYWxpemUgdGhlIGRlbHRhcyBmb3IgeW91OlxuICpcbiAqICAgLSBzcGluIGlzIHRyeWluZyB0byBub3JtYWxpemUgaG93IGZhciB0aGUgd2hlZWwgd2FzIHNwdW4gKG9yIHRyYWNrcGFkXG4gKiAgICAgZHJhZ2dlZCkuICBUaGlzIGlzIHN1cGVyIHVzZWZ1bCBmb3Igem9vbSBzdXBwb3J0IHdoZXJlIHlvdSB3YW50IHRvXG4gKiAgICAgdGhyb3cgYXdheSB0aGUgY2h1bmt5IHNjcm9sbCBzdGVwcyBvbiB0aGUgUEMgYW5kIG1ha2UgdGhvc2UgZXF1YWwgdG9cbiAqICAgICB0aGUgc2xvdyBhbmQgc21vb3RoIHRpbnkgc3RlcHMgb24gdGhlIE1hYy4gS2V5IGRhdGE6IFRoaXMgY29kZSB0cmllcyB0b1xuICogICAgIHJlc29sdmUgYSBzaW5nbGUgc2xvdyBzdGVwIG9uIGEgd2hlZWwgdG8gMS5cbiAqXG4gKiAgIC0gcGl4ZWwgaXMgbm9ybWFsaXppbmcgdGhlIGRlc2lyZWQgc2Nyb2xsIGRlbHRhIGluIHBpeGVsIHVuaXRzLiAgWW91J2xsXG4gKiAgICAgZ2V0IHRoZSBjcmF6eSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGJyb3dzZXJzLCBidXQgYXQgbGVhc3QgaXQnbGwgYmUgaW5cbiAqICAgICBwaXhlbHMhXG4gKlxuICogICAtIHBvc2l0aXZlIHZhbHVlIGluZGljYXRlcyBzY3JvbGxpbmcgRE9XTi9SSUdIVCwgbmVnYXRpdmUgVVAvTEVGVC4gIFRoaXNcbiAqICAgICBzaG91bGQgdHJhbnNsYXRlIHRvIHBvc2l0aXZlIHZhbHVlIHpvb21pbmcgSU4sIG5lZ2F0aXZlIHpvb21pbmcgT1VULlxuICogICAgIFRoaXMgbWF0Y2hlcyB0aGUgbmV3ZXIgJ3doZWVsJyBldmVudC5cbiAqXG4gKiBXaHkgYXJlIHRoZXJlIHNwaW5YLCBzcGluWSAob3IgcGl4ZWxzKT9cbiAqXG4gKiAgIC0gc3BpblggaXMgYSAyLWZpbmdlciBzaWRlIGRyYWcgb24gdGhlIHRyYWNrcGFkLCBhbmQgYSBzaGlmdCArIHdoZWVsIHR1cm5cbiAqICAgICB3aXRoIGEgbW91c2UuICBJdCByZXN1bHRzIGluIHNpZGUtc2Nyb2xsaW5nIGluIHRoZSBicm93c2VyIGJ5IGRlZmF1bHQuXG4gKlxuICogICAtIHNwaW5ZIGlzIHdoYXQgeW91IGV4cGVjdCAtLSBpdCdzIHRoZSBjbGFzc2ljIGF4aXMgb2YgYSBtb3VzZSB3aGVlbC5cbiAqXG4gKiAgIC0gSSBkcm9wcGVkIHNwaW5aL3BpeGVsWi4gIEl0IGlzIHN1cHBvcnRlZCBieSB0aGUgRE9NIDMgJ3doZWVsJyBldmVudCBhbmRcbiAqICAgICBwcm9iYWJseSBpcyBieSBicm93c2VycyBpbiBjb25qdW5jdGlvbiB3aXRoIGZhbmN5IDNEIGNvbnRyb2xsZXJzIC4uIGJ1dFxuICogICAgIHlvdSBrbm93LlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGluZm86XG4gKlxuICogRXhhbXBsZXMgb2YgJ3doZWVsJyBldmVudCBpZiB5b3Ugc2Nyb2xsIHNsb3dseSAoZG93bikgYnkgb25lIHN0ZXAgd2l0aCBhblxuICogYXZlcmFnZSBtb3VzZTpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gICAgNCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBPUyBYICsgU2FmYXJpICAobW91c2UpICAgICAtICBOL0EgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIC0xMilcbiAqICAgT1MgWCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAwLjEgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKiAgIFdpbjggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gIDEwMCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBXaW44ICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDMgICBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqXG4gKiBPbiB0aGUgdHJhY2twYWQ6XG4gKlxuICogICBPUyBYICsgQ2hyb21lICAodHJhY2twYWQpICAtICAgIDIgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgICAtNilcbiAqICAgT1MgWCArIEZpcmVmb3ggKHRyYWNrcGFkKSAgLSAgICAxICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKlxuICogT24gb3RoZXIvb2xkZXIgYnJvd3NlcnMuLiBpdCdzIG1vcmUgY29tcGxpY2F0ZWQgYXMgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGFuZFxuICogYWxzbyBtaXNzaW5nIGRlbHRhIHZhbHVlcy5cbiAqXG4gKiBUaGUgJ3doZWVsJyBldmVudCBpcyBtb3JlIHN0YW5kYXJkOlxuICpcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLXdoZWVsZXZlbnRzXG4gKlxuICogVGhlIGJhc2ljcyBpcyB0aGF0IGl0IGluY2x1ZGVzIGEgdW5pdCwgZGVsdGFNb2RlIChwaXhlbHMsIGxpbmVzLCBwYWdlcyksIGFuZFxuICogZGVsdGFYLCBkZWx0YVkgYW5kIGRlbHRhWi4gIFNvbWUgYnJvd3NlcnMgcHJvdmlkZSBvdGhlciB2YWx1ZXMgdG8gbWFpbnRhaW5cbiAqIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBldmVudHMuICBUaG9zZSBvdGhlciB2YWx1ZXMgaGVscCB1c1xuICogYmV0dGVyIG5vcm1hbGl6ZSBzcGluIHNwZWVkLiAgRXhhbXBsZSBvZiB3aGF0IHRoZSBicm93c2VycyBwcm92aWRlOlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB8IGV2ZW50LndoZWVsRGVsdGEgfCBldmVudC5kZXRhaWxcbiAqICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tXG4gKiAgICAgICAgICBTYWZhcmkgdjUvT1MgWCAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgU2FmYXJpIHY1L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgIENocm9tZSB2MTcvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgICAgICAgSUU5L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgdW5kZWZpbmVkXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvT1MgWCAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgMVxuICogICAgICAgICBGaXJlZm94IHY0L1dpbjcgIHwgICAgIHVuZGVmaW5lZCAgICB8ICAgICAgIDNcbiAqXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdoZWVsKC8qb2JqZWN0Ki8gZXZlbnQpIC8qb2JqZWN0Ki8ge1xuICB2YXIgc1ggPSAwLCBzWSA9IDAsICAgICAgIC8vIHNwaW5YLCBzcGluWVxuICAgICAgcFggPSAwLCBwWSA9IDA7ICAgICAgIC8vIHBpeGVsWCwgcGl4ZWxZXG5cbiAgLy8gTGVnYWN5XG4gIGlmICgnZGV0YWlsJyAgICAgIGluIGV2ZW50KSB7IHNZID0gZXZlbnQuZGV0YWlsOyB9XG4gIGlmICgnd2hlZWxEZWx0YScgIGluIGV2ZW50KSB7IHNZID0gLWV2ZW50LndoZWVsRGVsdGEgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWScgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YVkgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZXZlbnQpIHsgc1ggPSAtZXZlbnQud2hlZWxEZWx0YVggLyAxMjA7IH1cblxuICAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG4gIGlmICggJ2F4aXMnIGluIGV2ZW50ICYmIGV2ZW50LmF4aXMgPT09IGV2ZW50LkhPUklaT05UQUxfQVhJUyApIHtcbiAgICBzWCA9IHNZO1xuICAgIHNZID0gMDtcbiAgfVxuXG4gIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICBwWSA9IHNZICogUElYRUxfU1RFUDtcblxuICBpZiAoJ2RlbHRhWScgaW4gZXZlbnQpIHsgcFkgPSBldmVudC5kZWx0YVk7IH1cbiAgaWYgKCdkZWx0YVgnIGluIGV2ZW50KSB7IHBYID0gZXZlbnQuZGVsdGFYOyB9XG5cbiAgaWYgKChwWCB8fCBwWSkgJiYgZXZlbnQuZGVsdGFNb2RlKSB7XG4gICAgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PSAxKSB7ICAgICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcbiAgaWYgKHBYICYmICFzWCkgeyBzWCA9IChwWCA8IDEpID8gLTEgOiAxOyB9XG4gIGlmIChwWSAmJiAhc1kpIHsgc1kgPSAocFkgPCAxKSA/IC0xIDogMTsgfVxuXG4gIHJldHVybiB7IHNwaW5YICA6IHNYLFxuICAgICAgICAgICBzcGluWSAgOiBzWSxcbiAgICAgICAgICAgcGl4ZWxYIDogcFgsXG4gICAgICAgICAgIHBpeGVsWSA6IHBZIH07XG59XG5cblxuLyoqXG4gKiBUaGUgYmVzdCBjb21iaW5hdGlvbiBpZiB5b3UgcHJlZmVyIHNwaW5YICsgc3Bpblkgbm9ybWFsaXphdGlvbi4gIEl0IGZhdm9yc1xuICogdGhlIG9sZGVyIERPTU1vdXNlU2Nyb2xsIGZvciBGaXJlZm94LCBhcyBGRiBkb2VzIG5vdCBpbmNsdWRlIHdoZWVsRGVsdGEgd2l0aFxuICogJ3doZWVsJyBldmVudCwgbWFraW5nIHNwaW4gc3BlZWQgZGV0ZXJtaW5hdGlvbiBpbXBvc3NpYmxlLlxuICovXG5ub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUgPSBmdW5jdGlvbigpIC8qc3RyaW5nKi8ge1xuICByZXR1cm4gKFVzZXJBZ2VudF9ERVBSRUNBVEVELmZpcmVmb3goKSlcbiAgICAgICAgICAgPyAnRE9NTW91c2VTY3JvbGwnXG4gICAgICAgICAgIDogKGlzRXZlbnRTdXBwb3J0ZWQoJ3doZWVsJykpXG4gICAgICAgICAgICAgICA/ICd3aGVlbCdcbiAgICAgICAgICAgICAgIDogJ21vdXNld2hlZWwnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemVXaGVlbDtcbiIsImltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vVHJhbnNmb3JtLmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi9tYXRoL01hdDQuanMnO1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uL21hdGgvVmVjMy5qcyc7XG5cbmNvbnN0IHRlbXBNYXQ0ID0gbmV3IE1hdDQoKTtcbmNvbnN0IHRlbXBWZWMzYSA9IG5ldyBWZWMzKCk7XG5jb25zdCB0ZW1wVmVjM2IgPSBuZXcgVmVjMygpO1xuXG5leHBvcnQgY2xhc3MgQ2FtZXJhIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyBuZWFyID0gMC4xLCBmYXIgPSAxMDAsIGZvdiA9IDQ1LCBhc3BlY3QgPSAxLCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpvb20gPSAxIH0gPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBuZWFyLCBmYXIsIGZvdiwgYXNwZWN0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpvb20gfSk7XG5cbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy52aWV3TWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMud29ybGRQb3NpdGlvbiA9IG5ldyBWZWMzKCk7XG5cbiAgICAgICAgLy8gVXNlIG9ydGhvZ3JhcGhpYyBpZiBsZWZ0L3JpZ2h0IHNldCwgZWxzZSBkZWZhdWx0IHRvIHBlcnNwZWN0aXZlIGNhbWVyYVxuICAgICAgICB0aGlzLnR5cGUgPSBsZWZ0IHx8IHJpZ2h0ID8gJ29ydGhvZ3JhcGhpYycgOiAncGVyc3BlY3RpdmUnO1xuXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdvcnRob2dyYXBoaWMnKSB0aGlzLm9ydGhvZ3JhcGhpYygpO1xuICAgICAgICBlbHNlIHRoaXMucGVyc3BlY3RpdmUoKTtcbiAgICB9XG5cbiAgICBwZXJzcGVjdGl2ZSh7IG5lYXIgPSB0aGlzLm5lYXIsIGZhciA9IHRoaXMuZmFyLCBmb3YgPSB0aGlzLmZvdiwgYXNwZWN0ID0gdGhpcy5hc3BlY3QgfSA9IHt9KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBuZWFyLCBmYXIsIGZvdiwgYXNwZWN0IH0pO1xuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXguZnJvbVBlcnNwZWN0aXZlKHsgZm92OiBmb3YgKiAoTWF0aC5QSSAvIDE4MCksIGFzcGVjdCwgbmVhciwgZmFyIH0pO1xuICAgICAgICB0aGlzLnR5cGUgPSAncGVyc3BlY3RpdmUnO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvcnRob2dyYXBoaWMoe1xuICAgICAgICBuZWFyID0gdGhpcy5uZWFyLFxuICAgICAgICBmYXIgPSB0aGlzLmZhcixcbiAgICAgICAgbGVmdCA9IHRoaXMubGVmdCxcbiAgICAgICAgcmlnaHQgPSB0aGlzLnJpZ2h0LFxuICAgICAgICBib3R0b20gPSB0aGlzLmJvdHRvbSxcbiAgICAgICAgdG9wID0gdGhpcy50b3AsXG4gICAgICAgIHpvb20gPSB0aGlzLnpvb20sXG4gICAgfSA9IHt9KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBuZWFyLCBmYXIsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem9vbSB9KTtcbiAgICAgICAgbGVmdCAvPSB6b29tO1xuICAgICAgICByaWdodCAvPSB6b29tO1xuICAgICAgICBib3R0b20gLz0gem9vbTtcbiAgICAgICAgdG9wIC89IHpvb207XG4gICAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeC5mcm9tT3J0aG9nb25hbCh7IGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyIH0pO1xuICAgICAgICB0aGlzLnR5cGUgPSAnb3J0aG9ncmFwaGljJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdXBkYXRlTWF0cml4V29ybGQoKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG4gICAgICAgIHRoaXMudmlld01hdHJpeC5pbnZlcnNlKHRoaXMud29ybGRNYXRyaXgpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4LmdldFRyYW5zbGF0aW9uKHRoaXMud29ybGRQb3NpdGlvbik7XG5cbiAgICAgICAgLy8gdXNlZCBmb3Igc29ydGluZ1xuICAgICAgICB0aGlzLnByb2plY3Rpb25WaWV3TWF0cml4Lm11bHRpcGx5KHRoaXMucHJvamVjdGlvbk1hdHJpeCwgdGhpcy52aWV3TWF0cml4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbG9va0F0KHRhcmdldCkge1xuICAgICAgICBzdXBlci5sb29rQXQodGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gUHJvamVjdCAzRCBjb29yZGluYXRlIHRvIDJEIHBvaW50XG4gICAgcHJvamVjdCh2KSB7XG4gICAgICAgIHYuYXBwbHlNYXRyaXg0KHRoaXMudmlld01hdHJpeCk7XG4gICAgICAgIHYuYXBwbHlNYXRyaXg0KHRoaXMucHJvamVjdGlvbk1hdHJpeCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIFVucHJvamVjdCAyRCBwb2ludCB0byAzRCBjb29yZGluYXRlXG4gICAgdW5wcm9qZWN0KHYpIHtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGVtcE1hdDQuaW52ZXJzZSh0aGlzLnByb2plY3Rpb25NYXRyaXgpKTtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGhpcy53b3JsZE1hdHJpeCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVwZGF0ZUZydXN0dW0oKSB7XG4gICAgICAgIGlmICghdGhpcy5mcnVzdHVtKSB7XG4gICAgICAgICAgICB0aGlzLmZydXN0dW0gPSBbbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKV07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtID0gdGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeDtcbiAgICAgICAgdGhpcy5mcnVzdHVtWzBdLnNldChtWzNdIC0gbVswXSwgbVs3XSAtIG1bNF0sIG1bMTFdIC0gbVs4XSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTJdOyAvLyAteFxuICAgICAgICB0aGlzLmZydXN0dW1bMV0uc2V0KG1bM10gKyBtWzBdLCBtWzddICsgbVs0XSwgbVsxMV0gKyBtWzhdKS5jb25zdGFudCA9IG1bMTVdICsgbVsxMl07IC8vICt4XG4gICAgICAgIHRoaXMuZnJ1c3R1bVsyXS5zZXQobVszXSArIG1bMV0sIG1bN10gKyBtWzVdLCBtWzExXSArIG1bOV0pLmNvbnN0YW50ID0gbVsxNV0gKyBtWzEzXTsgLy8gK3lcbiAgICAgICAgdGhpcy5mcnVzdHVtWzNdLnNldChtWzNdIC0gbVsxXSwgbVs3XSAtIG1bNV0sIG1bMTFdIC0gbVs5XSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTNdOyAvLyAteVxuICAgICAgICB0aGlzLmZydXN0dW1bNF0uc2V0KG1bM10gLSBtWzJdLCBtWzddIC0gbVs2XSwgbVsxMV0gLSBtWzEwXSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTRdOyAvLyAreiAoZmFyKVxuICAgICAgICB0aGlzLmZydXN0dW1bNV0uc2V0KG1bM10gKyBtWzJdLCBtWzddICsgbVs2XSwgbVsxMV0gKyBtWzEwXSkuY29uc3RhbnQgPSBtWzE1XSArIG1bMTRdOyAvLyAteiAobmVhcilcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaW52TGVuID0gMS4wIC8gdGhpcy5mcnVzdHVtW2ldLmRpc3RhbmNlKCk7XG4gICAgICAgICAgICB0aGlzLmZydXN0dW1baV0ubXVsdGlwbHkoaW52TGVuKTtcbiAgICAgICAgICAgIHRoaXMuZnJ1c3R1bVtpXS5jb25zdGFudCAqPSBpbnZMZW47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmcnVzdHVtSW50ZXJzZWN0c01lc2gobm9kZSkge1xuICAgICAgICAvLyBJZiBubyBwb3NpdGlvbiBhdHRyaWJ1dGUsIHRyZWF0IGFzIGZydXN0dW1DdWxsZWQgZmFsc2VcbiAgICAgICAgaWYgKCFub2RlLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24pIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGlmICghbm9kZS5nZW9tZXRyeS5ib3VuZHMgfHwgbm9kZS5nZW9tZXRyeS5ib3VuZHMucmFkaXVzID09PSBJbmZpbml0eSkgbm9kZS5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuICAgICAgICBpZiAoIW5vZGUuZ2VvbWV0cnkuYm91bmRzKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjb25zdCBjZW50ZXIgPSB0ZW1wVmVjM2E7XG4gICAgICAgIGNlbnRlci5jb3B5KG5vZGUuZ2VvbWV0cnkuYm91bmRzLmNlbnRlcik7XG4gICAgICAgIGNlbnRlci5hcHBseU1hdHJpeDQobm9kZS53b3JsZE1hdHJpeCk7XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gbm9kZS5nZW9tZXRyeS5ib3VuZHMucmFkaXVzICogbm9kZS53b3JsZE1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZydXN0dW1JbnRlcnNlY3RzU3BoZXJlKGNlbnRlciwgcmFkaXVzKTtcbiAgICB9XG5cbiAgICBmcnVzdHVtSW50ZXJzZWN0c1NwaGVyZShjZW50ZXIsIHJhZGl1cykge1xuICAgICAgICBjb25zdCBub3JtYWwgPSB0ZW1wVmVjM2I7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYW5lID0gdGhpcy5mcnVzdHVtW2ldO1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBub3JtYWwuY29weShwbGFuZSkuZG90KGNlbnRlcikgKyBwbGFuZS5jb25zdGFudDtcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IC1yYWRpdXMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iLCIvLyBhdHRyaWJ1dGUgcGFyYW1zXG4vLyB7XG4vLyAgICAgZGF0YSAtIHR5cGVkIGFycmF5IGVnIFVJbnQxNkFycmF5IGZvciBpbmRpY2VzLCBGbG9hdDMyQXJyYXlcbi8vICAgICBzaXplIC0gaW50IGRlZmF1bHQgMVxuLy8gICAgIGluc3RhbmNlZCAtIGRlZmF1bHQgbnVsbC4gUGFzcyBkaXZpc29yIGFtb3VudFxuLy8gICAgIHR5cGUgLSBnbCBlbnVtIGRlZmF1bHQgZ2wuVU5TSUdORURfU0hPUlQgZm9yICdpbmRleCcsIGdsLkZMT0FUIGZvciBvdGhlcnNcbi8vICAgICBub3JtYWxpemVkIC0gYm9vbGVhbiBkZWZhdWx0IGZhbHNlXG5cbi8vICAgICBidWZmZXIgLSBnbCBidWZmZXIsIGlmIGJ1ZmZlciBleGlzdHMsIGRvbid0IG5lZWQgdG8gcHJvdmlkZSBkYXRhXG4vLyAgICAgc3RyaWRlIC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBvZmZzZXQgLSBkZWZhdWx0IDAgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIGNvdW50IC0gZGVmYXVsdCBudWxsIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBtaW4gLSBhcnJheSAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWF4IC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gfVxuXG4vLyBUT0RPOiBmaXQgaW4gdHJhbnNmb3JtIGZlZWRiYWNrXG4vLyBUT0RPOiB3aGVuIHdvdWxkIEkgZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5ID9cbi8vIFRPRE86IHVzZSBvZmZzZXQvc3RyaWRlIGlmIGV4aXN0c1xuXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuY29uc3QgdGVtcFZlYzMgPSBuZXcgVmVjMygpO1xuXG5sZXQgSUQgPSAxO1xubGV0IEFUVFJfSUQgPSAxO1xuXG4vLyBUbyBzdG9wIGluaWZpbml0ZSB3YXJuaW5nc1xubGV0IGlzQm91bmRzV2FybmVkID0gZmFsc2U7XG5cbmV4cG9ydCBjbGFzcyBHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBHZW9tZXRyeScpO1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIC8vIFN0b3JlIG9uZSBWQU8gcGVyIHByb2dyYW0gYXR0cmlidXRlIGxvY2F0aW9ucyBvcmRlclxuICAgICAgICB0aGlzLlZBT3MgPSB7fTtcblxuICAgICAgICB0aGlzLmRyYXdSYW5nZSA9IHsgc3RhcnQ6IDAsIGNvdW50OiAwIH07XG4gICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSAwO1xuXG4gICAgICAgIC8vIFVuYmluZCBjdXJyZW50IFZBTyBzbyB0aGF0IG5ldyBidWZmZXJzIGRvbid0IGdldCBhZGRlZCB0byBhY3RpdmUgbWVzaFxuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBudWxsO1xuXG4gICAgICAgIC8vIEFsaWFzIGZvciBzdGF0ZSBzdG9yZSB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgZm9yIGdsb2JhbCBzdGF0ZVxuICAgICAgICB0aGlzLmdsU3RhdGUgPSB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlO1xuXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgYnVmZmVyc1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkQXR0cmlidXRlKGtleSwgYXR0cikge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXNba2V5XSA9IGF0dHI7XG5cbiAgICAgICAgLy8gU2V0IG9wdGlvbnNcbiAgICAgICAgYXR0ci5pZCA9IEFUVFJfSUQrKzsgLy8gVE9ETzogY3VycmVudGx5IHVudXNlZCwgcmVtb3ZlP1xuICAgICAgICBhdHRyLnNpemUgPSBhdHRyLnNpemUgfHwgMTtcbiAgICAgICAgYXR0ci50eXBlID1cbiAgICAgICAgICAgIGF0dHIudHlwZSB8fFxuICAgICAgICAgICAgKGF0dHIuZGF0YS5jb25zdHJ1Y3RvciA9PT0gRmxvYXQzMkFycmF5XG4gICAgICAgICAgICAgICAgPyB0aGlzLmdsLkZMT0FUXG4gICAgICAgICAgICAgICAgOiBhdHRyLmRhdGEuY29uc3RydWN0b3IgPT09IFVpbnQxNkFycmF5XG4gICAgICAgICAgICAgICAgPyB0aGlzLmdsLlVOU0lHTkVEX1NIT1JUXG4gICAgICAgICAgICAgICAgOiB0aGlzLmdsLlVOU0lHTkVEX0lOVCk7IC8vIFVpbnQzMkFycmF5XG4gICAgICAgIGF0dHIudGFyZ2V0ID0ga2V5ID09PSAnaW5kZXgnID8gdGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiA6IHRoaXMuZ2wuQVJSQVlfQlVGRkVSO1xuICAgICAgICBhdHRyLm5vcm1hbGl6ZWQgPSBhdHRyLm5vcm1hbGl6ZWQgfHwgZmFsc2U7XG4gICAgICAgIGF0dHIuc3RyaWRlID0gYXR0ci5zdHJpZGUgfHwgMDtcbiAgICAgICAgYXR0ci5vZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwO1xuICAgICAgICBhdHRyLmNvdW50ID0gYXR0ci5jb3VudCB8fCAoYXR0ci5zdHJpZGUgPyBhdHRyLmRhdGEuYnl0ZUxlbmd0aCAvIGF0dHIuc3RyaWRlIDogYXR0ci5kYXRhLmxlbmd0aCAvIGF0dHIuc2l6ZSk7XG4gICAgICAgIGF0dHIuZGl2aXNvciA9IGF0dHIuaW5zdGFuY2VkIHx8IDA7XG4gICAgICAgIGF0dHIubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIWF0dHIuYnVmZmVyKSB7XG4gICAgICAgICAgICBhdHRyLmJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG5cbiAgICAgICAgICAgIC8vIFB1c2ggZGF0YSB0byBidWZmZXJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGdlb21ldHJ5IGNvdW50cy4gSWYgaW5kZXhlZCwgaWdub3JlIHJlZ3VsYXIgYXR0cmlidXRlc1xuICAgICAgICBpZiAoYXR0ci5kaXZpc29yKSB7XG4gICAgICAgICAgICB0aGlzLmlzSW5zdGFuY2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlZENvdW50ICYmIHRoaXMuaW5zdGFuY2VkQ291bnQgIT09IGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2dlb21ldHJ5IGhhcyBtdWx0aXBsZSBpbnN0YW5jZWQgYnVmZmVycyBvZiBkaWZmZXJlbnQgbGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmluc3RhbmNlZENvdW50ID0gTWF0aC5taW4odGhpcy5pbnN0YW5jZWRDb3VudCwgYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3I7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5kZXgnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGF0dHIuY291bnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBNYXRoLm1heCh0aGlzLmRyYXdSYW5nZS5jb3VudCwgYXR0ci5jb3VudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVBdHRyaWJ1dGUoYXR0cikge1xuICAgICAgICBpZiAodGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyICE9PSBhdHRyLmJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKGF0dHIudGFyZ2V0LCBhdHRyLmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgPSBhdHRyLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoYXR0ci50YXJnZXQsIGF0dHIuZGF0YSwgdGhpcy5nbC5TVEFUSUNfRFJBVyk7XG4gICAgICAgIGF0dHIubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZXRJbmRleCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnaW5kZXgnLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RHJhd1JhbmdlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICB0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuICAgIH1cblxuICAgIHNldEluc3RhbmNlZENvdW50KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjcmVhdGVWQU8ocHJvZ3JhbSkge1xuICAgICAgICB0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0gPSB0aGlzLmdsLnJlbmRlcmVyLmNyZWF0ZVZlcnRleEFycmF5KCk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSk7XG4gICAgICAgIHRoaXMuYmluZEF0dHJpYnV0ZXMocHJvZ3JhbSk7XG4gICAgfVxuXG4gICAgYmluZEF0dHJpYnV0ZXMocHJvZ3JhbSkge1xuICAgICAgICAvLyBMaW5rIGFsbCBhdHRyaWJ1dGVzIHRvIHByb2dyYW0gdXNpbmcgZ2wudmVydGV4QXR0cmliUG9pbnRlclxuICAgICAgICBwcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgIC8vIElmIGdlb21ldHJ5IG1pc3NpbmcgYSByZXF1aXJlZCBzaGFkZXIgYXR0cmlidXRlXG4gICAgICAgICAgICBpZiAoIXRoaXMuYXR0cmlidXRlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgYWN0aXZlIGF0dHJpYnV0ZSAke25hbWV9IG5vdCBiZWluZyBzdXBwbGllZGApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKGF0dHIudGFyZ2V0LCBhdHRyLmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgPSBhdHRyLmJ1ZmZlcjtcblxuICAgICAgICAgICAgLy8gRm9yIG1hdHJpeCBhdHRyaWJ1dGVzLCBidWZmZXIgbmVlZHMgdG8gYmUgZGVmaW5lZCBwZXIgY29sdW1uXG4gICAgICAgICAgICBsZXQgbnVtTG9jID0gMTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NCkgbnVtTG9jID0gMjsgLy8gbWF0MlxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc1KSBudW1Mb2MgPSAzOyAvLyBtYXQzXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzYpIG51bUxvYyA9IDQ7IC8vIG1hdDRcblxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IGF0dHIuc2l6ZSAvIG51bUxvYztcbiAgICAgICAgICAgIGNvbnN0IHN0cmlkZSA9IG51bUxvYyA9PT0gMSA/IDAgOiBudW1Mb2MgKiBudW1Mb2MgKiBudW1Mb2M7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBudW1Mb2MgPT09IDEgPyAwIDogbnVtTG9jICogbnVtTG9jO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUxvYzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uICsgaSwgc2l6ZSwgYXR0ci50eXBlLCBhdHRyLm5vcm1hbGl6ZWQsIGF0dHIuc3RyaWRlICsgc3RyaWRlLCBhdHRyLm9mZnNldCArIGkgKiBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24gKyBpKTtcblxuICAgICAgICAgICAgICAgIC8vIEZvciBpbnN0YW5jZWQgYXR0cmlidXRlcywgZGl2aXNvciBuZWVkcyB0byBiZSBzZXQuXG4gICAgICAgICAgICAgICAgLy8gRm9yIGZpcmVmb3gsIG5lZWQgdG8gc2V0IGJhY2sgdG8gMCBpZiBub24taW5zdGFuY2VkIGRyYXduIGFmdGVyIGluc3RhbmNlZC4gRWxzZSB3b24ndCByZW5kZXJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnZlcnRleEF0dHJpYkRpdmlzb3IobG9jYXRpb24gKyBpLCBhdHRyLmRpdmlzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBCaW5kIGluZGljZXMgaWYgZ2VvbWV0cnkgaW5kZXhlZFxuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgZHJhdyh7IHByb2dyYW0sIG1vZGUgPSB0aGlzLmdsLlRSSUFOR0xFUyB9KSB7XG4gICAgICAgIGlmICh0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSAhPT0gYCR7dGhpcy5pZH1fJHtwcm9ncmFtLmF0dHJpYnV0ZU9yZGVyfWApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdKSB0aGlzLmNyZWF0ZVZBTyhwcm9ncmFtKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSA9IGAke3RoaXMuaWR9XyR7cHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcn1gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGF0dHJpYnV0ZXMgbmVlZCB1cGRhdGluZ1xuICAgICAgICBwcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgeyBuYW1lIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgICAgICBpZiAoYXR0ci5uZWVkc1VwZGF0ZSkgdGhpcy51cGRhdGVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmlzSW5zdGFuY2VkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5kcmF3RWxlbWVudHNJbnN0YW5jZWQoXG4gICAgICAgICAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4Lm9mZnNldCArIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ICogMixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZHJhd0FycmF5c0luc3RhbmNlZChtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQsIHRoaXMuaW5zdGFuY2VkQ291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKG1vZGUsIHRoaXMuZHJhd1JhbmdlLmNvdW50LCB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgudHlwZSwgdGhpcy5hdHRyaWJ1dGVzLmluZGV4Lm9mZnNldCArIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ICogMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0FycmF5cyhtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UG9zaXRpb24oKSB7XG4gICAgICAgIC8vIFVzZSBwb3NpdGlvbiBidWZmZXIsIG9yIG1pbi9tYXggaWYgYXZhaWxhYmxlXG4gICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG4gICAgICAgIC8vIGlmIChhdHRyLm1pbikgcmV0dXJuIFsuLi5hdHRyLm1pbiwgLi4uYXR0ci5tYXhdO1xuICAgICAgICBpZiAoYXR0ci5kYXRhKSByZXR1cm4gYXR0cjtcbiAgICAgICAgaWYgKGlzQm91bmRzV2FybmVkKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUud2FybignTm8gcG9zaXRpb24gYnVmZmVyIGRhdGEgZm91bmQgdG8gY29tcHV0ZSBib3VuZHMnKTtcbiAgICAgICAgcmV0dXJuIChpc0JvdW5kc1dhcm5lZCA9IHRydWUpO1xuICAgIH1cblxuICAgIGNvbXB1dGVCb3VuZGluZ0JveChhdHRyKSB7XG4gICAgICAgIGlmICghYXR0cikgYXR0ciA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBhdHRyLmRhdGE7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDA7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlIHx8IGF0dHIuc2l6ZTtcblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICBtaW46IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgbWF4OiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBzY2FsZTogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICByYWRpdXM6IEluZmluaXR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMuYm91bmRzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5ib3VuZHMubWF4O1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmJvdW5kcy5jZW50ZXI7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5ib3VuZHMuc2NhbGU7XG5cbiAgICAgICAgbWluLnNldCgrSW5maW5pdHkpO1xuICAgICAgICBtYXguc2V0KC1JbmZpbml0eSk7XG5cbiAgICAgICAgLy8gVE9ETzogY2hlY2sgc2l6ZSBvZiBwb3NpdGlvbiAoZWcgdHJpYW5nbGUgd2l0aCBWZWMyKVxuICAgICAgICBmb3IgKGxldCBpID0gb2Zmc2V0LCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBhcnJheVtpXTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBhcnJheVtpICsgMV07XG4gICAgICAgICAgICBjb25zdCB6ID0gYXJyYXlbaSArIDJdO1xuXG4gICAgICAgICAgICBtaW4ueCA9IE1hdGgubWluKHgsIG1pbi54KTtcbiAgICAgICAgICAgIG1pbi55ID0gTWF0aC5taW4oeSwgbWluLnkpO1xuICAgICAgICAgICAgbWluLnogPSBNYXRoLm1pbih6LCBtaW4ueik7XG5cbiAgICAgICAgICAgIG1heC54ID0gTWF0aC5tYXgoeCwgbWF4LngpO1xuICAgICAgICAgICAgbWF4LnkgPSBNYXRoLm1heCh5LCBtYXgueSk7XG4gICAgICAgICAgICBtYXgueiA9IE1hdGgubWF4KHosIG1heC56KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWxlLnN1YihtYXgsIG1pbik7XG4gICAgICAgIGNlbnRlci5hZGQobWluLCBtYXgpLmRpdmlkZSgyKTtcbiAgICB9XG5cbiAgICBjb21wdXRlQm91bmRpbmdTcGhlcmUoYXR0cikge1xuICAgICAgICBpZiAoIWF0dHIpIGF0dHIgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gYXR0ci5kYXRhO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwO1xuICAgICAgICBjb25zdCBzdHJpZGUgPSBhdHRyLnN0cmlkZSB8fCBhdHRyLnNpemU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kcykgdGhpcy5jb21wdXRlQm91bmRpbmdCb3goYXR0cik7XG5cbiAgICAgICAgbGV0IG1heFJhZGl1c1NxID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IG9mZnNldCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICAgICAgICB0ZW1wVmVjMy5mcm9tQXJyYXkoYXJyYXksIGkpO1xuICAgICAgICAgICAgbWF4UmFkaXVzU3EgPSBNYXRoLm1heChtYXhSYWRpdXNTcSwgdGhpcy5ib3VuZHMuY2VudGVyLnNxdWFyZWREaXN0YW5jZSh0ZW1wVmVjMykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ib3VuZHMucmFkaXVzID0gTWF0aC5zcXJ0KG1heFJhZGl1c1NxKTtcbiAgICB9XG5cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLlZBT3MpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZGVsZXRlVmVydGV4QXJyYXkodGhpcy5WQU9zW2tleV0pO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuVkFPc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYXR0cmlidXRlc1trZXldLmJ1ZmZlcik7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBNYXQzIH0gZnJvbSAnLi4vbWF0aC9NYXQzLmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi9tYXRoL01hdDQuanMnO1xuXG5sZXQgSUQgPSAwO1xuXG5leHBvcnQgY2xhc3MgTWVzaCBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgZ2VvbWV0cnksIHByb2dyYW0sIG1vZGUgPSBnbC5UUklBTkdMRVMsIGZydXN0dW1DdWxsZWQgPSB0cnVlLCByZW5kZXJPcmRlciA9IDAgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIE1lc2gnKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gc2tpcCBmcnVzdHVtIGN1bGxpbmdcbiAgICAgICAgdGhpcy5mcnVzdHVtQ3VsbGVkID0gZnJ1c3R1bUN1bGxlZDtcblxuICAgICAgICAvLyBPdmVycmlkZSBzb3J0aW5nIHRvIGZvcmNlIGFuIG9yZGVyXG4gICAgICAgIHRoaXMucmVuZGVyT3JkZXIgPSByZW5kZXJPcmRlcjtcbiAgICAgICAgdGhpcy5tb2RlbFZpZXdNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLm5vcm1hbE1hdHJpeCA9IG5ldyBNYXQzKCk7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MgPSBbXTtcbiAgICB9XG5cbiAgICBvbkJlZm9yZVJlbmRlcihmKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzLnB1c2goZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uQWZ0ZXJSZW5kZXIoZikge1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzLnB1c2goZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRyYXcoeyBjYW1lcmEgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goKGYpID0+IGYgJiYgZih7IG1lc2g6IHRoaXMsIGNhbWVyYSB9KSk7XG4gICAgICAgIGlmIChjYW1lcmEpIHtcbiAgICAgICAgICAgIC8vIEFkZCBlbXB0eSBtYXRyaXggdW5pZm9ybXMgdG8gcHJvZ3JhbSBpZiB1bnNldFxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMucHJvZ3JhbS51bmlmb3Jtcywge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbE1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICB2aWV3TWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld01hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFQb3NpdGlvbjogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIG1hdHJpeCB1bmlmb3Jtc1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnByb2plY3Rpb25NYXRyaXgudmFsdWUgPSBjYW1lcmEucHJvamVjdGlvbk1hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5jYW1lcmFQb3NpdGlvbi52YWx1ZSA9IGNhbWVyYS53b3JsZFBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnZpZXdNYXRyaXgudmFsdWUgPSBjYW1lcmEudmlld01hdHJpeDtcbiAgICAgICAgICAgIHRoaXMubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5KGNhbWVyYS52aWV3TWF0cml4LCB0aGlzLndvcmxkTWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCh0aGlzLm1vZGVsVmlld01hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxNYXRyaXgudmFsdWUgPSB0aGlzLndvcmxkTWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsVmlld01hdHJpeC52YWx1ZSA9IHRoaXMubW9kZWxWaWV3TWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm5vcm1hbE1hdHJpeC52YWx1ZSA9IHRoaXMubm9ybWFsTWF0cml4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIGZhY2VzIG5lZWQgdG8gYmUgZmxpcHBlZCAtIHdoZW4gbWVzaCBzY2FsZWQgbmVnYXRpdmVseVxuICAgICAgICBsZXQgZmxpcEZhY2VzID0gdGhpcy5wcm9ncmFtLmN1bGxGYWNlICYmIHRoaXMud29ybGRNYXRyaXguZGV0ZXJtaW5hbnQoKSA8IDA7XG4gICAgICAgIHRoaXMucHJvZ3JhbS51c2UoeyBmbGlwRmFjZXMgfSk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkuZHJhdyh7IG1vZGU6IHRoaXMubW9kZSwgcHJvZ3JhbTogdGhpcy5wcm9ncmFtIH0pO1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goKGYpID0+IGYgJiYgZih7IG1lc2g6IHRoaXMsIGNhbWVyYSB9KSk7XG4gICAgfVxufVxuIiwiLy8gVE9ETzogdXBsb2FkIGVtcHR5IHRleHR1cmUgaWYgbnVsbCA/IG1heWJlIG5vdFxuLy8gVE9ETzogdXBsb2FkIGlkZW50aXR5IG1hdHJpeCBpZiBudWxsID9cbi8vIFRPRE86IHNhbXBsZXIgQ3ViZVxuXG5sZXQgSUQgPSAxO1xuXG4vLyBjYWNoZSBvZiB0eXBlZCBhcnJheXMgdXNlZCB0byBmbGF0dGVuIHVuaWZvcm0gYXJyYXlzXG5jb25zdCBhcnJheUNhY2hlRjMyID0ge307XG5cbmV4cG9ydCBjbGFzcyBQcm9ncmFtIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2wsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZlcnRleCxcbiAgICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgICAgdW5pZm9ybXMgPSB7fSxcblxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1bGxGYWNlID0gZ2wuQkFDSyxcbiAgICAgICAgICAgIGZyb250RmFjZSA9IGdsLkNDVyxcbiAgICAgICAgICAgIGRlcHRoVGVzdCA9IHRydWUsXG4gICAgICAgICAgICBkZXB0aFdyaXRlID0gdHJ1ZSxcbiAgICAgICAgICAgIGRlcHRoRnVuYyA9IGdsLkxFU1MsXG4gICAgICAgIH0gPSB7fVxuICAgICkge1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXN0IGFyZ3VtZW50IHRvIFByb2dyYW0nKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIGlmICghdmVydGV4KSBjb25zb2xlLndhcm4oJ3ZlcnRleCBzaGFkZXIgbm90IHN1cHBsaWVkJyk7XG4gICAgICAgIGlmICghZnJhZ21lbnQpIGNvbnNvbGUud2FybignZnJhZ21lbnQgc2hhZGVyIG5vdCBzdXBwbGllZCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIHByb2dyYW0gc3RhdGVcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRyYW5zcGFyZW50O1xuICAgICAgICB0aGlzLmN1bGxGYWNlID0gY3VsbEZhY2U7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlID0gZnJvbnRGYWNlO1xuICAgICAgICB0aGlzLmRlcHRoVGVzdCA9IGRlcHRoVGVzdDtcbiAgICAgICAgdGhpcy5kZXB0aFdyaXRlID0gZGVwdGhXcml0ZTtcbiAgICAgICAgdGhpcy5kZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jID0ge307XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbiA9IHt9O1xuXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IGJsZW5kRnVuYyBpZiB0cmFuc3BhcmVudCBmbGFnZ2VkXG4gICAgICAgIGlmICh0aGlzLnRyYW5zcGFyZW50ICYmICF0aGlzLmJsZW5kRnVuYy5zcmMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsLnJlbmRlcmVyLnByZW11bHRpcGxpZWRBbHBoYSkgdGhpcy5zZXRCbGVuZEZ1bmModGhpcy5nbC5PTkUsIHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG4gICAgICAgICAgICBlbHNlIHRoaXMuc2V0QmxlbmRGdW5jKHRoaXMuZ2wuU1JDX0FMUEhBLCB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSB2ZXJ0ZXggc2hhZGVyIGFuZCBsb2cgZXJyb3JzXG4gICAgICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlciwgdmVydGV4KTtcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVySW5mb0xvZyh2ZXJ0ZXhTaGFkZXIpICE9PSAnJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke2dsLmdldFNoYWRlckluZm9Mb2codmVydGV4U2hhZGVyKX1cXG5WZXJ0ZXggU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyh2ZXJ0ZXgpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIgYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudCk7XG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudFNoYWRlcikgIT09ICcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Z2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudFNoYWRlcil9XFxuRnJhZ21lbnQgU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyhmcmFnbWVudCl9YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21waWxlIHByb2dyYW0gYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIGdsLmxpbmtQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnByb2dyYW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBzaGFkZXIgb25jZSBsaW5rZWRcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgLy8gR2V0IGFjdGl2ZSB1bmlmb3JtIGxvY2F0aW9uc1xuICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBudW1Vbmlmb3JtcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuICAgICAgICBmb3IgKGxldCB1SW5kZXggPSAwOyB1SW5kZXggPCBudW1Vbmlmb3JtczsgdUluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybSh0aGlzLnByb2dyYW0sIHVJbmRleCk7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KHVuaWZvcm0sIGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIHVuaWZvcm0ubmFtZSkpO1xuXG4gICAgICAgICAgICAvLyBzcGxpdCB1bmlmb3JtcycgbmFtZXMgdG8gc2VwYXJhdGUgYXJyYXkgYW5kIHN0cnVjdCBkZWNsYXJhdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0ID0gdW5pZm9ybS5uYW1lLm1hdGNoKC8oXFx3KykvZyk7XG5cbiAgICAgICAgICAgIHVuaWZvcm0udW5pZm9ybU5hbWUgPSBzcGxpdFswXTtcblxuICAgICAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHVuaWZvcm0uaXNTdHJ1Y3RBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdW5pZm9ybS5zdHJ1Y3RJbmRleCA9IE51bWJlcihzcGxpdFsxXSk7XG4gICAgICAgICAgICAgICAgdW5pZm9ybS5zdHJ1Y3RQcm9wZXJ0eSA9IHNwbGl0WzJdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzcGxpdC5sZW5ndGggPT09IDIgJiYgaXNOYU4oTnVtYmVyKHNwbGl0WzFdKSkpIHtcbiAgICAgICAgICAgICAgICB1bmlmb3JtLmlzU3RydWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB1bmlmb3JtLnN0cnVjdFByb3BlcnR5ID0gc3BsaXRbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYWN0aXZlIGF0dHJpYnV0ZSBsb2NhdGlvbnNcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVMb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBudW1BdHRyaWJzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTKTtcbiAgICAgICAgZm9yIChsZXQgYUluZGV4ID0gMDsgYUluZGV4IDwgbnVtQXR0cmliczsgYUluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGdsLmdldEFjdGl2ZUF0dHJpYih0aGlzLnByb2dyYW0sIGFJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgbG9jYXRpb25zW2xvY2F0aW9uXSA9IGF0dHJpYnV0ZS5uYW1lO1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVMb2NhdGlvbnMuc2V0KGF0dHJpYnV0ZSwgbG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0cmlidXRlT3JkZXIgPSBsb2NhdGlvbnMuam9pbignJyk7XG4gICAgfVxuXG4gICAgc2V0QmxlbmRGdW5jKHNyYywgZHN0LCBzcmNBbHBoYSwgZHN0QWxwaGEpIHtcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuc3JjID0gc3JjO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5kc3QgPSBkc3Q7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLnNyY0FscGhhID0gc3JjQWxwaGE7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLmRzdEFscGhhID0gZHN0QWxwaGE7XG4gICAgICAgIGlmIChzcmMpIHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIHNldEJsZW5kRXF1YXRpb24obW9kZVJHQiwgbW9kZUFscGhhKSB7XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlUkdCID0gbW9kZVJHQjtcbiAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSA9IG1vZGVBbHBoYTtcbiAgICB9XG5cbiAgICBhcHBseVN0YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5kZXB0aFRlc3QpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5yZW5kZXJlci5kaXNhYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VsbEZhY2UpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuXG4gICAgICAgIGlmICh0aGlzLmJsZW5kRnVuYy5zcmMpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuQkxFTkQpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkJMRU5EKTtcblxuICAgICAgICBpZiAodGhpcy5jdWxsRmFjZSkgdGhpcy5nbC5yZW5kZXJlci5zZXRDdWxsRmFjZSh0aGlzLmN1bGxGYWNlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRGcm9udEZhY2UodGhpcy5mcm9udEZhY2UpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldERlcHRoTWFzayh0aGlzLmRlcHRoV3JpdGUpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldERlcHRoRnVuYyh0aGlzLmRlcHRoRnVuYyk7XG4gICAgICAgIGlmICh0aGlzLmJsZW5kRnVuYy5zcmMpXG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldEJsZW5kRnVuYyh0aGlzLmJsZW5kRnVuYy5zcmMsIHRoaXMuYmxlbmRGdW5jLmRzdCwgdGhpcy5ibGVuZEZ1bmMuc3JjQWxwaGEsIHRoaXMuYmxlbmRGdW5jLmRzdEFscGhhKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRCbGVuZEVxdWF0aW9uKHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlUkdCLCB0aGlzLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhKTtcbiAgICB9XG5cbiAgICB1c2UoeyBmbGlwRmFjZXMgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgbGV0IHRleHR1cmVVbml0ID0gLTE7XG4gICAgICAgIGNvbnN0IHByb2dyYW1BY3RpdmUgPSB0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRQcm9ncmFtID09PSB0aGlzLmlkO1xuXG4gICAgICAgIC8vIEF2b2lkIGdsIGNhbGwgaWYgcHJvZ3JhbSBhbHJlYWR5IGluIHVzZVxuICAgICAgICBpZiAoIXByb2dyYW1BY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50UHJvZ3JhbSA9IHRoaXMuaWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgb25seSB0aGUgYWN0aXZlIHVuaWZvcm1zIGZvdW5kIGluIHRoZSBzaGFkZXJcbiAgICAgICAgdGhpcy51bmlmb3JtTG9jYXRpb25zLmZvckVhY2goKGxvY2F0aW9uLCBhY3RpdmVVbmlmb3JtKSA9PiB7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IGFjdGl2ZVVuaWZvcm0udW5pZm9ybU5hbWU7XG5cbiAgICAgICAgICAgIC8vIGdldCBzdXBwbGllZCB1bmlmb3JtXG4gICAgICAgICAgICBsZXQgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbbmFtZV07XG5cbiAgICAgICAgICAgIC8vIEZvciBzdHJ1Y3RzLCBnZXQgdGhlIHNwZWNpZmljIHByb3BlcnR5IGluc3RlYWQgb2YgdGhlIGVudGlyZSBvYmplY3RcbiAgICAgICAgICAgIGlmIChhY3RpdmVVbmlmb3JtLmlzU3RydWN0KSB7XG4gICAgICAgICAgICAgICAgdW5pZm9ybSA9IHVuaWZvcm1bYWN0aXZlVW5pZm9ybS5zdHJ1Y3RQcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgbmFtZSArPSBgLiR7YWN0aXZlVW5pZm9ybS5zdHJ1Y3RQcm9wZXJ0eX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFjdGl2ZVVuaWZvcm0uaXNTdHJ1Y3RBcnJheSkge1xuICAgICAgICAgICAgICAgIHVuaWZvcm0gPSB1bmlmb3JtW2FjdGl2ZVVuaWZvcm0uc3RydWN0SW5kZXhdW2FjdGl2ZVVuaWZvcm0uc3RydWN0UHJvcGVydHldO1xuICAgICAgICAgICAgICAgIG5hbWUgKz0gYFske2FjdGl2ZVVuaWZvcm0uc3RydWN0SW5kZXh9XS4ke2FjdGl2ZVVuaWZvcm0uc3RydWN0UHJvcGVydHl9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF1bmlmb3JtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhcm4oYEFjdGl2ZSB1bmlmb3JtICR7bmFtZX0gaGFzIG5vdCBiZWVuIHN1cHBsaWVkYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtICYmIHVuaWZvcm0udmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGAke25hbWV9IHVuaWZvcm0gaXMgbWlzc2luZyBhIHZhbHVlIHBhcmFtZXRlcmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodW5pZm9ybS52YWx1ZS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdCArIDE7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0ZXh0dXJlIG5lZWRzIHRvIGJlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICB1bmlmb3JtLnZhbHVlLnVwZGF0ZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb3IgdGV4dHVyZSBhcnJheXMsIHNldCB1bmlmb3JtIGFzIGFuIGFycmF5IG9mIHRleHR1cmUgdW5pdHMgaW5zdGVhZCBvZiBqdXN0IG9uZVxuICAgICAgICAgICAgaWYgKHVuaWZvcm0udmFsdWUubGVuZ3RoICYmIHVuaWZvcm0udmFsdWVbMF0udGV4dHVyZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHR1cmVVbml0cyA9IFtdO1xuICAgICAgICAgICAgICAgIHVuaWZvcm0udmFsdWUuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnVwZGF0ZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVVbml0cy5wdXNoKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzZXRVbmlmb3JtKHRoaXMuZ2wsIGFjdGl2ZVVuaWZvcm0udHlwZSwgbG9jYXRpb24sIHRleHR1cmVVbml0cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdW5pZm9ybS52YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXBwbHlTdGF0ZSgpO1xuICAgICAgICBpZiAoZmxpcEZhY2VzKSB0aGlzLmdsLnJlbmRlcmVyLnNldEZyb250RmFjZSh0aGlzLmZyb250RmFjZSA9PT0gdGhpcy5nbC5DQ1cgPyB0aGlzLmdsLkNXIDogdGhpcy5nbC5DQ1cpO1xuICAgIH1cblxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRVbmlmb3JtKGdsLCB0eXBlLCBsb2NhdGlvbiwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLmxlbmd0aCA/IGZsYXR0ZW4odmFsdWUpIDogdmFsdWU7XG4gICAgY29uc3Qgc2V0VmFsdWUgPSBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLmdldChsb2NhdGlvbik7XG5cbiAgICAvLyBBdm9pZCByZWR1bmRhbnQgdW5pZm9ybSBjb21tYW5kc1xuICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHNldFZhbHVlID09PSB1bmRlZmluZWQgfHwgc2V0VmFsdWUubGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGNsb25lIGFycmF5IHRvIHN0b3JlIGFzIGNhY2hlXG4gICAgICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgdmFsdWUuc2xpY2UoMCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFycmF5c0VxdWFsKHNldFZhbHVlLCB2YWx1ZSkpIHJldHVybjtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGNhY2hlZCBhcnJheSB2YWx1ZXNcbiAgICAgICAgICAgIHNldFZhbHVlLnNldCA/IHNldFZhbHVlLnNldCh2YWx1ZSkgOiBzZXRBcnJheShzZXRWYWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgZ2wucmVuZGVyZXIuc3RhdGUudW5pZm9ybUxvY2F0aW9ucy5zZXQobG9jYXRpb24sIHNldFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRWYWx1ZSA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgZ2wucmVuZGVyZXIuc3RhdGUudW5pZm9ybUxvY2F0aW9ucy5zZXQobG9jYXRpb24sIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSA1MTI2OlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA/IGdsLnVuaWZvcm0xZnYobG9jYXRpb24sIHZhbHVlKSA6IGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVFxuICAgICAgICBjYXNlIDM1NjY0OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0yZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDMlxuICAgICAgICBjYXNlIDM1NjY1OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0zZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDM1xuICAgICAgICBjYXNlIDM1NjY2OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm00ZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDNFxuICAgICAgICBjYXNlIDM1NjcwOiAvLyBCT09MXG4gICAgICAgIGNhc2UgNTEyNDogLy8gSU5UXG4gICAgICAgIGNhc2UgMzU2Nzg6IC8vIFNBTVBMRVJfMkRcbiAgICAgICAgY2FzZSAzNTY4MDpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPyBnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2YWx1ZSkgOiBnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKTsgLy8gU0FNUExFUl9DVUJFXG4gICAgICAgIGNhc2UgMzU2NzE6IC8vIEJPT0xfVkVDMlxuICAgICAgICBjYXNlIDM1NjY3OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0yaXYobG9jYXRpb24sIHZhbHVlKTsgLy8gSU5UX1ZFQzJcbiAgICAgICAgY2FzZSAzNTY3MjogLy8gQk9PTF9WRUMzXG4gICAgICAgIGNhc2UgMzU2Njg6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTNpdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBJTlRfVkVDM1xuICAgICAgICBjYXNlIDM1NjczOiAvLyBCT09MX1ZFQzRcbiAgICAgICAgY2FzZSAzNTY2OTpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2YWx1ZSk7IC8vIElOVF9WRUM0XG4gICAgICAgIGNhc2UgMzU2NzQ6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybU1hdHJpeDJmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTsgLy8gRkxPQVRfTUFUMlxuICAgICAgICBjYXNlIDM1Njc1OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm1NYXRyaXgzZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7IC8vIEZMT0FUX01BVDNcbiAgICAgICAgY2FzZSAzNTY3NjpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpOyAvLyBGTE9BVF9NQVQ0XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRMaW5lTnVtYmVycyhzdHJpbmcpIHtcbiAgICBsZXQgbGluZXMgPSBzdHJpbmcuc3BsaXQoJ1xcbicpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGluZXNbaV0gPSBpICsgMSArICc6ICcgKyBsaW5lc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKGEpIHtcbiAgICBjb25zdCBhcnJheUxlbiA9IGEubGVuZ3RoO1xuICAgIGNvbnN0IHZhbHVlTGVuID0gYVswXS5sZW5ndGg7XG4gICAgaWYgKHZhbHVlTGVuID09PSB1bmRlZmluZWQpIHJldHVybiBhO1xuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGVuICogdmFsdWVMZW47XG4gICAgbGV0IHZhbHVlID0gYXJyYXlDYWNoZUYzMltsZW5ndGhdO1xuICAgIGlmICghdmFsdWUpIGFycmF5Q2FjaGVGMzJbbGVuZ3RoXSA9IHZhbHVlID0gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMZW47IGkrKykgdmFsdWUuc2V0KGFbaV0sIGkgKiB2YWx1ZUxlbik7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhcnJheXNFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNldEFycmF5KGEsIGIpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGFbaV0gPSBiW2ldO1xuICAgIH1cbn1cblxubGV0IHdhcm5Db3VudCA9IDA7XG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcbiAgICBpZiAod2FybkNvdW50ID4gMTAwKSByZXR1cm47XG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIHdhcm5Db3VudCsrO1xuICAgIGlmICh3YXJuQ291bnQgPiAxMDApIGNvbnNvbGUud2FybignTW9yZSB0aGFuIDEwMCBwcm9ncmFtIHdhcm5pbmdzIC0gc3RvcHBpbmcgbG9ncy4nKTtcbn1cbiIsImltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuXG4vLyBUT0RPOiBIYW5kbGUgY29udGV4dCBsb3NzIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3dlYmdsL3dpa2kvSGFuZGxpbmdDb250ZXh0TG9zdFxuXG4vLyBOb3QgYXV0b21hdGljIC0gZGV2cyB0byB1c2UgdGhlc2UgbWV0aG9kcyBtYW51YWxseVxuLy8gZ2wuY29sb3JNYXNrKCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2sgKTtcbi8vIGdsLmNsZWFyQ29sb3IoIHIsIGcsIGIsIGEgKTtcbi8vIGdsLnN0ZW5jaWxNYXNrKCBzdGVuY2lsTWFzayApO1xuLy8gZ2wuc3RlbmNpbEZ1bmMoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApO1xuLy8gZ2wuc3RlbmNpbE9wKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKTtcbi8vIGdsLmNsZWFyU3RlbmNpbCggc3RlbmNpbCApO1xuXG5jb25zdCB0ZW1wVmVjMyA9IG5ldyBWZWMzKCk7XG5sZXQgSUQgPSAxO1xuXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksXG4gICAgICAgIHdpZHRoID0gMzAwLFxuICAgICAgICBoZWlnaHQgPSAxNTAsXG4gICAgICAgIGRwciA9IDEsXG4gICAgICAgIGFscGhhID0gZmFsc2UsXG4gICAgICAgIGRlcHRoID0gdHJ1ZSxcbiAgICAgICAgc3RlbmNpbCA9IGZhbHNlLFxuICAgICAgICBhbnRpYWxpYXMgPSBmYWxzZSxcbiAgICAgICAgcHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2UsXG4gICAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IGZhbHNlLFxuICAgICAgICBwb3dlclByZWZlcmVuY2UgPSAnZGVmYXVsdCcsXG4gICAgICAgIGF1dG9DbGVhciA9IHRydWUsXG4gICAgICAgIHdlYmdsID0gMixcbiAgICB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHsgYWxwaGEsIGRlcHRoLCBzdGVuY2lsLCBhbnRpYWxpYXMsIHByZW11bHRpcGxpZWRBbHBoYSwgcHJlc2VydmVEcmF3aW5nQnVmZmVyLCBwb3dlclByZWZlcmVuY2UgfTtcbiAgICAgICAgdGhpcy5kcHIgPSBkcHI7XG4gICAgICAgIHRoaXMuYWxwaGEgPSBhbHBoYTtcbiAgICAgICAgdGhpcy5jb2xvciA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVwdGggPSBkZXB0aDtcbiAgICAgICAgdGhpcy5zdGVuY2lsID0gc3RlbmNpbDtcbiAgICAgICAgdGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBwcmVtdWx0aXBsaWVkQWxwaGE7XG4gICAgICAgIHRoaXMuYXV0b0NsZWFyID0gYXV0b0NsZWFyO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICAvLyBBdHRlbXB0IFdlYkdMMiB1bmxlc3MgZm9yY2VkIHRvIDEsIGlmIG5vdCBzdXBwb3J0ZWQgZmFsbGJhY2sgdG8gV2ViR0wxXG4gICAgICAgIGlmICh3ZWJnbCA9PT0gMikgdGhpcy5nbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbDInLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgdGhpcy5pc1dlYmdsMiA9ICEhdGhpcy5nbDtcbiAgICAgICAgaWYgKCF0aGlzLmdsKSB0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJywgYXR0cmlidXRlcyk7XG4gICAgICAgIGlmICghdGhpcy5nbCkgY29uc29sZS5lcnJvcigndW5hYmxlIHRvIGNyZWF0ZSB3ZWJnbCBjb250ZXh0Jyk7XG5cbiAgICAgICAgLy8gQXR0YWNoIHJlbmRlcmVyIHRvIGdsIHNvIHRoYXQgYWxsIGNsYXNzZXMgaGF2ZSBhY2Nlc3MgdG8gaW50ZXJuYWwgc3RhdGUgZnVuY3Rpb25zXG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIgPSB0aGlzO1xuXG4gICAgICAgIC8vIGluaXRpYWxpc2Ugc2l6ZSB2YWx1ZXNcbiAgICAgICAgdGhpcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIC8vIGdsIHN0YXRlIHN0b3JlcyB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgb24gbWV0aG9kcyB1c2VkIGludGVybmFsbHlcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYyA9IHsgc3JjOiB0aGlzLmdsLk9ORSwgZHN0OiB0aGlzLmdsLlpFUk8gfTtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uID0geyBtb2RlUkdCOiB0aGlzLmdsLkZVTkNfQUREIH07XG4gICAgICAgIHRoaXMuc3RhdGUuY3VsbEZhY2UgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlLmZyb250RmFjZSA9IHRoaXMuZ2wuQ0NXO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoTWFzayA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhGdW5jID0gdGhpcy5nbC5MRVNTO1xuICAgICAgICB0aGlzLnN0YXRlLnByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5mbGlwWSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlLnVucGFja0FsaWdubWVudCA9IDQ7XG4gICAgICAgIHRoaXMuc3RhdGUuZnJhbWVidWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0ID0geyB3aWR0aDogbnVsbCwgaGVpZ2h0OiBudWxsIH07XG4gICAgICAgIHRoaXMuc3RhdGUudGV4dHVyZVVuaXRzID0gW107XG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlVGV4dHVyZVVuaXQgPSAwO1xuICAgICAgICB0aGlzLnN0YXRlLmJvdW5kQnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZS51bmlmb3JtTG9jYXRpb25zID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIC8vIHN0b3JlIHJlcXVlc3RlZCBleHRlbnNpb25zXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHt9O1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgZXh0cmEgZm9ybWF0IHR5cGVzXG4gICAgICAgIGlmICh0aGlzLmlzV2ViZ2wyKSB7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF9zUkdCJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfZGVwdGhfdGV4dHVyZScpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIG1ldGhvZCBhbGlhc2VzIHVzaW5nIGV4dGVuc2lvbiAoV2ViR0wxKSBvciBuYXRpdmUgaWYgYXZhaWxhYmxlIChXZWJHTDIpXG4gICAgICAgIHRoaXMudmVydGV4QXR0cmliRGl2aXNvciA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJywgJ3ZlcnRleEF0dHJpYkRpdmlzb3InLCAndmVydGV4QXR0cmliRGl2aXNvckFOR0xFJyk7XG4gICAgICAgIHRoaXMuZHJhd0FycmF5c0luc3RhbmNlZCA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJywgJ2RyYXdBcnJheXNJbnN0YW5jZWQnLCAnZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFJyk7XG4gICAgICAgIHRoaXMuZHJhd0VsZW1lbnRzSW5zdGFuY2VkID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkJywgJ2RyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFJyk7XG4gICAgICAgIHRoaXMuY3JlYXRlVmVydGV4QXJyYXkgPSB0aGlzLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLCAnY3JlYXRlVmVydGV4QXJyYXknLCAnY3JlYXRlVmVydGV4QXJyYXlPRVMnKTtcbiAgICAgICAgdGhpcy5iaW5kVmVydGV4QXJyYXkgPSB0aGlzLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLCAnYmluZFZlcnRleEFycmF5JywgJ2JpbmRWZXJ0ZXhBcnJheU9FUycpO1xuICAgICAgICB0aGlzLmRlbGV0ZVZlcnRleEFycmF5ID0gdGhpcy5nZXRFeHRlbnNpb24oJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JywgJ2RlbGV0ZVZlcnRleEFycmF5JywgJ2RlbGV0ZVZlcnRleEFycmF5T0VTJyk7XG4gICAgICAgIHRoaXMuZHJhd0J1ZmZlcnMgPSB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfZHJhd19idWZmZXJzJywgJ2RyYXdCdWZmZXJzJywgJ2RyYXdCdWZmZXJzV0VCR0wnKTtcblxuICAgICAgICAvLyBTdG9yZSBkZXZpY2UgcGFyYW1ldGVyc1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLm1heFRleHR1cmVVbml0cyA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMubWF4QW5pc290cm9weSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKVxuICAgICAgICAgICAgPyB0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykuTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKVxuICAgICAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIHNldFNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuZ2wuY2FudmFzLndpZHRoID0gd2lkdGggKiB0aGlzLmRwcjtcbiAgICAgICAgdGhpcy5nbC5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5kcHI7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmdsLmNhbnZhcy5zdHlsZSwge1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgJ3B4JyxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0Vmlld3BvcnQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS52aWV3cG9ydC53aWR0aCA9PT0gd2lkdGggJiYgdGhpcy5zdGF0ZS52aWV3cG9ydC5oZWlnaHQgPT09IGhlaWdodCkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIGVuYWJsZShpZCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZVtpZF0gPT09IHRydWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5lbmFibGUoaWQpO1xuICAgICAgICB0aGlzLnN0YXRlW2lkXSA9IHRydWU7XG4gICAgfVxuXG4gICAgZGlzYWJsZShpZCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZVtpZF0gPT09IGZhbHNlKSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuZGlzYWJsZShpZCk7XG4gICAgICAgIHRoaXMuc3RhdGVbaWRdID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0QmxlbmRGdW5jKHNyYywgZHN0LCBzcmNBbHBoYSwgZHN0QWxwaGEpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjID09PSBzcmMgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdCA9PT0gZHN0ICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmNBbHBoYSA9PT0gc3JjQWxwaGEgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdEFscGhhID09PSBkc3RBbHBoYVxuICAgICAgICApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyYyA9IHNyYztcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0ID0gZHN0O1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmNBbHBoYSA9IHNyY0FscGhhO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3RBbHBoYSA9IGRzdEFscGhhO1xuICAgICAgICBpZiAoc3JjQWxwaGEgIT09IHVuZGVmaW5lZCkgdGhpcy5nbC5ibGVuZEZ1bmNTZXBhcmF0ZShzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLmJsZW5kRnVuYyhzcmMsIGRzdCk7XG4gICAgfVxuXG4gICAgc2V0QmxlbmRFcXVhdGlvbihtb2RlUkdCLCBtb2RlQWxwaGEpIHtcbiAgICAgICAgbW9kZVJHQiA9IG1vZGVSR0IgfHwgdGhpcy5nbC5GVU5DX0FERDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlUkdCID09PSBtb2RlUkdCICYmIHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEgPT09IG1vZGVBbHBoYSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9IG1vZGVSR0I7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEgPSBtb2RlQWxwaGE7XG4gICAgICAgIGlmIChtb2RlQWxwaGEgIT09IHVuZGVmaW5lZCkgdGhpcy5nbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUobW9kZVJHQiwgbW9kZUFscGhhKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLmJsZW5kRXF1YXRpb24obW9kZVJHQik7XG4gICAgfVxuXG4gICAgc2V0Q3VsbEZhY2UodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY3VsbEZhY2UgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuY3VsbEZhY2UgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5jdWxsRmFjZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RnJvbnRGYWNlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmZyb250RmFjZSA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcm9udEZhY2UgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5mcm9udEZhY2UodmFsdWUpO1xuICAgIH1cblxuICAgIHNldERlcHRoTWFzayh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kZXB0aE1hc2sgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhNYXNrID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuZGVwdGhNYXNrKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXREZXB0aEZ1bmModmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGVwdGhGdW5jID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoRnVuYyA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmRlcHRoRnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgYWN0aXZlVGV4dHVyZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCArIHZhbHVlKTtcbiAgICB9XG5cbiAgICBiaW5kRnJhbWVidWZmZXIoeyB0YXJnZXQgPSB0aGlzLmdsLkZSQU1FQlVGRkVSLCBidWZmZXIgPSBudWxsIH0gPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9PT0gYnVmZmVyKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZnJhbWVidWZmZXIgPSBidWZmZXI7XG4gICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcbiAgICB9XG5cbiAgICBnZXRFeHRlbnNpb24oZXh0ZW5zaW9uLCB3ZWJnbDJGdW5jLCBleHRGdW5jKSB7XG4gICAgICAgIC8vIGlmIHdlYmdsMiBmdW5jdGlvbiBzdXBwb3J0ZWQsIHJldHVybiBmdW5jIGJvdW5kIHRvIGdsIGNvbnRleHRcbiAgICAgICAgaWYgKHdlYmdsMkZ1bmMgJiYgdGhpcy5nbFt3ZWJnbDJGdW5jXSkgcmV0dXJuIHRoaXMuZ2xbd2ViZ2wyRnVuY10uYmluZCh0aGlzLmdsKTtcblxuICAgICAgICAvLyBmZXRjaCBleHRlbnNpb24gb25jZSBvbmx5XG4gICAgICAgIGlmICghdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0pIHtcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dID0gdGhpcy5nbC5nZXRFeHRlbnNpb24oZXh0ZW5zaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiBleHRlbnNpb24gaWYgbm8gZnVuY3Rpb24gcmVxdWVzdGVkXG4gICAgICAgIGlmICghd2ViZ2wyRnVuYykgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dO1xuXG4gICAgICAgIC8vIFJldHVybiBudWxsIGlmIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkXG4gICAgICAgIGlmICghdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0pIHJldHVybiBudWxsO1xuXG4gICAgICAgIC8vIHJldHVybiBleHRlbnNpb24gZnVuY3Rpb24sIGJvdW5kIHRvIGV4dGVuc2lvblxuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl1bZXh0RnVuY10uYmluZCh0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSk7XG4gICAgfVxuXG4gICAgc29ydE9wYXF1ZShhLCBiKSB7XG4gICAgICAgIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5wcm9ncmFtLmlkICE9PSBiLnByb2dyYW0uaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYS56RGVwdGggIT09IGIuekRlcHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gYS56RGVwdGggLSBiLnpEZXB0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiLmlkIC0gYS5pZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNvcnRUcmFuc3BhcmVudChhLCBiKSB7XG4gICAgICAgIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEuekRlcHRoICE9PSBiLnpEZXB0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGIuekRlcHRoIC0gYS56RGVwdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYi5pZCAtIGEuaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0VUkoYSwgYikge1xuICAgICAgICBpZiAoYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKGEucHJvZ3JhbS5pZCAhPT0gYi5wcm9ncmFtLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcm9ncmFtLmlkIC0gYi5wcm9ncmFtLmlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGIuaWQgLSBhLmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UmVuZGVyTGlzdCh7IHNjZW5lLCBjYW1lcmEsIGZydXN0dW1DdWxsLCBzb3J0IH0pIHtcbiAgICAgICAgbGV0IHJlbmRlckxpc3QgPSBbXTtcblxuICAgICAgICBpZiAoY2FtZXJhICYmIGZydXN0dW1DdWxsKSBjYW1lcmEudXBkYXRlRnJ1c3R1bSgpO1xuXG4gICAgICAgIC8vIEdldCB2aXNpYmxlXG4gICAgICAgIHNjZW5lLnRyYXZlcnNlKChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW5vZGUudmlzaWJsZSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoIW5vZGUuZHJhdykgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoZnJ1c3R1bUN1bGwgJiYgbm9kZS5mcnVzdHVtQ3VsbGVkICYmIGNhbWVyYSkge1xuICAgICAgICAgICAgICAgIGlmICghY2FtZXJhLmZydXN0dW1JbnRlcnNlY3RzTWVzaChub2RlKSkgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZW5kZXJMaXN0LnB1c2gobm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzb3J0KSB7XG4gICAgICAgICAgICBjb25zdCBvcGFxdWUgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zcGFyZW50ID0gW107IC8vIGRlcHRoVGVzdCB0cnVlXG4gICAgICAgICAgICBjb25zdCB1aSA9IFtdOyAvLyBkZXB0aFRlc3QgZmFsc2VcblxuICAgICAgICAgICAgcmVuZGVyTGlzdC5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgaW50byB0aGUgMyByZW5kZXIgZ3JvdXBzXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLnByb2dyYW0udHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BhcXVlLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLnByb2dyYW0uZGVwdGhUZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50LnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdWkucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBub2RlLnpEZXB0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAvLyBPbmx5IGNhbGN1bGF0ZSB6LWRlcHRoIGlmIHJlbmRlck9yZGVyIHVuc2V0IGFuZCBkZXB0aFRlc3QgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgIGlmIChub2RlLnJlbmRlck9yZGVyICE9PSAwIHx8ICFub2RlLnByb2dyYW0uZGVwdGhUZXN0IHx8ICFjYW1lcmEpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB6LWRlcHRoXG4gICAgICAgICAgICAgICAgbm9kZS53b3JsZE1hdHJpeC5nZXRUcmFuc2xhdGlvbih0ZW1wVmVjMyk7XG4gICAgICAgICAgICAgICAgdGVtcFZlYzMuYXBwbHlNYXRyaXg0KGNhbWVyYS5wcm9qZWN0aW9uVmlld01hdHJpeCk7XG4gICAgICAgICAgICAgICAgbm9kZS56RGVwdGggPSB0ZW1wVmVjMy56O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG9wYXF1ZS5zb3J0KHRoaXMuc29ydE9wYXF1ZSk7XG4gICAgICAgICAgICB0cmFuc3BhcmVudC5zb3J0KHRoaXMuc29ydFRyYW5zcGFyZW50KTtcbiAgICAgICAgICAgIHVpLnNvcnQodGhpcy5zb3J0VUkpO1xuXG4gICAgICAgICAgICByZW5kZXJMaXN0ID0gb3BhcXVlLmNvbmNhdCh0cmFuc3BhcmVudCwgdWkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlckxpc3Q7XG4gICAgfVxuXG4gICAgcmVuZGVyKHsgc2NlbmUsIGNhbWVyYSwgdGFyZ2V0ID0gbnVsbCwgdXBkYXRlID0gdHJ1ZSwgc29ydCA9IHRydWUsIGZydXN0dW1DdWxsID0gdHJ1ZSwgY2xlYXIgfSkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgbm8gcmVuZGVyIHRhcmdldCBib3VuZCBzbyBkcmF3cyB0byBjYW52YXNcbiAgICAgICAgICAgIHRoaXMuYmluZEZyYW1lYnVmZmVyKCk7XG4gICAgICAgICAgICB0aGlzLnNldFZpZXdwb3J0KHRoaXMud2lkdGggKiB0aGlzLmRwciwgdGhpcy5oZWlnaHQgKiB0aGlzLmRwcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBiaW5kIHN1cHBsaWVkIHJlbmRlciB0YXJnZXQgYW5kIHVwZGF0ZSB2aWV3cG9ydFxuICAgICAgICAgICAgdGhpcy5iaW5kRnJhbWVidWZmZXIodGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMuc2V0Vmlld3BvcnQodGFyZ2V0LndpZHRoLCB0YXJnZXQuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGVhciB8fCAodGhpcy5hdXRvQ2xlYXIgJiYgY2xlYXIgIT09IGZhbHNlKSkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWRcbiAgICAgICAgICAgIGlmICh0aGlzLmRlcHRoICYmICghdGFyZ2V0IHx8IHRhcmdldC5kZXB0aCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGVwdGhNYXNrKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nbC5jbGVhcihcbiAgICAgICAgICAgICAgICAodGhpcy5jb2xvciA/IHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGVwdGggPyB0aGlzLmdsLkRFUFRIX0JVRkZFUl9CSVQgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnN0ZW5jaWwgPyB0aGlzLmdsLlNURU5DSUxfQlVGRkVSX0JJVCA6IDApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlcyBhbGwgc2NlbmUgZ3JhcGggbWF0cmljZXNcbiAgICAgICAgaWYgKHVwZGF0ZSkgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcblxuICAgICAgICAvLyBVcGRhdGUgY2FtZXJhIHNlcGFyYXRlbHksIGluIGNhc2Ugbm90IGluIHNjZW5lIGdyYXBoXG4gICAgICAgIGlmIChjYW1lcmEpIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG4gICAgICAgIC8vIEdldCByZW5kZXIgbGlzdCAtIGVudGFpbHMgY3VsbGluZyBhbmQgc29ydGluZ1xuICAgICAgICBjb25zdCByZW5kZXJMaXN0ID0gdGhpcy5nZXRSZW5kZXJMaXN0KHsgc2NlbmUsIGNhbWVyYSwgZnJ1c3R1bUN1bGwsIHNvcnQgfSk7XG5cbiAgICAgICAgcmVuZGVyTGlzdC5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLmRyYXcoeyBjYW1lcmEgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8vIFRPRE86IGRlbGV0ZSB0ZXh0dXJlXG4vLyBUT0RPOiB1c2UgdGV4U3ViSW1hZ2UyRCBmb3IgdXBkYXRlcyAodmlkZW8gb3Igd2hlbiBsb2FkZWQpXG4vLyBUT0RPOiBuZWVkPyBlbmNvZGluZyA9IGxpbmVhckVuY29kaW5nXG4vLyBUT0RPOiBzdXBwb3J0IG5vbi1jb21wcmVzc2VkIG1pcG1hcHMgdXBsb2Fkc1xuXG5jb25zdCBlbXB0eVBpeGVsID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG5cbmZ1bmN0aW9uIGlzUG93ZXJPZjIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYgKHZhbHVlIC0gMSkpID09PSAwO1xufVxuXG5sZXQgSUQgPSAxO1xuXG5leHBvcnQgY2xhc3MgVGV4dHVyZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdsLFxuICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIHRhcmdldCA9IGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgICB0eXBlID0gZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGdsLlJHQkEsXG4gICAgICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IGZvcm1hdCxcbiAgICAgICAgICAgIHdyYXBTID0gZ2wuQ0xBTVBfVE9fRURHRSxcbiAgICAgICAgICAgIHdyYXBUID0gZ2wuQ0xBTVBfVE9fRURHRSxcbiAgICAgICAgICAgIGdlbmVyYXRlTWlwbWFwcyA9IHRydWUsXG4gICAgICAgICAgICBtaW5GaWx0ZXIgPSBnZW5lcmF0ZU1pcG1hcHMgPyBnbC5ORUFSRVNUX01JUE1BUF9MSU5FQVIgOiBnbC5MSU5FQVIsXG4gICAgICAgICAgICBtYWdGaWx0ZXIgPSBnbC5MSU5FQVIsXG4gICAgICAgICAgICBwcmVtdWx0aXBseUFscGhhID0gZmFsc2UsXG4gICAgICAgICAgICB1bnBhY2tBbGlnbm1lbnQgPSA0LFxuICAgICAgICAgICAgZmxpcFkgPSB0YXJnZXQgPT0gZ2wuVEVYVFVSRV8yRCA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaXNvdHJvcHkgPSAwLFxuICAgICAgICAgICAgbGV2ZWwgPSAwLFxuICAgICAgICAgICAgd2lkdGgsIC8vIHVzZWQgZm9yIFJlbmRlclRhcmdldHMgb3IgRGF0YSBUZXh0dXJlc1xuICAgICAgICAgICAgaGVpZ2h0ID0gd2lkdGgsXG4gICAgICAgIH0gPSB7fVxuICAgICkge1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICB0aGlzLmludGVybmFsRm9ybWF0ID0gaW50ZXJuYWxGb3JtYXQ7XG4gICAgICAgIHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyO1xuICAgICAgICB0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlcjtcbiAgICAgICAgdGhpcy53cmFwUyA9IHdyYXBTO1xuICAgICAgICB0aGlzLndyYXBUID0gd3JhcFQ7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZ2VuZXJhdGVNaXBtYXBzO1xuICAgICAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBwcmVtdWx0aXBseUFscGhhO1xuICAgICAgICB0aGlzLnVucGFja0FsaWdubWVudCA9IHVucGFja0FsaWdubWVudDtcbiAgICAgICAgdGhpcy5mbGlwWSA9IGZsaXBZO1xuICAgICAgICB0aGlzLmFuaXNvdHJvcHkgPSBNYXRoLm1pbihhbmlzb3Ryb3B5LCB0aGlzLmdsLnJlbmRlcmVyLnBhcmFtZXRlcnMubWF4QW5pc290cm9weSk7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gdGhpcy5nbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgICAgdGhpcy5zdG9yZSA9IHtcbiAgICAgICAgICAgIGltYWdlOiBudWxsLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEFsaWFzIGZvciBzdGF0ZSBzdG9yZSB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgZm9yIGdsb2JhbCBzdGF0ZVxuICAgICAgICB0aGlzLmdsU3RhdGUgPSB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlO1xuXG4gICAgICAgIC8vIFN0YXRlIHN0b3JlIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBmb3IgcGVyLXRleHR1cmUgc3RhdGVcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICB0aGlzLnN0YXRlLm1pbkZpbHRlciA9IHRoaXMuZ2wuTkVBUkVTVF9NSVBNQVBfTElORUFSO1xuICAgICAgICB0aGlzLnN0YXRlLm1hZ0ZpbHRlciA9IHRoaXMuZ2wuTElORUFSO1xuICAgICAgICB0aGlzLnN0YXRlLndyYXBTID0gdGhpcy5nbC5SRVBFQVQ7XG4gICAgICAgIHRoaXMuc3RhdGUud3JhcFQgPSB0aGlzLmdsLlJFUEVBVDtcbiAgICAgICAgdGhpcy5zdGF0ZS5hbmlzb3Ryb3B5ID0gMDtcbiAgICB9XG5cbiAgICBiaW5kKCkge1xuICAgICAgICAvLyBBbHJlYWR5IGJvdW5kIHRvIGFjdGl2ZSB0ZXh0dXJlIHVuaXRcbiAgICAgICAgaWYgKHRoaXMuZ2xTdGF0ZS50ZXh0dXJlVW5pdHNbdGhpcy5nbFN0YXRlLmFjdGl2ZVRleHR1cmVVbml0XSA9PT0gdGhpcy5pZCkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMudGFyZ2V0LCB0aGlzLnRleHR1cmUpO1xuICAgICAgICB0aGlzLmdsU3RhdGUudGV4dHVyZVVuaXRzW3RoaXMuZ2xTdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdF0gPSB0aGlzLmlkO1xuICAgIH1cblxuICAgIHVwZGF0ZSh0ZXh0dXJlVW5pdCA9IDApIHtcbiAgICAgICAgY29uc3QgbmVlZHNVcGRhdGUgPSAhKHRoaXMuaW1hZ2UgPT09IHRoaXMuc3RvcmUuaW1hZ2UgJiYgIXRoaXMubmVlZHNVcGRhdGUpO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRleHR1cmUgaXMgYm91bmQgdG8gaXRzIHRleHR1cmUgdW5pdFxuICAgICAgICBpZiAobmVlZHNVcGRhdGUgfHwgdGhpcy5nbFN0YXRlLnRleHR1cmVVbml0c1t0ZXh0dXJlVW5pdF0gIT09IHRoaXMuaWQpIHtcbiAgICAgICAgICAgIC8vIHNldCBhY3RpdmUgdGV4dHVyZSB1bml0IHRvIHBlcmZvcm0gdGV4dHVyZSBmdW5jdGlvbnNcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICB0aGlzLmJpbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbmVlZHNVcGRhdGUpIHJldHVybjtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLmZsaXBZICE9PSB0aGlzLmdsU3RhdGUuZmxpcFkpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucGl4ZWxTdG9yZWkodGhpcy5nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0aGlzLmZsaXBZKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5mbGlwWSA9IHRoaXMuZmxpcFk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcmVtdWx0aXBseUFscGhhICE9PSB0aGlzLmdsU3RhdGUucHJlbXVsdGlwbHlBbHBoYSkge1xuICAgICAgICAgICAgdGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGhpcy5wcmVtdWx0aXBseUFscGhhKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5wcmVtdWx0aXBseUFscGhhID0gdGhpcy5wcmVtdWx0aXBseUFscGhhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudW5wYWNrQWxpZ25tZW50ICE9PSB0aGlzLmdsU3RhdGUudW5wYWNrQWxpZ25tZW50KSB7XG4gICAgICAgICAgICB0aGlzLmdsLnBpeGVsU3RvcmVpKHRoaXMuZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGhpcy51bnBhY2tBbGlnbm1lbnQpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLnVucGFja0FsaWdubWVudCA9IHRoaXMudW5wYWNrQWxpZ25tZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWluRmlsdGVyICE9PSB0aGlzLnN0YXRlLm1pbkZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgdGhpcy5taW5GaWx0ZXIpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5taW5GaWx0ZXIgPSB0aGlzLm1pbkZpbHRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1hZ0ZpbHRlciAhPT0gdGhpcy5zdGF0ZS5tYWdGaWx0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgdGhpcy5nbC5URVhUVVJFX01BR19GSUxURVIsIHRoaXMubWFnRmlsdGVyKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubWFnRmlsdGVyID0gdGhpcy5tYWdGaWx0ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy53cmFwUyAhPT0gdGhpcy5zdGF0ZS53cmFwUykge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9TLCB0aGlzLndyYXBTKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUud3JhcFMgPSB0aGlzLndyYXBTO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcFQgIT09IHRoaXMuc3RhdGUud3JhcFQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfVCwgdGhpcy53cmFwVCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLndyYXBUID0gdGhpcy53cmFwVDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmFuaXNvdHJvcHkgJiYgdGhpcy5hbmlzb3Ryb3B5ICE9PSB0aGlzLnN0YXRlLmFuaXNvdHJvcHkpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyZihcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCxcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykuVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsXG4gICAgICAgICAgICAgICAgdGhpcy5hbmlzb3Ryb3B5XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hbmlzb3Ryb3B5ID0gdGhpcy5hbmlzb3Ryb3B5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaW1hZ2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmltYWdlLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSB0aGlzLmdsLlRFWFRVUkVfQ1VCRV9NQVApIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgY3ViZSBtYXBzXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VbaV1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh0aGlzLmltYWdlKSkge1xuICAgICAgICAgICAgICAgIC8vIERhdGEgdGV4dHVyZVxuICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIHRoaXMuaW1hZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmltYWdlLmlzQ29tcHJlc3NlZFRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAvLyBDb21wcmVzc2VkIHRleHR1cmVcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBsZXZlbCA9IDA7IGxldmVsIDwgdGhpcy5pbWFnZS5sZW5ndGg7IGxldmVsKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5jb21wcmVzc2VkVGV4SW1hZ2UyRChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsRm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZVtsZXZlbF0ud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlW2xldmVsXS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZVtsZXZlbF0uZGF0YVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUmVndWxhciB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCB0aGlzLmltYWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2VuZXJhdGVNaXBtYXBzKSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIFdlYkdMMSwgaWYgbm90IGEgcG93ZXIgb2YgMiwgdHVybiBvZmYgbWlwcywgc2V0IHdyYXBwaW5nIHRvIGNsYW1wIHRvIGVkZ2UgYW5kIG1pbkZpbHRlciB0byBsaW5lYXJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2wucmVuZGVyZXIuaXNXZWJnbDIgJiYgKCFpc1Bvd2VyT2YyKHRoaXMuaW1hZ2Uud2lkdGgpIHx8ICFpc1Bvd2VyT2YyKHRoaXMuaW1hZ2UuaGVpZ2h0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cmFwUyA9IHRoaXMud3JhcFQgPSB0aGlzLmdsLkNMQU1QX1RPX0VER0U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluRmlsdGVyID0gdGhpcy5nbC5MSU5FQVI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5nZW5lcmF0ZU1pcG1hcCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxsYmFjayBmb3Igd2hlbiBkYXRhIGlzIHB1c2hlZCB0byBHUFVcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGUgJiYgdGhpcy5vblVwZGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSB0aGlzLmdsLlRFWFRVUkVfQ1VCRV9NQVApIHtcbiAgICAgICAgICAgICAgICAvLyBVcGxvYWQgZW1wdHkgcGl4ZWwgZm9yIGVhY2ggc2lkZSB3aGlsZSBubyBpbWFnZSB0byBhdm9pZCBlcnJvcnMgd2hpbGUgaW1hZ2Ugb3IgdmlkZW8gbG9hZGluZ1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbXB0eVBpeGVsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgLy8gaW1hZ2UgaW50ZW50aW9uYWxseSBsZWZ0IG51bGwgZm9yIFJlbmRlclRhcmdldFxuICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBVcGxvYWQgZW1wdHkgcGl4ZWwgaWYgbm8gaW1hZ2UgdG8gYXZvaWQgZXJyb3JzIHdoaWxlIGltYWdlIG9yIHZpZGVvIGxvYWRpbmdcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsIDAsIHRoaXMuZ2wuUkdCQSwgMSwgMSwgMCwgdGhpcy5nbC5SR0JBLCB0aGlzLmdsLlVOU0lHTkVEX0JZVEUsIGVtcHR5UGl4ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcmUuaW1hZ2UgPSB0aGlzLmltYWdlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuaW1wb3J0IHsgUXVhdCB9IGZyb20gJy4uL21hdGgvUXVhdC5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vbWF0aC9NYXQ0LmpzJztcbmltcG9ydCB7IEV1bGVyIH0gZnJvbSAnLi4vbWF0aC9FdWxlci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMud29ybGRNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjMygpO1xuICAgICAgICB0aGlzLnF1YXRlcm5pb24gPSBuZXcgUXVhdCgpO1xuICAgICAgICB0aGlzLnNjYWxlID0gbmV3IFZlYzMoMSk7XG4gICAgICAgIHRoaXMucm90YXRpb24gPSBuZXcgRXVsZXIoKTtcbiAgICAgICAgdGhpcy51cCA9IG5ldyBWZWMzKDAsIDEsIDApO1xuXG4gICAgICAgIHRoaXMucm90YXRpb24ub25DaGFuZ2UgPSAoKSA9PiB0aGlzLnF1YXRlcm5pb24uZnJvbUV1bGVyKHRoaXMucm90YXRpb24pO1xuICAgICAgICB0aGlzLnF1YXRlcm5pb24ub25DaGFuZ2UgPSAoKSA9PiB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgfVxuXG4gICAgc2V0UGFyZW50KHBhcmVudCwgbm90aWZ5UGFyZW50ID0gdHJ1ZSkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgJiYgcGFyZW50ICE9PSB0aGlzLnBhcmVudCkgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcywgZmFsc2UpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgaWYgKG5vdGlmeVBhcmVudCAmJiBwYXJlbnQpIHBhcmVudC5hZGRDaGlsZCh0aGlzLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgYWRkQ2hpbGQoY2hpbGQsIG5vdGlmeUNoaWxkID0gdHJ1ZSkge1xuICAgICAgICBpZiAoIX50aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpKSB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICBpZiAobm90aWZ5Q2hpbGQpIGNoaWxkLnNldFBhcmVudCh0aGlzLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQ2hpbGQoY2hpbGQsIG5vdGlmeUNoaWxkID0gdHJ1ZSkge1xuICAgICAgICBpZiAoISF+dGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkKSkgdGhpcy5jaGlsZHJlbi5zcGxpY2UodGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkKSwgMSk7XG4gICAgICAgIGlmIChub3RpZnlDaGlsZCkgY2hpbGQuc2V0UGFyZW50KG51bGwsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVNYXRyaXhXb3JsZChmb3JjZSkge1xuICAgICAgICBpZiAodGhpcy5tYXRyaXhBdXRvVXBkYXRlKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgICBpZiAodGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlIHx8IGZvcmNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT09IG51bGwpIHRoaXMud29ybGRNYXRyaXguY29weSh0aGlzLm1hdHJpeCk7XG4gICAgICAgICAgICBlbHNlIHRoaXMud29ybGRNYXRyaXgubXVsdGlwbHkodGhpcy5wYXJlbnQud29ybGRNYXRyaXgsIHRoaXMubWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMud29ybGRNYXRyaXhOZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yY2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS51cGRhdGVNYXRyaXhXb3JsZChmb3JjZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVNYXRyaXgoKSB7XG4gICAgICAgIHRoaXMubWF0cml4LmNvbXBvc2UodGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnBvc2l0aW9uLCB0aGlzLnNjYWxlKTtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0cmF2ZXJzZShjYWxsYmFjaykge1xuICAgICAgICAvLyBSZXR1cm4gdHJ1ZSBpbiBjYWxsYmFjayB0byBzdG9wIHRyYXZlcnNpbmcgY2hpbGRyZW5cbiAgICAgICAgaWYgKGNhbGxiYWNrKHRoaXMpKSByZXR1cm47XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0udHJhdmVyc2UoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVjb21wb3NlKCkge1xuICAgICAgICB0aGlzLm1hdHJpeC5nZXRUcmFuc2xhdGlvbih0aGlzLnBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5tYXRyaXguZ2V0Um90YXRpb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICAgICAgdGhpcy5tYXRyaXguZ2V0U2NhbGluZyh0aGlzLnNjYWxlKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbi5mcm9tUXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pO1xuICAgIH1cblxuICAgIGxvb2tBdCh0YXJnZXQsIGludmVydCA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChpbnZlcnQpIHRoaXMubWF0cml4Lmxvb2tBdCh0aGlzLnBvc2l0aW9uLCB0YXJnZXQsIHRoaXMudXApO1xuICAgICAgICBlbHNlIHRoaXMubWF0cml4Lmxvb2tBdCh0YXJnZXQsIHRoaXMucG9zaXRpb24sIHRoaXMudXApO1xuICAgICAgICB0aGlzLm1hdHJpeC5nZXRSb3RhdGlvbih0aGlzLnF1YXRlcm5pb24pO1xuICAgICAgICB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0dlb21ldHJ5LmpzJztcblxuZXhwb3J0IGNsYXNzIFBsYW5lIGV4dGVuZHMgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSwgYXR0cmlidXRlcyA9IHt9IH0gPSB7fSkge1xuICAgICAgICBjb25zdCB3U2VncyA9IHdpZHRoU2VnbWVudHM7XG4gICAgICAgIGNvbnN0IGhTZWdzID0gaGVpZ2h0U2VnbWVudHM7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGxlbmd0aCBvZiBhcnJheXNcbiAgICAgICAgY29uc3QgbnVtID0gKHdTZWdzICsgMSkgKiAoaFNlZ3MgKyAxKTtcbiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IHdTZWdzICogaFNlZ3MgKiA2O1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIGVtcHR5IGFycmF5cyBvbmNlXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAzKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAzKTtcbiAgICAgICAgY29uc3QgdXYgPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDIpO1xuICAgICAgICBjb25zdCBpbmRleCA9IG51bUluZGljZXMgPiA2NTUzNiA/IG5ldyBVaW50MzJBcnJheShudW1JbmRpY2VzKSA6IG5ldyBVaW50MTZBcnJheShudW1JbmRpY2VzKTtcblxuICAgICAgICBQbGFuZS5idWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgMCwgd1NlZ3MsIGhTZWdzKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHNpemU6IDMsIGRhdGE6IHBvc2l0aW9uIH0sXG4gICAgICAgICAgICBub3JtYWw6IHsgc2l6ZTogMywgZGF0YTogbm9ybWFsIH0sXG4gICAgICAgICAgICB1djogeyBzaXplOiAyLCBkYXRhOiB1diB9LFxuICAgICAgICAgICAgaW5kZXg6IHsgZGF0YTogaW5kZXggfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIoZ2wsIGF0dHJpYnV0ZXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBidWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdTZWdzLCBoU2VncywgdSA9IDAsIHYgPSAxLCB3ID0gMiwgdURpciA9IDEsIHZEaXIgPSAtMSwgaSA9IDAsIGlpID0gMCkge1xuICAgICAgICBjb25zdCBpbyA9IGk7XG4gICAgICAgIGNvbnN0IHNlZ1cgPSB3aWR0aCAvIHdTZWdzO1xuICAgICAgICBjb25zdCBzZWdIID0gaGVpZ2h0IC8gaFNlZ3M7XG5cbiAgICAgICAgZm9yIChsZXQgaXkgPSAwOyBpeSA8PSBoU2VnczsgaXkrKykge1xuICAgICAgICAgICAgbGV0IHkgPSBpeSAqIHNlZ0ggLSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgZm9yIChsZXQgaXggPSAwOyBpeCA8PSB3U2VnczsgaXgrKywgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSBpeCAqIHNlZ1cgLSB3aWR0aCAvIDI7XG5cbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHVdID0geCAqIHVEaXI7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB2XSA9IHkgKiB2RGlyO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgd10gPSBkZXB0aCAvIDI7XG5cbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB1XSA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgdl0gPSAwO1xuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHddID0gZGVwdGggPj0gMCA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICAgIHV2W2kgKiAyXSA9IGl4IC8gd1NlZ3M7XG4gICAgICAgICAgICAgICAgdXZbaSAqIDIgKyAxXSA9IDEgLSBpeSAvIGhTZWdzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl5ID09PSBoU2VncyB8fCBpeCA9PT0gd1NlZ3MpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGxldCBhID0gaW8gKyBpeCArIGl5ICogKHdTZWdzICsgMSk7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBpbyArIGl4ICsgKGl5ICsgMSkgKiAod1NlZ3MgKyAxKTtcbiAgICAgICAgICAgICAgICBsZXQgYyA9IGlvICsgaXggKyAoaXkgKyAxKSAqICh3U2VncyArIDEpICsgMTtcbiAgICAgICAgICAgICAgICBsZXQgZCA9IGlvICsgaXggKyBpeSAqICh3U2VncyArIDEpICsgMTtcblxuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNl0gPSBhO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDFdID0gYjtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAyXSA9IGQ7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgM10gPSBiO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDRdID0gYztcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyA1XSA9IGQ7XG4gICAgICAgICAgICAgICAgaWkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIEV1bGVyRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4vTWF0NC5qcyc7XG5cbmNvbnN0IHRtcE1hdDQgPSBuZXcgTWF0NCgpO1xuXG5leHBvcnQgY2xhc3MgRXVsZXIgZXh0ZW5kcyBBcnJheSB7XG4gICAgY29uc3RydWN0b3IoeCA9IDAsIHkgPSB4LCB6ID0geCwgb3JkZXIgPSAnWVhaJykge1xuICAgICAgICBzdXBlcih4LCB5LCB6KTtcbiAgICAgICAgdGhpcy5vcmRlciA9IG9yZGVyO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gKCkgPT4ge307XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeSh2KSB7XG4gICAgICAgIHRoaXNbMV0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHoodikge1xuICAgICAgICB0aGlzWzJdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICB0aGlzWzBdID0geDtcbiAgICAgICAgdGhpc1sxXSA9IHk7XG4gICAgICAgIHRoaXNbMl0gPSB6O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICB0aGlzWzBdID0gdlswXTtcbiAgICAgICAgdGhpc1sxXSA9IHZbMV07XG4gICAgICAgIHRoaXNbMl0gPSB2WzJdO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlb3JkZXIob3JkZXIpIHtcbiAgICAgICAgdGhpcy5vcmRlciA9IG9yZGVyO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21Sb3RhdGlvbk1hdHJpeChtLCBvcmRlciA9IHRoaXMub3JkZXIpIHtcbiAgICAgICAgRXVsZXJGdW5jLmZyb21Sb3RhdGlvbk1hdHJpeCh0aGlzLCBtLCBvcmRlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21RdWF0ZXJuaW9uKHEsIG9yZGVyID0gdGhpcy5vcmRlcikge1xuICAgICAgICB0bXBNYXQ0LmZyb21RdWF0ZXJuaW9uKHEpO1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tUm90YXRpb25NYXRyaXgodG1wTWF0NCwgb3JkZXIpO1xuICAgIH1cblxuICAgIHRvQXJyYXkoYSA9IFtdLCBvID0gMCkge1xuICAgICAgICBhW29dID0gdGhpc1swXTtcbiAgICAgICAgYVtvICsgMV0gPSB0aGlzWzFdO1xuICAgICAgICBhW28gKyAyXSA9IHRoaXNbMl07XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIE1hdDNGdW5jIGZyb20gJy4vZnVuY3Rpb25zL01hdDNGdW5jLmpzJztcblxuZXhwb3J0IGNsYXNzIE1hdDMgZXh0ZW5kcyBBcnJheSB7XG4gICAgY29uc3RydWN0b3IobTAwID0gMSwgbTAxID0gMCwgbTAyID0gMCwgbTEwID0gMCwgbTExID0gMSwgbTEyID0gMCwgbTIwID0gMCwgbTIxID0gMCwgbTIyID0gMSkge1xuICAgICAgICBzdXBlcihtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0KG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgICAgICAgaWYgKG0wMC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkobTAwKTtcbiAgICAgICAgTWF0M0Z1bmMuc2V0KHRoaXMsIG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMudHJhbnNsYXRlKHRoaXMsIG0sIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMucm90YXRlKHRoaXMsIG0sIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQzRnVuYy5zY2FsZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbXVsdGlwbHkobWEsIG1iKSB7XG4gICAgICAgIGlmIChtYikge1xuICAgICAgICAgICAgTWF0M0Z1bmMubXVsdGlwbHkodGhpcywgbWEsIG1iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgTWF0M0Z1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkobSkge1xuICAgICAgICBNYXQzRnVuYy5jb3B5KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tTWF0cml4NChtKSB7XG4gICAgICAgIE1hdDNGdW5jLmZyb21NYXQ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUXVhdGVybmlvbihxKSB7XG4gICAgICAgIE1hdDNGdW5jLmZyb21RdWF0KHRoaXMsIHEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQmFzaXModmVjM2EsIHZlYzNiLCB2ZWMzYykge1xuICAgICAgICB0aGlzLnNldCh2ZWMzYVswXSwgdmVjM2FbMV0sIHZlYzNhWzJdLCB2ZWMzYlswXSwgdmVjM2JbMV0sIHZlYzNiWzJdLCB2ZWMzY1swXSwgdmVjM2NbMV0sIHZlYzNjWzJdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZShtID0gdGhpcykge1xuICAgICAgICBNYXQzRnVuYy5pbnZlcnQodGhpcywgbSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldE5vcm1hbE1hdHJpeChtKSB7XG4gICAgICAgIE1hdDNGdW5jLm5vcm1hbEZyb21NYXQ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBNYXQ0RnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9NYXQ0RnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNYXQ0IGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBtMDAgPSAxLFxuICAgICAgICBtMDEgPSAwLFxuICAgICAgICBtMDIgPSAwLFxuICAgICAgICBtMDMgPSAwLFxuICAgICAgICBtMTAgPSAwLFxuICAgICAgICBtMTEgPSAxLFxuICAgICAgICBtMTIgPSAwLFxuICAgICAgICBtMTMgPSAwLFxuICAgICAgICBtMjAgPSAwLFxuICAgICAgICBtMjEgPSAwLFxuICAgICAgICBtMjIgPSAxLFxuICAgICAgICBtMjMgPSAwLFxuICAgICAgICBtMzAgPSAwLFxuICAgICAgICBtMzEgPSAwLFxuICAgICAgICBtMzIgPSAwLFxuICAgICAgICBtMzMgPSAxXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxMl07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzEzXTtcbiAgICB9XG5cbiAgICBnZXQgeigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTRdO1xuICAgIH1cblxuICAgIGdldCB3KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxNV07XG4gICAgfVxuXG4gICAgc2V0IHgodikge1xuICAgICAgICB0aGlzWzEyXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzWzEzXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHoodikge1xuICAgICAgICB0aGlzWzE0XSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHcodikge1xuICAgICAgICB0aGlzWzE1XSA9IHY7XG4gICAgfVxuXG4gICAgc2V0KG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMykge1xuICAgICAgICBpZiAobTAwLmxlbmd0aCkgcmV0dXJuIHRoaXMuY29weShtMDApO1xuICAgICAgICBNYXQ0RnVuYy5zZXQodGhpcywgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLnRyYW5zbGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlKHYsIGF4aXMsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLnJvdGF0ZSh0aGlzLCBtLCB2LCBheGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0NEZ1bmMuc2NhbGUodGhpcywgbSwgdHlwZW9mIHYgPT09ICdudW1iZXInID8gW3YsIHYsIHZdIDogdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG11bHRpcGx5KG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBNYXQ0RnVuYy5tdWx0aXBseSh0aGlzLCB0aGlzLCBtYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIE1hdDRGdW5jLmlkZW50aXR5KHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KG0pIHtcbiAgICAgICAgTWF0NEZ1bmMuY29weSh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVBlcnNwZWN0aXZlKHsgZm92LCBhc3BlY3QsIG5lYXIsIGZhciB9ID0ge30pIHtcbiAgICAgICAgTWF0NEZ1bmMucGVyc3BlY3RpdmUodGhpcywgZm92LCBhc3BlY3QsIG5lYXIsIGZhcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21PcnRob2dvbmFsKHsgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIgfSkge1xuICAgICAgICBNYXQ0RnVuYy5vcnRobyh0aGlzLCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21RdWF0ZXJuaW9uKHEpIHtcbiAgICAgICAgTWF0NEZ1bmMuZnJvbVF1YXQodGhpcywgcSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldFBvc2l0aW9uKHYpIHtcbiAgICAgICAgdGhpcy54ID0gdlswXTtcbiAgICAgICAgdGhpcy55ID0gdlsxXTtcbiAgICAgICAgdGhpcy56ID0gdlsyXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZShtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy5pbnZlcnQodGhpcywgbSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvbXBvc2UocSwgcG9zLCBzY2FsZSkge1xuICAgICAgICBNYXQ0RnVuYy5mcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlKHRoaXMsIHEsIHBvcywgc2NhbGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRSb3RhdGlvbihxKSB7XG4gICAgICAgIE1hdDRGdW5jLmdldFJvdGF0aW9uKHEsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRUcmFuc2xhdGlvbihwb3MpIHtcbiAgICAgICAgTWF0NEZ1bmMuZ2V0VHJhbnNsYXRpb24ocG9zLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0U2NhbGluZyhzY2FsZSkge1xuICAgICAgICBNYXQ0RnVuYy5nZXRTY2FsaW5nKHNjYWxlLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0TWF4U2NhbGVPbkF4aXMoKSB7XG4gICAgICAgIHJldHVybiBNYXQ0RnVuYy5nZXRNYXhTY2FsZU9uQXhpcyh0aGlzKTtcbiAgICB9XG5cbiAgICBsb29rQXQoZXllLCB0YXJnZXQsIHVwKSB7XG4gICAgICAgIE1hdDRGdW5jLnRhcmdldFRvKHRoaXMsIGV5ZSwgdGFyZ2V0LCB1cCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRldGVybWluYW50KCkge1xuICAgICAgICByZXR1cm4gTWF0NEZ1bmMuZGV0ZXJtaW5hbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZnJvbUFycmF5KGEsIG8gPSAwKSB7XG4gICAgICAgIHRoaXNbMF0gPSBhW29dO1xuICAgICAgICB0aGlzWzFdID0gYVtvICsgMV07XG4gICAgICAgIHRoaXNbMl0gPSBhW28gKyAyXTtcbiAgICAgICAgdGhpc1szXSA9IGFbbyArIDNdO1xuICAgICAgICB0aGlzWzRdID0gYVtvICsgNF07XG4gICAgICAgIHRoaXNbNV0gPSBhW28gKyA1XTtcbiAgICAgICAgdGhpc1s2XSA9IGFbbyArIDZdO1xuICAgICAgICB0aGlzWzddID0gYVtvICsgN107XG4gICAgICAgIHRoaXNbOF0gPSBhW28gKyA4XTtcbiAgICAgICAgdGhpc1s5XSA9IGFbbyArIDldO1xuICAgICAgICB0aGlzWzEwXSA9IGFbbyArIDEwXTtcbiAgICAgICAgdGhpc1sxMV0gPSBhW28gKyAxMV07XG4gICAgICAgIHRoaXNbMTJdID0gYVtvICsgMTJdO1xuICAgICAgICB0aGlzWzEzXSA9IGFbbyArIDEzXTtcbiAgICAgICAgdGhpc1sxNF0gPSBhW28gKyAxNF07XG4gICAgICAgIHRoaXNbMTVdID0gYVtvICsgMTVdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0b0FycmF5KGEgPSBbXSwgbyA9IDApIHtcbiAgICAgICAgYVtvXSA9IHRoaXNbMF07XG4gICAgICAgIGFbbyArIDFdID0gdGhpc1sxXTtcbiAgICAgICAgYVtvICsgMl0gPSB0aGlzWzJdO1xuICAgICAgICBhW28gKyAzXSA9IHRoaXNbM107XG4gICAgICAgIGFbbyArIDRdID0gdGhpc1s0XTtcbiAgICAgICAgYVtvICsgNV0gPSB0aGlzWzVdO1xuICAgICAgICBhW28gKyA2XSA9IHRoaXNbNl07XG4gICAgICAgIGFbbyArIDddID0gdGhpc1s3XTtcbiAgICAgICAgYVtvICsgOF0gPSB0aGlzWzhdO1xuICAgICAgICBhW28gKyA5XSA9IHRoaXNbOV07XG4gICAgICAgIGFbbyArIDEwXSA9IHRoaXNbMTBdO1xuICAgICAgICBhW28gKyAxMV0gPSB0aGlzWzExXTtcbiAgICAgICAgYVtvICsgMTJdID0gdGhpc1sxMl07XG4gICAgICAgIGFbbyArIDEzXSA9IHRoaXNbMTNdO1xuICAgICAgICBhW28gKyAxNF0gPSB0aGlzWzE0XTtcbiAgICAgICAgYVtvICsgMTVdID0gdGhpc1sxNV07XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFF1YXRGdW5jIGZyb20gJy4vZnVuY3Rpb25zL1F1YXRGdW5jLmpzJztcblxuZXhwb3J0IGNsYXNzIFF1YXQgZXh0ZW5kcyBBcnJheSB7XG4gICAgY29uc3RydWN0b3IoeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeiwgdyk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSAoKSA9PiB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0IHgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzBdO1xuICAgIH1cblxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxXTtcbiAgICB9XG5cbiAgICBnZXQgeigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMl07XG4gICAgfVxuXG4gICAgZ2V0IHcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzNdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeSh2KSB7XG4gICAgICAgIHRoaXNbMV0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHoodikge1xuICAgICAgICB0aGlzWzJdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB3KHYpIHtcbiAgICAgICAgdGhpc1szXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgUXVhdEZ1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0KHgsIHksIHosIHcpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBRdWF0RnVuYy5zZXQodGhpcywgeCwgeSwgeiwgdyk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlWChhKSB7XG4gICAgICAgIFF1YXRGdW5jLnJvdGF0ZVgodGhpcywgdGhpcywgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlWShhKSB7XG4gICAgICAgIFF1YXRGdW5jLnJvdGF0ZVkodGhpcywgdGhpcywgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlWihhKSB7XG4gICAgICAgIFF1YXRGdW5jLnJvdGF0ZVoodGhpcywgdGhpcywgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZShxID0gdGhpcykge1xuICAgICAgICBRdWF0RnVuYy5pbnZlcnQodGhpcywgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29uanVnYXRlKHEgPSB0aGlzKSB7XG4gICAgICAgIFF1YXRGdW5jLmNvbmp1Z2F0ZSh0aGlzLCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KHEpIHtcbiAgICAgICAgUXVhdEZ1bmMuY29weSh0aGlzLCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBub3JtYWxpemUocSA9IHRoaXMpIHtcbiAgICAgICAgUXVhdEZ1bmMubm9ybWFsaXplKHRoaXMsIHEpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG11bHRpcGx5KHFBLCBxQikge1xuICAgICAgICBpZiAocUIpIHtcbiAgICAgICAgICAgIFF1YXRGdW5jLm11bHRpcGx5KHRoaXMsIHFBLCBxQik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBRdWF0RnVuYy5tdWx0aXBseSh0aGlzLCB0aGlzLCBxQSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkb3Qodikge1xuICAgICAgICByZXR1cm4gUXVhdEZ1bmMuZG90KHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGZyb21NYXRyaXgzKG1hdHJpeDMpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbU1hdDModGhpcywgbWF0cml4Myk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUV1bGVyKGV1bGVyKSB7XG4gICAgICAgIFF1YXRGdW5jLmZyb21FdWxlcih0aGlzLCBldWxlciwgZXVsZXIub3JkZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXhpc0FuZ2xlKGF4aXMsIGEpIHtcbiAgICAgICAgUXVhdEZ1bmMuc2V0QXhpc0FuZ2xlKHRoaXMsIGF4aXMsIGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzbGVycChxLCB0KSB7XG4gICAgICAgIFF1YXRGdW5jLnNsZXJwKHRoaXMsIHRoaXMsIHEsIHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpc1swXSA9IGFbb107XG4gICAgICAgIHRoaXNbMV0gPSBhW28gKyAxXTtcbiAgICAgICAgdGhpc1syXSA9IGFbbyArIDJdO1xuICAgICAgICB0aGlzWzNdID0gYVtvICsgM107XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkoYSA9IFtdLCBvID0gMCkge1xuICAgICAgICBhW29dID0gdGhpc1swXTtcbiAgICAgICAgYVtvICsgMV0gPSB0aGlzWzFdO1xuICAgICAgICBhW28gKyAyXSA9IHRoaXNbMl07XG4gICAgICAgIGFbbyArIDNdID0gdGhpc1szXTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgVmVjM0Z1bmMgZnJvbSAnLi9mdW5jdGlvbnMvVmVjM0Z1bmMuanMnO1xuXG5leHBvcnQgY2xhc3MgVmVjMyBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IHgsIHogPSB4KSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHopO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBzZXQgeCh2KSB7XG4gICAgICAgIHRoaXNbMF0gPSB2O1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHoodikge1xuICAgICAgICB0aGlzWzJdID0gdjtcbiAgICB9XG5cbiAgICBzZXQoeCwgeSA9IHgsIHogPSB4KSB7XG4gICAgICAgIGlmICh4Lmxlbmd0aCkgcmV0dXJuIHRoaXMuY29weSh4KTtcbiAgICAgICAgVmVjM0Z1bmMuc2V0KHRoaXMsIHgsIHksIHopO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KHYpIHtcbiAgICAgICAgVmVjM0Z1bmMuY29weSh0aGlzLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkKHZhLCB2Yikge1xuICAgICAgICBpZiAodmIpIFZlYzNGdW5jLmFkZCh0aGlzLCB2YSwgdmIpO1xuICAgICAgICBlbHNlIFZlYzNGdW5jLmFkZCh0aGlzLCB0aGlzLCB2YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHN1Yih2YSwgdmIpIHtcbiAgICAgICAgaWYgKHZiKSBWZWMzRnVuYy5zdWJ0cmFjdCh0aGlzLCB2YSwgdmIpO1xuICAgICAgICBlbHNlIFZlYzNGdW5jLnN1YnRyYWN0KHRoaXMsIHRoaXMsIHZhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbXVsdGlwbHkodikge1xuICAgICAgICBpZiAodi5sZW5ndGgpIFZlYzNGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIHYpO1xuICAgICAgICBlbHNlIFZlYzNGdW5jLnNjYWxlKHRoaXMsIHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkaXZpZGUodikge1xuICAgICAgICBpZiAodi5sZW5ndGgpIFZlYzNGdW5jLmRpdmlkZSh0aGlzLCB0aGlzLCB2KTtcbiAgICAgICAgZWxzZSBWZWMzRnVuYy5zY2FsZSh0aGlzLCB0aGlzLCAxIC8gdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGludmVyc2UodiA9IHRoaXMpIHtcbiAgICAgICAgVmVjM0Z1bmMuaW52ZXJzZSh0aGlzLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQ2FuJ3QgdXNlICdsZW5ndGgnIGFzIEFycmF5LnByb3RvdHlwZSB1c2VzIGl0XG4gICAgbGVuKCkge1xuICAgICAgICByZXR1cm4gVmVjM0Z1bmMubGVuZ3RoKHRoaXMpO1xuICAgIH1cblxuICAgIGRpc3RhbmNlKHYpIHtcbiAgICAgICAgaWYgKHYpIHJldHVybiBWZWMzRnVuYy5kaXN0YW5jZSh0aGlzLCB2KTtcbiAgICAgICAgZWxzZSByZXR1cm4gVmVjM0Z1bmMubGVuZ3RoKHRoaXMpO1xuICAgIH1cblxuICAgIHNxdWFyZWRMZW4oKSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5zcXVhcmVkTGVuZ3RoKHRoaXMpO1xuICAgIH1cblxuICAgIHNxdWFyZWREaXN0YW5jZSh2KSB7XG4gICAgICAgIGlmICh2KSByZXR1cm4gVmVjM0Z1bmMuc3F1YXJlZERpc3RhbmNlKHRoaXMsIHYpO1xuICAgICAgICBlbHNlIHJldHVybiBWZWMzRnVuYy5zcXVhcmVkTGVuZ3RoKHRoaXMpO1xuICAgIH1cblxuICAgIG5lZ2F0ZSh2ID0gdGhpcykge1xuICAgICAgICBWZWMzRnVuYy5uZWdhdGUodGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNyb3NzKHZhLCB2Yikge1xuICAgICAgICBpZiAodmIpIFZlYzNGdW5jLmNyb3NzKHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuY3Jvc3ModGhpcywgdGhpcywgdmEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZSh2KSB7XG4gICAgICAgIFZlYzNGdW5jLnNjYWxlKHRoaXMsIHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBub3JtYWxpemUoKSB7XG4gICAgICAgIFZlYzNGdW5jLm5vcm1hbGl6ZSh0aGlzLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZG90KHYpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLmRvdCh0aGlzLCB2KTtcbiAgICB9XG5cbiAgICBlcXVhbHModikge1xuICAgICAgICByZXR1cm4gVmVjM0Z1bmMuZXhhY3RFcXVhbHModGhpcywgdik7XG4gICAgfVxuXG4gICAgYXBwbHlNYXRyaXg0KG1hdDQpIHtcbiAgICAgICAgVmVjM0Z1bmMudHJhbnNmb3JtTWF0NCh0aGlzLCB0aGlzLCBtYXQ0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGVSb3RhdGVNYXRyaXg0KG1hdDQpIHtcbiAgICAgICAgVmVjM0Z1bmMuc2NhbGVSb3RhdGVNYXQ0KHRoaXMsIHRoaXMsIG1hdDQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhcHBseVF1YXRlcm5pb24ocSkge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1RdWF0KHRoaXMsIHRoaXMsIHEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhbmdsZSh2KSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5hbmdsZSh0aGlzLCB2KTtcbiAgICB9XG5cbiAgICBsZXJwKHYsIHQpIHtcbiAgICAgICAgVmVjM0Z1bmMubGVycCh0aGlzLCB0aGlzLCB2LCB0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjMyh0aGlzWzBdLCB0aGlzWzFdLCB0aGlzWzJdKTtcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpc1swXSA9IGFbb107XG4gICAgICAgIHRoaXNbMV0gPSBhW28gKyAxXTtcbiAgICAgICAgdGhpc1syXSA9IGFbbyArIDJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0b0FycmF5KGEgPSBbXSwgbyA9IDApIHtcbiAgICAgICAgYVtvXSA9IHRoaXNbMF07XG4gICAgICAgIGFbbyArIDFdID0gdGhpc1sxXTtcbiAgICAgICAgYVtvICsgMl0gPSB0aGlzWzJdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm1EaXJlY3Rpb24obWF0NCkge1xuICAgICAgICBjb25zdCB4ID0gdGhpc1swXTtcbiAgICAgICAgY29uc3QgeSA9IHRoaXNbMV07XG4gICAgICAgIGNvbnN0IHogPSB0aGlzWzJdO1xuXG4gICAgICAgIHRoaXNbMF0gPSBtYXQ0WzBdICogeCArIG1hdDRbNF0gKiB5ICsgbWF0NFs4XSAqIHo7XG4gICAgICAgIHRoaXNbMV0gPSBtYXQ0WzFdICogeCArIG1hdDRbNV0gKiB5ICsgbWF0NFs5XSAqIHo7XG4gICAgICAgIHRoaXNbMl0gPSBtYXQ0WzJdICogeCArIG1hdDRbNl0gKiB5ICsgbWF0NFsxMF0gKiB6O1xuXG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xuICAgIH1cbn1cbiIsIi8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uTWF0cml4KG91dCwgbSwgb3JkZXIgPSAnWVhaJykge1xuICAgIGlmIChvcmRlciA9PT0gJ1hZWicpIHtcbiAgICAgICAgb3V0WzFdID0gTWF0aC5hc2luKE1hdGgubWluKE1hdGgubWF4KG1bOF0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs4XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKC1tWzldLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKC1tWzRdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIobVs2XSwgbVs1XSk7XG4gICAgICAgICAgICBvdXRbMl0gPSAwO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1lYWicpIHtcbiAgICAgICAgb3V0WzBdID0gTWF0aC5hc2luKC1NYXRoLm1pbihNYXRoLm1heChtWzldLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bOV0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKG1bMV0sIG1bNV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVswXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSAwO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pYWScpIHtcbiAgICAgICAgb3V0WzBdID0gTWF0aC5hc2luKE1hdGgubWluKE1hdGgubWF4KG1bNl0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs2XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKC1tWzRdLCBtWzVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKG1bMV0sIG1bMF0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pZWCcpIHtcbiAgICAgICAgb3V0WzFdID0gTWF0aC5hc2luKC1NYXRoLm1pbihNYXRoLm1heChtWzJdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bMl0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKG1bMV0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gMDtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bNV0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1laWCcpIHtcbiAgICAgICAgb3V0WzJdID0gTWF0aC5hc2luKE1hdGgubWluKE1hdGgubWF4KG1bMV0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVsxXSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKC1tWzldLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gMDtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIobVs4XSwgbVsxMF0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1haWScpIHtcbiAgICAgICAgb3V0WzJdID0gTWF0aC5hc2luKC1NYXRoLm1pbihNYXRoLm1heChtWzRdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bNF0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIobVs4XSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKC1tWzldLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMV0gPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDb3BpZXMgdGhlIHVwcGVyLWxlZnQgM3gzIHZhbHVlcyBpbnRvIHRoZSBnaXZlbiBtYXQzLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgM3gzIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhICAgdGhlIHNvdXJjZSA0eDQgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0NChvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzRdO1xuICAgIG91dFs0XSA9IGFbNV07XG4gICAgb3V0WzVdID0gYVs2XTtcbiAgICBvdXRbNl0gPSBhWzhdO1xuICAgIG91dFs3XSA9IGFbOV07XG4gICAgb3V0WzhdID0gYVsxMF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgM3gzIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XG4gICAgbGV0IHggPSBxWzBdLFxuICAgICAgICB5ID0gcVsxXSxcbiAgICAgICAgeiA9IHFbMl0sXG4gICAgICAgIHcgPSBxWzNdO1xuICAgIGxldCB4MiA9IHggKyB4O1xuICAgIGxldCB5MiA9IHkgKyB5O1xuICAgIGxldCB6MiA9IHogKyB6O1xuXG4gICAgbGV0IHh4ID0geCAqIHgyO1xuICAgIGxldCB5eCA9IHkgKiB4MjtcbiAgICBsZXQgeXkgPSB5ICogeTI7XG4gICAgbGV0IHp4ID0geiAqIHgyO1xuICAgIGxldCB6eSA9IHogKiB5MjtcbiAgICBsZXQgenogPSB6ICogejI7XG4gICAgbGV0IHd4ID0gdyAqIHgyO1xuICAgIGxldCB3eSA9IHcgKiB5MjtcbiAgICBsZXQgd3ogPSB3ICogejI7XG5cbiAgICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgICBvdXRbM10gPSB5eCAtIHd6O1xuICAgIG91dFs2XSA9IHp4ICsgd3k7XG5cbiAgICBvdXRbMV0gPSB5eCArIHd6O1xuICAgIG91dFs0XSA9IDEgLSB4eCAtIHp6O1xuICAgIG91dFs3XSA9IHp5IC0gd3g7XG5cbiAgICBvdXRbMl0gPSB6eCAtIHd5O1xuICAgIG91dFs1XSA9IHp5ICsgd3g7XG4gICAgb3V0WzhdID0gMSAtIHh4IC0geXk7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQzIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgb3V0WzRdID0gYVs0XTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbNl07XG4gICAgb3V0WzddID0gYVs3XTtcbiAgICBvdXRbOF0gPSBhWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MyB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgICBvdXRbMF0gPSBtMDA7XG4gICAgb3V0WzFdID0gbTAxO1xuICAgIG91dFsyXSA9IG0wMjtcbiAgICBvdXRbM10gPSBtMTA7XG4gICAgb3V0WzRdID0gbTExO1xuICAgIG91dFs1XSA9IG0xMjtcbiAgICBvdXRbNl0gPSBtMjA7XG4gICAgb3V0WzddID0gbTIxO1xuICAgIG91dFs4XSA9IG0yMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCBhIG1hdDMgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgICBvdXRbMF0gPSAxO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDE7XG4gICAgb3V0WzVdID0gMDtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShvdXQsIGEpIHtcbiAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgICBsZXQgYTAxID0gYVsxXSxcbiAgICAgICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgICAgICBhMTIgPSBhWzVdO1xuICAgICAgICBvdXRbMV0gPSBhWzNdO1xuICAgICAgICBvdXRbMl0gPSBhWzZdO1xuICAgICAgICBvdXRbM10gPSBhMDE7XG4gICAgICAgIG91dFs1XSA9IGFbN107XG4gICAgICAgIG91dFs2XSA9IGEwMjtcbiAgICAgICAgb3V0WzddID0gYTEyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG91dFswXSA9IGFbMF07XG4gICAgICAgIG91dFsxXSA9IGFbM107XG4gICAgICAgIG91dFsyXSA9IGFbNl07XG4gICAgICAgIG91dFszXSA9IGFbMV07XG4gICAgICAgIG91dFs0XSA9IGFbNF07XG4gICAgICAgIG91dFs1XSA9IGFbN107XG4gICAgICAgIG91dFs2XSA9IGFbMl07XG4gICAgICAgIG91dFs3XSA9IGFbNV07XG4gICAgICAgIG91dFs4XSA9IGFbOF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXTtcbiAgICBsZXQgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBsZXQgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XTtcblxuICAgIGxldCBiMDEgPSBhMjIgKiBhMTEgLSBhMTIgKiBhMjE7XG4gICAgbGV0IGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjA7XG4gICAgbGV0IGIyMSA9IGEyMSAqIGExMCAtIGExMSAqIGEyMDtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICBsZXQgZGV0ID0gYTAwICogYjAxICsgYTAxICogYjExICsgYTAyICogYjIxO1xuXG4gICAgaWYgKCFkZXQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIG91dFswXSA9IGIwMSAqIGRldDtcbiAgICBvdXRbMV0gPSAoLWEyMiAqIGEwMSArIGEwMiAqIGEyMSkgKiBkZXQ7XG4gICAgb3V0WzJdID0gKGExMiAqIGEwMSAtIGEwMiAqIGExMSkgKiBkZXQ7XG4gICAgb3V0WzNdID0gYjExICogZGV0O1xuICAgIG91dFs0XSA9IChhMjIgKiBhMDAgLSBhMDIgKiBhMjApICogZGV0O1xuICAgIG91dFs1XSA9ICgtYTEyICogYTAwICsgYTAyICogYTEwKSAqIGRldDtcbiAgICBvdXRbNl0gPSBiMjEgKiBkZXQ7XG4gICAgb3V0WzddID0gKC1hMjEgKiBhMDAgKyBhMDEgKiBhMjApICogZGV0O1xuICAgIG91dFs4XSA9IChhMTEgKiBhMDAgLSBhMDEgKiBhMTApICogZGV0O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl07XG4gICAgbGV0IGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV07XG4gICAgbGV0IGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF07XG5cbiAgICByZXR1cm4gYTAwICogKGEyMiAqIGExMSAtIGExMiAqIGEyMSkgKyBhMDEgKiAoLWEyMiAqIGExMCArIGExMiAqIGEyMCkgKyBhMDIgKiAoYTIxICogYTEwIC0gYTExICogYTIwKTtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQzJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXTtcbiAgICBsZXQgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBsZXQgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XTtcblxuICAgIGxldCBiMDAgPSBiWzBdLFxuICAgICAgICBiMDEgPSBiWzFdLFxuICAgICAgICBiMDIgPSBiWzJdO1xuICAgIGxldCBiMTAgPSBiWzNdLFxuICAgICAgICBiMTEgPSBiWzRdLFxuICAgICAgICBiMTIgPSBiWzVdO1xuICAgIGxldCBiMjAgPSBiWzZdLFxuICAgICAgICBiMjEgPSBiWzddLFxuICAgICAgICBiMjIgPSBiWzhdO1xuXG4gICAgb3V0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICAgIG91dFsxXSA9IGIwMCAqIGEwMSArIGIwMSAqIGExMSArIGIwMiAqIGEyMTtcbiAgICBvdXRbMl0gPSBiMDAgKiBhMDIgKyBiMDEgKiBhMTIgKyBiMDIgKiBhMjI7XG5cbiAgICBvdXRbM10gPSBiMTAgKiBhMDAgKyBiMTEgKiBhMTAgKyBiMTIgKiBhMjA7XG4gICAgb3V0WzRdID0gYjEwICogYTAxICsgYjExICogYTExICsgYjEyICogYTIxO1xuICAgIG91dFs1XSA9IGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMjtcblxuICAgIG91dFs2XSA9IGIyMCAqIGEwMCArIGIyMSAqIGExMCArIGIyMiAqIGEyMDtcbiAgICBvdXRbN10gPSBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjE7XG4gICAgb3V0WzhdID0gYjIwICogYTAyICsgYjIxICogYTEyICsgYjIyICogYTIyO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0MyBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHt2ZWMyfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XSxcbiAgICAgICAgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XSxcbiAgICAgICAgeCA9IHZbMF0sXG4gICAgICAgIHkgPSB2WzFdO1xuXG4gICAgb3V0WzBdID0gYTAwO1xuICAgIG91dFsxXSA9IGEwMTtcbiAgICBvdXRbMl0gPSBhMDI7XG5cbiAgICBvdXRbM10gPSBhMTA7XG4gICAgb3V0WzRdID0gYTExO1xuICAgIG91dFs1XSA9IGExMjtcblxuICAgIG91dFs2XSA9IHggKiBhMDAgKyB5ICogYTEwICsgYTIwO1xuICAgIG91dFs3XSA9IHggKiBhMDEgKyB5ICogYTExICsgYTIxO1xuICAgIG91dFs4XSA9IHggKiBhMDIgKyB5ICogYTEyICsgYTIyO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIG1hdDMgYnkgdGhlIGdpdmVuIGFuZ2xlXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdLFxuICAgICAgICBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdLFxuICAgICAgICBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXRbMF0gPSBjICogYTAwICsgcyAqIGExMDtcbiAgICBvdXRbMV0gPSBjICogYTAxICsgcyAqIGExMTtcbiAgICBvdXRbMl0gPSBjICogYTAyICsgcyAqIGExMjtcblxuICAgIG91dFszXSA9IGMgKiBhMTAgLSBzICogYTAwO1xuICAgIG91dFs0XSA9IGMgKiBhMTEgLSBzICogYTAxO1xuICAgIG91dFs1XSA9IGMgKiBhMTIgLSBzICogYTAyO1xuXG4gICAgb3V0WzZdID0gYTIwO1xuICAgIG91dFs3XSA9IGEyMTtcbiAgICBvdXRbOF0gPSBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDMgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICAgIGxldCB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV07XG5cbiAgICBvdXRbMF0gPSB4ICogYVswXTtcbiAgICBvdXRbMV0gPSB4ICogYVsxXTtcbiAgICBvdXRbMl0gPSB4ICogYVsyXTtcblxuICAgIG91dFszXSA9IHkgKiBhWzNdO1xuICAgIG91dFs0XSA9IHkgKiBhWzRdO1xuICAgIG91dFs1XSA9IHkgKiBhWzVdO1xuXG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgM3gzIG5vcm1hbCBtYXRyaXggKHRyYW5zcG9zZSBpbnZlcnNlKSBmcm9tIHRoZSA0eDQgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHttYXQ0fSBhIE1hdDQgdG8gZGVyaXZlIHRoZSBub3JtYWwgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxGcm9tTWF0NChvdXQsIGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTAzID0gYVszXTtcbiAgICBsZXQgYTEwID0gYVs0XSxcbiAgICAgICAgYTExID0gYVs1XSxcbiAgICAgICAgYTEyID0gYVs2XSxcbiAgICAgICAgYTEzID0gYVs3XTtcbiAgICBsZXQgYTIwID0gYVs4XSxcbiAgICAgICAgYTIxID0gYVs5XSxcbiAgICAgICAgYTIyID0gYVsxMF0sXG4gICAgICAgIGEyMyA9IGFbMTFdO1xuICAgIGxldCBhMzAgPSBhWzEyXSxcbiAgICAgICAgYTMxID0gYVsxM10sXG4gICAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgICBhMzMgPSBhWzE1XTtcblxuICAgIGxldCBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gICAgbGV0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgICBsZXQgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICAgIGxldCBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gICAgbGV0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgICBsZXQgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICAgIGxldCBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gICAgbGV0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgICBsZXQgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICAgIGxldCBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gICAgbGV0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgICBsZXQgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzFdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzJdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG5cbiAgICBvdXRbM10gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgICBvdXRbNF0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcbiAgICBvdXRbNV0gPSAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldDtcblxuICAgIG91dFs2XSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xuICAgIG91dFs3XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xuICAgIG91dFs4XSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSAyRCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggV2lkdGggb2YgeW91ciBnbCBjb250ZXh0XG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IEhlaWdodCBvZiBnbCBjb250ZXh0XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uKG91dCwgd2lkdGgsIGhlaWdodCkge1xuICAgIG91dFswXSA9IDIgLyB3aWR0aDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAtMiAvIGhlaWdodDtcbiAgICBvdXRbNV0gPSAwO1xuICAgIG91dFs2XSA9IC0xO1xuICAgIG91dFs3XSA9IDE7XG4gICAgb3V0WzhdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIG1hdDMnc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdICsgYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdICsgYls2XTtcbiAgICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdICsgYls4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSAtIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSAtIGJbNV07XG4gICAgb3V0WzZdID0gYVs2XSAtIGJbNl07XG4gICAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gICAgb3V0WzhdID0gYVs4XSAtIGJbOF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIG91dFszXSA9IGFbM10gKiBiO1xuICAgIG91dFs0XSA9IGFbNF0gKiBiO1xuICAgIG91dFs1XSA9IGFbNV0gKiBiO1xuICAgIG91dFs2XSA9IGFbNl0gKiBiO1xuICAgIG91dFs3XSA9IGFbN10gKiBiO1xuICAgIG91dFs4XSA9IGFbOF0gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG4iLCJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgb3V0WzldID0gYVs5XTtcbiAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgICBvdXRbMF0gPSBtMDA7XG4gICAgb3V0WzFdID0gbTAxO1xuICAgIG91dFsyXSA9IG0wMjtcbiAgICBvdXRbM10gPSBtMDM7XG4gICAgb3V0WzRdID0gbTEwO1xuICAgIG91dFs1XSA9IG0xMTtcbiAgICBvdXRbNl0gPSBtMTI7XG4gICAgb3V0WzddID0gbTEzO1xuICAgIG91dFs4XSA9IG0yMDtcbiAgICBvdXRbOV0gPSBtMjE7XG4gICAgb3V0WzEwXSA9IG0yMjtcbiAgICBvdXRbMTFdID0gbTIzO1xuICAgIG91dFsxMl0gPSBtMzA7XG4gICAgb3V0WzEzXSA9IG0zMTtcbiAgICBvdXRbMTRdID0gbTMyO1xuICAgIG91dFsxNV0gPSBtMzM7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgYSBtYXQ0IHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gICAgb3V0WzBdID0gMTtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IDE7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDA7XG4gICAgb3V0WzldID0gMDtcbiAgICBvdXRbMTBdID0gMTtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMDtcbiAgICBvdXRbMTVdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShvdXQsIGEpIHtcbiAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgICBsZXQgYTAxID0gYVsxXSxcbiAgICAgICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgICAgICBhMDMgPSBhWzNdO1xuICAgICAgICBsZXQgYTEyID0gYVs2XSxcbiAgICAgICAgICAgIGExMyA9IGFbN107XG4gICAgICAgIGxldCBhMjMgPSBhWzExXTtcblxuICAgICAgICBvdXRbMV0gPSBhWzRdO1xuICAgICAgICBvdXRbMl0gPSBhWzhdO1xuICAgICAgICBvdXRbM10gPSBhWzEyXTtcbiAgICAgICAgb3V0WzRdID0gYTAxO1xuICAgICAgICBvdXRbNl0gPSBhWzldO1xuICAgICAgICBvdXRbN10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzhdID0gYTAyO1xuICAgICAgICBvdXRbOV0gPSBhMTI7XG4gICAgICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICAgICAgb3V0WzEyXSA9IGEwMztcbiAgICAgICAgb3V0WzEzXSA9IGExMztcbiAgICAgICAgb3V0WzE0XSA9IGEyMztcbiAgICB9IGVsc2Uge1xuICAgICAgICBvdXRbMF0gPSBhWzBdO1xuICAgICAgICBvdXRbMV0gPSBhWzRdO1xuICAgICAgICBvdXRbMl0gPSBhWzhdO1xuICAgICAgICBvdXRbM10gPSBhWzEyXTtcbiAgICAgICAgb3V0WzRdID0gYVsxXTtcbiAgICAgICAgb3V0WzVdID0gYVs1XTtcbiAgICAgICAgb3V0WzZdID0gYVs5XTtcbiAgICAgICAgb3V0WzddID0gYVsxM107XG4gICAgICAgIG91dFs4XSA9IGFbMl07XG4gICAgICAgIG91dFs5XSA9IGFbNl07XG4gICAgICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICAgICAgb3V0WzExXSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTJdID0gYVszXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbN107XG4gICAgICAgIG91dFsxNF0gPSBhWzExXTtcbiAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgbGV0IGExMCA9IGFbNF0sXG4gICAgICAgIGExMSA9IGFbNV0sXG4gICAgICAgIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgbGV0IGEyMCA9IGFbOF0sXG4gICAgICAgIGEyMSA9IGFbOV0sXG4gICAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgICBhMjMgPSBhWzExXTtcbiAgICBsZXQgYTMwID0gYVsxMl0sXG4gICAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgICBhMzIgPSBhWzE0XSxcbiAgICAgICAgYTMzID0gYVsxNV07XG5cbiAgICBsZXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICAgIGxldCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gICAgbGV0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgICBsZXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICAgIGxldCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gICAgbGV0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgICBsZXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICAgIGxldCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gICAgbGV0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgICBsZXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICAgIGxldCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gICAgbGV0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICBsZXQgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuXG4gICAgaWYgKCFkZXQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICAgIG91dFsxXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICAgIG91dFsyXSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xuICAgIG91dFszXSA9IChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0O1xuICAgIG91dFs0XSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICAgIG91dFs1XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xuICAgIG91dFs2XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xuICAgIG91dFs3XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogZGV0O1xuICAgIG91dFs4XSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xuICAgIG91dFs5XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuICAgIG91dFsxMF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTFdID0gKGEyMSAqIGIwMiAtIGEyMCAqIGIwNCAtIGEyMyAqIGIwMCkgKiBkZXQ7XG4gICAgb3V0WzEyXSA9IChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0O1xuICAgIG91dFsxM10gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGRldDtcbiAgICBvdXRbMTRdID0gKGEzMSAqIGIwMSAtIGEzMCAqIGIwMyAtIGEzMiAqIGIwMCkgKiBkZXQ7XG4gICAgb3V0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0O1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTAzID0gYVszXTtcbiAgICBsZXQgYTEwID0gYVs0XSxcbiAgICAgICAgYTExID0gYVs1XSxcbiAgICAgICAgYTEyID0gYVs2XSxcbiAgICAgICAgYTEzID0gYVs3XTtcbiAgICBsZXQgYTIwID0gYVs4XSxcbiAgICAgICAgYTIxID0gYVs5XSxcbiAgICAgICAgYTIyID0gYVsxMF0sXG4gICAgICAgIGEyMyA9IGFbMTFdO1xuICAgIGxldCBhMzAgPSBhWzEyXSxcbiAgICAgICAgYTMxID0gYVsxM10sXG4gICAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgICBhMzMgPSBhWzE1XTtcblxuICAgIGxldCBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gICAgbGV0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgICBsZXQgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICAgIGxldCBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gICAgbGV0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgICBsZXQgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICAgIGxldCBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gICAgbGV0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgICBsZXQgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICAgIGxldCBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gICAgbGV0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgICBsZXQgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIHJldHVybiBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbWF0NHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTAzID0gYVszXTtcbiAgICBsZXQgYTEwID0gYVs0XSxcbiAgICAgICAgYTExID0gYVs1XSxcbiAgICAgICAgYTEyID0gYVs2XSxcbiAgICAgICAgYTEzID0gYVs3XTtcbiAgICBsZXQgYTIwID0gYVs4XSxcbiAgICAgICAgYTIxID0gYVs5XSxcbiAgICAgICAgYTIyID0gYVsxMF0sXG4gICAgICAgIGEyMyA9IGFbMTFdO1xuICAgIGxldCBhMzAgPSBhWzEyXSxcbiAgICAgICAgYTMxID0gYVsxM10sXG4gICAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgICBhMzMgPSBhWzE1XTtcblxuICAgIC8vIENhY2hlIG9ubHkgdGhlIGN1cnJlbnQgbGluZSBvZiB0aGUgc2Vjb25kIG1hdHJpeFxuICAgIGxldCBiMCA9IGJbMF0sXG4gICAgICAgIGIxID0gYlsxXSxcbiAgICAgICAgYjIgPSBiWzJdLFxuICAgICAgICBiMyA9IGJbM107XG4gICAgb3V0WzBdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XG4gICAgb3V0WzFdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gICAgb3V0WzJdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gICAgb3V0WzNdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG5cbiAgICBiMCA9IGJbNF07XG4gICAgYjEgPSBiWzVdO1xuICAgIGIyID0gYls2XTtcbiAgICBiMyA9IGJbN107XG4gICAgb3V0WzRdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XG4gICAgb3V0WzVdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gICAgb3V0WzZdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gICAgb3V0WzddID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG5cbiAgICBiMCA9IGJbOF07XG4gICAgYjEgPSBiWzldO1xuICAgIGIyID0gYlsxMF07XG4gICAgYjMgPSBiWzExXTtcbiAgICBvdXRbOF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbOV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbMTBdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gICAgb3V0WzExXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuXG4gICAgYjAgPSBiWzEyXTtcbiAgICBiMSA9IGJbMTNdO1xuICAgIGIyID0gYlsxNF07XG4gICAgYjMgPSBiWzE1XTtcbiAgICBvdXRbMTJdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XG4gICAgb3V0WzEzXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICAgIG91dFsxNF0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbMTVdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQ0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICAgIGxldCB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV0sXG4gICAgICAgIHogPSB2WzJdO1xuICAgIGxldCBhMDAsIGEwMSwgYTAyLCBhMDM7XG4gICAgbGV0IGExMCwgYTExLCBhMTIsIGExMztcbiAgICBsZXQgYTIwLCBhMjEsIGEyMiwgYTIzO1xuXG4gICAgaWYgKGEgPT09IG91dCkge1xuICAgICAgICBvdXRbMTJdID0gYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhWzFdICogeCArIGFbNV0gKiB5ICsgYVs5XSAqIHogKyBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMl0gKiB4ICsgYVs2XSAqIHkgKyBhWzEwXSAqIHogKyBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhMDAgPSBhWzBdO1xuICAgICAgICBhMDEgPSBhWzFdO1xuICAgICAgICBhMDIgPSBhWzJdO1xuICAgICAgICBhMDMgPSBhWzNdO1xuICAgICAgICBhMTAgPSBhWzRdO1xuICAgICAgICBhMTEgPSBhWzVdO1xuICAgICAgICBhMTIgPSBhWzZdO1xuICAgICAgICBhMTMgPSBhWzddO1xuICAgICAgICBhMjAgPSBhWzhdO1xuICAgICAgICBhMjEgPSBhWzldO1xuICAgICAgICBhMjIgPSBhWzEwXTtcbiAgICAgICAgYTIzID0gYVsxMV07XG5cbiAgICAgICAgb3V0WzBdID0gYTAwO1xuICAgICAgICBvdXRbMV0gPSBhMDE7XG4gICAgICAgIG91dFsyXSA9IGEwMjtcbiAgICAgICAgb3V0WzNdID0gYTAzO1xuICAgICAgICBvdXRbNF0gPSBhMTA7XG4gICAgICAgIG91dFs1XSA9IGExMTtcbiAgICAgICAgb3V0WzZdID0gYTEyO1xuICAgICAgICBvdXRbN10gPSBhMTM7XG4gICAgICAgIG91dFs4XSA9IGEyMDtcbiAgICAgICAgb3V0WzldID0gYTIxO1xuICAgICAgICBvdXRbMTBdID0gYTIyO1xuICAgICAgICBvdXRbMTFdID0gYTIzO1xuXG4gICAgICAgIG91dFsxMl0gPSBhMDAgKiB4ICsgYTEwICogeSArIGEyMCAqIHogKyBhWzEyXTtcbiAgICAgICAgb3V0WzEzXSA9IGEwMSAqIHggKyBhMTEgKiB5ICsgYTIxICogeiArIGFbMTNdO1xuICAgICAgICBvdXRbMTRdID0gYTAyICogeCArIGExMiAqIHkgKyBhMjIgKiB6ICsgYVsxNF07XG4gICAgICAgIG91dFsxNV0gPSBhMDMgKiB4ICsgYTEzICogeSArIGEyMyAqIHogKyBhWzE1XTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0NCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMyBub3QgdXNpbmcgdmVjdG9yaXphdGlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHt2ZWMzfSB2IHRoZSB2ZWMzIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgICBsZXQgeCA9IHZbMF0sXG4gICAgICAgIHkgPSB2WzFdLFxuICAgICAgICB6ID0gdlsyXTtcblxuICAgIG91dFswXSA9IGFbMF0gKiB4O1xuICAgIG91dFsxXSA9IGFbMV0gKiB4O1xuICAgIG91dFsyXSA9IGFbMl0gKiB4O1xuICAgIG91dFszXSA9IGFbM10gKiB4O1xuICAgIG91dFs0XSA9IGFbNF0gKiB5O1xuICAgIG91dFs1XSA9IGFbNV0gKiB5O1xuICAgIG91dFs2XSA9IGFbNl0gKiB5O1xuICAgIG91dFs3XSA9IGFbN10gKiB5O1xuICAgIG91dFs4XSA9IGFbOF0gKiB6O1xuICAgIG91dFs5XSA9IGFbOV0gKiB6O1xuICAgIG91dFsxMF0gPSBhWzEwXSAqIHo7XG4gICAgb3V0WzExXSA9IGFbMTFdICogejtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0NCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBnaXZlbiBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEBwYXJhbSB7dmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQsIGF4aXMpIHtcbiAgICBsZXQgeCA9IGF4aXNbMF0sXG4gICAgICAgIHkgPSBheGlzWzFdLFxuICAgICAgICB6ID0gYXhpc1syXTtcbiAgICBsZXQgbGVuID0gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbiAgICBsZXQgcywgYywgdDtcbiAgICBsZXQgYTAwLCBhMDEsIGEwMiwgYTAzO1xuICAgIGxldCBhMTAsIGExMSwgYTEyLCBhMTM7XG4gICAgbGV0IGEyMCwgYTIxLCBhMjIsIGEyMztcbiAgICBsZXQgYjAwLCBiMDEsIGIwMjtcbiAgICBsZXQgYjEwLCBiMTEsIGIxMjtcbiAgICBsZXQgYjIwLCBiMjEsIGIyMjtcblxuICAgIGlmIChNYXRoLmFicyhsZW4pIDwgRVBTSUxPTikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHggKj0gbGVuO1xuICAgIHkgKj0gbGVuO1xuICAgIHogKj0gbGVuO1xuXG4gICAgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgYyA9IE1hdGguY29zKHJhZCk7XG4gICAgdCA9IDEgLSBjO1xuXG4gICAgYTAwID0gYVswXTtcbiAgICBhMDEgPSBhWzFdO1xuICAgIGEwMiA9IGFbMl07XG4gICAgYTAzID0gYVszXTtcbiAgICBhMTAgPSBhWzRdO1xuICAgIGExMSA9IGFbNV07XG4gICAgYTEyID0gYVs2XTtcbiAgICBhMTMgPSBhWzddO1xuICAgIGEyMCA9IGFbOF07XG4gICAgYTIxID0gYVs5XTtcbiAgICBhMjIgPSBhWzEwXTtcbiAgICBhMjMgPSBhWzExXTtcblxuICAgIC8vIENvbnN0cnVjdCB0aGUgZWxlbWVudHMgb2YgdGhlIHJvdGF0aW9uIG1hdHJpeFxuICAgIGIwMCA9IHggKiB4ICogdCArIGM7XG4gICAgYjAxID0geSAqIHggKiB0ICsgeiAqIHM7XG4gICAgYjAyID0geiAqIHggKiB0IC0geSAqIHM7XG4gICAgYjEwID0geCAqIHkgKiB0IC0geiAqIHM7XG4gICAgYjExID0geSAqIHkgKiB0ICsgYztcbiAgICBiMTIgPSB6ICogeSAqIHQgKyB4ICogcztcbiAgICBiMjAgPSB4ICogeiAqIHQgKyB5ICogcztcbiAgICBiMjEgPSB5ICogeiAqIHQgLSB4ICogcztcbiAgICBiMjIgPSB6ICogeiAqIHQgKyBjO1xuXG4gICAgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICBvdXRbMF0gPSBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDI7XG4gICAgb3V0WzFdID0gYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyO1xuICAgIG91dFsyXSA9IGEwMiAqIGIwMCArIGExMiAqIGIwMSArIGEyMiAqIGIwMjtcbiAgICBvdXRbM10gPSBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDI7XG4gICAgb3V0WzRdID0gYTAwICogYjEwICsgYTEwICogYjExICsgYTIwICogYjEyO1xuICAgIG91dFs1XSA9IGEwMSAqIGIxMCArIGExMSAqIGIxMSArIGEyMSAqIGIxMjtcbiAgICBvdXRbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XG4gICAgb3V0WzddID0gYTAzICogYjEwICsgYTEzICogYjExICsgYTIzICogYjEyO1xuICAgIG91dFs4XSA9IGEwMCAqIGIyMCArIGExMCAqIGIyMSArIGEyMCAqIGIyMjtcbiAgICBvdXRbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XG4gICAgb3V0WzEwXSA9IGEwMiAqIGIyMCArIGExMiAqIGIyMSArIGEyMiAqIGIyMjtcbiAgICBvdXRbMTFdID0gYTAzICogYjIwICsgYTEzICogYjIxICsgYTIzICogYjIyO1xuXG4gICAgaWYgKGEgIT09IG91dCkge1xuICAgICAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xuICAgICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLFxuICogIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZSB0aGUgc2FtZSBhcyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSB0cmFuc2xhdGlvbiBjb21wb25lbnRcbiAqIEBwYXJhbSAge21hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXG4gKiBAcmV0dXJuIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uKG91dCwgbWF0KSB7XG4gICAgb3V0WzBdID0gbWF0WzEyXTtcbiAgICBvdXRbMV0gPSBtYXRbMTNdO1xuICAgIG91dFsyXSA9IG1hdFsxNF07XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGVcbiAqICB3aXRoIGEgbm9ybWFsaXplZCBRdWF0ZXJuaW9uIHBhcmFtdGVyLCB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmVcbiAqICB0aGUgc2FtZSBhcyB0aGUgc2NhbGluZyB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudFxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NhbGluZyhvdXQsIG1hdCkge1xuICAgIGxldCBtMTEgPSBtYXRbMF07XG4gICAgbGV0IG0xMiA9IG1hdFsxXTtcbiAgICBsZXQgbTEzID0gbWF0WzJdO1xuICAgIGxldCBtMjEgPSBtYXRbNF07XG4gICAgbGV0IG0yMiA9IG1hdFs1XTtcbiAgICBsZXQgbTIzID0gbWF0WzZdO1xuICAgIGxldCBtMzEgPSBtYXRbOF07XG4gICAgbGV0IG0zMiA9IG1hdFs5XTtcbiAgICBsZXQgbTMzID0gbWF0WzEwXTtcblxuICAgIG91dFswXSA9IE1hdGguaHlwb3QobTExLCBtMTIsIG0xMyk7XG4gICAgb3V0WzFdID0gTWF0aC5oeXBvdChtMjEsIG0yMiwgbTIzKTtcbiAgICBvdXRbMl0gPSBNYXRoLmh5cG90KG0zMSwgbTMyLCBtMzMpO1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1heFNjYWxlT25BeGlzKG1hdCkge1xuICAgIGxldCBtMTEgPSBtYXRbMF07XG4gICAgbGV0IG0xMiA9IG1hdFsxXTtcbiAgICBsZXQgbTEzID0gbWF0WzJdO1xuICAgIGxldCBtMjEgPSBtYXRbNF07XG4gICAgbGV0IG0yMiA9IG1hdFs1XTtcbiAgICBsZXQgbTIzID0gbWF0WzZdO1xuICAgIGxldCBtMzEgPSBtYXRbOF07XG4gICAgbGV0IG0zMiA9IG1hdFs5XTtcbiAgICBsZXQgbTMzID0gbWF0WzEwXTtcblxuICAgIGNvbnN0IHggPSBtMTEgKiBtMTEgKyBtMTIgKiBtMTIgKyBtMTMgKiBtMTM7XG4gICAgY29uc3QgeSA9IG0yMSAqIG0yMSArIG0yMiAqIG0yMiArIG0yMyAqIG0yMztcbiAgICBjb25zdCB6ID0gbTMxICogbTMxICsgbTMyICogbTMyICsgbTMzICogbTMzO1xuXG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLm1heCh4LCB5LCB6KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSByb3RhdGlvbmFsIGNvbXBvbmVudFxuICogIG9mIGEgdHJhbnNmb3JtYXRpb24gbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoXG4gKiAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sIHRoZSByZXR1cm5lZCBxdWF0ZXJuaW9uIHdpbGwgYmUgdGhlXG4gKiAgc2FtZSBhcyB0aGUgcXVhdGVybmlvbiBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtIHtxdWF0fSBvdXQgUXVhdGVybmlvbiB0byByZWNlaXZlIHRoZSByb3RhdGlvbiBjb21wb25lbnRcbiAqIEBwYXJhbSB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3F1YXR9IG91dFxuICovXG5leHBvcnQgY29uc3QgZ2V0Um90YXRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHRlbXAgPSBbMCwgMCwgMF07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG91dCwgbWF0KSB7XG4gICAgICAgIGxldCBzY2FsaW5nID0gdGVtcDtcbiAgICAgICAgZ2V0U2NhbGluZyhzY2FsaW5nLCBtYXQpO1xuXG4gICAgICAgIGxldCBpczEgPSAxIC8gc2NhbGluZ1swXTtcbiAgICAgICAgbGV0IGlzMiA9IDEgLyBzY2FsaW5nWzFdO1xuICAgICAgICBsZXQgaXMzID0gMSAvIHNjYWxpbmdbMl07XG5cbiAgICAgICAgbGV0IHNtMTEgPSBtYXRbMF0gKiBpczE7XG4gICAgICAgIGxldCBzbTEyID0gbWF0WzFdICogaXMyO1xuICAgICAgICBsZXQgc20xMyA9IG1hdFsyXSAqIGlzMztcbiAgICAgICAgbGV0IHNtMjEgPSBtYXRbNF0gKiBpczE7XG4gICAgICAgIGxldCBzbTIyID0gbWF0WzVdICogaXMyO1xuICAgICAgICBsZXQgc20yMyA9IG1hdFs2XSAqIGlzMztcbiAgICAgICAgbGV0IHNtMzEgPSBtYXRbOF0gKiBpczE7XG4gICAgICAgIGxldCBzbTMyID0gbWF0WzldICogaXMyO1xuICAgICAgICBsZXQgc20zMyA9IG1hdFsxMF0gKiBpczM7XG5cbiAgICAgICAgbGV0IHRyYWNlID0gc20xMSArIHNtMjIgKyBzbTMzO1xuICAgICAgICBsZXQgUyA9IDA7XG5cbiAgICAgICAgaWYgKHRyYWNlID4gMCkge1xuICAgICAgICAgICAgUyA9IE1hdGguc3FydCh0cmFjZSArIDEuMCkgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gMC4yNSAqIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAoc20yMyAtIHNtMzIpIC8gUztcbiAgICAgICAgICAgIG91dFsxXSA9IChzbTMxIC0gc20xMykgLyBTO1xuICAgICAgICAgICAgb3V0WzJdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gICAgICAgIH0gZWxzZSBpZiAoc20xMSA+IHNtMjIgJiYgc20xMSA+IHNtMzMpIHtcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20xMSAtIHNtMjIgLSBzbTMzKSAqIDI7XG4gICAgICAgICAgICBvdXRbM10gPSAoc20yMyAtIHNtMzIpIC8gUztcbiAgICAgICAgICAgIG91dFswXSA9IDAuMjUgKiBTO1xuICAgICAgICAgICAgb3V0WzFdID0gKHNtMTIgKyBzbTIxKSAvIFM7XG4gICAgICAgICAgICBvdXRbMl0gPSAoc20zMSArIHNtMTMpIC8gUztcbiAgICAgICAgfSBlbHNlIGlmIChzbTIyID4gc20zMykge1xuICAgICAgICAgICAgUyA9IE1hdGguc3FydCgxLjAgKyBzbTIyIC0gc20xMSAtIHNtMzMpICogMjtcbiAgICAgICAgICAgIG91dFszXSA9IChzbTMxIC0gc20xMykgLyBTO1xuICAgICAgICAgICAgb3V0WzBdID0gKHNtMTIgKyBzbTIxKSAvIFM7XG4gICAgICAgICAgICBvdXRbMV0gPSAwLjI1ICogUztcbiAgICAgICAgICAgIG91dFsyXSA9IChzbTIzICsgc20zMikgLyBTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUyA9IE1hdGguc3FydCgxLjAgKyBzbTMzIC0gc20xMSAtIHNtMjIpICogMjtcbiAgICAgICAgICAgIG91dFszXSA9IChzbTEyIC0gc20yMSkgLyBTO1xuICAgICAgICAgICAgb3V0WzBdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gICAgICAgICAgICBvdXRbMV0gPSAoc20yMyArIHNtMzIpIC8gUztcbiAgICAgICAgICAgIG91dFsyXSA9IDAuMjUgKiBTO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7dmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gcyBTY2FsaW5nIHZlY3RvclxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZShvdXQsIHEsIHYsIHMpIHtcbiAgICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgICBsZXQgeCA9IHFbMF0sXG4gICAgICAgIHkgPSBxWzFdLFxuICAgICAgICB6ID0gcVsyXSxcbiAgICAgICAgdyA9IHFbM107XG4gICAgbGV0IHgyID0geCArIHg7XG4gICAgbGV0IHkyID0geSArIHk7XG4gICAgbGV0IHoyID0geiArIHo7XG5cbiAgICBsZXQgeHggPSB4ICogeDI7XG4gICAgbGV0IHh5ID0geCAqIHkyO1xuICAgIGxldCB4eiA9IHggKiB6MjtcbiAgICBsZXQgeXkgPSB5ICogeTI7XG4gICAgbGV0IHl6ID0geSAqIHoyO1xuICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICBsZXQgd3ggPSB3ICogeDI7XG4gICAgbGV0IHd5ID0gdyAqIHkyO1xuICAgIGxldCB3eiA9IHcgKiB6MjtcbiAgICBsZXQgc3ggPSBzWzBdO1xuICAgIGxldCBzeSA9IHNbMV07XG4gICAgbGV0IHN6ID0gc1syXTtcblxuICAgIG91dFswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xuICAgIG91dFsxXSA9ICh4eSArIHd6KSAqIHN4O1xuICAgIG91dFsyXSA9ICh4eiAtIHd5KSAqIHN4O1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gKHh5IC0gd3opICogc3k7XG4gICAgb3V0WzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gICAgb3V0WzZdID0gKHl6ICsgd3gpICogc3k7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAoeHogKyB3eSkgKiBzejtcbiAgICBvdXRbOV0gPSAoeXogLSB3eCkgKiBzejtcbiAgICBvdXRbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IHZbMF07XG4gICAgb3V0WzEzXSA9IHZbMV07XG4gICAgb3V0WzE0XSA9IHZbMl07XG4gICAgb3V0WzE1XSA9IDE7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSA0eDQgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgICBsZXQgeCA9IHFbMF0sXG4gICAgICAgIHkgPSBxWzFdLFxuICAgICAgICB6ID0gcVsyXSxcbiAgICAgICAgdyA9IHFbM107XG4gICAgbGV0IHgyID0geCArIHg7XG4gICAgbGV0IHkyID0geSArIHk7XG4gICAgbGV0IHoyID0geiArIHo7XG5cbiAgICBsZXQgeHggPSB4ICogeDI7XG4gICAgbGV0IHl4ID0geSAqIHgyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgenggPSB6ICogeDI7XG4gICAgbGV0IHp5ID0geiAqIHkyO1xuICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICBsZXQgd3ggPSB3ICogeDI7XG4gICAgbGV0IHd5ID0gdyAqIHkyO1xuICAgIGxldCB3eiA9IHcgKiB6MjtcblxuICAgIG91dFswXSA9IDEgLSB5eSAtIHp6O1xuICAgIG91dFsxXSA9IHl4ICsgd3o7XG4gICAgb3V0WzJdID0genggLSB3eTtcbiAgICBvdXRbM10gPSAwO1xuXG4gICAgb3V0WzRdID0geXggLSB3ejtcbiAgICBvdXRbNV0gPSAxIC0geHggLSB6ejtcbiAgICBvdXRbNl0gPSB6eSArIHd4O1xuICAgIG91dFs3XSA9IDA7XG5cbiAgICBvdXRbOF0gPSB6eCArIHd5O1xuICAgIG91dFs5XSA9IHp5IC0gd3g7XG4gICAgb3V0WzEwXSA9IDEgLSB4eCAtIHl5O1xuICAgIG91dFsxMV0gPSAwO1xuXG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gICAgb3V0WzE1XSA9IDE7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBmb3Z5IFZlcnRpY2FsIGZpZWxkIG9mIHZpZXcgaW4gcmFkaWFuc1xuICogQHBhcmFtIHtudW1iZXJ9IGFzcGVjdCBBc3BlY3QgcmF0aW8uIHR5cGljYWxseSB2aWV3cG9ydCB3aWR0aC9oZWlnaHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZShvdXQsIGZvdnksIGFzcGVjdCwgbmVhciwgZmFyKSB7XG4gICAgbGV0IGYgPSAxLjAgLyBNYXRoLnRhbihmb3Z5IC8gMik7XG4gICAgbGV0IG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gZjtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAwO1xuICAgIG91dFsxMF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgICBvdXRbMTFdID0gLTE7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDIgKiBmYXIgKiBuZWFyICogbmY7XG4gICAgb3V0WzE1XSA9IDA7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBvcnRob2dvbmFsIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gb3J0aG8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICAgIGxldCBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KTtcbiAgICBsZXQgYnQgPSAxIC8gKGJvdHRvbSAtIHRvcCk7XG4gICAgbGV0IG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgICBvdXRbMF0gPSAtMiAqIGxyO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gLTIgKiBidDtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAwO1xuICAgIG91dFsxMF0gPSAyICogbmY7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IChsZWZ0ICsgcmlnaHQpICogbHI7XG4gICAgb3V0WzEzXSA9ICh0b3AgKyBib3R0b20pICogYnQ7XG4gICAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgbWF0cml4IHRoYXQgbWFrZXMgc29tZXRoaW5nIGxvb2sgYXQgc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHt2ZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxuICogQHBhcmFtIHt2ZWMzfSB0YXJnZXQgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XG4gKiBAcGFyYW0ge3ZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhcmdldFRvKG91dCwgZXllLCB0YXJnZXQsIHVwKSB7XG4gICAgbGV0IGV5ZXggPSBleWVbMF0sXG4gICAgICAgIGV5ZXkgPSBleWVbMV0sXG4gICAgICAgIGV5ZXogPSBleWVbMl0sXG4gICAgICAgIHVweCA9IHVwWzBdLFxuICAgICAgICB1cHkgPSB1cFsxXSxcbiAgICAgICAgdXB6ID0gdXBbMl07XG5cbiAgICBsZXQgejAgPSBleWV4IC0gdGFyZ2V0WzBdLFxuICAgICAgICB6MSA9IGV5ZXkgLSB0YXJnZXRbMV0sXG4gICAgICAgIHoyID0gZXlleiAtIHRhcmdldFsyXTtcblxuICAgIGxldCBsZW4gPSB6MCAqIHowICsgejEgKiB6MSArIHoyICogejI7XG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAvLyBleWUgYW5kIHRhcmdldCBhcmUgaW4gdGhlIHNhbWUgcG9zaXRpb25cbiAgICAgICAgejIgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICAgICAgejAgKj0gbGVuO1xuICAgICAgICB6MSAqPSBsZW47XG4gICAgICAgIHoyICo9IGxlbjtcbiAgICB9XG5cbiAgICBsZXQgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxLFxuICAgICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejIsXG4gICAgICAgIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcblxuICAgIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgIC8vIHVwIGFuZCB6IGFyZSBwYXJhbGxlbFxuICAgICAgICBpZiAodXB6KSB7XG4gICAgICAgICAgICB1cHggKz0gMWUtNjtcbiAgICAgICAgfSBlbHNlIGlmICh1cHkpIHtcbiAgICAgICAgICAgIHVweiArPSAxZS02O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXB5ICs9IDFlLTY7XG4gICAgICAgIH1cbiAgICAgICAgKHgwID0gdXB5ICogejIgLSB1cHogKiB6MSksICh4MSA9IHVweiAqIHowIC0gdXB4ICogejIpLCAoeDIgPSB1cHggKiB6MSAtIHVweSAqIHowKTtcblxuICAgICAgICBsZW4gPSB4MCAqIHgwICsgeDEgKiB4MSArIHgyICogeDI7XG4gICAgfVxuXG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIHgwICo9IGxlbjtcbiAgICB4MSAqPSBsZW47XG4gICAgeDIgKj0gbGVuO1xuXG4gICAgb3V0WzBdID0geDA7XG4gICAgb3V0WzFdID0geDE7XG4gICAgb3V0WzJdID0geDI7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSB6MSAqIHgyIC0gejIgKiB4MTtcbiAgICBvdXRbNV0gPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgICBvdXRbNl0gPSB6MCAqIHgxIC0gejEgKiB4MDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IHowO1xuICAgIG91dFs5XSA9IHoxO1xuICAgIG91dFsxMF0gPSB6MjtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gZXlleDtcbiAgICBvdXRbMTNdID0gZXlleTtcbiAgICBvdXRbMTRdID0gZXllejtcbiAgICBvdXRbMTVdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIG1hdDQnc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdICsgYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdICsgYls2XTtcbiAgICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdICsgYls4XTtcbiAgICBvdXRbOV0gPSBhWzldICsgYls5XTtcbiAgICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV0gKyBiWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl0gKyBiWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF0gKyBiWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV0gKyBiWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSAtIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSAtIGJbNV07XG4gICAgb3V0WzZdID0gYVs2XSAtIGJbNl07XG4gICAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gICAgb3V0WzhdID0gYVs4XSAtIGJbOF07XG4gICAgb3V0WzldID0gYVs5XSAtIGJbOV07XG4gICAgb3V0WzEwXSA9IGFbMTBdIC0gYlsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdIC0gYlsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdIC0gYlsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdIC0gYlsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdIC0gYlsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdIC0gYlsxNV07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIG91dFszXSA9IGFbM10gKiBiO1xuICAgIG91dFs0XSA9IGFbNF0gKiBiO1xuICAgIG91dFs1XSA9IGFbNV0gKiBiO1xuICAgIG91dFs2XSA9IGFbNl0gKiBiO1xuICAgIG91dFs3XSA9IGFbN10gKiBiO1xuICAgIG91dFs4XSA9IGFbOF0gKiBiO1xuICAgIG91dFs5XSA9IGFbOV0gKiBiO1xuICAgIG91dFsxMF0gPSBhWzEwXSAqIGI7XG4gICAgb3V0WzExXSA9IGFbMTFdICogYjtcbiAgICBvdXRbMTJdID0gYVsxMl0gKiBiO1xuICAgIG91dFsxM10gPSBhWzEzXSAqIGI7XG4gICAgb3V0WzE0XSA9IGFbMTRdICogYjtcbiAgICBvdXRbMTVdID0gYVsxNV0gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG4iLCJpbXBvcnQgKiBhcyB2ZWM0IGZyb20gJy4vVmVjNEZ1bmMuanMnO1xuXG4vKipcbiAqIFNldCBhIHF1YXQgdG8gdGhlIGlkZW50aXR5IHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICAgIG91dFswXSA9IDA7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXRzIGEgcXVhdCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhbmQgcm90YXRpb24gYXhpcyxcbiAqIHRoZW4gcmV0dXJucyBpdC5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7dmVjM30gYXhpcyB0aGUgYXhpcyBhcm91bmQgd2hpY2ggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSBpbiByYWRpYW5zXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gc2V0QXhpc0FuZ2xlKG91dCwgYXhpcywgcmFkKSB7XG4gICAgcmFkID0gcmFkICogMC41O1xuICAgIGxldCBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICBvdXRbMF0gPSBzICogYXhpc1swXTtcbiAgICBvdXRbMV0gPSBzICogYXhpc1sxXTtcbiAgICBvdXRbMl0gPSBzICogYXhpc1syXTtcbiAgICBvdXRbM10gPSBNYXRoLmNvcyhyYWQpO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gcXVhdHNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl0sXG4gICAgICAgIGF3ID0gYVszXTtcbiAgICBsZXQgYnggPSBiWzBdLFxuICAgICAgICBieSA9IGJbMV0sXG4gICAgICAgIGJ6ID0gYlsyXSxcbiAgICAgICAgYncgPSBiWzNdO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieTtcbiAgICBvdXRbMV0gPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6O1xuICAgIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWCBheGlzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQpIHtcbiAgICByYWQgKj0gMC41O1xuXG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl0sXG4gICAgICAgIGF3ID0gYVszXTtcbiAgICBsZXQgYnggPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBidyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieDtcbiAgICBvdXRbMV0gPSBheSAqIGJ3ICsgYXogKiBieDtcbiAgICBvdXRbMl0gPSBheiAqIGJ3IC0gYXkgKiBieDtcbiAgICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWSBheGlzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVkob3V0LCBhLCByYWQpIHtcbiAgICByYWQgKj0gMC41O1xuXG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl0sXG4gICAgICAgIGF3ID0gYVszXTtcbiAgICBsZXQgYnkgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBidyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXRbMF0gPSBheCAqIGJ3IC0gYXogKiBieTtcbiAgICBvdXRbMV0gPSBheSAqIGJ3ICsgYXcgKiBieTtcbiAgICBvdXRbMl0gPSBheiAqIGJ3ICsgYXggKiBieTtcbiAgICBvdXRbM10gPSBhdyAqIGJ3IC0gYXkgKiBieTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWiBheGlzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcbiAgICByYWQgKj0gMC41O1xuXG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl0sXG4gICAgICAgIGF3ID0gYVszXTtcbiAgICBsZXQgYnogPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBidyA9IE1hdGguY29zKHJhZCk7XG5cbiAgICBvdXRbMF0gPSBheCAqIGJ3ICsgYXkgKiBiejtcbiAgICBvdXRbMV0gPSBheSAqIGJ3IC0gYXggKiBiejtcbiAgICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBiejtcbiAgICBvdXRbM10gPSBhdyAqIGJ3IC0gYXogKiBiejtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xlcnAob3V0LCBhLCBiLCB0KSB7XG4gICAgLy8gYmVuY2htYXJrczpcbiAgICAvLyAgICBodHRwOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXNsZXJwLWltcGxlbWVudGF0aW9uc1xuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICBieiA9IGJbMl0sXG4gICAgICAgIGJ3ID0gYlszXTtcblxuICAgIGxldCBvbWVnYSwgY29zb20sIHNpbm9tLCBzY2FsZTAsIHNjYWxlMTtcblxuICAgIC8vIGNhbGMgY29zaW5lXG4gICAgY29zb20gPSBheCAqIGJ4ICsgYXkgKiBieSArIGF6ICogYnogKyBhdyAqIGJ3O1xuICAgIC8vIGFkanVzdCBzaWducyAoaWYgbmVjZXNzYXJ5KVxuICAgIGlmIChjb3NvbSA8IDAuMCkge1xuICAgICAgICBjb3NvbSA9IC1jb3NvbTtcbiAgICAgICAgYnggPSAtYng7XG4gICAgICAgIGJ5ID0gLWJ5O1xuICAgICAgICBieiA9IC1iejtcbiAgICAgICAgYncgPSAtYnc7XG4gICAgfVxuICAgIC8vIGNhbGN1bGF0ZSBjb2VmZmljaWVudHNcbiAgICBpZiAoMS4wIC0gY29zb20gPiAwLjAwMDAwMSkge1xuICAgICAgICAvLyBzdGFuZGFyZCBjYXNlIChzbGVycClcbiAgICAgICAgb21lZ2EgPSBNYXRoLmFjb3MoY29zb20pO1xuICAgICAgICBzaW5vbSA9IE1hdGguc2luKG9tZWdhKTtcbiAgICAgICAgc2NhbGUwID0gTWF0aC5zaW4oKDEuMCAtIHQpICogb21lZ2EpIC8gc2lub207XG4gICAgICAgIHNjYWxlMSA9IE1hdGguc2luKHQgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBcImZyb21cIiBhbmQgXCJ0b1wiIHF1YXRlcm5pb25zIGFyZSB2ZXJ5IGNsb3NlXG4gICAgICAgIC8vICAuLi4gc28gd2UgY2FuIGRvIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICAgICAgc2NhbGUwID0gMS4wIC0gdDtcbiAgICAgICAgc2NhbGUxID0gdDtcbiAgICB9XG4gICAgLy8gY2FsY3VsYXRlIGZpbmFsIHZhbHVlc1xuICAgIG91dFswXSA9IHNjYWxlMCAqIGF4ICsgc2NhbGUxICogYng7XG4gICAgb3V0WzFdID0gc2NhbGUwICogYXkgKyBzY2FsZTEgKiBieTtcbiAgICBvdXRbMl0gPSBzY2FsZTAgKiBheiArIHNjYWxlMSAqIGJ6O1xuICAgIG91dFszXSA9IHNjYWxlMCAqIGF3ICsgc2NhbGUxICogYnc7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2Ugb2YgYSBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICAgIGxldCBhMCA9IGFbMF0sXG4gICAgICAgIGExID0gYVsxXSxcbiAgICAgICAgYTIgPSBhWzJdLFxuICAgICAgICBhMyA9IGFbM107XG4gICAgbGV0IGRvdCA9IGEwICogYTAgKyBhMSAqIGExICsgYTIgKiBhMiArIGEzICogYTM7XG4gICAgbGV0IGludkRvdCA9IGRvdCA/IDEuMCAvIGRvdCA6IDA7XG5cbiAgICAvLyBUT0RPOiBXb3VsZCBiZSBmYXN0ZXIgdG8gcmV0dXJuIFswLDAsMCwwXSBpbW1lZGlhdGVseSBpZiBkb3QgPT0gMFxuXG4gICAgb3V0WzBdID0gLWEwICogaW52RG90O1xuICAgIG91dFsxXSA9IC1hMSAqIGludkRvdDtcbiAgICBvdXRbMl0gPSAtYTIgKiBpbnZEb3Q7XG4gICAgb3V0WzNdID0gYTMgKiBpbnZEb3Q7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb25qdWdhdGUgb2YgYSBxdWF0XG4gKiBJZiB0aGUgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGZ1bmN0aW9uIGlzIGZhc3RlciB0aGFuIHF1YXQuaW52ZXJzZSBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGNvbmp1Z2F0ZSBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uanVnYXRlKG91dCwgYSkge1xuICAgIG91dFswXSA9IC1hWzBdO1xuICAgIG91dFsxXSA9IC1hWzFdO1xuICAgIG91dFsyXSA9IC1hWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiAzeDMgcm90YXRpb24gbWF0cml4LlxuICpcbiAqIE5PVEU6IFRoZSByZXN1bHRhbnQgcXVhdGVybmlvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28geW91IHNob3VsZCBiZSBzdXJlXG4gKiB0byByZW5vcm1hbGl6ZSB0aGUgcXVhdGVybmlvbiB5b3Vyc2VsZiB3aGVyZSBuZWNlc3NhcnkuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge21hdDN9IG0gcm90YXRpb24gbWF0cml4XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQzKG91dCwgbSkge1xuICAgIC8vIEFsZ29yaXRobSBpbiBLZW4gU2hvZW1ha2UncyBhcnRpY2xlIGluIDE5ODcgU0lHR1JBUEggY291cnNlIG5vdGVzXG4gICAgLy8gYXJ0aWNsZSBcIlF1YXRlcm5pb24gQ2FsY3VsdXMgYW5kIEZhc3QgQW5pbWF0aW9uXCIuXG4gICAgbGV0IGZUcmFjZSA9IG1bMF0gKyBtWzRdICsgbVs4XTtcbiAgICBsZXQgZlJvb3Q7XG5cbiAgICBpZiAoZlRyYWNlID4gMC4wKSB7XG4gICAgICAgIC8vIHx3fCA+IDEvMiwgbWF5IGFzIHdlbGwgY2hvb3NlIHcgPiAxLzJcbiAgICAgICAgZlJvb3QgPSBNYXRoLnNxcnQoZlRyYWNlICsgMS4wKTsgLy8gMndcbiAgICAgICAgb3V0WzNdID0gMC41ICogZlJvb3Q7XG4gICAgICAgIGZSb290ID0gMC41IC8gZlJvb3Q7IC8vIDEvKDR3KVxuICAgICAgICBvdXRbMF0gPSAobVs1XSAtIG1bN10pICogZlJvb3Q7XG4gICAgICAgIG91dFsxXSA9IChtWzZdIC0gbVsyXSkgKiBmUm9vdDtcbiAgICAgICAgb3V0WzJdID0gKG1bMV0gLSBtWzNdKSAqIGZSb290O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHx3fCA8PSAxLzJcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBpZiAobVs0XSA+IG1bMF0pIGkgPSAxO1xuICAgICAgICBpZiAobVs4XSA+IG1baSAqIDMgKyBpXSkgaSA9IDI7XG4gICAgICAgIGxldCBqID0gKGkgKyAxKSAlIDM7XG4gICAgICAgIGxldCBrID0gKGkgKyAyKSAlIDM7XG5cbiAgICAgICAgZlJvb3QgPSBNYXRoLnNxcnQobVtpICogMyArIGldIC0gbVtqICogMyArIGpdIC0gbVtrICogMyArIGtdICsgMS4wKTtcbiAgICAgICAgb3V0W2ldID0gMC41ICogZlJvb3Q7XG4gICAgICAgIGZSb290ID0gMC41IC8gZlJvb3Q7XG4gICAgICAgIG91dFszXSA9IChtW2ogKiAzICsga10gLSBtW2sgKiAzICsgal0pICogZlJvb3Q7XG4gICAgICAgIG91dFtqXSA9IChtW2ogKiAzICsgaV0gKyBtW2kgKiAzICsgal0pICogZlJvb3Q7XG4gICAgICAgIG91dFtrXSA9IChtW2sgKiAzICsgaV0gKyBtW2kgKiAzICsga10pICogZlJvb3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBldWxlciBhbmdsZSB4LCB5LCB6LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSBldWxlciBBbmdsZXMgdG8gcm90YXRlIGFyb3VuZCBlYWNoIGF4aXMgaW4gZGVncmVlcy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBvcmRlciBkZXRhaWxpbmcgb3JkZXIgb2Ygb3BlcmF0aW9ucy4gRGVmYXVsdCAnWFlaJy5cbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUV1bGVyKG91dCwgZXVsZXIsIG9yZGVyID0gJ1lYWicpIHtcbiAgICBsZXQgc3ggPSBNYXRoLnNpbihldWxlclswXSAqIDAuNSk7XG4gICAgbGV0IGN4ID0gTWF0aC5jb3MoZXVsZXJbMF0gKiAwLjUpO1xuICAgIGxldCBzeSA9IE1hdGguc2luKGV1bGVyWzFdICogMC41KTtcbiAgICBsZXQgY3kgPSBNYXRoLmNvcyhldWxlclsxXSAqIDAuNSk7XG4gICAgbGV0IHN6ID0gTWF0aC5zaW4oZXVsZXJbMl0gKiAwLjUpO1xuICAgIGxldCBjeiA9IE1hdGguY29zKGV1bGVyWzJdICogMC41KTtcblxuICAgIGlmIChvcmRlciA9PT0gJ1hZWicpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6ICsgY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogLSBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiArIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6IC0gc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdZWFonKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiArIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6IC0gc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogLSBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWlhZJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogLSBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6ICsgc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogLSBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pZWCcpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiAtIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdZWlgnKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiArIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogLSBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiAtIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWFpZJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogLSBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiAtIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6ICsgc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgcXVhdCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIHNvdXJjZSBxdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGNvcHkgPSB2ZWM0LmNvcHk7XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgcXVhdCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzZXQgPSB2ZWM0LnNldDtcblxuLyoqXG4gKiBBZGRzIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBhZGQgPSB2ZWM0LmFkZDtcblxuLyoqXG4gKiBTY2FsZXMgYSBxdWF0IGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgc2NhbGUgPSB2ZWM0LnNjYWxlO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZG90ID0gdmVjNC5kb3Q7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBsZXJwID0gdmVjNC5sZXJwO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cbmV4cG9ydCBjb25zdCBsZW5ndGggPSB2ZWM0Lmxlbmd0aDtcblxuLyoqXG4gKiBOb3JtYWxpemUgYSBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdGVybmlvbiB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplID0gdmVjNC5ub3JtYWxpemU7XG4iLCJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xufVxuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMzIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBzb3VyY2UgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMyB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIHgsIHksIHopIHtcbiAgICBvdXRbMF0gPSB4O1xuICAgIG91dFsxXSA9IHk7XG4gICAgb3V0WzJdID0gejtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICogYlsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyBhIHZlYzMgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgICBsZXQgeCA9IGJbMF0gLSBhWzBdO1xuICAgIGxldCB5ID0gYlsxXSAtIGFbMV07XG4gICAgbGV0IHogPSBiWzJdIC0gYVsyXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgICBsZXQgeCA9IGJbMF0gLSBhWzBdO1xuICAgIGxldCB5ID0gYlsxXSAtIGFbMV07XG4gICAgbGV0IHogPSBiWzJdIC0gYVsyXTtcbiAgICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xufVxuXG4vKipcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gbmVnYXRlXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gLWFbMF07XG4gICAgb3V0WzFdID0gLWFbMV07XG4gICAgb3V0WzJdID0gLWFbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGludmVydFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICAgIG91dFsxXSA9IDEuMCAvIGFbMV07XG4gICAgb3V0WzJdID0gMS4wIC8gYVsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB9XG4gICAgb3V0WzBdID0gYVswXSAqIGxlbjtcbiAgICBvdXRbMV0gPSBhWzFdICogbGVuO1xuICAgIG91dFsyXSA9IGFbMl0gKiBsZW47XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzKG91dCwgYSwgYikge1xuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdO1xuICAgIGxldCBieCA9IGJbMF0sXG4gICAgICAgIGJ5ID0gYlsxXSxcbiAgICAgICAgYnogPSBiWzJdO1xuXG4gICAgb3V0WzBdID0gYXkgKiBieiAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXggKiBieSAtIGF5ICogYng7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gICAgbGV0IGF4ID0gYVswXTtcbiAgICBsZXQgYXkgPSBhWzFdO1xuICAgIGxldCBheiA9IGFbMl07XG4gICAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gICAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gICAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQ0LlxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICAgIHcgPSB3IHx8IDEuMDtcbiAgICBvdXRbMF0gPSAobVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6ICsgbVsxMl0pIC8gdztcbiAgICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pIC8gdztcbiAgICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTYW1lIGFzIGFib3ZlIGJ1dCBkb2Vzbid0IGFwcGx5IHRyYW5zbGF0aW9uLlxuICogVXNlZnVsIGZvciByYXlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVSb3RhdGVNYXQ0KG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICAgIHcgPSB3IHx8IDEuMDtcbiAgICBvdXRbMF0gPSAobVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6KSAvIHc7XG4gICAgb3V0WzFdID0gKG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzldICogeikgLyB3O1xuICAgIG91dFsyXSA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6KSAvIHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQzLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0M30gbSB0aGUgM3gzIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MyhvdXQsIGEsIG0pIHtcbiAgICBsZXQgeCA9IGFbMF0sXG4gICAgICAgIHkgPSBhWzFdLFxuICAgICAgICB6ID0gYVsyXTtcbiAgICBvdXRbMF0gPSB4ICogbVswXSArIHkgKiBtWzNdICsgeiAqIG1bNl07XG4gICAgb3V0WzFdID0geCAqIG1bMV0gKyB5ICogbVs0XSArIHogKiBtWzddO1xuICAgIG91dFsyXSA9IHggKiBtWzJdICsgeSAqIG1bNV0gKyB6ICogbVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgICAvLyBiZW5jaG1hcmtzOiBodHRwczovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tdmVjMy1pbXBsZW1lbnRhdGlvbnMtZml4ZWRcblxuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCBxeCA9IHFbMF0sXG4gICAgICAgIHF5ID0gcVsxXSxcbiAgICAgICAgcXogPSBxWzJdLFxuICAgICAgICBxdyA9IHFbM107XG5cbiAgICBsZXQgdXZ4ID0gcXkgKiB6IC0gcXogKiB5O1xuICAgIGxldCB1dnkgPSBxeiAqIHggLSBxeCAqIHo7XG4gICAgbGV0IHV2eiA9IHF4ICogeSAtIHF5ICogeDtcblxuICAgIGxldCB1dXZ4ID0gcXkgKiB1dnogLSBxeiAqIHV2eTtcbiAgICBsZXQgdXV2eSA9IHF6ICogdXZ4IC0gcXggKiB1dno7XG4gICAgbGV0IHV1dnogPSBxeCAqIHV2eSAtIHF5ICogdXZ4O1xuXG4gICAgbGV0IHcyID0gcXcgKiAyO1xuICAgIHV2eCAqPSB3MjtcbiAgICB1dnkgKj0gdzI7XG4gICAgdXZ6ICo9IHcyO1xuXG4gICAgdXV2eCAqPSAyO1xuICAgIHV1dnkgKj0gMjtcbiAgICB1dXZ6ICo9IDI7XG5cbiAgICBvdXRbMF0gPSB4ICsgdXZ4ICsgdXV2eDtcbiAgICBvdXRbMV0gPSB5ICsgdXZ5ICsgdXV2eTtcbiAgICBvdXRbMl0gPSB6ICsgdXZ6ICsgdXV2ejtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gM0QgdmVjdG9yc1xuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xuICovXG5leHBvcnQgY29uc3QgYW5nbGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHRlbXBBID0gWzAsIDAsIDBdO1xuICAgIGNvbnN0IHRlbXBCID0gWzAsIDAsIDBdO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGNvcHkodGVtcEEsIGEpO1xuICAgICAgICBjb3B5KHRlbXBCLCBiKTtcblxuICAgICAgICBub3JtYWxpemUodGVtcEEsIHRlbXBBKTtcbiAgICAgICAgbm9ybWFsaXplKHRlbXBCLCB0ZW1wQik7XG5cbiAgICAgICAgbGV0IGNvc2luZSA9IGRvdCh0ZW1wQSwgdGVtcEIpO1xuXG4gICAgICAgIGlmIChjb3NpbmUgPiAxLjApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2UgaWYgKGNvc2luZSA8IC0xLjApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLlBJO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWNvcyhjb3NpbmUpO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl07XG59XG4iLCJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIG91dFszXSA9IHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgYSB2ZWM0IGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIG91dFszXSA9IGFbM10gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBhWzNdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB9XG4gICAgb3V0WzBdID0geCAqIGxlbjtcbiAgICBvdXRbMV0gPSB5ICogbGVuO1xuICAgIG91dFsyXSA9IHogKiBsZW47XG4gICAgb3V0WzNdID0gdyAqIGxlbjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICBsZXQgYXggPSBhWzBdO1xuICAgIGxldCBheSA9IGFbMV07XG4gICAgbGV0IGF6ID0gYVsyXTtcbiAgICBsZXQgYXcgPSBhWzNdO1xuICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICAgIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICAgIG91dFszXSA9IGF3ICsgdCAqIChiWzNdIC0gYXcpO1xuICAgIHJldHVybiBvdXQ7XG59XG4iLCIvLyBjaGVjayBkb2N1bWVudCBmaXJzdCBzbyBpdCBkb2Vzbid0IGVycm9yIGluIG5vZGUuanNcbnZhciBzdHlsZSA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZVxuICA6IHt9XG5cbnZhciBwcmVmaXhlcyA9IFsnTycsICdtcycsICdNb3onLCAnV2Via2l0J11cbnZhciB1cHBlciA9IC8oW0EtWl0pL2dcbnZhciBtZW1vID0ge31cblxuLyoqXG4gKiBwcmVmaXggYGtleWBcbiAqXG4gKiAgIHByZWZpeCgndHJhbnNmb3JtJykgLy8gPT4gV2Via2l0VHJhbnNmb3JtXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJlZml4KGtleSl7XG4gIC8vIENhbWVsIGNhc2VcbiAga2V5ID0ga2V5LnJlcGxhY2UoLy0oW2Etel0pL2csIGZ1bmN0aW9uKF8sIGNoYXIpe1xuICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKClcbiAgfSlcblxuICAvLyBXaXRob3V0IHByZWZpeFxuICBpZiAoc3R5bGVba2V5XSAhPT0gdW5kZWZpbmVkKSByZXR1cm4ga2V5XG5cbiAgLy8gV2l0aCBwcmVmaXhcbiAgdmFyIEtleSA9IGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKVxuICB2YXIgaSA9IHByZWZpeGVzLmxlbmd0aFxuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIG5hbWUgPSBwcmVmaXhlc1tpXSArIEtleVxuICAgIGlmIChzdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbmFtZVxuICB9XG5cbiAgcmV0dXJuIGtleVxufVxuXG4vKipcbiAqIE1lbW9pemVkIHZlcnNpb24gb2YgYHByZWZpeGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBwcmVmaXhNZW1vemllZChrZXkpe1xuICByZXR1cm4ga2V5IGluIG1lbW9cbiAgICA/IG1lbW9ba2V5XVxuICAgIDogbWVtb1trZXldID0gcHJlZml4KGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkYXNoZWQgcHJlZml4XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJlZml4RGFzaGVkKGtleSl7XG4gIGtleSA9IHByZWZpeChrZXkpXG4gIGlmICh1cHBlci50ZXN0KGtleSkpIHtcbiAgICBrZXkgPSAnLScgKyBrZXkucmVwbGFjZSh1cHBlciwgJy0kMScpXG4gICAgdXBwZXIubGFzdEluZGV4ID0gMFxuICB9XG4gIHJldHVybiBrZXkudG9Mb3dlckNhc2UoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByZWZpeE1lbW96aWVkXG5tb2R1bGUuZXhwb3J0cy5kYXNoID0gcHJlZml4RGFzaGVkXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5UHJpbWl0aXZlID0gZnVuY3Rpb24odikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrXS5tYXAoZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjMuMiBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgYmFzZU1pbnVzVDtcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHM6IGxldCBgYmFzaWNgIGJlIHRoZSBudW1iZXIgb2YgaW5wdXQgY29kZVxuXHRcdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdFx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0XHRiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdFx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdFx0YmFzaWMgPSAwO1xuXHRcdH1cblxuXHRcdGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdFx0ZXJyb3IoJ25vdC1iYXNpYycpO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHRcdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0XHRmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0XHRmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cblx0XHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcblx0XHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdFx0Ly8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcblx0XHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0XHRpICU9IG91dDtcblxuXHRcdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuXHRcdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuXHQgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcblx0XHR2YXIgbixcblx0XHQgICAgZGVsdGEsXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50LFxuXHRcdCAgICBiYXNpY0xlbmd0aCxcblx0XHQgICAgYmlhcyxcblx0XHQgICAgaixcblx0XHQgICAgbSxcblx0XHQgICAgcSxcblx0XHQgICAgayxcblx0XHQgICAgdCxcblx0XHQgICAgY3VycmVudFZhbHVlLFxuXHRcdCAgICBvdXRwdXQgPSBbXSxcblx0XHQgICAgLyoqIGBpbnB1dExlbmd0aGAgd2lsbCBob2xkIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgaW4gYGlucHV0YC4gKi9cblx0XHQgICAgaW5wdXRMZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsXG5cdFx0ICAgIGJhc2VNaW51c1QsXG5cdFx0ICAgIHFNaW51c1Q7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG5cdFx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHRcdC8vIENhY2hlIHRoZSBsZW5ndGhcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlXG5cdFx0biA9IGluaXRpYWxOO1xuXHRcdGRlbHRhID0gMDtcblx0XHRiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG5cdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG5cdFx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdFx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdFx0Ly8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG5cdFx0aWYgKGJhc2ljTGVuZ3RoKSB7XG5cdFx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcblx0XHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0XHQvLyBsYXJnZXIgb25lOlxuXHRcdFx0Zm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuXHRcdFx0aGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG5cdFx0XHRuID0gbTtcblxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXJcblx0XHRcdFx0XHRmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKFxuXHRcdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdFx0YmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcblx0XHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdFx0KytoYW5kbGVkQ1BDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQrK2RlbHRhO1xuXHRcdFx0KytuO1xuXG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuXHQgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG5cdCAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuXHQgKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcblx0ICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG5cdCAqIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcblx0ICogVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3Jcblx0ICogZW1haWwgYWRkcmVzcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS4zLjInLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKi9cblx0XHQndWNzMic6IHtcblx0XHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0XHR9LFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VuY29kZSc6IGVuY29kZSxcblx0XHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdFx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxuXHR9O1xuXG5cdC8qKiBFeHBvc2UgYHB1bnljb2RlYCAqL1xuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZSgncHVueWNvZGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBwdW55Y29kZTtcblx0XHR9KTtcblx0fSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXSxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICAgIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICAgIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICAgIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vdXRpbHMvbG9nLmpzXCI7XG5cbnZhciBXZWJTb2NrZXRDbGllbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBXZWJTb2NrZXRDbGllbnQodXJsKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYlNvY2tldENsaWVudCk7XG5cbiAgICB0aGlzLmNsaWVudCA9IG5ldyBXZWJTb2NrZXQodXJsKTtcblxuICAgIHRoaXMuY2xpZW50Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGxvZy5lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhXZWJTb2NrZXRDbGllbnQsIFt7XG4gICAga2V5OiBcIm9uT3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9wZW4oZikge1xuICAgICAgdGhpcy5jbGllbnQub25vcGVuID0gZjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25DbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9uY2xvc2UgPSBmO1xuICAgIH0gLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuXG4gIH0sIHtcbiAgICBrZXk6IFwib25NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZShmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmKGUuZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBXZWJTb2NrZXRDbGllbnQ7XG59KCk7XG5cbmV4cG9ydCB7IFdlYlNvY2tldENsaWVudCBhcyBkZWZhdWx0IH07IiwiLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSwgX193ZWJwYWNrX2hhc2hfXyAqL1xuaW1wb3J0IHdlYnBhY2tIb3RMb2cgZnJvbSBcIndlYnBhY2svaG90L2xvZy5qc1wiO1xuaW1wb3J0IHN0cmlwQW5zaSBmcm9tIFwiLi9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanNcIjtcbmltcG9ydCBwYXJzZVVSTCBmcm9tIFwiLi91dGlscy9wYXJzZVVSTC5qc1wiO1xuaW1wb3J0IHNvY2tldCBmcm9tIFwiLi9zb2NrZXQuanNcIjtcbmltcG9ydCB7IHNob3csIGhpZGUgfSBmcm9tIFwiLi9vdmVybGF5LmpzXCI7XG5pbXBvcnQgeyBsb2csIHNldExvZ0xldmVsIH0gZnJvbSBcIi4vdXRpbHMvbG9nLmpzXCI7XG5pbXBvcnQgc2VuZE1lc3NhZ2UgZnJvbSBcIi4vdXRpbHMvc2VuZE1lc3NhZ2UuanNcIjtcbmltcG9ydCByZWxvYWRBcHAgZnJvbSBcIi4vdXRpbHMvcmVsb2FkQXBwLmpzXCI7XG5pbXBvcnQgY3JlYXRlU29ja2V0VVJMIGZyb20gXCIuL3V0aWxzL2NyZWF0ZVNvY2tldFVSTC5qc1wiO1xudmFyIHN0YXR1cyA9IHtcbiAgaXNVbmxvYWRpbmc6IGZhbHNlLFxuICAvLyBUT0RPIFdvcmthcm91bmQgZm9yIHdlYnBhY2sgdjQsIGBfX3dlYnBhY2tfaGFzaF9fYCBpcyBub3QgcmVwbGFjZWQgd2l0aG91dCBIb3RNb2R1bGVSZXBsYWNlbWVudFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gIGN1cnJlbnRIYXNoOiB0eXBlb2YgX193ZWJwYWNrX2hhc2hfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19oYXNoX18gOiBcIlwiXG59OyAvLyBjb25zb2xlLmxvZyhfX3dlYnBhY2tfaGFzaF9fKTtcblxudmFyIG9wdGlvbnMgPSB7XG4gIGhvdDogZmFsc2UsXG4gIGxpdmVSZWxvYWQ6IGZhbHNlLFxuICBwcm9ncmVzczogZmFsc2UsXG4gIG92ZXJsYXk6IGZhbHNlXG59O1xudmFyIHBhcnNlZFJlc291cmNlUXVlcnkgPSBwYXJzZVVSTChfX3Jlc291cmNlUXVlcnkpO1xuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5ob3QgPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgbG9nLmluZm8oXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQuXCIpO1xufVxuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeVtcImxpdmUtcmVsb2FkXCJdID09PSBcInRydWVcIikge1xuICBvcHRpb25zLmxpdmVSZWxvYWQgPSB0cnVlO1xuICBsb2cuaW5mbyhcIkxpdmUgUmVsb2FkaW5nIGVuYWJsZWQuXCIpO1xufVxuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5sb2dnaW5nKSB7XG4gIG9wdGlvbnMubG9nZ2luZyA9IHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZztcbn1cblxuZnVuY3Rpb24gc2V0QWxsTG9nTGV2ZWwobGV2ZWwpIHtcbiAgLy8gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgSE1SIGxvZ2dlciBvcGVyYXRlIHNlcGFyYXRlbHkgZnJvbSBkZXYgc2VydmVyIGxvZ2dlclxuICB3ZWJwYWNrSG90TG9nLnNldExvZ0xldmVsKGxldmVsID09PSBcInZlcmJvc2VcIiB8fCBsZXZlbCA9PT0gXCJsb2dcIiA/IFwiaW5mb1wiIDogbGV2ZWwpO1xuICBzZXRMb2dMZXZlbChsZXZlbCk7XG59XG5cbmlmIChvcHRpb25zLmxvZ2dpbmcpIHtcbiAgc2V0QWxsTG9nTGV2ZWwob3B0aW9ucy5sb2dnaW5nKTtcbn1cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgc3RhdHVzLmlzVW5sb2FkaW5nID0gdHJ1ZTtcbn0pO1xudmFyIG9uU29ja2V0TWVzc2FnZSA9IHtcbiAgaG90OiBmdW5jdGlvbiBob3QoKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkuaG90ID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zLmhvdCA9IHRydWU7XG4gICAgbG9nLmluZm8oXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQuXCIpO1xuICB9LFxuICBsaXZlUmVsb2FkOiBmdW5jdGlvbiBsaXZlUmVsb2FkKCkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5W1wibGl2ZS1yZWxvYWRcIl0gPT09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gICAgbG9nLmluZm8oXCJMaXZlIFJlbG9hZGluZyBlbmFibGVkLlwiKTtcbiAgfSxcbiAgaW52YWxpZDogZnVuY3Rpb24gaW52YWxpZCgpIHtcbiAgICBsb2cuaW5mbyhcIkFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLlwiKTsgLy8gRml4ZXMgIzEwNDIuIG92ZXJsYXkgZG9lc24ndCBjbGVhciBpZiBlcnJvcnMgYXJlIGZpeGVkIGJ1dCB3YXJuaW5ncyByZW1haW4uXG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJJbnZhbGlkXCIpO1xuICB9LFxuICBoYXNoOiBmdW5jdGlvbiBoYXNoKF9oYXNoKSB7XG4gICAgc3RhdHVzLnByZXZpb3VzSGFzaCA9IHN0YXR1cy5jdXJyZW50SGFzaDtcbiAgICBzdGF0dXMuY3VycmVudEhhc2ggPSBfaGFzaDtcbiAgfSxcbiAgbG9nZ2luZzogc2V0QWxsTG9nTGV2ZWwsXG4gIG92ZXJsYXk6IGZ1bmN0aW9uIG92ZXJsYXkodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucy5vdmVybGF5ID0gdmFsdWU7XG4gIH0sXG4gIHByb2dyZXNzOiBmdW5jdGlvbiBwcm9ncmVzcyhfcHJvZ3Jlc3MpIHtcbiAgICBvcHRpb25zLnByb2dyZXNzID0gX3Byb2dyZXNzO1xuICB9LFxuICBcInByb2dyZXNzLXVwZGF0ZVwiOiBmdW5jdGlvbiBwcm9ncmVzc1VwZGF0ZShkYXRhKSB7XG4gICAgaWYgKG9wdGlvbnMucHJvZ3Jlc3MpIHtcbiAgICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSA/IFwiW1wiLmNvbmNhdChkYXRhLnBsdWdpbk5hbWUsIFwiXSBcIikgOiBcIlwiKS5jb25jYXQoZGF0YS5wZXJjZW50LCBcIiUgLSBcIikuY29uY2F0KGRhdGEubXNnLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKFwiUHJvZ3Jlc3NcIiwgZGF0YSk7XG4gIH0sXG4gIFwic3RpbGwtb2tcIjogZnVuY3Rpb24gc3RpbGxPaygpIHtcbiAgICBsb2cuaW5mbyhcIk5vdGhpbmcgY2hhbmdlZC5cIik7XG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJTdGlsbE9rXCIpO1xuICB9LFxuICBvazogZnVuY3Rpb24gb2soKSB7XG4gICAgc2VuZE1lc3NhZ2UoXCJPa1wiKTtcblxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG5cbiAgICByZWxvYWRBcHAob3B0aW9ucywgc3RhdHVzKTtcbiAgfSxcbiAgLy8gVE9ETzogcmVtb3ZlIGluIHY1IGluIGZhdm9yIG9mICdzdGF0aWMtY2hhbmdlZCdcbiAgXCJjb250ZW50LWNoYW5nZWRcIjogZnVuY3Rpb24gY29udGVudENoYW5nZWQoZmlsZSkge1xuICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGZpbGUgPyBcIlxcXCJcIi5jb25jYXQoZmlsZSwgXCJcXFwiXCIpIDogXCJDb250ZW50XCIsIFwiIGZyb20gc3RhdGljIGRpcmVjdG9yeSB3YXMgY2hhbmdlZC4gUmVsb2FkaW5nLi4uXCIpKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuICBcInN0YXRpYy1jaGFuZ2VkXCI6IGZ1bmN0aW9uIHN0YXRpY0NoYW5nZWQoZmlsZSkge1xuICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGZpbGUgPyBcIlxcXCJcIi5jb25jYXQoZmlsZSwgXCJcXFwiXCIpIDogXCJDb250ZW50XCIsIFwiIGZyb20gc3RhdGljIGRpcmVjdG9yeSB3YXMgY2hhbmdlZC4gUmVsb2FkaW5nLi4uXCIpKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuICB3YXJuaW5nczogZnVuY3Rpb24gd2FybmluZ3MoX3dhcm5pbmdzKSB7XG4gICAgbG9nLndhcm4oXCJXYXJuaW5ncyB3aGlsZSBjb21waWxpbmcuXCIpO1xuXG4gICAgdmFyIHN0cmlwcGVkV2FybmluZ3MgPSBfd2FybmluZ3MubWFwKGZ1bmN0aW9uICh3YXJuaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaXBBbnNpKHdhcm5pbmcubWVzc2FnZSA/IHdhcm5pbmcubWVzc2FnZSA6IHdhcm5pbmcpO1xuICAgIH0pO1xuXG4gICAgc2VuZE1lc3NhZ2UoXCJXYXJuaW5nc1wiLCBzdHJpcHBlZFdhcm5pbmdzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaXBwZWRXYXJuaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9nLndhcm4oc3RyaXBwZWRXYXJuaW5nc1tpXSk7XG4gICAgfVxuXG4gICAgdmFyIG5lZWRTaG93T3ZlcmxheUZvcldhcm5pbmdzID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5Lndhcm5pbmdzO1xuXG4gICAgaWYgKG5lZWRTaG93T3ZlcmxheUZvcldhcm5pbmdzKSB7XG4gICAgICBzaG93KF93YXJuaW5ncywgXCJ3YXJuaW5nc1wiKTtcbiAgICB9XG5cbiAgICByZWxvYWRBcHAob3B0aW9ucywgc3RhdHVzKTtcbiAgfSxcbiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykge1xuICAgIGxvZy5lcnJvcihcIkVycm9ycyB3aGlsZSBjb21waWxpbmcuIFJlbG9hZCBwcmV2ZW50ZWQuXCIpO1xuXG4gICAgdmFyIHN0cmlwcGVkRXJyb3JzID0gX2Vycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gc3RyaXBBbnNpKGVycm9yLm1lc3NhZ2UgPyBlcnJvci5tZXNzYWdlIDogZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgc2VuZE1lc3NhZ2UoXCJFcnJvcnNcIiwgc3RyaXBwZWRFcnJvcnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpcHBlZEVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9nLmVycm9yKHN0cmlwcGVkRXJyb3JzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZFNob3dPdmVybGF5Rm9yRXJyb3JzID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5LmVycm9ycztcblxuICAgIGlmIChuZWVkU2hvd092ZXJsYXlGb3JFcnJvcnMpIHtcbiAgICAgIHNob3coX2Vycm9ycywgXCJlcnJvcnNcIik7XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgbG9nLmVycm9yKF9lcnJvcik7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBsb2cuaW5mbyhcIkRpc2Nvbm5lY3RlZCFcIik7XG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJDbG9zZVwiKTtcbiAgfVxufTtcbnZhciBzb2NrZXRVUkwgPSBjcmVhdGVTb2NrZXRVUkwocGFyc2VkUmVzb3VyY2VRdWVyeSk7XG5zb2NrZXQoc29ja2V0VVJMLCBvblNvY2tldE1lc3NhZ2UpOyIsIi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5cbi8qKlxuICogQ2xpZW50IHN0dWIgZm9yIHRhcGFibGUgU3luY0JhaWxIb29rXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGllbnRUYXBhYmxlU3luY0JhaWxIb29rKCkge1xuICByZXR1cm4ge1xuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7fVxuICB9O1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbnZhciBMb2dUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVycm9yOiBcImVycm9yXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIHdhcm46IFwid2FyblwiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBpbmZvOiBcImluZm9cIixcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgbG9nOiBcImxvZ1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBkZWJ1ZzogXCJkZWJ1Z1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICB0cmFjZTogXCJ0cmFjZVwiLFxuICAvLyBubyBhcmd1bWVudHNcbiAgZ3JvdXA6IFwiZ3JvdXBcIixcbiAgLy8gW2xhYmVsXVxuICBncm91cENvbGxhcHNlZDogXCJncm91cENvbGxhcHNlZFwiLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwRW5kOiBcImdyb3VwRW5kXCIsXG4gIC8vIFtsYWJlbF1cbiAgcHJvZmlsZTogXCJwcm9maWxlXCIsXG4gIC8vIFtwcm9maWxlTmFtZV1cbiAgcHJvZmlsZUVuZDogXCJwcm9maWxlRW5kXCIsXG4gIC8vIFtwcm9maWxlTmFtZV1cbiAgdGltZTogXCJ0aW1lXCIsXG4gIC8vIG5hbWUsIHRpbWUgYXMgW3NlY29uZHMsIG5hbm9zZWNvbmRzXVxuICBjbGVhcjogXCJjbGVhclwiLFxuICAvLyBubyBhcmd1bWVudHNcbiAgc3RhdHVzOiBcInN0YXR1c1wiIC8vIG1lc3NhZ2UsIGFyZ3VtZW50c1xuXG59KTtcbmV4cG9ydHMuTG9nVHlwZSA9IExvZ1R5cGU7XG4vKiogQHR5cGVkZWYge3R5cGVvZiBMb2dUeXBlW2tleW9mIHR5cGVvZiBMb2dUeXBlXX0gTG9nVHlwZUVudW0gKi9cblxudmFyIExPR19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIHJhdyBsb2cgbWV0aG9kXCIpO1xudmFyIFRJTUVSU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIHRpbWVzXCIpO1xudmFyIFRJTUVSU19BR0dSRUdBVEVTX1NZTUJPTCA9ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKFwid2VicGFjayBsb2dnZXIgYWdncmVnYXRlZCB0aW1lc1wiKTtcblxudmFyIFdlYnBhY2tMb2dnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbihMb2dUeXBlRW51bSwgYW55W109KTogdm9pZH0gbG9nIGxvZyBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyB8IGZ1bmN0aW9uKCk6IHN0cmluZyk6IFdlYnBhY2tMb2dnZXJ9IGdldENoaWxkTG9nZ2VyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBjaGlsZCBsb2dnZXJcbiAgICovXG4gIGZ1bmN0aW9uIFdlYnBhY2tMb2dnZXIobG9nLCBnZXRDaGlsZExvZ2dlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJwYWNrTG9nZ2VyKTtcblxuICAgIHRoaXNbTE9HX1NZTUJPTF0gPSBsb2c7XG4gICAgdGhpcy5nZXRDaGlsZExvZ2dlciA9IGdldENoaWxkTG9nZ2VyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFdlYnBhY2tMb2dnZXIsIFt7XG4gICAga2V5OiBcImVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5lcnJvciwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIndhcm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd2FybigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS53YXJuLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmZvKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmluZm8sIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmxvZywgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlYnVnXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmRlYnVnLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXNzZXJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2VydChhc3NlcnRpb24pIHtcbiAgICAgIGlmICghYXNzZXJ0aW9uKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiA+IDEgPyBfbGVuNiAtIDEgOiAwKSwgX2tleTYgPSAxOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5NiAtIDFdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5lcnJvciwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRyYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYWNlKCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRyYWNlLCBbXCJUcmFjZVwiXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmNsZWFyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhdHVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXR1cygpIHtcbiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5zdGF0dXMsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJncm91cFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOCksIF9rZXk4ID0gMDsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgICAgICBhcmdzW19rZXk4XSA9IGFyZ3VtZW50c1tfa2V5OF07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwQ29sbGFwc2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwQ29sbGFwc2VkKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW45KSwgX2tleTkgPSAwOyBfa2V5OSA8IF9sZW45OyBfa2V5OSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTldID0gYXJndW1lbnRzW19rZXk5XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwQ29sbGFwc2VkLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBFbmQoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMTAgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4xMCksIF9rZXkxMCA9IDA7IF9rZXkxMCA8IF9sZW4xMDsgX2tleTEwKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MTBdID0gYXJndW1lbnRzW19rZXkxMF07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cEVuZCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInByb2ZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZmlsZShsYWJlbCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnByb2ZpbGUsIFtsYWJlbF0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGVFbmQobGFiZWwpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5wcm9maWxlRW5kLCBbbGFiZWxdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lKGxhYmVsKSB7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfU1lNQk9MXSB8fCBuZXcgTWFwKCk7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLnNldChsYWJlbCwgcHJvY2Vzcy5ocnRpbWUoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVMb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUxvZyhsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVMb2coKVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUVuZChsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVFbmQoKVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLmRlbGV0ZShsYWJlbCk7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVBZ2dyZWdhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUFnZ3JlZ2F0ZShsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVBZ2dyZWdhdGUoKVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLmRlbGV0ZShsYWJlbCk7XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gfHwgbmV3IE1hcCgpO1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodGltZVsxXSArIGN1cnJlbnRbMV0gPiAxZTkpIHtcbiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF0gKyAxO1xuICAgICAgICAgIHRpbWVbMV0gPSB0aW1lWzFdIC0gMWU5ICsgY3VycmVudFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF07XG4gICAgICAgICAgdGltZVsxXSArPSBjdXJyZW50WzFdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5zZXQobGFiZWwsIHRpbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lQWdncmVnYXRlRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGVFbmQobGFiZWwpIHtcbiAgICAgIGlmICh0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgdmFyIHRpbWUgPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcbiAgICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2VicGFja0xvZ2dlcjtcbn0oKTtcblxuZXhwb3J0cy5Mb2dnZXIgPSBXZWJwYWNrTG9nZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCIpLFxuICAgIExvZ1R5cGUgPSBfcmVxdWlyZS5Mb2dUeXBlO1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVySXRlbVR5cGVzfSBGaWx0ZXJJdGVtVHlwZXMgKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVyVHlwZXN9IEZpbHRlclR5cGVzICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi9Mb2dnZXJcIikuTG9nVHlwZUVudW19IExvZ1R5cGVFbnVtICovXG5cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nKTogYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dnZXJDb25zb2xlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IGNsZWFyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHRyYWNlXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gaW5mb1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGxvZ1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IHdhcm5cbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBlcnJvclxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBkZWJ1Z1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cENvbGxhcHNlZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cEVuZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBzdGF0dXNcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZVxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBwcm9maWxlRW5kXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGxvZ1RpbWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7ZmFsc2V8dHJ1ZXxcIm5vbmVcInxcImVycm9yXCJ8XCJ3YXJuXCJ8XCJpbmZvXCJ8XCJsb2dcInxcInZlcmJvc2VcIn0gbGV2ZWwgbG9nbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7RmlsdGVyVHlwZXN8Ym9vbGVhbn0gZGVidWcgZmlsdGVyIGZvciBkZWJ1ZyBsb2dnaW5nXG4gKiBAcHJvcGVydHkge0xvZ2dlckNvbnNvbGV9IGNvbnNvbGUgdGhlIGNvbnNvbGUgdG8gbG9nIHRvXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0ZpbHRlckl0ZW1UeXBlc30gaXRlbSBhbiBpbnB1dCBpdGVtXG4gKiBAcmV0dXJucyB7RmlsdGVyRnVuY3Rpb259IGZpbHRlciBmdW5jdGlvblxuICovXG5cblxudmFyIGZpbHRlclRvRnVuY3Rpb24gPSBmdW5jdGlvbiBmaWx0ZXJUb0Z1bmN0aW9uKGl0ZW0pIHtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJbXFxcXFxcXFwvXVwiLmNvbmNhdChpdGVtLnJlcGxhY2UoIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgIC9bLVtcXF17fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpLCBcIihbXFxcXFxcXFwvXXwkfCF8XFxcXD8pXCIpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gcmVnRXhwLnRlc3QoaWRlbnQpO1xuICAgIH07XG4gIH1cblxuICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaXRlbS50ZXN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfTtcbiAgfVxufTtcbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuXG5cbnZhciBMb2dMZXZlbCA9IHtcbiAgbm9uZTogNixcbiAgZmFsc2U6IDYsXG4gIGVycm9yOiA1LFxuICB3YXJuOiA0LFxuICBpbmZvOiAzLFxuICBsb2c6IDIsXG4gIHRydWU6IDIsXG4gIHZlcmJvc2U6IDFcbn07XG4vKipcbiAqIEBwYXJhbSB7TG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBvcHRpb25zIG9iamVjdFxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgTG9nVHlwZUVudW0sIGFueVtdKTogdm9pZH0gbG9nZ2luZyBmdW5jdGlvblxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgICAgbGV2ZWwgPSBfcmVmJGxldmVsID09PSB2b2lkIDAgPyBcImluZm9cIiA6IF9yZWYkbGV2ZWwsXG4gICAgICBfcmVmJGRlYnVnID0gX3JlZi5kZWJ1ZyxcbiAgICAgIGRlYnVnID0gX3JlZiRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnLFxuICAgICAgY29uc29sZSA9IF9yZWYuY29uc29sZTtcbiAgdmFyIGRlYnVnRmlsdGVycyA9IHR5cGVvZiBkZWJ1ZyA9PT0gXCJib29sZWFuXCIgPyBbZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWJ1ZztcbiAgfV0gOlxuICAvKiogQHR5cGUge0ZpbHRlckl0ZW1UeXBlc1tdfSAqL1xuICBbXS5jb25jYXQoZGVidWcpLm1hcChmaWx0ZXJUb0Z1bmN0aW9uKTtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgdmFyIGxvZ2xldmVsID0gTG9nTGV2ZWxbXCJcIi5jb25jYXQobGV2ZWwpXSB8fCAwO1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gICAqIEBwYXJhbSB7TG9nVHlwZUVudW19IHR5cGUgdHlwZSBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEBwYXJhbSB7YW55W119IGFyZ3MgYXJndW1lbnRzIG9mIHRoZSBsb2cgZW50cnlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG4gIHZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIobmFtZSwgdHlwZSwgYXJncykge1xuICAgIHZhciBsYWJlbGVkQXJncyA9IGZ1bmN0aW9uIGxhYmVsZWRBcmdzKCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0pXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3Muc2xpY2UoMSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW1wiW1wiLmNvbmNhdChuYW1lLCBcIl1cIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkZWJ1ZyA9IGRlYnVnRmlsdGVycy5zb21lKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZihuYW1lKTtcbiAgICB9KTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBMb2dUeXBlLmRlYnVnOlxuICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZGVidWcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUubG9nOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuaW5mbzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcbiAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUud2FybjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLndhcm4pIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuZXJyb3I6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5lcnJvcikgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUudHJhY2U6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwQ29sbGFwc2VkOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLnZlcmJvc2UpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwQ29sbGFwc2VkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5ncm91cC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwRW5kOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnRpbWU6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgICAgdmFyIG1zID0gYXJnc1sxXSAqIDEwMDAgKyBhcmdzWzJdIC8gMTAwMDAwMDtcbiAgICAgICAgICB2YXIgbXNnID0gXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0sIFwiOiBcIikuY29uY2F0KG1zLCBcIiBtc1wiKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5sb2dUaW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nVGltZShtc2cpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlOlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5wcm9maWxlLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGVFbmQ6XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGVFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLnByb2ZpbGVFbmQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuY2xlYXI6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5jbGVhciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuc3RhdHVzOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuaW5mbykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5zdGF0dXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBMb2dUeXBlIFwiLmNvbmNhdCh0eXBlKSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgU3luY0JhaWxIb29rID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdGFwYWJsZS9saWIvU3luY0JhaWxIb29rICovIFwiLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL1N5bmNCYWlsSG9va0Zha2UuanNcIik7XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTG9nZ2VyICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIiksXG4gICAgTG9nZ2VyID0gX3JlcXVpcmUuTG9nZ2VyO1xuXG52YXIgY3JlYXRlQ29uc29sZUxvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3JlYXRlQ29uc29sZUxvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qc1wiKTtcbi8qKiBAdHlwZSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSAqL1xuXG5cbnZhciBjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMgPSB7XG4gIGxldmVsOiBcImluZm9cIixcbiAgZGVidWc6IGZhbHNlLFxuICBjb25zb2xlOiBjb25zb2xlXG59O1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBsb2dnZXJcbiAqIEByZXR1cm5zIHtMb2dnZXJ9IGEgbG9nZ2VyXG4gKi9cblxuZXhwb3J0cy5nZXRMb2dnZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmV3IExvZ2dlcihmdW5jdGlvbiAodHlwZSwgYXJncykge1xuICAgIGlmIChleHBvcnRzLmhvb2tzLmxvZy5jYWxsKG5hbWUsIHR5cGUsIGFyZ3MpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnREZWZhdWx0TG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xuICAgIHJldHVybiBleHBvcnRzLmdldExvZ2dlcihcIlwiLmNvbmNhdChuYW1lLCBcIi9cIikuY29uY2F0KGNoaWxkTmFtZSkpO1xuICB9KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5cbmV4cG9ydHMuY29uZmlndXJlRGVmYXVsdExvZ2dlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIF9leHRlbmRzKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmhvb2tzID0ge1xuICBsb2c6IG5ldyBTeW5jQmFpbEhvb2soW1wib3JpZ2luXCIsIFwidHlwZVwiLCBcImFyZ3NcIl0pXG59O1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4hZnVuY3Rpb24oKSB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX187IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzXCIpO1xuXG59KCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7XG5mb3IodmFyIGkgaW4gX193ZWJwYWNrX2V4cG9ydHNfXykgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfX1tpXSA9IF9fd2VicGFja19leHBvcnRzX19baV07XG5pZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIH0pKClcbjsiLCIvKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0XCJ1c2Ugc3RyaWN0XCI7XG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIGJpbmRpbmcgKi8gc3RyaXBBbnNpOyB9XG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBhbnNpLXJlZ2V4ICovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qc1wiKTtcblxuZnVuY3Rpb24gc3RyaXBBbnNpKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBgc3RyaW5nYCwgZ290IGBcIi5jb25jYXQodHlwZW9mIHN0cmluZywgXCJgXCIpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgoMCxhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKSgpLCAnJyk7XG59XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvbm9kZV9tb2R1bGVzL2Fuc2ktcmVnZXgvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogYmluZGluZyAqLyBhbnNpUmVnZXg7IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuZnVuY3Rpb24gYW5zaVJlZ2V4KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJG9ubHlGaXJzdCA9IF9yZWYub25seUZpcnN0LFxuICAgICAgb25seUZpcnN0ID0gX3JlZiRvbmx5Rmlyc3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRvbmx5Rmlyc3Q7XG5cbiAgdmFyIHBhdHRlcm4gPSBbXCJbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpXCIsICcoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW50cXJ5PT48fl0pKSddLmpvaW4oJ3wnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgb25seUZpcnN0ID8gdW5kZWZpbmVkIDogJ2cnKTtcbn1cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfVxuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vLyBUaGlzIGVudHJ5IG5lZWQgdG8gYmUgd3JhcHBlZCBpbiBhbiBJSUZFIGJlY2F1c2UgaXQgbmVlZCB0byBiZSBpc29sYXRlZCBhZ2FpbnN0IG90aGVyIG1vZHVsZXMgaW4gdGhlIGNodW5rLlxuIWZ1bmN0aW9uKCkge1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzdHJpcC1hbnNpICovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qc1wiKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKTtcbn0oKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fID0gZXhwb3J0cztcbmZvcih2YXIgaSBpbiBfX3dlYnBhY2tfZXhwb3J0c19fKSBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fW2ldID0gX193ZWJwYWNrX2V4cG9ydHNfX1tpXTtcbmlmKF9fd2VicGFja19leHBvcnRzX18uX19lc01vZHVsZSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRfdGFyZ2V0X18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gfSkoKVxuOyIsIi8vIFRoZSBlcnJvciBvdmVybGF5IGlzIGluc3BpcmVkIChhbmQgbW9zdGx5IGNvcGllZCkgZnJvbSBDcmVhdGUgUmVhY3QgQXBwIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcClcbi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLlxuaW1wb3J0IGFuc2lIVE1MIGZyb20gXCJhbnNpLWh0bWwtY29tbXVuaXR5XCI7XG5pbXBvcnQgeyBlbmNvZGUgfSBmcm9tIFwiaHRtbC1lbnRpdGllc1wiO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFtcInRyYW5zcGFyZW50XCIsIFwidHJhbnNwYXJlbnRcIl0sXG4gIGJsYWNrOiBcIjE4MTgxOFwiLFxuICByZWQ6IFwiRTM2MDQ5XCIsXG4gIGdyZWVuOiBcIkIzQ0I3NFwiLFxuICB5ZWxsb3c6IFwiRkZEMDgwXCIsXG4gIGJsdWU6IFwiN0NBRkMyXCIsXG4gIG1hZ2VudGE6IFwiN0ZBQ0NBXCIsXG4gIGN5YW46IFwiQzNDMkVGXCIsXG4gIGxpZ2h0Z3JleTogXCJFQkU3RTNcIixcbiAgZGFya2dyZXk6IFwiNkQ3ODkxXCJcbn07XG52YXIgaWZyYW1lQ29udGFpbmVyRWxlbWVudDtcbnZhciBjb250YWluZXJFbGVtZW50O1xudmFyIG9uTG9hZFF1ZXVlID0gW107XG5hbnNpSFRNTC5zZXRDb2xvcnMoY29sb3JzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKCkge1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5XCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3JjID0gXCJhYm91dDpibGFua1wiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnRvcCA9IDA7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUucmlnaHQgPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmJvdHRvbSA9IDA7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMHZ3XCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDB2aFwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnpJbmRleCA9IDk5OTk5OTk5OTk7XG5cbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29udGFpbmVyRWxlbWVudCA9IGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGFpbmVyRWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdlwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUudG9wID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJvdHRvbSA9IDA7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwdndcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwdmhcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiYSgwLCAwLCAwLCAwLjg1KVwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIiNFOEU4RThcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBcIk1lbmxvLCBDb25zb2xhcywgbW9ub3NwYWNlXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwibGFyZ2VcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSBcIjJyZW1cIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEuMlwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2hpdGVTcGFjZSA9IFwicHJlLXdyYXBcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XG4gICAgdmFyIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczpcIjtcbiAgICB2YXIgY2xvc2VCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuaW5uZXJUZXh0ID0gXCJYXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwiMjBweFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgPSBcInJpZ2h0XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLnN0eWxlRmxvYXQgPSBcInJpZ2h0XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBoaWRlKCk7XG4gICAgfSk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChoZWFkZXJFbGVtZW50KTtcbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uRWxlbWVudCk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIG9uTG9hZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9uTG9hZCkge1xuICAgICAgb25Mb2FkKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIH0pO1xuICAgIG9uTG9hZFF1ZXVlID0gW107XG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBudWxsO1xuICB9O1xuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZU92ZXJsYXlFeGlzdHMoY2FsbGJhY2spIHtcbiAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAvLyBFdmVyeXRoaW5nIGlzIHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayByaWdodCBhd2F5LlxuICAgIGNhbGxiYWNrKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uTG9hZFF1ZXVlLnB1c2goY2FsbGJhY2spO1xuXG4gIGlmIChpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY3JlYXRlQ29udGFpbmVyKCk7XG59IC8vIFN1Y2Nlc3NmdWwgY29tcGlsYXRpb24uXG5cblxuZnVuY3Rpb24gaGlkZSgpIHtcbiAgaWYgKCFpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENsZWFuIHVwIGFuZCByZXNldCBpbnRlcm5hbCBzdGF0ZS5cblxuXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQgPSBudWxsO1xuICBjb250YWluZXJFbGVtZW50ID0gbnVsbDtcbn0gLy8gQ29tcGlsYXRpb24gd2l0aCBlcnJvcnMgKGUuZy4gc3ludGF4IGVycm9yIG9yIG1pc3NpbmcgbW9kdWxlcykuXG5cblxuZnVuY3Rpb24gc2hvdyhtZXNzYWdlcywgdHlwZSkge1xuICBlbnN1cmVPdmVybGF5RXhpc3RzKGZ1bmN0aW9uICgpIHtcbiAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICB2YXIgZW50cnlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHZhciB0eXBlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgdHlwZUVsZW1lbnQuaW5uZXJUZXh0ID0gdHlwZSA9PT0gXCJ3YXJuaW5nc1wiID8gXCJXYXJuaW5nOlwiIDogXCJFcnJvcjpcIjtcbiAgICAgIHR5cGVFbGVtZW50LnN0eWxlLmNvbG9yID0gXCIjXCIuY29uY2F0KGNvbG9ycy5yZWQpOyAvLyBNYWtlIGl0IGxvb2sgc2ltaWxhciB0byBvdXIgdGVybWluYWwuXG5cbiAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlLm1lc3NhZ2UgfHwgbWVzc2FnZXNbMF07XG4gICAgICB2YXIgdGV4dCA9IGFuc2lIVE1MKGVuY29kZShlcnJvck1lc3NhZ2UpKTtcbiAgICAgIHZhciBtZXNzYWdlVGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgbWVzc2FnZVRleHROb2RlLmlubmVySFRNTCA9IHRleHQ7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQodHlwZUVsZW1lbnQpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChtZXNzYWdlVGV4dE5vZGUpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZW50cnlFbGVtZW50KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHNob3csIGhpZGUgfTsiLCIvKiBnbG9iYWwgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gKi9cbmltcG9ydCBXZWJTb2NrZXRDbGllbnQgZnJvbSBcIi4vY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanNcIjsgLy8gdGhpcyBXZWJzb2NrZXRDbGllbnQgaXMgaGVyZSBhcyBhIGRlZmF1bHQgZmFsbGJhY2ssIGluIGNhc2UgdGhlIGNsaWVudCBpcyBub3QgaW5qZWN0ZWRcblxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5cbnZhciBDbGllbnQgPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlLCBuby1uZXN0ZWQtdGVybmFyeVxudHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICE9PSBcInVuZGVmaW5lZFwiID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxudHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0IDogX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gOiBXZWJTb2NrZXRDbGllbnQ7XG4vKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuXG52YXIgcmV0cmllcyA9IDA7XG52YXIgY2xpZW50ID0gbnVsbDtcblxudmFyIHNvY2tldCA9IGZ1bmN0aW9uIGluaXRTb2NrZXQodXJsLCBoYW5kbGVycykge1xuICBjbGllbnQgPSBuZXcgQ2xpZW50KHVybCk7XG4gIGNsaWVudC5vbk9wZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHJpZXMgPSAwO1xuICB9KTtcbiAgY2xpZW50Lm9uQ2xvc2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZXRyaWVzID09PSAwKSB7XG4gICAgICBoYW5kbGVycy5jbG9zZSgpO1xuICAgIH0gLy8gVHJ5IHRvIHJlY29ubmVjdC5cblxuXG4gICAgY2xpZW50ID0gbnVsbDsgLy8gQWZ0ZXIgMTAgcmV0cmllcyBzdG9wIHRyeWluZywgdG8gcHJldmVudCBsb2dzcGFtLlxuXG4gICAgaWYgKHJldHJpZXMgPD0gMTApIHtcbiAgICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGltZW91dCB0byByZWNvbm5lY3QuXG4gICAgICAvLyBSZXNwZWN0ZnVsbHkgY29waWVkIGZyb20gdGhlIHBhY2thZ2UgYGdvdGAuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbWl4ZWQtb3BlcmF0b3JzLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgICAgIHZhciByZXRyeUluTXMgPSAxMDAwICogTWF0aC5wb3coMiwgcmV0cmllcykgKyBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgICAgcmV0cmllcyArPSAxO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNvY2tldCh1cmwsIGhhbmRsZXJzKTtcbiAgICAgIH0sIHJldHJ5SW5Ncyk7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uTWVzc2FnZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgIGlmIChoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKSB7XG4gICAgICBoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKG1lc3NhZ2UuZGF0YSk7XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNvY2tldDsiLCJpbXBvcnQgdXJsIGZyb20gXCJ1cmxcIjsgLy8gV2UgaGFuZGxlIGxlZ2FjeSBBUEkgdGhhdCBpcyBOb2RlLmpzIHNwZWNpZmljLCBhbmQgYSBuZXdlciBBUEkgdGhhdCBpbXBsZW1lbnRzIHRoZSBzYW1lIFdIQVRXRyBVUkwgU3RhbmRhcmQgdXNlZCBieSB3ZWIgYnJvd3NlcnNcbi8vIFBsZWFzZSBsb29rIGF0IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvdXJsLmh0bWwjdXJsX3VybF9zdHJpbmdzX2FuZF91cmxfb2JqZWN0c1xuXG5mdW5jdGlvbiBjcmVhdGVTb2NrZXRVUkwocGFyc2VkVVJMKSB7XG4gIHZhciBob3N0bmFtZSA9IHBhcnNlZFVSTC5ob3N0bmFtZTsgLy8gTm9kZS5qcyBtb2R1bGUgcGFyc2VzIGl0IGFzIGA6OmBcbiAgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTHN0cmluZ10pYCBwYXJzZXMgaXQgYXMgJ1s6Ol0nXG5cbiAgdmFyIGlzSW5BZGRyQW55ID0gaG9zdG5hbWUgPT09IFwiMC4wLjAuMFwiIHx8IGhvc3RuYW1lID09PSBcIjo6XCIgfHwgaG9zdG5hbWUgPT09IFwiWzo6XVwiOyAvLyB3aHkgZG8gd2UgbmVlZCB0aGlzIGNoZWNrP1xuICAvLyBob3N0bmFtZSBuL2EgZm9yIGZpbGUgcHJvdG9jb2wgKGV4YW1wbGUsIHdoZW4gdXNpbmcgZWxlY3Ryb24sIGlvbmljKVxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2stZGV2LXNlcnZlci9wdWxsLzM4NFxuXG4gIGlmIChpc0luQWRkckFueSAmJiBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lICYmIHNlbGYubG9jYXRpb24ucHJvdG9jb2wuaW5kZXhPZihcImh0dHBcIikgPT09IDApIHtcbiAgICBob3N0bmFtZSA9IHNlbGYubG9jYXRpb24uaG9zdG5hbWU7XG4gIH1cblxuICB2YXIgc29ja2V0VVJMUHJvdG9jb2wgPSBwYXJzZWRVUkwucHJvdG9jb2wgfHwgc2VsZi5sb2NhdGlvbi5wcm90b2NvbDsgLy8gV2hlbiBodHRwcyBpcyB1c2VkIGluIHRoZSBhcHAsIHNlY3VyZSB3ZWIgc29ja2V0cyBhcmUgYWx3YXlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBicm93c2VyIGRvZXNuJ3QgYWNjZXB0IG5vbi1zZWN1cmUgd2ViIHNvY2tldHMuXG5cbiAgaWYgKHNvY2tldFVSTFByb3RvY29sID09PSBcImF1dG86XCIgfHwgaG9zdG5hbWUgJiYgaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbCA9PT0gXCJodHRwczpcIikge1xuICAgIHNvY2tldFVSTFByb3RvY29sID0gc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcbiAgfVxuXG4gIHNvY2tldFVSTFByb3RvY29sID0gc29ja2V0VVJMUHJvdG9jb2wucmVwbGFjZSgvXig/Omh0dHB8ListZXh0ZW5zaW9ufGZpbGUpL2ksIFwid3NcIik7XG4gIHZhciBzb2NrZXRVUkxBdXRoID0gXCJcIjsgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTHN0cmluZ10pYCBkb2Vzbid0IGhhdmUgYGF1dGhgIHByb3BlcnR5XG4gIC8vIFBhcnNlIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGluIGNhc2Ugd2UgbmVlZCB0aGVtXG5cbiAgaWYgKHBhcnNlZFVSTC51c2VybmFtZSkge1xuICAgIHNvY2tldFVSTEF1dGggPSBwYXJzZWRVUkwudXNlcm5hbWU7IC8vIFNpbmNlIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb24gZG9lcyBub3QgYWxsb3cgZW1wdHkgdXNlcm5hbWUsXG4gICAgLy8gd2Ugb25seSBpbmNsdWRlIHBhc3N3b3JkIGlmIHRoZSB1c2VybmFtZSBpcyBub3QgZW1wdHkuXG5cbiAgICBpZiAocGFyc2VkVVJMLnBhc3N3b3JkKSB7XG4gICAgICAvLyBSZXN1bHQ6IDx1c2VybmFtZT46PHBhc3N3b3JkPlxuICAgICAgc29ja2V0VVJMQXV0aCA9IHNvY2tldFVSTEF1dGguY29uY2F0KFwiOlwiLCBwYXJzZWRVUkwucGFzc3dvcmQpO1xuICAgIH1cbiAgfSAvLyBJbiBjYXNlIHRoZSBob3N0IGlzIGEgcmF3IElQdjYgYWRkcmVzcywgaXQgY2FuIGJlIGVuY2xvc2VkIGluXG4gIC8vIHRoZSBicmFja2V0cyBhcyB0aGUgYnJhY2tldHMgYXJlIG5lZWRlZCBpbiB0aGUgZmluYWwgVVJMIHN0cmluZy5cbiAgLy8gTmVlZCB0byByZW1vdmUgdGhvc2UgYXMgdXJsLmZvcm1hdCBibGluZGx5IGFkZHMgaXRzIG93biBzZXQgb2YgYnJhY2tldHNcbiAgLy8gaWYgdGhlIGhvc3Qgc3RyaW5nIGNvbnRhaW5zIGNvbG9ucy4gVGhhdCB3b3VsZCBsZWFkIHRvIG5vbi13b3JraW5nXG4gIC8vIGRvdWJsZSBicmFja2V0cyAoZS5nLiBbWzo6XV0pIGhvc3RcbiAgLy9cbiAgLy8gQWxsIG9mIHRoZXNlIHdlYiBzb2NrZXQgdXJsIHBhcmFtcyBhcmUgb3B0aW9uYWxseSBwYXNzZWQgaW4gdGhyb3VnaCByZXNvdXJjZVF1ZXJ5LFxuICAvLyBzbyB3ZSBuZWVkIHRvIGZhbGwgYmFjayB0byB0aGUgZGVmYXVsdCBpZiB0aGV5IGFyZSBub3QgcHJvdmlkZWRcblxuXG4gIHZhciBzb2NrZXRVUkxIb3N0bmFtZSA9IChob3N0bmFtZSB8fCBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lIHx8IFwibG9jYWxob3N0XCIpLnJlcGxhY2UoL15cXFsoLiopXFxdJC8sIFwiJDFcIik7XG4gIHZhciBzb2NrZXRVUkxQb3J0ID0gcGFyc2VkVVJMLnBvcnQ7XG5cbiAgaWYgKCFzb2NrZXRVUkxQb3J0IHx8IHNvY2tldFVSTFBvcnQgPT09IFwiMFwiKSB7XG4gICAgc29ja2V0VVJMUG9ydCA9IHNlbGYubG9jYXRpb24ucG9ydDtcbiAgfSAvLyBJZiBwYXRoIGlzIHByb3ZpZGVkIGl0J2xsIGJlIHBhc3NlZCBpbiB2aWEgdGhlIHJlc291cmNlUXVlcnkgYXMgYVxuICAvLyBxdWVyeSBwYXJhbSBzbyBpdCBoYXMgdG8gYmUgcGFyc2VkIG91dCBvZiB0aGUgcXVlcnlzdHJpbmcgaW4gb3JkZXIgZm9yIHRoZVxuICAvLyBjbGllbnQgdG8gb3BlbiB0aGUgc29ja2V0IHRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuXG5cbiAgdmFyIHNvY2tldFVSTFBhdGhuYW1lID0gXCIvd3NcIjtcblxuICBpZiAocGFyc2VkVVJMLnBhdGhuYW1lICYmICFwYXJzZWRVUkwuZnJvbUN1cnJlbnRTY3JpcHQpIHtcbiAgICBzb2NrZXRVUkxQYXRobmFtZSA9IHBhcnNlZFVSTC5wYXRobmFtZTtcbiAgfVxuXG4gIHJldHVybiB1cmwuZm9ybWF0KHtcbiAgICBwcm90b2NvbDogc29ja2V0VVJMUHJvdG9jb2wsXG4gICAgYXV0aDogc29ja2V0VVJMQXV0aCxcbiAgICBob3N0bmFtZTogc29ja2V0VVJMSG9zdG5hbWUsXG4gICAgcG9ydDogc29ja2V0VVJMUG9ydCxcbiAgICBwYXRobmFtZTogc29ja2V0VVJMUGF0aG5hbWUsXG4gICAgc2xhc2hlczogdHJ1ZVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU29ja2V0VVJMOyIsImZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKSB7XG4gIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsXG4gIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy5cbiAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH0gLy8gRmFsbGJhY2sgdG8gZ2V0dGluZyBhbGwgc2NyaXB0cyBydW5uaW5nIGluIHRoZSBkb2N1bWVudC5cblxuXG4gIHZhciBzY3JpcHRFbGVtZW50cyA9IGRvY3VtZW50LnNjcmlwdHMgfHwgW107XG4gIHZhciBzY3JpcHRFbGVtZW50c1dpdGhTcmMgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoc2NyaXB0RWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICB9KTtcblxuICBpZiAoc2NyaXB0RWxlbWVudHNXaXRoU3JjLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgY3VycmVudFNjcmlwdCA9IHNjcmlwdEVsZW1lbnRzV2l0aFNyY1tzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICB9IC8vIEZhaWwgYXMgdGhlcmUgd2FzIG5vIHNjcmlwdCB0byB1c2UuXG5cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJbd2VicGFjay1kZXYtc2VydmVyXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS5cIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEN1cnJlbnRTY3JpcHRTb3VyY2U7IiwiaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vbW9kdWxlcy9sb2dnZXIvaW5kZXguanNcIjtcbnZhciBuYW1lID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXJcIjsgLy8gZGVmYXVsdCBsZXZlbCBpcyBzZXQgb24gdGhlIGNsaWVudCBzaWRlLCBzbyBpdCBkb2VzIG5vdCBuZWVkXG4vLyB0byBiZSBzZXQgYnkgdGhlIENMSSBvciBBUElcblxudmFyIGRlZmF1bHRMZXZlbCA9IFwiaW5mb1wiO1xuXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICBsb2dnZXIuY29uZmlndXJlRGVmYXVsdExvZ2dlcih7XG4gICAgbGV2ZWw6IGxldmVsXG4gIH0pO1xufVxuXG5zZXRMb2dMZXZlbChkZWZhdWx0TGV2ZWwpO1xudmFyIGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIobmFtZSk7XG5leHBvcnQgeyBsb2csIHNldExvZ0xldmVsIH07IiwiaW1wb3J0IHVybCBmcm9tIFwidXJsXCI7XG5pbXBvcnQgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSBmcm9tIFwiLi9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzXCI7XG5cbmZ1bmN0aW9uIHBhcnNlVVJMKHJlc291cmNlUXVlcnkpIHtcbiAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIHJlc291cmNlUXVlcnkgPT09IFwic3RyaW5nXCIgJiYgcmVzb3VyY2VRdWVyeSAhPT0gXCJcIikge1xuICAgIHZhciBzZWFyY2hQYXJhbXMgPSByZXNvdXJjZVF1ZXJ5LnN1YnN0cigxKS5zcGxpdChcIiZcIik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlYXJjaFBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhaXIgPSBzZWFyY2hQYXJhbXNbaV0uc3BsaXQoXCI9XCIpO1xuICAgICAgb3B0aW9uc1twYWlyWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRWxzZSwgZ2V0IHRoZSB1cmwgZnJvbSB0aGUgPHNjcmlwdD4gdGhpcyBmaWxlIHdhcyBjYWxsZWQgd2l0aC5cbiAgICB2YXIgc2NyaXB0U291cmNlID0gZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSgpO1xuXG4gICAgaWYgKHNjcmlwdFNvdXJjZSkge1xuICAgICAgdmFyIHNjcmlwdFNvdXJjZVVSTDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhlIHBsYWNlaG9sZGVyIGBiYXNlVVJMYCB3aXRoIGB3aW5kb3cubG9jYXRpb24uaHJlZmAsXG4gICAgICAgIC8vIGlzIHRvIGFsbG93IHBhcnNpbmcgb2YgcGF0aC1yZWxhdGl2ZSBvciBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzLFxuICAgICAgICAvLyBhbmQgd2lsbCBoYXZlIG5vIGVmZmVjdCBpZiBgc2NyaXB0U291cmNlYCBpcyBhIGZ1bGx5IHZhbGlkIFVSTC5cbiAgICAgICAgc2NyaXB0U291cmNlVVJMID0gbmV3IFVSTChzY3JpcHRTb3VyY2UsIHNlbGYubG9jYXRpb24uaHJlZik7XG4gICAgICB9IGNhdGNoIChlcnJvcikgey8vIFVSTCBwYXJzaW5nIGZhaWxlZCwgZG8gbm90aGluZy5cbiAgICAgICAgLy8gV2Ugd2lsbCBzdGlsbCBwcm9jZWVkIHRvIHNlZSBpZiB3ZSBjYW4gcmVjb3ZlciB1c2luZyBgcmVzb3VyY2VRdWVyeWBcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcmlwdFNvdXJjZVVSTCkge1xuICAgICAgICBvcHRpb25zID0gc2NyaXB0U291cmNlVVJMO1xuICAgICAgICBvcHRpb25zLmZyb21DdXJyZW50U2NyaXB0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IHVybC5wYXJzZShzZWxmLmxvY2F0aW9uLmhyZWYsIHRydWUsIHRydWUpO1xuICAgICAgb3B0aW9ucy5mcm9tQ3VycmVudFNjcmlwdCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlVVJMOyIsIi8qIGdsb2JhbCBfX3dlYnBhY2tfaGFzaF9fICovXG5pbXBvcnQgaG90RW1pdHRlciBmcm9tIFwid2VicGFjay9ob3QvZW1pdHRlci5qc1wiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vbG9nLmpzXCI7XG5cbmZ1bmN0aW9uIHJlbG9hZEFwcChfcmVmLCBzdGF0dXMpIHtcbiAgdmFyIGhvdCA9IF9yZWYuaG90LFxuICAgICAgbGl2ZVJlbG9hZCA9IF9yZWYubGl2ZVJlbG9hZDtcblxuICBpZiAoc3RhdHVzLmlzVW5sb2FkaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoLFxuICAgICAgcHJldmlvdXNIYXNoID0gc3RhdHVzLnByZXZpb3VzSGFzaDtcbiAgdmFyIGlzSW5pdGlhbCA9IGN1cnJlbnRIYXNoLmluZGV4T2YocHJldmlvdXNIYXNoKSA+PSAwO1xuXG4gIGlmIChpc0luaXRpYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKSB7XG4gICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICBsb2cuaW5mbyhcIkFwcCB1cGRhdGVkLiBSZWxvYWRpbmcuLi5cIik7XG4gICAgcm9vdFdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSBzZWxmLmxvY2F0aW9uLnNlYXJjaC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWxsb3dUb0hvdCA9IHNlYXJjaC5pbmRleE9mKFwid2VicGFjay1kZXYtc2VydmVyLWhvdD1mYWxzZVwiKSA9PT0gLTE7XG4gIHZhciBhbGxvd1RvTGl2ZVJlbG9hZCA9IHNlYXJjaC5pbmRleE9mKFwid2VicGFjay1kZXYtc2VydmVyLWxpdmUtcmVsb2FkPWZhbHNlXCIpID09PSAtMTtcblxuICBpZiAoaG90ICYmIGFsbG93VG9Ib3QpIHtcbiAgICBsb2cuaW5mbyhcIkFwcCBob3QgdXBkYXRlLi4uXCIpO1xuICAgIGhvdEVtaXR0ZXIuZW1pdChcIndlYnBhY2tIb3RVcGRhdGVcIiwgc3RhdHVzLmN1cnJlbnRIYXNoKTtcblxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLndpbmRvdykge1xuICAgICAgLy8gYnJvYWRjYXN0IHVwZGF0ZSB0byB3aW5kb3dcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2UoXCJ3ZWJwYWNrSG90VXBkYXRlXCIuY29uY2F0KHN0YXR1cy5jdXJyZW50SGFzaCksIFwiKlwiKTtcbiAgICB9XG4gIH0gLy8gYWxsb3cgcmVmcmVzaGluZyB0aGUgcGFnZSBvbmx5IGlmIGxpdmVSZWxvYWQgaXNuJ3QgZGlzYWJsZWRcbiAgZWxzZSBpZiAobGl2ZVJlbG9hZCAmJiBhbGxvd1RvTGl2ZVJlbG9hZCkge1xuICAgIHZhciByb290V2luZG93ID0gc2VsZjsgLy8gdXNlIHBhcmVudCB3aW5kb3cgZm9yIHJlbG9hZCAoaW4gY2FzZSB3ZSdyZSBpbiBhbiBpZnJhbWUgd2l0aCBubyB2YWxpZCBzcmMpXG5cbiAgICB2YXIgaW50ZXJ2YWxJZCA9IHNlbGYuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHJvb3RXaW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09IFwiYWJvdXQ6XCIpIHtcbiAgICAgICAgLy8gcmVsb2FkIGltbWVkaWF0ZWx5IGlmIHByb3RvY29sIGlzIHZhbGlkXG4gICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdFdpbmRvdyA9IHJvb3RXaW5kb3cucGFyZW50O1xuXG4gICAgICAgIGlmIChyb290V2luZG93LnBhcmVudCA9PT0gcm9vdFdpbmRvdykge1xuICAgICAgICAgIC8vIGlmIHBhcmVudCBlcXVhbHMgY3VycmVudCB3aW5kb3cgd2UndmUgcmVhY2hlZCB0aGUgcm9vdCB3aGljaCB3b3VsZCBjb250aW51ZSBmb3JldmVyLCBzbyB0cmlnZ2VyIGEgcmVsb2FkIGFueXdheXNcbiAgICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbG9hZEFwcDsiLCIvKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5IFdvcmtlckdsb2JhbFNjb3BlICovXG4vLyBTZW5kIG1lc3NhZ2VzIHRvIHRoZSBvdXRzaWRlLCBzbyBwbHVnaW5zIGNhbiBjb25zdW1lIGl0LlxuZnVuY3Rpb24gc2VuZE1zZyh0eXBlLCBkYXRhKSB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSBcInVuZGVmaW5lZFwiIHx8ICEoc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKSkpIHtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwid2VicGFja1wiLmNvbmNhdCh0eXBlKSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9LCBcIipcIik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc2VuZE1zZzsiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLyogZ2xvYmFscyBfX3dlYnBhY2tfaGFzaF9fICovXG5pZiAobW9kdWxlLmhvdCkge1xuXHR2YXIgbGFzdEhhc2g7XG5cdHZhciB1cFRvRGF0ZSA9IGZ1bmN0aW9uIHVwVG9EYXRlKCkge1xuXHRcdHJldHVybiBsYXN0SGFzaC5pbmRleE9mKF9fd2VicGFja19oYXNoX18pID49IDA7XG5cdH07XG5cdHZhciBsb2cgPSByZXF1aXJlKFwiLi9sb2dcIik7XG5cdHZhciBjaGVjayA9IGZ1bmN0aW9uIGNoZWNrKCkge1xuXHRcdG1vZHVsZS5ob3Rcblx0XHRcdC5jaGVjayh0cnVlKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRcdGlmICghdXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gQ2Fubm90IGZpbmQgdXBkYXRlLiBOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhXCIpO1xuXHRcdFx0XHRcdGxvZyhcblx0XHRcdFx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XHRcdFx0XCJbSE1SXSAoUHJvYmFibHkgYmVjYXVzZSBvZiByZXN0YXJ0aW5nIHRoZSB3ZWJwYWNrLWRldi1zZXJ2ZXIpXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIXVwVG9EYXRlKCkpIHtcblx0XHRcdFx0XHRjaGVjaygpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVxdWlyZShcIi4vbG9nLWFwcGx5LXJlc3VsdFwiKSh1cGRhdGVkTW9kdWxlcywgdXBkYXRlZE1vZHVsZXMpO1xuXG5cdFx0XHRcdGlmICh1cFRvRGF0ZSgpKSB7XG5cdFx0XHRcdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdIEFwcCBpcyB1cCB0byBkYXRlLlwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdHZhciBzdGF0dXMgPSBtb2R1bGUuaG90LnN0YXR1cygpO1xuXHRcdFx0XHRpZiAoW1wiYWJvcnRcIiwgXCJmYWlsXCJdLmluZGV4T2Yoc3RhdHVzKSA+PSAwKSB7XG5cdFx0XHRcdFx0bG9nKFxuXHRcdFx0XHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcdFx0XHRcIltITVJdIENhbm5vdCBhcHBseSB1cGRhdGUuIE5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIFwiICsgbG9nLmZvcm1hdEVycm9yKGVycikpO1xuXHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gVXBkYXRlIGZhaWxlZDogXCIgKyBsb2cuZm9ybWF0RXJyb3IoZXJyKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9O1xuXHR2YXIgaG90RW1pdHRlciA9IHJlcXVpcmUoXCIuL2VtaXR0ZXJcIik7XG5cdGhvdEVtaXR0ZXIub24oXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIGZ1bmN0aW9uIChjdXJyZW50SGFzaCkge1xuXHRcdGxhc3RIYXNoID0gY3VycmVudEhhc2g7XG5cdFx0aWYgKCF1cFRvRGF0ZSgpICYmIG1vZHVsZS5ob3Quc3RhdHVzKCkgPT09IFwiaWRsZVwiKSB7XG5cdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQ2hlY2tpbmcgZm9yIHVwZGF0ZXMgb24gdGhlIHNlcnZlci4uLlwiKTtcblx0XHRcdGNoZWNrKCk7XG5cdFx0fVxuXHR9KTtcblx0bG9nKFwiaW5mb1wiLCBcIltITVJdIFdhaXRpbmcgZm9yIHVwZGF0ZSBzaWduYWwgZnJvbSBXRFMuLi5cIik7XG59IGVsc2Uge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJbSE1SXSBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIGRpc2FibGVkLlwiKTtcbn1cbiIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXBkYXRlZE1vZHVsZXMsIHJlbmV3ZWRNb2R1bGVzKSB7XG5cdHZhciB1bmFjY2VwdGVkTW9kdWxlcyA9IHVwZGF0ZWRNb2R1bGVzLmZpbHRlcihmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRyZXR1cm4gcmVuZXdlZE1vZHVsZXMgJiYgcmVuZXdlZE1vZHVsZXMuaW5kZXhPZihtb2R1bGVJZCkgPCAwO1xuXHR9KTtcblx0dmFyIGxvZyA9IHJlcXVpcmUoXCIuL2xvZ1wiKTtcblxuXHRpZiAodW5hY2NlcHRlZE1vZHVsZXMubGVuZ3RoID4gMCkge1xuXHRcdGxvZyhcblx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XCJbSE1SXSBUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGRuJ3QgYmUgaG90IHVwZGF0ZWQ6IChUaGV5IHdvdWxkIG5lZWQgYSBmdWxsIHJlbG9hZCEpXCJcblx0XHQpO1xuXHRcdHVuYWNjZXB0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIXJlbmV3ZWRNb2R1bGVzIHx8IHJlbmV3ZWRNb2R1bGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBOb3RoaW5nIGhvdCB1cGRhdGVkLlwiKTtcblx0fSBlbHNlIHtcblx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gVXBkYXRlZCBtb2R1bGVzOlwiKTtcblx0XHRyZW5ld2VkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0aWYgKHR5cGVvZiBtb2R1bGVJZCA9PT0gXCJzdHJpbmdcIiAmJiBtb2R1bGVJZC5pbmRleE9mKFwiIVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0dmFyIHBhcnRzID0gbW9kdWxlSWQuc3BsaXQoXCIhXCIpO1xuXHRcdFx0XHRsb2cuZ3JvdXBDb2xsYXBzZWQoXCJpbmZvXCIsIFwiW0hNUl0gIC0gXCIgKyBwYXJ0cy5wb3AoKSk7XG5cdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdFx0bG9nLmdyb3VwRW5kKFwiaW5mb1wiKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR2YXIgbnVtYmVySWRzID0gcmVuZXdlZE1vZHVsZXMuZXZlcnkoZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIG1vZHVsZUlkID09PSBcIm51bWJlclwiO1xuXHRcdH0pO1xuXHRcdGlmIChudW1iZXJJZHMpXG5cdFx0XHRsb2coXG5cdFx0XHRcdFwiaW5mb1wiLFxuXHRcdFx0XHQnW0hNUl0gQ29uc2lkZXIgdXNpbmcgdGhlIG9wdGltaXphdGlvbi5tb2R1bGVJZHM6IFwibmFtZWRcIiBmb3IgbW9kdWxlIG5hbWVzLidcblx0XHRcdCk7XG5cdH1cbn07XG4iLCJ2YXIgbG9nTGV2ZWwgPSBcImluZm9cIjtcblxuZnVuY3Rpb24gZHVtbXkoKSB7fVxuXG5mdW5jdGlvbiBzaG91bGRMb2cobGV2ZWwpIHtcblx0dmFyIHNob3VsZExvZyA9XG5cdFx0KGxvZ0xldmVsID09PSBcImluZm9cIiAmJiBsZXZlbCA9PT0gXCJpbmZvXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwid2FybmluZ1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiLCBcImVycm9yXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwiZXJyb3JcIik7XG5cdHJldHVybiBzaG91bGRMb2c7XG59XG5cbmZ1bmN0aW9uIGxvZ0dyb3VwKGxvZ0ZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRcdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0XHRsb2dGbihtc2cpO1xuXHRcdH1cblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdGlmIChsZXZlbCA9PT0gXCJpbmZvXCIpIHtcblx0XHRcdGNvbnNvbGUubG9nKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHtcblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihtc2cpO1xuXHRcdH1cblx0fVxufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG52YXIgZ3JvdXAgPSBjb25zb2xlLmdyb3VwIHx8IGR1bW15O1xudmFyIGdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZCB8fCBkdW1teTtcbnZhciBncm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQgfHwgZHVtbXk7XG4vKiBlc2xpbnQtZW5hYmxlIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucyAqL1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBDb2xsYXBzZWQgPSBsb2dHcm91cChncm91cENvbGxhcHNlZCk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwRW5kID0gbG9nR3JvdXAoZ3JvdXBFbmQpO1xuXG5tb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHRsb2dMZXZlbCA9IGxldmVsO1xufTtcblxubW9kdWxlLmV4cG9ydHMuZm9ybWF0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdHZhciBtZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG5cdHZhciBzdGFjayA9IGVyci5zdGFjaztcblx0aWYgKCFzdGFjaykge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9IGVsc2UgaWYgKHN0YWNrLmluZGV4T2YobWVzc2FnZSkgPCAwKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2UgKyBcIlxcblwiICsgc3RhY2s7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHN0YWNrO1xuXHR9XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTYzMjgyMTU2NzkxOVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJDOi9Vc2Vycy9wZXRlci9EZXNrdG9wL3Byb2plY3RzL2Zsb2VtYS9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJwdWJsaWNQYXRoXCI6XCJcIixcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiNkZWZpbmUgR0xTTElGWSAxXFxuXFxudW5pZm9ybSBmbG9hdCB1QWxwaGE7XFxudW5pZm9ybSBzYW1wbGVyMkQgdE1hcDtcXG5cXG52YXJ5aW5nIHZlYzIgdlV2O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gIHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcblxcbiAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG4gIGdsX0ZyYWdDb2xvci5hID0gdUFscGhhO1xcbn1cXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIiNkZWZpbmUgR0xTTElGWSAxXFxuI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU5XFxuXFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuXFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuXFxudW5pZm9ybSBmbG9hdCB1U3BlZWQ7XFxudW5pZm9ybSB2ZWMyIHVWaWV3cG9ydFNpemVzO1xcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICB2VXYgPSB1djtcXG5cXG4gIHZlYzQgbmV3UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xcbiAgbmV3UG9zaXRpb24ueiAtPSBzaW4obmV3UG9zaXRpb24ueSAvIHVWaWV3cG9ydFNpemVzLnkgKiBQSSArIFBJIC8gMi4wKSAqIGFicyh1U3BlZWQpO1xcbiAgLy8gbmV3UG9zaXRpb24ueiAtPSBzaW4obmV3UG9zaXRpb24ueSAvIHVWaWV3cG9ydFNpemVzLnkgKiBQSSArIFBJIC8gMi4wKSAqIDAuNztcXG5cXG4gIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG5ld1Bvc2l0aW9uO1xcbn1cXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4jZGVmaW5lIEdMU0xJRlkgMVxcblxcbnVuaWZvcm0gZmxvYXQgdUFscGhhO1xcbnVuaWZvcm0gc2FtcGxlcjJEIHRNYXA7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICB2ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQodE1hcCwgdlV2KTtcXG5cXG4gIGdsX0ZyYWdDb2xvciA9IHRleHR1cmU7XFxuICBnbF9GcmFnQ29sb3IuYSA9IHVBbHBoYTtcXG59XFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcblxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICB2VXYgPSB1djtcXG5cXG4gIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxufVxcblwiOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoY2FjaGVkTW9kdWxlLmVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGNhY2hlZE1vZHVsZS5lcnJvcjtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dHJ5IHtcblx0XHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdFx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRcdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG1vZHVsZS5lcnJvciA9IGU7XG5cdFx0dGhyb3cgZTtcblx0fVxuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuY3NzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1yRiA9ICgpID0+IChcIm1haW4uXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNvblwiKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCI2MTFkYTQ5ZWUwMDNlMDc1MjZjNlwiKSIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJ2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jO1xuXG4vLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb25cbnZhciBjdXJyZW50Q2hpbGRNb2R1bGU7XG52YXIgY3VycmVudFBhcmVudHMgPSBbXTtcblxuLy8gc3RhdHVzXG52YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107XG52YXIgY3VycmVudFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4vLyB3aGlsZSBkb3dubG9hZGluZ1xudmFyIGJsb2NraW5nUHJvbWlzZXM7XG5cbi8vIFRoZSB1cGRhdGUgaW5mb1xudmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzO1xudmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0dmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlO1xuXHR2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTtcblx0bW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpO1xuXHRtb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzO1xuXHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0b3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTtcbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7XG5cdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXHRpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTtcblx0dmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuXHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcblx0XHRcdFx0dmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7XG5cdFx0XHRcdGlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuXHRcdFx0XHRcdHBhcmVudHMucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcblx0XHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuXHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcblx0XHRcdFx0XHRyZXF1ZXN0ICtcblx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuXHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHQpO1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmUocmVxdWVzdCk7XG5cdH07XG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiByZXF1aXJlW25hbWVdO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJlcXVpcmVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcXVpcmUsIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7XG5cdFx0fVxuXHR9XG5cdGZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdHJldHVybiB0cmFja0Jsb2NraW5nUHJvbWlzZShyZXF1aXJlLmUoY2h1bmtJZCkpO1xuXHR9O1xuXHRyZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vZHVsZUhvdE9iamVjdChtb2R1bGVJZCwgbWUpIHtcblx0dmFyIF9tYWluID0gY3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZDtcblx0dmFyIGhvdCA9IHtcblx0XHQvLyBwcml2YXRlIHN0dWZmXG5cdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfYWNjZXB0ZWRFcnJvckhhbmRsZXJzOiB7fSxcblx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuXHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuXHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuXHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuXHRcdF9tYWluOiBfbWFpbixcblx0XHRfcmVxdWlyZVNlbGY6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gbWUucGFyZW50cy5zbGljZSgpO1xuXHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gX21haW4gPyB1bmRlZmluZWQgOiBtb2R1bGVJZDtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuXHRcdH0sXG5cblx0XHQvLyBNb2R1bGUgQVBJXG5cdFx0YWN0aXZlOiB0cnVlLFxuXHRcdGFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2ssIGVycm9ySGFuZGxlcikge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBbaV1dID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRlY2xpbmU6IGZ1bmN0aW9uIChkZXApIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG5cdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG5cdFx0fSxcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG5cdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cdFx0aW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5fc2VsZkludmFsaWRhdGVkID0gdHJ1ZTtcblx0XHRcdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdFx0XHRjYXNlIFwiaWRsZVwiOlxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0XHRjYXNlIFwiY2hlY2tcIjpcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VcIjpcblx0XHRcdFx0Y2FzZSBcImFwcGx5XCI6XG5cdFx0XHRcdFx0KHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaChcblx0XHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvLyBpZ25vcmUgcmVxdWVzdHMgaW4gZXJyb3Igc3RhdGVzXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIE1hbmFnZW1lbnQgQVBJXG5cdFx0Y2hlY2s6IGhvdENoZWNrLFxuXHRcdGFwcGx5OiBob3RBcHBseSxcblx0XHRzdGF0dXM6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRpZiAoIWwpIHJldHVybiBjdXJyZW50U3RhdHVzO1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0dmFyIGlkeCA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblxuXHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0dmFyIHJlc3VsdHMgPSBbXTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcblx0XHRyZXN1bHRzW2ldID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cyk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0d2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pIHtcblx0aWYgKGJsb2NraW5nUHJvbWlzZXMubGVuZ3RoID09PSAwKSByZXR1cm4gZm4oKTtcblx0dmFyIGJsb2NrZXIgPSBibG9ja2luZ1Byb21pc2VzO1xuXHRibG9ja2luZ1Byb21pc2VzID0gW107XG5cdHJldHVybiBQcm9taXNlLmFsbChibG9ja2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90Q2hlY2soYXBwbHlPblVwZGF0ZSkge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcblx0fVxuXHRyZXR1cm4gc2V0U3RhdHVzKFwiY2hlY2tcIilcblx0XHQudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZSkge1xuXHRcdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpLnRoZW4oXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicHJlcGFyZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0XHRcdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoXG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRrZXlcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yQ1trZXldKFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUuYyxcblx0XHRcdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5tLFxuXHRcdFx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZWRNb2R1bGVzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0W10pXG5cdFx0XHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB1cGRhdGVkTW9kdWxlcztcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJhYm9ydFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHR2YXIgZGlzcG9zZVByb21pc2UgPSBzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHZhciBhcHBseVByb21pc2UgPSBzZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuXHR2YXIgZXJyb3I7XG5cdHZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcblx0fTtcblxuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5hcHBseSkge1xuXHRcdFx0dmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpO1xuXHRcdFx0aWYgKG1vZHVsZXMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChbZGlzcG9zZVByb21pc2UsIGFwcGx5UHJvbWlzZV0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiZmFpbFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBsaXN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImlkbGVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgfHwge1xuXHRcIm1haW5cIjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdFx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWRcblx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGhvdCB1cGRhdGUgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpO1xuXHR9KTtcbn1cblxuc2VsZltcIndlYnBhY2tIb3RVcGRhdGVmbG9lbWFcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKG5ld01vZHVsZUZhY3RvcnkpIHtcblx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdGlmIChcblx0XHRcdG1vZHVsZSAmJlxuXHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCB8fCBtb2R1bGUuaG90Ll9tYWluKSAmJlxuXHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuXHRcdFx0YXBwbGllZFVwZGF0ZVtvdXRkYXRlZE1vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG5cdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuXHRcdFx0IW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZFxuXHRcdCkge1xuXHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuXHRcdFx0XHRtb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdHJlcXVpcmU6IG1vZHVsZS5ob3QuX3JlcXVpcmVTZWxmLFxuXHRcdFx0XHRlcnJvckhhbmRsZXI6IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0fSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dmFyIGlkeDtcblx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG5cdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcblx0XHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhO1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG5cdFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG5cdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZS5jaGlsZHJlbltqXV07XG5cdFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG5cdFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcblx0XHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG5cdFx0XHR2YXIgZGVwZW5kZW5jeTtcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFwcGx5OiBmdW5jdGlvbiAocmVwb3J0RXJyb3IpIHtcblx0XHRcdC8vIGluc2VydCBuZXcgY29kZVxuXHRcdFx0Zm9yICh2YXIgdXBkYXRlTW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGFwcGxpZWRVcGRhdGUsIHVwZGF0ZU1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VXBkYXRlUnVudGltZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlUnVudGltZVtpXShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdGlmIChhY2NlcHRDYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihhY2NlcHRDYWxsYmFjaykgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChhY2NlcHRDYWxsYmFjayk7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVycy5wdXNoKGVycm9ySGFuZGxlcik7XG5cdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzLnB1c2goZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgY2FsbGJhY2tzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGVycm9ySGFuZGxlcnNba10gPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyc1trXShlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fVxuXHR9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJLmpzb25wID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBhcHBseUhhbmRsZXJzKSB7XG5cdGlmICghY3VycmVudFVwZGF0ZSkge1xuXHRcdGN1cnJlbnRVcGRhdGUgPSB7fTtcblx0XHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gW107XG5cdFx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdH1cblx0aWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdO1xuXHR9XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLmpzb25wID0gZnVuY3Rpb24gKFxuXHRjaHVua0lkcyxcblx0cmVtb3ZlZENodW5rcyxcblx0cmVtb3ZlZE1vZHVsZXMsXG5cdHByb21pc2VzLFxuXHRhcHBseUhhbmRsZXJzLFxuXHR1cGRhdGVkTW9kdWxlc0xpc3Rcbikge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHt9O1xuXHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7XG5cdGN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG5cdFx0b2JqW2tleV0gPSBmYWxzZTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9LCB7fSk7XG5cdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdGNodW5rSWRzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHQpIHtcblx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkpO1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHRcdCkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSk7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yTSA9ICgpID0+IHtcblx0aWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJ1bmRlZmluZWRcIikgdGhyb3cgbmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0OiBuZWVkIGZldGNoIEFQSVwiKTtcblx0cmV0dXJuIGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaG1yRigpKS50aGVuKChyZXNwb25zZSkgPT4ge1xuXHRcdGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSByZXR1cm47IC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcblx0XHRpZighcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1cGRhdGUgbWFuaWZlc3QgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHR9KTtcbn07XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvLyBtb2R1bGUgY2FjaGUgYXJlIHVzZWQgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanM/cHJvdG9jb2w9d3MlM0EmaG9zdG5hbWU9MC4wLjAuMCZwb3J0PTgwODAmcGF0aG5hbWU9JTJGd3MmbG9nZ2luZz1pbmZvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanNcIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9hcHAvaW5kZXguanNcIik7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3N0eWxlcy9pbmRleC5zY3NzXCIpO1xuIl0sIm5hbWVzIjpbImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsImNyZWF0ZVN0eWxlc2hlZXQiLCJmaW5kU3R5bGVzaGVldCIsIm9sZFRhZ3MiLCJuZXdUYWdzIiwiYXBwbHlIYW5kbGVyIiwiSGlnaGxpZ2h0IiwiQW5pbWF0aW9uIiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwiZWxlbWVudHMiLCJzdXBlciIsInRoaXMiLCJlbGVtZW50TGFiZWwiLCJxdWVyeVNlbGVjdG9yIiwiYW5pbWF0ZUluIiwiYW5pbWF0ZUluVGltZWxpbmUiLCJnc2FwIiwic2V0IiwiYXV0b0FscGhhIiwiZnJvbVRvIiwieSIsImR1cmF0aW9uIiwiZGVsYXkiLCJlYXNlIiwiYW5pbWF0ZU91dCIsIm9uUmVzaXplIiwiUGFyYWdyYXBoIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJwYXJhZ3JhcGgiLCJzcGxpdCIsImFwcGVuZCIsImVsZW1lbnRXb3JkU3BhbnMiLCJlbGVtZW50V29yZHMiLCJzdGFnZ2VyIiwiYW1vdW50IiwiY2FsY3VsYXRlIiwiVGl0bGUiLCJsaW5lcyIsInNwbGl0Q2hhcnMiLCJsaW5lIiwiaW5kZXgiLCJmcm9tIiwiQ29tcG9uZW50IiwiY3JlYXRlT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJvYnNlcnZlIiwiQXN5bmNMb2FkIiwic3JjIiwiY2xhc3NMaXN0IiwiYWRkIiwiZ2V0QXR0cmlidXRlIiwib25sb2FkIiwiQ29sb3JzTWFuYWdlciIsImNoYW5nZSIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJFdmVudEVtaXR0ZXIiLCJzZWxlY3RvciIsInNlbGVjdG9yQ2hpbGRyZW4iLCJjcmVhdGUiLCJhZGRFdmVudExpc3RlbmVycyIsIkhUTUxFbGVtZW50IiwiZWFjaCIsIm5hbWUiLCJ3aW5kb3ciLCJOb2RlTGlzdCIsImxlbmd0aCIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiaWQiLCJhbmltYXRpb25zVGl0bGVzIiwiYW5pbWF0aW9uc1BhcmFncmFwaHMiLCJhbmltYXRpb25zSGlnaGxpZ2h0cyIsInByZWxvYWRlcnMiLCJ0cmFuc2Zvcm1QcmVmaXgiLCJQcmVmaXgiLCJzY3JvbGwiLCJjdXJyZW50IiwidGFyZ2V0IiwibGFzdCIsImxpbWl0IiwiY3JlYXRlQW5pbWF0aW9ucyIsImNyZWF0ZVByZWxvYWRlciIsIm1hcCIsImFuaW1hdGlvbnMiLCJwdXNoIiwic2hvdyIsImFuaW1hdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiR1NBUCIsImNhbGwiLCJfIiwiaGlkZSIsImRlc3Ryb3kiLCJ0byIsIm9uQ29tcGxldGUiLCJ1cGRhdGUiLCJ3cmFwcGVyIiwic3R5bGUiLCJjbGllbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm9uV2hlZWwiLCJwaXhlbFkiLCJhZGRFdmVudExpc3RlbmVyIiwiYmluZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJCdXR0b24iLCJwYXRoIiwicGF0aExlbmd0aCIsImdldFRvdGFsTGVuZ3RoIiwidGltZWxpbmUiLCJwYXVzZWQiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlRGFzaGFycmF5Iiwib25Nb3VzZUVudGVyIiwicGxheSIsIm9uTW91c2VMZWF2ZSIsInJldmVyc2UiLCJvbk1vdXNlRW50ZXJFdmVudCIsIm9uTW91c2VMZWF2ZUV2ZW50IiwiR2FsbGVyeSIsImdsIiwiZ2VvbWV0cnkiLCJzY2VuZSIsInNpemVzIiwiZ3JvdXAiLCJUcmFuc2Zvcm0iLCJjcmVhdGVNZWRpYXMiLCJzZXRQYXJlbnQiLCJtZWRpYXMiLCJtZWRpYSIsIm1lZGlhRWxlbWVudHMiLCJNZWRpYSIsImxlcnAiLCJldmVudCIsImJvdW5kcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImhlaWdodCIsIm9uVG91Y2hEb3duIiwieCIsIm9uVG91Y2hNb3ZlIiwiZGlzdGFuY2UiLCJzdGFydCIsImVuZCIsImNvbnNvbGUiLCJsb2ciLCJvblRvdWNoVXAiLCJkaXJlY3Rpb24iLCJtZXNoIiwicG9zaXRpb24iLCJzY2FsZSIsImV4dHJhIiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVUZXh0dXJlIiwiY3JlYXRlUHJvZ3JhbSIsImNyZWF0ZU1lc2giLCJjaGlsZE5vZGVzIiwidGV4dHVyZSIsIlRFWFRVUkVTIiwicHJvZ3JhbSIsIlByb2dyYW0iLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsInVuaWZvcm1zIiwidE1hcCIsInZhbHVlIiwidUFscGhhIiwiTWVzaCIsImNyZWF0ZUJvdW5kcyIsInVwZGF0ZVNjYWxlIiwidXBkYXRlWCIsInVwZGF0ZVkiLCJ1cGRhdGVSb3RhdGlvbiIsInJvdGF0aW9uIiwieiIsIk1hdGgiLCJQSSIsImxlZnQiLCJ0b3AiLCJjb3MiLCJjcmVhdGVHZW9tZXRyeSIsImNyZWF0ZUdhbGxlcmllcyIsImdhbGxlcmllcyIsImdhbGxlcnkiLCJQbGFuZSIsImdhbGxlcmllc0VsZW1lbnRzIiwib3BhY2l0eSIsIm11bHRpcGxpZXIiLCJ0cmFuc2l0aW9uIiwiZ2FsbGVyeUVsZW1lbnQiLCJnYWxsZXJ5V3JhcHBlckVsZW1lbnQiLCJtZWRpYXNFbGVtZW50cyIsImRlc2NyaXB0aW9uRWxlbWVudHMiLCJ0aXRsZUVsZW1lbnRzIiwiY3JlYXRlR2FsbGVyeSIsImFuaW1hdGUiLCJvbkNoYW5nZUluZGV4IiwiY3VycmVudENvbGxlY3Rpb24iLCJwYXJzZUludCIsImVsIiwiaWR4IiwicmVtb3ZlIiwicGl4ZWxYIiwiZ2FsbGVyeUJvdW5kcyIsImNsaWVudFdpZHRoIiwicm91bmQiLCJzcGVlZCIsInVWaWV3cG9ydFNpemVzIiwidVNwZWVkIiwiaGVpZ2h0U2VnbWVudHMiLCJ3aWR0aFNlZ21lbnRzIiwiZ2FsbGVyeVdpZHRoIiwiZ2FsbGVyeUhlaWdodCIsIlRyYW5zaXRpb24iLCJkZXRhaWxzIiwidXJsIiwic2V0RWxlbWVudCIsIkNhbnZhcyIsInRlbXBsYXRlIiwiY3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVDYW1lcmEiLCJjcmVhdGVTY2VuZSIsImlzRG93biIsInJlbmRlcmVyIiwiUmVuZGVyZXIiLCJhbHBoYSIsImFudGlhbGlhcyIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNhbnZhcyIsImNhbWVyYSIsIkNhbWVyYSIsImNyZWF0ZUhvbWUiLCJob21lIiwiSG9tZSIsImRlc3Ryb3lIb21lIiwiY3JlYXRlQWJvdXQiLCJhYm91dCIsIkFib3V0IiwiZGVzdHJveUFib3V0IiwiY3JlYXRlQ29sbGVjdGlvbnMiLCJjb2xsZWN0aW9ucyIsIkNvbGxlY3Rpb25zIiwiZGVzdHJveUNvbGxlY3Rpb25zIiwiY3JlYXRlRGV0YWlsIiwiZGV0YWlsIiwiRGV0YWlsIiwiZGVzdHJveURldGFpbCIsIm9uUHJlbG9hZGVkIiwib25DaGFuZ2UiLCJzZXRTaXplIiwicGVyc3BlY3RpdmUiLCJhc3BlY3QiLCJmb3YiLCJ0YW4iLCJvbkNoYW5nZVN0YXJ0IiwiaXNGcm9tQ29sbGVjdGlvbnNUb0RldGFpbHMiLCJpbmRleE9mIiwiaXNGcm9tRGV0YWlsc1RvQ29sbGVjdGlvbnMiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJjaGFuZ2VkVG91Y2hlcyIsInJlbmRlciIsIk5hdmlnYXRpb24iLCJpdGVtcyIsImxpbmtzIiwiQ09MT1JfQlJJR0hUX0dSQVkiLCJDT0xPUl9RVUFSVEVSX1NQQU5JU0hfV0hJVEUiLCJQcmVsb2FkZXIiLCJ0ZXh0IiwibnVtYmVyIiwibnVtYmVyVGV4dCIsImV4cHJlc3Npb24iLCJ0aXRsZVNwYW5zIiwiY3JlYXRlTG9hZGVyIiwiQVNTRVRTIiwiaW1hZ2VVcmwiLCJUZXh0dXJlIiwiZ2VuZXJhdGVNaXBtYXBzIiwiaW1hZ2UiLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwib25Bc3NldExvYWRlZCIsInBlcmNlbnRhZ2VMb2FkZWQiLCJpbm5lclRleHQiLCJvbkxvYWRlZCIsInNjYWxlWSIsInRyYW5zZm9ybU9yaWdpbiIsImVtaXQiLCJwYXJlbnROb2RlIiwiY3JlYXRlQ29udGVudCIsImNyZWF0ZUNhbnZhcyIsImNyZWF0ZU5hdmlnYXRpb24iLCJjcmVhdGVQYWdlcyIsImFkZExpbmtMaXN0ZW5lcnMiLCJuYXZpZ2F0aW9uIiwicHJlbG9hZGVyIiwib25jZSIsImNvbnRlbnQiLCJwYWdlcyIsInBhZ2UiLCJmcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlcyIsImZldGNoIiwic3RhdHVzIiwiaHRtbCIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiaW5uZXJIVE1MIiwiZGl2Q29udGVudCIsInNldEF0dHJpYnV0ZSIsIm9uUG9wU3RhdGUiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwibm9ybWFsaXplZFdoZWVsIiwibm9ybWFsaXplV2hlZWwiLCJsaW5rIiwib25jbGljayIsInByZXZlbnREZWZhdWx0IiwiaHJlZiIsIlBhZ2UiLCJidXR0b24iLCJ0aXRsZXMiLCJyYXdMaW5lcyIsInRvU3RyaW5nIiwidHJpbSIsInN0cmluZyIsImMiLCJqb2luIiwiY2hhcnMiLCJ3b3JkcyIsInNwbGl0cyIsIml0ZW0iLCJjb25jYXQiLCJpc0xpbmsiLCJ3b3JkIiwiaW5jbHVkZXMiLCJzcGxpdFRleHQiLCJwYXJzZUxpbmUiLCJzcGFucyIsInNwYW4iLCJpc1NpbmdsZUxldHRlciIsInRleHRDb250ZW50IiwiaXNOb3RFbXB0eSIsImlzTm90QW5kQ2hhcmFjdGVyIiwiaXNOb3REYXNoQ2hhcmFjdGVyIiwib2Zmc2V0VG9wIiwibW9kdWxlIiwiZXhwb3J0cyIsImFuc2lIVE1MIiwiX3JlZ0FOU0kiLCJfZGVmQ29sb3JzIiwicmVzZXQiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwibGlnaHRncmV5IiwiZGFya2dyZXkiLCJfc3R5bGVzIiwiX29wZW5UYWdzIiwiX2Nsb3NlVGFncyIsInRlc3QiLCJhbnNpQ29kZXMiLCJyZXQiLCJyZXBsYWNlIiwibWF0Y2giLCJzZXEiLCJvdCIsInBvcCIsImN0IiwibCIsIkFycmF5IiwiX3NldFRhZ3MiLCJjb2xvcnMiLCJjb2RlIiwib3JpQ29sb3IiLCJuIiwic2V0Q29sb3JzIiwiRXJyb3IiLCJfZmluYWxDb2xvcnMiLCJrZXkiLCJoZXgiLCJoYXNPd25Qcm9wZXJ0eSIsImlzQXJyYXkiLCJzb21lIiwiaCIsImRlZkhleENvbG9yIiwic2xpY2UiLCJ0YWdzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJvcGVuIiwiY2xvc2UiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsImluaXQiLCJlbWl0dGVyIiwicmVqZWN0IiwiZXJyb3JMaXN0ZW5lciIsImVyciIsInJlbW92ZUxpc3RlbmVyIiwicmVzb2x2ZXIiLCJhcmd1bWVudHMiLCJldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIiLCJoYW5kbGVyIiwiZmxhZ3MiLCJvbiIsImFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsInVuZGVmaW5lZCIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsImxpc3RlbmVyIiwiVHlwZUVycm9yIiwiX2dldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwicHJlcGVuZCIsIm0iLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJuZXdMaXN0ZW5lciIsInVuc2hpZnQiLCJ3YXJuZWQiLCJ3IiwiU3RyaW5nIiwiY291bnQiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwiYXJyIiwiaSIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiY29weSIsIndyYXBMaXN0ZW5lciIsImFyZyIsImVudW1lcmFibGUiLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwibGVuIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3N1cHBvcnRzM0QiLCJfdHJhbnNmb3JtUHJvcHMiLCJfUkFEMkRFRyIsIl9ERUcyUkFEIiwiX2F0YW4yIiwiYXRhbjIiLCJfY2Fwc0V4cCIsIl9ob3Jpem9udGFsRXhwIiwiX2NvbXBsZXhFeHAiLCJfcHJvcGVydHlBbGlhc2VzIiwiX3JlbmRlckNTU1Byb3AiLCJyYXRpbyIsImRhdGEiLCJ0IiwicCIsInMiLCJ1IiwiX3JlbmRlclByb3BXaXRoRW5kIiwiZSIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsImIiLCJfcmVuZGVyUm91bmRlZENTU1Byb3AiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwicHJvcGVydHkiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9nc2FwIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsImNhY2hlIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsImNyZWF0ZUVsZW1lbnROUyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInRvTG93ZXJDYXNlIiwiX2NoZWNrUHJvcFByZWZpeCIsIl9wcmVmaXhlcyIsInByZWZlclByZWZpeCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwiX2luaXRDb3JlIiwiY3NzVGV4dCIsIl9nZXRCQm94SGFjayIsInN3YXBJZlBvc3NpYmxlIiwiYmJveCIsInN2ZyIsIm93bmVyU1ZHRWxlbWVudCIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImRpc3BsYXkiLCJnZXRCQm94IiwiX2dzYXBCQm94IiwiaW5zZXJ0QmVmb3JlIiwiX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyIsImF0dHJpYnV0ZXNBcnJheSIsImhhc0F0dHJpYnV0ZSIsIl9nZXRCQm94IiwiX2lzU1ZHIiwiZ2V0Q1RNIiwiX3JlbW92ZVByb3BlcnR5IiwicmVtb3ZlUHJvcGVydHkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfYWRkTm9uVHdlZW5pbmdQVCIsInBsdWdpbiIsImJlZ2lubmluZyIsIm9ubHlTZXRBdEVuZCIsInB0IiwiUHJvcFR3ZWVuIiwiX3B0IiwiX3Byb3BzIiwiX25vbkNvbnZlcnRpYmxlVW5pdHMiLCJkZWciLCJyYWQiLCJ0dXJuIiwiX2NvbnZlcnRUb1VuaXQiLCJ1bml0IiwicHgiLCJwYXJlbnQiLCJpc1NWRyIsImN1clZhbHVlIiwicGFyc2VGbG9hdCIsImN1clVuaXQiLCJob3Jpem9udGFsIiwiaXNSb290U1ZHIiwidGFnTmFtZSIsIm1lYXN1cmVQcm9wZXJ0eSIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwidGltZSIsIl90aWNrZXIiLCJfcm91bmQiLCJfZ2V0Q2FjaGUiLCJfZ2V0IiwidW5jYWNoZSIsIl9wYXJzZVRyYW5zZm9ybSIsIm9yaWdpbiIsIl9maXJzdFR3b09ubHkiLCJ6T3JpZ2luIiwiX3NwZWNpYWxQcm9wcyIsIl9nZXRQcm9wZXJ0eSIsIl90d2VlbkNvbXBsZXhDU1NTdHJpbmciLCJwcm9wIiwiYSIsInJlc3VsdCIsInN0YXJ0VmFsdWVzIiwic3RhcnROdW0iLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJyZWxhdGl2ZSIsIl9yZW5kZXJDb21wbGV4U3RyaW5nIiwibWF0Y2hJbmRleCIsIl9jb2xvclN0cmluZ0ZpbHRlciIsIl9udW1XaXRoVW5pdEV4cCIsInN1YnN0cmluZyIsIl9jb25maWciLCJfbmV4dCIsInIiLCJfcmVsRXhwIiwiX2tleXdvcmRUb1BlcmNlbnQiLCJib3R0b20iLCJyaWdodCIsImNlbnRlciIsIl9yZW5kZXJDbGVhclByb3BzIiwidHdlZW4iLCJfdGltZSIsIl9kdXIiLCJjbGVhclRyYW5zZm9ybXMiLCJwcm9wcyIsImNsZWFyUHJvcHMiLCJwciIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJfbnVtRXhwIiwiX2dldE1hdHJpeCIsImZvcmNlMkQiLCJ0ZW1wIiwiYWRkZWRUb0RPTSIsIm1hdHJpeCIsInRyYW5zZm9ybSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsImQiLCJmIiwib2Zmc2V0UGFyZW50IiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsInNtb290aCIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJkZXRlcm1pbmFudCIsInhPcmlnaW5PbGQiLCJ4T3JpZ2luIiwieU9yaWdpbk9sZCIsInlPcmlnaW4iLCJ4T2Zmc2V0T2xkIiwieE9mZnNldCIsInlPZmZzZXRPbGQiLCJ5T2Zmc2V0IiwidHgiLCJ0eSIsIm9yaWdpblNwbGl0IiwiR1NDYWNoZSIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsInNrZXdYIiwic2tld1kiLCJhbmdsZSIsInNpbiIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsImludmVydGVkU2NhbGVYIiwic3FydCIsImFicyIsImZvcmNlQ1NTIiwieFBlcmNlbnQiLCJvZmZzZXRXaWR0aCIsInlQZXJjZW50Iiwib2Zmc2V0SGVpZ2h0IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJmb3JjZTNEIiwiX3JlbmRlclNWR1RyYW5zZm9ybXMiLCJfcmVuZGVyQ1NTVHJhbnNmb3JtcyIsIl9yZW5kZXJOb24zRFRyYW5zZm9ybXMiLCJfYWRkUHhUcmFuc2xhdGUiLCJnZXRVbml0IiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwiX3JlZiIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsImExMSIsImEyMSIsIl9yZWYyIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJjYXAiLCJpc1N0cmluZyIsIl9pc1N0cmluZyIsImZpbmFsVmFsdWUiLCJfYXNzaWduIiwic291cmNlIiwiX2FkZFJhd1RyYW5zZm9ybVBUcyIsImVuZENhY2hlIiwic3RhcnRDYWNoZSIsIl9mb3JFYWNoTmFtZSIsInNpZGUiLCJ2YXJzIiwicG9zaXRpb25BbmRTY2FsZSIsImFsbCIsIkNTU1BsdWdpbiIsInJlZ2lzdGVyIiwidGFyZ2V0VGVzdCIsIm5vZGVUeXBlIiwidGFyZ2V0cyIsInNwZWNpYWxQcm9wIiwiaXNUcmFuc2Zvcm1SZWxhdGVkIiwidHJhbnNmb3JtUHJvcFR3ZWVuIiwiaGFzUHJpb3JpdHkiLCJzdGFydEF0IiwiX3BsdWdpbnMiLCJfY2hlY2tQbHVnaW4iLCJfcmVwbGFjZVJhbmRvbSIsIl9jb2xvckV4cCIsInBhcnNlVHJhbnNmb3JtIiwic21vb3RoT3JpZ2luIiwiZGVwIiwiYXV0b1JvdW5kIiwiX21pc3NpbmdQbHVnaW4iLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiYWxpYXNlcyIsImdldFNldHRlciIsIl9pc1VuZGVmaW5lZCIsIl9nZXRTZXR0ZXIiLCJjb3JlIiwiX2NvcmVJbml0dGVkIiwiX3dpbmRvd0V4aXN0cyIsIl9nZXRHU0FQIiwicmVnaXN0ZXJQbHVnaW4iLCJfY2hlY2tSZWdpc3RlciIsInBsdWdpbnMiLCJjc3MiLCJDU1NSdWxlUGx1Z2luIiwidmVyc2lvbiIsIl9nc1Byb3h5Iiwic3MiLCJnZXRSdWxlIiwiaiIsImN1clNTIiwicnVsZVByb3AiLCJzdHlsZVNoZWV0cyIsInBzZXVkbyIsInNlbGVjdG9yVGV4dCIsIl9ib2R5IiwiX3BsYWNlaG9sZGVyRGl2IiwiX2NoZWNrUHJlZml4IiwiX3RvQXJyYXkiLCJfc3VwcG9ydHNQYXNzaXZlIiwiX2lzVG91Y2hEZXZpY2UiLCJfdG91Y2hFdmVudExvb2t1cCIsIl9kcmFnQ291bnQiLCJfaXNNdWx0aVRvdWNoaW5nIiwiX2lzQW5kcm9pZCIsIkluZXJ0aWFQbHVnaW4iLCJfZGVmYXVsdEN1cnNvciIsIl9zdXBwb3J0c1BvaW50ZXIiLCJfYWRkUGFkZGluZ0JSIiwiX2lzRnVuY3Rpb24iLCJfaXNPYmplY3QiLCJfZW1wdHlGdW5jIiwiX2lzQXJyYXkiLCJfYmlnTnVtIiwiX2lkZW50aXR5TWF0cml4IiwiTWF0cml4MkQiLCJfZ2V0VGltZSIsIkRhdGUiLCJub3ciLCJnZXRUaW1lIiwiX3JlbmRlclF1ZXVlIiwiX2xvb2t1cCIsIl9sb29rdXBDb3VudCIsIl9jbGlja2FibGVUYWdFeHAiLCJfbGFzdERyYWdUaW1lIiwiX3RlbXAxIiwiX3dpbmRvd1Byb3h5IiwiX2NvcHkiLCJvYmoiLCJmYWN0b3IiLCJfc2V0VG91Y2hBY3Rpb25Gb3JBbGxEZXNjZW5kYW50cyIsImNoaWxkcmVuIiwidG91Y2hBY3Rpb24iLCJfcmVuZGVyUXVldWVUaWNrIiwiZnVuYyIsIl9yZW5kZXJRdWV1ZVRpbWVvdXQiLCJ0aWNrZXIiLCJfcmVtb3ZlRnJvbVJlbmRlclF1ZXVlIiwic3BsaWNlIiwib3ZlcndyaXRlIiwiY2FwdHVyZSIsInRvdWNoVHlwZSIsInBhc3NpdmUiLCJfcmVtb3ZlTGlzdGVuZXIiLCJfcHJldmVudERlZmF1bHQiLCJwcmV2ZW50TWFuaXB1bGF0aW9uIiwiX29uTXVsdGlUb3VjaERvY3VtZW50RW5kIiwiX29uTXVsdGlUb3VjaERvY3VtZW50IiwiX2dldERvY1Njcm9sbFRvcCIsImRvYyIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwiX2dldERvY1Njcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbExlZnQiLCJfYWRkU2Nyb2xsTGlzdGVuZXIiLCJjYWxsYmFjayIsIl9pc1Jvb3QiLCJfcmVtb3ZlU2Nyb2xsTGlzdGVuZXIiLCJfZ2V0TWF4U2Nyb2xsIiwiYXhpcyIsImRpbSIsImNsaWVudCIsIm1heCIsIl9yZWNvcmRNYXhTY3JvbGxzIiwic2tpcEN1cnJlbnQiLCJfZ3NNYXhTY3JvbGxYIiwiX2dzTWF4U2Nyb2xsWSIsIl9nc1Njcm9sbFgiLCJfZ3NTY3JvbGxZIiwiX3NldFN0eWxlIiwiX2dldENvbXB1dGVkU3R5bGUiLCJFbGVtZW50IiwiaG9zdCIsIl90ZW1wUmVjdCIsIl9wYXJzZVJlY3QiLCJvd25lckRvY3VtZW50IiwicGFnZVgiLCJwYWdlWSIsIl9kaXNwYXRjaEV2ZW50IiwiY2FsbGJhY2tOYW1lIiwiY2FsbGJhY2tTY29wZSIsInBvaW50ZXJFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJfZ2V0Qm91bmRzIiwib2Zmc2V0IiwiX2dldEVsZW1lbnRCb3VuZHMiLCJtaW4iLCJtaW5YIiwibWluUm90YXRpb24iLCJtaW5ZIiwibWF4WCIsIm1heFJvdGF0aW9uIiwibWF4WSIsIl9wb2ludDEiLCJwMSIsInAyIiwicDMiLCJwNCIsImNvbnRleHRQYXJlbnQiLCJ2aWV3Qm94IiwiYm94U2l6aW5nIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJnZXRHbG9iYWxNYXRyaXgiLCJtdWx0aXBseSIsIl9wYXJzZUluZXJ0aWEiLCJkcmFnZ2FibGUiLCJzbmFwIiwiZm9yY2VaZXJvVmVsb2NpdHkiLCJ2ZWxvY2l0eSIsIl9pc0NsaWNrYWJsZSIsIm5vZGVOYW1lIiwiX3NldFNlbGVjdGFibGUiLCJzZWxlY3RhYmxlIiwib25kcmFnc3RhcnQiLCJvbnNlbGVjdHN0YXJ0IiwibGF6eSIsInVzZXJTZWxlY3QiLCJfaXNGaXhlZCIsIlNjcm9sbFByb3h5IiwidXRpbHMiLCJ0b0FycmF5IiwiZWxlbWVudFdpZHRoIiwiZWxlbWVudEhlaWdodCIsImNvbnRlbnRIZWlnaHQiLCJuZXh0Tm9kZSIsInRyYW5zZm9ybVN0YXJ0IiwidHJhbnNmb3JtRW5kIiwibm9kZSIsImZpcnN0Q2hpbGQiLCJvZmZzZXRMZWZ0IiwicHJldlRvcCIsInByZXZMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJleHRyYVBhZFJpZ2h0IiwibWF4TGVmdCIsIm1heFRvcCIsImZvcmNlIiwiZGlmIiwib2xkT2Zmc2V0Iiwia2lsbFR3ZWVuc09mIiwib25LaWxsIiwiX3NraXAiLCJwYWRkaW5nUmlnaHQiLCJtYXhTY3JvbGxUb3AiLCJtYXhTY3JvbGxMZWZ0IiwiZGlzYWJsZSIsImVuYWJsZSIsImNhbGlicmF0ZSIsIndpZHRoTWF0Y2hlcyIsInBhZGRpbmdMZWZ0Iiwib3ZlcmZsb3ciLCJ2ZXJ0aWNhbEFsaWduIiwicGFkZGluZ0JvdHRvbSIsInJlcXVpcmVkIiwibmF2IiwibmF2aWdhdG9yIiwiUG9pbnRlckV2ZW50IiwiY3Vyc29yIiwidXNlckFnZW50IiwiTWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwiY2hpbGQiLCJjaGlsZFN0eWxlIiwidmFsIiwidHlwZXMiLCJzdGFuZGFyZCIsImNvbnZlcnRlZCIsImlzUHJlc3NlZCIsImVuZERyYWciLCJpbmVydGlhIiwiY2hlY2tQcmVmaXgiLCJEcmFnZ2FibGUiLCJfRXZlbnREaXNwYXRjaGVyIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3RoaXMyIiwiZHJhZ1Jlc2lzdGFuY2UiLCJlZGdlUmVzaXN0YW5jZSIsImxvY2tBeGlzIiwiYXV0b1Njcm9sbCIsImxvY2tlZEF4aXMiLCJhbGxvd0V2ZW50RGVmYXVsdCIsImdldFByb3BlcnR5IiwiZW5hYmxlZCIsInNjcm9sbFByb3h5Iiwic3RhcnRQb2ludGVyWCIsInN0YXJ0UG9pbnRlclkiLCJzdGFydEVsZW1lbnRYIiwic3RhcnRFbGVtZW50WSIsImhhc0JvdW5kcyIsImhhc0RyYWdDYWxsYmFjayIsImhhc01vdmVDYWxsYmFjayIsInRvdWNoIiwidG91Y2hJRCIsInJvdGF0aW9uT3JpZ2luIiwiZGlydHkiLCJvbGQiLCJzbmFwWCIsInNuYXBZIiwic25hcFhZIiwiaXNDbGlja2luZyIsInRvdWNoRXZlbnRUYXJnZXQiLCJpbnRlcnJ1cHRlZCIsImFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmciLCJ0b3VjaERyYWdBeGlzIiwiaXNEaXNwYXRjaGluZyIsImNsaWNrRGlzcGF0Y2giLCJ0cnVzdGVkQ2xpY2tEaXNwYXRjaCIsImlzUHJldmVudGluZ0RlZmF1bHQiLCJpbm5lck1hdHJpeCIsInh5TW9kZSIsInJvdGF0aW9uTW9kZSIsInhQcm9wIiwieVByb3AiLCJhbGxvd1giLCJhbGxvd1kiLCJtaW5pbXVtTW92ZW1lbnQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwidHJpZ2dlcnMiLCJ0cmlnZ2VyIiwiaGFuZGxlIiwia2lsbFByb3BzIiwiZHJhZ0VuZFRpbWUiLCJjaGVja0F1dG9TY3JvbGxCb3VuZHMiLCJhdXRvU2Nyb2xsTWFyZ2luVG9wIiwiYXV0b1Njcm9sbE1hcmdpblJpZ2h0IiwiYXV0b1Njcm9sbE1hcmdpbkJvdHRvbSIsImF1dG9TY3JvbGxNYXJnaW5MZWZ0IiwiaXNDbGlja2FibGUiLCJjbGlja2FibGVUZXN0IiwiY2xpY2tUaW1lIiwiZ3NDYWNoZSIsImdldENhY2hlIiwiaXNGaXhlZCIsImdldFByb3BBc051bSIsIm93bmVyRG9jIiwib25Db250ZXh0TWVudSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN1cHByZXNzRXZlbnRzIiwiaXNEcmFnZ2luZyIsImlzUm9vdCIsInJlY3QiLCJwb2ludGVyWCIsInBvaW50ZXJZIiwiY2hhbmdlWCIsImNoYW5nZVkiLCJnYXAiLCJhdXRvU2Nyb2xsRmFjdG9yIiwic2Nyb2xsVG8iLCJzZXRQb2ludGVyUG9zaXRpb24iLCJkZWx0YVgiLCJkZWx0YVkiLCJzeW5jWFkiLCJza2lwT25VcGRhdGUiLCJza2lwU25hcCIsInNuYXBwZWRWYWx1ZSIsImlzVGhyb3dpbmciLCJidWlsZFNuYXBGdW5jIiwiZWRnZVRvbGVyYW5jZSIsImNsb3Nlc3QiLCJhYnNEaWYiLCJjYWxjdWxhdGVCb3VuZHMiLCJ0YXJnZXRCb3VuZHMiLCJzbmFwSXNSYXciLCJsaXZlU25hcCIsInBvaW50cyIsInJhZGl1cyIsInBvaW50IiwiZHgiLCJkeSIsImRpc3QiLCJtaW5EaXN0IiwiYnVpbGRQb2ludFNuYXBGdW5jIiwib25UaHJvd0NvbXBsZXRlIiwib25UaHJvd0ludGVycnVwdCIsIm92ZXJzaG9vdFRvbGVyYW5jZSIsInJlc2lzdGFuY2UiLCJ0aHJvd1Jlc2lzdGFuY2UiLCJsaW5rZWRQcm9wcyIsIm1pbkR1cmF0aW9uIiwibWF4RHVyYXRpb24iLCJvdmVyc2hvb3QiLCJvbkludGVycnVwdCIsIm9uVXBkYXRlIiwiZmFzdE1vZGUiLCJvblVwZGF0ZVBhcmFtcyIsImVuZFgiLCJlbmRZIiwiZW5kUm90YXRpb24iLCJhcHBseUJvdW5kcyIsInVwZGF0ZU1hdHJpeCIsInNoaWZ0U3RhcnQiLCJlcXVhbHMiLCJpbnZlcnNlIiwicmVjb3JkU3RhcnRQb3NpdGlvbnMiLCJwYXJzZWRPcmlnaW4iLCJvZmZzZXRYIiwib2Zmc2V0WSIsImlzVHdlZW5pbmciLCJzdGFydFgiLCJzdGFydFkiLCJpc0FjdGl2ZSIsInJlbW92ZVBsYWNlaG9sZGVyIiwib25QcmVzcyIsImN1cnJlbnRUYXJnZXQiLCJvblJlbGVhc2UiLCJvbk1vdmUiLCJkcmFnQ2xpY2thYmxlcyIsImFsbG93Q29udGV4dE1lbnUiLCJjdHJsS2V5Iiwid2hpY2giLCJpZGVudGlmaWVyIiwicG9pbnRlcklkIiwia2lsbCIsInpJbmRleEJvb3N0IiwiekluZGV4Iiwib25EcmFnIiwiZHJhZyIsIm1vdmUiLCJhY3RpdmVDdXJzb3IiLCJvcmlnaW5hbEV2ZW50IiwibG9ja0F4aXNPblRvdWNoU2Nyb2xsIiwib25Mb2NrQXhpcyIsImNhbmNlbGFibGUiLCJpbnZva2VPbk1vdmUiLCJ4Q2hhbmdlIiwieUNoYW5nZSIsImRyYWdUb2xlcmFuY2UiLCJwcmV2UG9pbnRlclgiLCJwcmV2UG9pbnRlclkiLCJwcmV2U3RhcnRFbGVtZW50WSIsInByZXZYIiwicHJldlkiLCJwcmV2RW5kWCIsInByZXZFbmRZIiwicHJldkVuZFJvdGF0aW9uIiwicHJldkRpcnR5IiwiSUQiLCJfaGFzVG91Y2hJRCIsInN5bnRoZXRpY0V2ZW50IiwiZXZlbnRUYXJnZXQiLCJzeW50aGV0aWNDbGljayIsIndhc0RyYWdnaW5nIiwiaXNDb250ZXh0TWVudVJlbGVhc2UiLCJwbGFjZWhvbGRlckRlbGF5ZWRDYWxsIiwiZGVsYXllZENhbGwiLCJ0aHJvd1Byb3BzIiwiZGVmYXVsdFByZXZlbnRlZCIsImNsaWNrIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInNjcmVlblgiLCJzY3JlZW5ZIiwidXBkYXRlU2Nyb2xsIiwib25DbGljayIsInJlY2VudGx5Q2xpY2tlZCIsInJlY2VudGx5RHJhZ2dlZCIsImFscmVhZHlEaXNwYXRjaGVkIiwiYWxyZWFkeURpc3BhdGNoZWRUcnVzdGVkIiwidHJ1c3RlZCIsImlzVHJ1c3RlZCIsInN1cHByZXNzQ2xpY2tPbkRyYWciLCJsb2NhbGl6ZVBvaW50Iiwic3RhcnREcmFnIiwiYWxpZ24iLCJyMSIsInIyIiwiaGl0VGVzdCIsInRpbWVTaW5jZURyYWciLCJ0aW1lU2luY2VDbGljayIsInRocmVzaG9sZCIsImdldERpcmVjdGlvbiIsImRpYWdvbmFsVGhyZXNob2xkIiwibW9kZSIsImdldFZlbG9jaXR5IiwibmV3Qm91bmRzIiwic3RpY2t5IiwiaWdub3JlRXh0ZXJuYWxDaGFuZ2VzIiwibTIiLCJzZXRWYXJzIiwidG91Y2hDYWxsb3V0IiwidHJhY2siLCJfZ3NEcmFnSUQiLCJkcmFnZ2luZyIsInVudHJhY2siLCJkZWZhdWx0cyIsIl9leHRlbmQiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJfX3Byb3RvX18iLCJvYmoxIiwib2JqMiIsIm92ZXJsYXAiLCJhcmVhIiwiaXNSYXRpbyIsImlzT3V0c2lkZSIsIkV2ZW50RGlzcGF0Y2hlciIsIl9wcm90byIsIl90aGlzIiwiX3NldERlZmF1bHRzIiwiX3JlZ2lzdGVyRWFzZSIsIl9ib29sZWFuIiwiZGVmYXVsdFZhbHVlIiwicmVnaXN0ZXJFYXNlIiwiZWFzZXMiLCJwYXJzZUVhc2UiLCJjcmVhdGVDb25maWciLCJjb25maWciLCJTbG93TW8iLCJFeHBvU2NhbGVFYXNlIiwiUm91Z2hFYXNlIiwiRWFzZVBhY2siLCJnbG9iYWxzIiwiX2NyZWF0ZVNsb3dNbyIsImxpbmVhclJhdGlvIiwicG93ZXIiLCJ5b3lvTW9kZSIsInBvdyIsImNhbGNFbmQiLCJfY3JlYXRlRXhwb1NjYWxlIiwiZXhwIiwiRWFzZVBvaW50IiwibmV4dCIsInYiLCJwcmV2IiwiX2NyZWF0ZVJvdWdoRWFzZSIsImJ1bXAiLCJpbnZYIiwicG50IiwicmVjZW50IiwidGFwZXIiLCJjbnQiLCJyYW5kb21pemUiLCJjbGFtcCIsInN0cmVuZ3RoIiwicmFuZG9tIiwic29ydCIsIl9jcmVhdGVKUyIsIl9Db2xvckZpbHRlciIsIl9Db2xvck1hdHJpeEZpbHRlciIsIl9jb2xvclByb3BzIiwiX2dldENyZWF0ZUpTIiwiY3JlYXRlanMiLCJfd2FybiIsIl9jYWNoZSIsImdldEJvdW5kcyIsIm5vbWluYWxCb3VuZHMiLCJzZXRCb3VuZHMiLCJfcGFyc2VDb2xvckZpbHRlciIsIkNvbG9yRmlsdGVyIiwiZmlsdGVycyIsImNsb25lIiwidGludCIsInNwbGl0Q29sb3IiLCJ0aW50QW1vdW50IiwicmVkT2Zmc2V0IiwiZ3JlZW5PZmZzZXQiLCJibHVlT2Zmc2V0IiwicmVkTXVsdGlwbGllciIsImdyZWVuTXVsdGlwbGllciIsImJsdWVNdWx0aXBsaWVyIiwiZXhwb3N1cmUiLCJicmlnaHRuZXNzIiwib3AiLCJjYWNoZUlEIiwiX2lkTWF0cml4IiwiX2x1bVIiLCJfbHVtRyIsIl9sdW1CIiwiX2FwcGx5TWF0cml4IiwiX3BhcnNlQ29sb3JNYXRyaXhGaWx0ZXIiLCJDb2xvck1hdHJpeEZpbHRlciIsInN0YXJ0TWF0cml4IiwicGciLCJjb2xvcml6ZSIsImciLCJpbnYiLCJfY29sb3JpemUiLCJjb2xvcml6ZUFtb3VudCIsImNvbnRyYXN0IiwiaHVlIiwiX3NldEh1ZSIsInNhdHVyYXRpb24iLCJfc2V0U2F0dXJhdGlvbiIsIl9tYXRyaXgiLCJFYXNlbFBsdWdpbiIsImNvbG9yTWF0cml4IiwibGFiZWxzIiwiY29sb3JGaWx0ZXIiLCJjb2xvck1hdHJpeEZpbHRlciIsImxhYmVsIiwiY3VycmVudEZyYW1lIiwidXBkYXRlQ2FjaGUiLCJfZ2V0VW5pdCIsIl94UHJvcHMiLCJfeVByb3BzIiwiX3BvcHVsYXRlU2VnbWVudEZyb21BcnJheSIsInNlZ21lbnQiLCJ2YWx1ZXMiLCJzaSIsIl9nZXRQcm9wTnVtIiwiX3JlbGF0aXZpemUiLCJfc2VnbWVudFRvUmF3UGF0aCIsInNsaWNlciIsInVuaXRYIiwidW5pdFkiLCJmcm9tQ3VycmVudCIsInBvaW50c1RvU2VnbWVudCIsImZsYXRQb2ludHNUb1NlZ21lbnQiLCJjdXJ2aW5lc3MiLCJfYWxpZ24iLCJfYWRkRGltZW5zaW9uYWxQcm9wVHdlZW4iLCJjYWNoZVJhd1BhdGhNZWFzdXJlbWVudHMiLCJyZXNvbHV0aW9uIiwiX29yaWdpblRvUG9pbnQiLCJwYXJlbnRNYXRyaXgiLCJfZ2V0QWxpZ25NYXRyaXgiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsImZyb21PcmlnaW4iLCJ0b09yaWdpbiIsImZyb21Qb2ludCIsIl9vcmlnaW5Ub1BvaW50MiIsInJhd1BhdGgiLCJhbGlnblRhcmdldCIsImFsaWduT3JpZ2luIiwiY3VyWCIsImN1clkiLCJ0cmFuc2Zvcm1SYXdQYXRoIiwiZ2V0UmF3UGF0aCIsInBhdGhQcm9wZXJ0eSIsImZvcmNlVW5pdCIsImhhcm5lc3MiLCJhbGlhcyIsInBwIiwiTW90aW9uUGF0aFBsdWdpbiIsIlBsdWdpbiIsInByb3BUd2VlbiIsInJhd1BhdGhzIiwiX3ZhcnMiLCJhdXRvUm90YXRlIiwiZmlyc3RPYmoiLCJzbGljZVJhd1BhdGgiLCJyb3RhdGUiLCJyT2Zmc2V0IiwicmFkaWFucyIsInVzZVJhZGlhbnMiLCJyUHJvcCIsInJTZXQiLCJydSIsImdldFBvc2l0aW9uT25QYXRoIiwiZ2V0TGVuZ3RoIiwidG90YWxMZW5ndGgiLCJzdHJpbmdUb1Jhd1BhdGgiLCJyYXdQYXRoVG9TdHJpbmciLCJjb252ZXJ0VG9QYXRoIiwic3dhcCIsIl9jb252ZXJ0VG9QYXRoIiwiY29udmVydENvb3JkaW5hdGVzIiwiZ2V0QWxpZ25NYXRyaXgiLCJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwiYXJyYXlUb1Jhd1BhdGgiLCJfc3BsaXRDb2xvciIsIl9QSVhJIiwiX3NldENvbnRyYXN0IiwiX2dldEZpbHRlciIsImZpbHRlciIsImZpbHRlckNsYXNzIiwiYmx1ciIsIl9hZGRDb2xvck1hdHJpeEZpbHRlckNhY2hlVHdlZW4iLCJfYXBwbHlCcmlnaHRuZXNzVG9NYXRyaXgiLCJfQ01GZGVmYXVsdHMiLCJfZ3NDb2xvck1hdHJpeEZpbHRlciIsImNvbWJpbmUiLCJjb21iaW5lQ01GIiwiX3JlbmRlckNvbG9yIiwiX3JlbmRlckRpcnR5Q2FjaGUiLCJjbGVhckRpcnR5IiwiX3JlbmRlckF1dG9BbHBoYSIsInZpc2libGUiLCJfYWRkQ29sb3JUd2VlbiIsImN1cnJlbnRWYWx1ZSIsInN0YXJ0Q29sb3IiLCJlbmRDb2xvciIsImxpbmVDb2xvciIsImZpbGxDb2xvciIsIl94eUNvbnRleHRzIiwiX2NvbnRleHRzIiwidGlsZVgiLCJ0aWxlWSIsIl9jb2xvck1hdHJpeEZpbHRlclByb3BzIiwiX2RlZ3JlZXNUb1JhZGlhbnMiLCJQSVhJIiwiUGl4aVBsdWdpbiIsInJlZ2lzdGVyUElYSSIsInBpeGkiLCJEaXNwbGF5T2JqZWN0IiwicGFkZGluZyIsImlzVjQiLCJWRVJTSU9OIiwiYmx1clBhZGRpbmciLCJHcmFwaGljcyIsImdyYXBoaWNzRGF0YSIsIl93aW5kb3ciLCJfZG9jRWwiLCJfbWF4IiwiX2J1aWxkR2V0dGVyIiwiX2dldE9mZnNldCIsImNvbnRhaW5lciIsImNSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsIm9mZnNldHMiLCJfcGFyc2VWYWwiLCJjdXJyZW50VmFsIiwiYXV0b0tpbGxUaHJlc2hvbGQiLCJTY3JvbGxUb1BsdWdpbiIsInJhd1ZhcnMiLCJzbmFwVHlwZSIsImlzV2luIiwiX2NsZWFuIiwiYXV0b0tpbGwiLCJnZXRYIiwiZ2V0WSIsInhQcmV2IiwieVByZXYiLCJzbmFwSW5saW5lIiwic2Nyb2xsU25hcFR5cGUiLCJza2lwWCIsInNraXBZIiwieURpZiIsInhEaWYiLCJvbkF1dG9LaWxsIiwib25BdXRvS2lsbFBhcmFtcyIsImJvdGgiLCJnZXRPZmZzZXQiLCJidWlsZEdldHRlciIsIl9yb290IiwiX3Jlc2l6ZURlbGF5IiwiX3JhZiIsIl9yZXF1ZXN0IiwiX2NsYW1wIiwiX3RpbWUyIiwiX3N5bmNJbnRlcnZhbCIsIl9yZWZyZXNoaW5nIiwiX3BvaW50ZXJJc0Rvd24iLCJfaSIsIl9wcmV2V2lkdGgiLCJfcHJldkhlaWdodCIsIl9hdXRvUmVmcmVzaCIsIl9zb3J0IiwiX3N1cHByZXNzT3ZlcndyaXRlcyIsIl9pZ25vcmVSZXNpemUiLCJfbGltaXRDYWxsYmFja3MiLCJfY3JlYXRpbmdNZWRpYSIsIl9sYXN0TWVkaWFUaWNrIiwiX3JlZnJlc2hpbmdBbGwiLCJfc3RhcnR1cCIsIl9wcm94aWVzIiwiX3Njcm9sbGVycyIsIl90aW1lMSIsIl9sYXN0U2Nyb2xsVGltZSIsIl9lbmFibGVkIiwiX3Bhc3NUaHJvdWdoIiwiX2lzVmlld3BvcnQiLCJfZ2V0UHJveHlQcm9wIiwiX2dldFNjcm9sbEZ1bmMiLCJzYyIsIl92ZXJ0aWNhbCIsIl9nZXRCb3VuZHNGdW5jIiwiX3dpbk9mZnNldHMiLCJfbWF4U2Nyb2xsIiwiX3JlZjMiLCJkMiIsIl9pdGVyYXRlQXV0b1JlZnJlc2giLCJfaXNOdW1iZXIiLCJfY2FsbElmRnVuYyIsIl9jb21iaW5lRnVuYyIsImYxIiwiZjIiLCJyZXN1bHQxIiwicmVzdWx0MiIsIl9hYnMiLCJfc2Nyb2xsTGVmdCIsIl9zY3JvbGxUb3AiLCJfbGVmdCIsIl90b3AiLCJfcmlnaHQiLCJfYm90dG9tIiwiX3dpZHRoIiwiX2hlaWdodCIsIl9SaWdodCIsIl9MZWZ0IiwiX1RvcCIsIl9Cb3R0b20iLCJfcGFkZGluZyIsIl9tYXJnaW4iLCJfV2lkdGgiLCJfSGVpZ2h0IiwiX3B4IiwiX2hvcml6b250YWwiLCJvcyIsIm9zMiIsIndpdGhvdXRUcmFuc2Zvcm1zIiwicHJvZ3Jlc3MiLCJfZ2V0U2l6ZSIsIl9yZWY0IiwiX2dldExhYmVsUmF0aW9BcnJheSIsIl9tdWx0aUxpc3RlbmVyIiwiX21hcmtlckRlZmF1bHRzIiwiaW5kZW50IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiX2RlZmF1bHRzIiwidG9nZ2xlQWN0aW9ucyIsImFudGljaXBhdGVQaW4iLCJfa2V5d29yZHMiLCJfb2Zmc2V0VG9QeCIsInNpemUiLCJlcUluZGV4IiwiX2NyZWF0ZU1hcmtlciIsIl9yZWY1IiwibWF0Y2hXaWR0aEVsIiwidXNlRml4ZWRQb3NpdGlvbiIsImlzU2Nyb2xsZXIiLCJpc1N0YXJ0IiwiX2lzU3RhcnQiLCJfb2Zmc2V0IiwiX3Bvc2l0aW9uTWFya2VyIiwibWFya2VyIiwiZmxpcHBlZCIsIm9wcG9zaXRlU2lkZSIsIl9pc0ZsaXBwZWQiLCJfdHJpZ2dlcnMiLCJfaWRzIiwiX3N5bmMiLCJfdXBkYXRlQWxsIiwiX29uU2Nyb2xsIiwiX2Rpc3BhdGNoIiwiX29uUmVzaXplIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJyZXN0YXJ0IiwiX2VtcHR5QXJyYXkiLCJfbWVkaWEiLCJfb25NZWRpYUNoYW5nZSIsInRpY2siLCJtYXRjaGVzIiwiX3JldmVydEFsbCIsIm1hdGNoTWVkaWEiLCJfcmV2ZXJ0UmVjb3JkZWQiLCJfcmVmcmVzaEFsbCIsIl9zb2Z0UmVmcmVzaCIsIlNjcm9sbFRyaWdnZXIiLCJfc2F2ZWRTdHlsZXMiLCJyZXZlcnQiLCJza2lwUmV2ZXJ0IiwicmVmcmVzaEluaXRzIiwicmVmcmVzaCIsInJlYyIsInBhdXNlIiwiX2xhc3RTY3JvbGwiLCJfZGlyZWN0aW9uIiwicmVjb3JkVmVsb2NpdHkiLCJfcHJvcE5hbWVzVG9Db3B5IiwiX3N0YXRlUHJvcHMiLCJfc3dhcFBpbkluIiwicGluIiwic3BhY2VyIiwic3BhY2VyU3RhdGUiLCJzcGFjZXJTdHlsZSIsInBpblN0eWxlIiwiX3NldFN0YXRlIiwiX2dldFN0YXRlIiwiX3BhcnNlUG9zaXRpb24iLCJzY3JvbGxlclNpemUiLCJtYXJrZXJTY3JvbGxlciIsInNjcm9sbGVyQm91bmRzIiwiYm9yZGVyV2lkdGgiLCJzY3JvbGxlck1heCIsImxvY2FsT2Zmc2V0IiwiZ2xvYmFsT2Zmc2V0IiwiX3ByZWZpeEV4cCIsIl9yZXBhcmVudCIsIl9zdE9yaWciLCJfZ2V0VHdlZW5DcmVhdG9yIiwic2Nyb2xsZXIiLCJsYXN0U2Nyb2xsMSIsImxhc3RTY3JvbGwyIiwiZ2V0U2Nyb2xsIiwiZ2V0VHdlZW4iLCJpbml0aWFsVmFsdWUiLCJjaGFuZ2UxIiwiY2hhbmdlMiIsIm1vZGlmaWVycyIsInR3ZWVuVG8iLCJwaW5DYWNoZSIsInNuYXBGdW5jIiwic2Nyb2xsMSIsInNjcm9sbDIiLCJtYXJrZXJTdGFydCIsIm1hcmtlckVuZCIsIm1hcmtlclN0YXJ0VHJpZ2dlciIsIm1hcmtlckVuZFRyaWdnZXIiLCJtYXJrZXJWYXJzIiwicGluT3JpZ2luYWxTdGF0ZSIsInBpbkFjdGl2ZVN0YXRlIiwicGluU3RhdGUiLCJwaW5HZXR0ZXIiLCJwaW5TZXR0ZXIiLCJwaW5TdGFydCIsInBpbkNoYW5nZSIsInNwYWNpbmdTdGFydCIsIm1hcmtlclN0YXJ0U2V0dGVyIiwibWFya2VyRW5kU2V0dGVyIiwic25hcDEiLCJzbmFwMiIsInNjcnViVHdlZW4iLCJzY3J1YlNtb290aCIsInNuYXBEdXJDbGFtcCIsInNuYXBEZWxheWVkQ2FsbCIsInByZXZQcm9ncmVzcyIsInByZXZTY3JvbGwiLCJwcmV2QW5pbVByb2dyZXNzIiwidG9nZ2xlQ2xhc3MiLCJvblRvZ2dsZSIsIm9uUmVmcmVzaCIsInNjcnViIiwicGluU3BhY2luZyIsImludmFsaWRhdGVPblJlZnJlc2giLCJvblNjcnViQ29tcGxldGUiLCJvblNuYXBDb21wbGV0ZSIsInBpblJlcGFyZW50IiwiaXNUb2dnbGUiLCJzY3JvbGxlckNhY2hlIiwiaXNWaWV3cG9ydCIsInBpblR5cGUiLCJjYWxsYmFja3MiLCJvbkVudGVyIiwib25MZWF2ZSIsIm9uRW50ZXJCYWNrIiwib25MZWF2ZUJhY2siLCJtYXJrZXJzIiwib25SZWZyZXNoSW5pdCIsImdldFNjcm9sbGVyU2l6ZSIsIl9nZXRTaXplRnVuYyIsImdldFNjcm9sbGVyT2Zmc2V0cyIsIl9nZXRPZmZzZXRzRnVuYyIsImxhc3RTbmFwIiwidHdlZW5TY3JvbGwiLCJfaW5pdHRlZCIsImltbWVkaWF0ZVJlbmRlciIsInNjcm9sbFRyaWdnZXIiLCJzbmFwVG8iLCJzY3JvbGxCZWhhdmlvciIsIl9nZXRDbG9zZXN0TGFiZWwiLCJzdCIsInRvdGFsUHJvZ3Jlc3MiLCJuYXR1cmFsRW5kIiwiZW5kU2Nyb2xsIiwiX3NuYXAiLCJvblN0YXJ0IiwiX29uSW50ZXJydXB0IiwiX29uQ29tcGxldGUiLCJjbGFzc05hbWUiLCJxdWlja1NldHRlciIsInByZXZSZWZyZXNoaW5nIiwiaXNSZXZlcnRlZCIsIl9zd2FwUGluT3V0Iiwic29mdCIsImludmFsaWRhdGUiLCJpc1ZlcnRpY2FsIiwib3ZlcnJpZGUiLCJjdXJUcmlnZ2VyIiwiY3VyUGluIiwib3Bwb3NpdGVTY3JvbGwiLCJpbml0dGVkIiwicmV2ZXJ0ZWRQaW5zIiwib3RoZXJQaW5PZmZzZXQiLCJwYXJzZWRFbmQiLCJwYXJzZWRFbmRUcmlnZ2VyIiwiZW5kVHJpZ2dlciIsInBhcnNlZFN0YXJ0IiwicGlubmVkQ29udGFpbmVyIiwidHJpZ2dlckluZGV4IiwiX3BpblB1c2giLCJjZWlsIiwib21pdE9mZnNldHMiLCJfY29weVN0YXRlIiwiX3Bpbk9mZnNldCIsInRvZ2dsZVN0YXRlIiwiYWN0aW9uIiwic3RhdGVDaGFuZ2VkIiwidG9nZ2xlZCIsImNsaXBwZWQiLCJhbGxvd0FuaW1hdGlvbiIsInN1cHByZXNzT3ZlcndyaXRlcyIsInNldFRpbWVvdXQiLCJib2R5U3R5bGUiLCJib3JkZXIiLCJib3JkZXJUb3AiLCJzZXRJbnRlcnZhbCIsImhpZGRlbiIsImxpbWl0Q2FsbGJhY2tzIiwibXMiLCJzeW5jSW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiYXV0b1JlZnJlc2hFdmVudHMiLCJzY3JvbGxlclByb3h5IiwibXEiLCJjbGVhck1hdGNoTWVkaWEiLCJxdWVyeSIsInNhdmVTdHlsZXMiLCJzYWZlIiwibWF4U2Nyb2xsIiwiZ2V0U2Nyb2xsRnVuYyIsImdldEJ5SWQiLCJnZXRBbGwiLCJpc1Njcm9sbGluZyIsImJhdGNoIiwidmFyc0NvcHkiLCJpbnRlcnZhbCIsImJhdGNoTWF4IiwicHJveHlDYWxsYmFjayIsInJlZnJlc2hQcmlvcml0eSIsIlRleHRQbHVnaW4iLCJfc2hvcnQiLCJvcmlnaW5hbCIsImNvbmRlbnNlZFRleHQiLCJjb25kZW5zZWRPcmlnaW5hbCIsImFnZ3JlZ2F0ZSIsImRlbGltaXRlciIsInNwbGl0SW5uZXJIVE1MIiwiX2Zyb20iLCJoYXNDbGFzcyIsIm5ld0NsYXNzIiwib2xkQ2xhc3MiLCJmaWxsQ2hhciIsInBhZFNwYWNlIiwiYXBwbHlOZXciLCJhcHBseU9sZCIsInN0ciIsImVtb2ppU2FmZVNwbGl0IiwiZ2V0VGV4dCIsImdzYXBXaXRoQ1NTIiwiVHdlZW5NYXhXaXRoQ1NTIiwiVHdlZW4iLCJfaW5oZXJpdHNMb29zZSIsIl9nbG9iYWxUaW1lbGluZSIsIl9jb3JlUmVhZHkiLCJfbGFzdFJlbmRlcmVkRnJhbWUiLCJfcXVpY2tUd2VlbiIsIl90aWNrZXJBY3RpdmUiLCJfaWQiLCJfcmVxIiwiX3NlbGYiLCJfZGVsdGEiLCJfbGFnVGhyZXNob2xkIiwiX2FkanVzdGVkTGFnIiwiX3N0YXJ0VGltZSIsIl9sYXN0VXBkYXRlIiwiX2dhcCIsIl9uZXh0VGltZSIsIl90aWNrIiwibjEiLCJlYXNlT3V0IiwiYXV0b1NsZWVwIiwibnVsbFRhcmdldFdhcm4iLCJ1bml0cyIsImxpbmVIZWlnaHQiLCJfdGlueU51bSIsIl8yUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJfY29zIiwiX3NpbiIsIl9pc05vdEZhbHNlIiwiX2lzRnVuY09yU3RyaW5nIiwiX2lzVHlwZWRBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiX3N0cmljdE51bUV4cCIsIl9jb21wbGV4U3RyaW5nTnVtRXhwIiwiX2RlbGltaXRlZFZhbHVlRXhwIiwiX3VuaXRFeHAiLCJfZ2xvYmFscyIsIl9pbnN0YWxsU2NvcGUiLCJfaW5zdGFsbCIsInNjb3BlIiwiX21lcmdlIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwiX3Jlc2VydmVkUHJvcHMiLCJfbGF6eVR3ZWVucyIsIl9sYXp5TG9va3VwIiwiX2VmZmVjdHMiLCJfbmV4dEdDRnJhbWUiLCJfaGFybmVzc1BsdWdpbnMiLCJfY2FsbGJhY2tOYW1lcyIsIl9oYXJuZXNzIiwiaGFybmVzc1BsdWdpbiIsIm5hbWVzIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJfbnVtZXJpY0lmUG9zc2libGUiLCJfc2V0S2V5ZnJhbWVEZWZhdWx0cyIsImJhc2UiLCJ0b01lcmdlIiwiX21lcmdlRGVlcCIsIl9jb3B5RXhjbHVkaW5nIiwiZXhjbHVkaW5nIiwiX2luaGVyaXREZWZhdWx0cyIsImtleWZyYW1lcyIsImluaGVyaXQiLCJfZHAiLCJfcmVtb3ZlTGlua2VkTGlzdEl0ZW0iLCJmaXJzdFByb3AiLCJsYXN0UHJvcCIsIl9wcmV2IiwiX3JlbW92ZUZyb21QYXJlbnQiLCJvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIiwiYXV0b1JlbW92ZUNoaWxkcmVuIiwiX2FjdCIsIl91bmNhY2hlIiwiX2VuZCIsIl9zdGFydCIsIl9kaXJ0eSIsIl9yZWNhY2hlQW5jZXN0b3JzIiwidG90YWxEdXJhdGlvbiIsIl9oYXNOb1BhdXNlZEFuY2VzdG9ycyIsIl90cyIsIl9lbGFwc2VkQ3ljbGVEdXJhdGlvbiIsIl9yZXBlYXQiLCJfYW5pbWF0aW9uQ3ljbGUiLCJfdFRpbWUiLCJfckRlbGF5IiwidFRpbWUiLCJjeWNsZUR1cmF0aW9uIiwid2hvbGUiLCJmbG9vciIsIl9wYXJlbnRUb0NoaWxkVG90YWxUaW1lIiwicGFyZW50VGltZSIsIl90RHVyIiwiX3NldEVuZCIsIl9ydHMiLCJfYWxpZ25QbGF5aGVhZCIsInRvdGFsVGltZSIsInNtb290aENoaWxkVGltaW5nIiwiX3Bvc3RBZGRDaGVja3MiLCJyYXdUaW1lIiwiX3pUaW1lIiwiX2FkZFRvVGltZWxpbmUiLCJza2lwQ2hlY2tzIiwiX2RlbGF5IiwidGltZVNjYWxlIiwic29ydEJ5IiwiX2FkZExpbmtlZExpc3RJdGVtIiwiX2lzRnJvbU9yRnJvbVN0YXJ0IiwiX3JlY2VudCIsIl9zY3JvbGxUcmlnZ2VyIiwiX2F0dGVtcHRJbml0VHdlZW4iLCJfaW5pdFR3ZWVuIiwiX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCIsIl9sb2NrIiwiX3NldER1cmF0aW9uIiwic2tpcFVuY2FjaGUiLCJsZWF2ZVBsYXloZWFkIiwicmVwZWF0IiwiZHVyIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJwZXJjZW50QW5pbWF0aW9uIiwiaXNQZXJjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInBhcmFtcyIsImlyVmFycyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwicnVuQmFja3dhcmRzIiwiX2NvbmRpdGlvbmFsUmV0dXJuIiwiZXhlYyIsIl9zbGljZSIsIl9pc0FycmF5TGlrZSIsIm5vbkVtcHR5IiwiX2ZsYXR0ZW4iLCJhciIsImxlYXZlU3RyaW5ncyIsImFjY3VtdWxhdG9yIiwiX2FjY3VtdWxhdG9yIiwiX3dha2UiLCJuYXRpdmVFbGVtZW50Iiwic2h1ZmZsZSIsImRpc3RyaWJ1dGUiLCJfcGFyc2VFYXNlIiwiaXNEZWNpbWFsIiwicmF0aW9zIiwicmF0aW9YIiwicmF0aW9ZIiwiZWRnZXMiLCJvcmlnaW5YIiwib3JpZ2luWSIsIndyYXBBdCIsImRpc3RhbmNlcyIsImdyaWQiLCJfaW52ZXJ0RWFzZSIsIl9yb3VuZE1vZGlmaWVyIiwicmF3IiwiaXMyRCIsImluY3JlbWVudCIsInJvdW5kaW5nSW5jcmVtZW50IiwicmV0dXJuRnVuY3Rpb24iLCJwaXBlIiwiX2xlbiIsImZ1bmN0aW9ucyIsIl9rZXkiLCJyZWR1Y2UiLCJ1bml0aXplIiwibm9ybWFsaXplIiwibWFwUmFuZ2UiLCJfd3JhcEFycmF5Iiwid3JhcCIsInJhbmdlIiwid3JhcFlveW8iLCJ0b3RhbCIsIm51bXMiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4IiwiaW5SYW5nZSIsIm91dFJhbmdlIiwiaW50ZXJwb2xhdGUiLCJtdXRhdGUiLCJpbnRlcnBvbGF0b3JzIiwiaWwiLCJtYXN0ZXIiLCJfYWRkUHJvcFR3ZWVuIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJfY2FsbGJhY2siLCJleGVjdXRlTGF6eUZpcnN0IiwiX2ludGVycnVwdCIsIl9jcmVhdGVQbHVnaW4iLCJpc0Z1bmMiLCJpbnN0YW5jZURlZmF1bHRzIiwiX2tpbGxQcm9wVHdlZW5zT2YiLCJtb2RpZmllciIsIl9hZGRQbHVnaW5Nb2RpZmllciIsInN0YXRpY3MiLCJfMjU1IiwiX2NvbG9yTG9va3VwIiwiYXF1YSIsImxpbWUiLCJzaWx2ZXIiLCJtYXJvb24iLCJ0ZWFsIiwibmF2eSIsIndoaXRlIiwib2xpdmUiLCJvcmFuZ2UiLCJncmF5IiwicHVycGxlIiwicGluayIsInRyYW5zcGFyZW50IiwiX2h1ZSIsIm0xIiwidG9IU0wiLCJmb3JjZUFscGhhIiwid2FzSFNMIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJSZWdFeHAiLCJfaHNsRXhwIiwiY29tYmluZWQiLCJsYXN0SW5kZXgiLCJkaXNwYXRjaCIsImVsYXBzZWQiLCJtYW51YWwiLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsImdzYXBWZXJzaW9ucyIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwibGFnU21vb3RoaW5nIiwiYWRqdXN0ZWRMYWciLCJfZnBzIiwiX2Vhc2VNYXAiLCJfY3VzdG9tRWFzZUV4cCIsIl9xdW90ZXNFeHAiLCJfcGFyc2VPYmplY3RJblN0cmluZyIsInBhcnNlZFZhbCIsImxhc3RJbmRleE9mIiwiX3Byb3BhZ2F0ZVlveW9FYXNlIiwiaXNZb3lvIiwiX2ZpcnN0IiwieW95b0Vhc2UiLCJfeW95byIsIl9lYXNlIiwiX3lFYXNlIiwiZGVmYXVsdEVhc2UiLCJuZXN0ZWQiLCJfQ0UiLCJfY29uZmlnRWFzZUZyb21TdHJpbmciLCJfaW5zZXJ0RWFzZSIsImVhc2VJbiIsImVhc2VJbk91dCIsImxvd2VyY2FzZU5hbWUiLCJfZWFzZUluT3V0RnJvbU91dCIsIl9jb25maWdFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwiYXNpbiIsIl9jb25maWdCYWNrIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwiSW5maW5pdHkiLCJyZXBlYXREZWxheSIsInlveW8iLCJzdGFydFRpbWUiLCJfdG90YWxUaW1lIiwiX3B0TG9va3VwIiwiX3BUaW1lIiwiaXRlcmF0aW9uIiwiX3BzIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsImdsb2JhbFRpbWUiLCJzZWVrIiwiaW5jbHVkZURlbGF5IiwicmV2ZXJzZWQiLCJhdFRpbWUiLCJyZXN1bWUiLCJldmVudENhbGxiYWNrIiwiX29uVXBkYXRlIiwidGhlbiIsIm9uRnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJfdGhlbiIsIl9wcm9tIiwiX0FuaW1hdGlvbiIsInNvcnRDaGlsZHJlbiIsIl9wcm90bzIiLCJmcm9tVmFycyIsInRvVmFycyIsInN0YWdnZXJUbyIsIm9uQ29tcGxldGVBbGwiLCJvbkNvbXBsZXRlQWxsUGFyYW1zIiwib25Db21wbGV0ZVBhcmFtcyIsInN0YWdnZXJGcm9tIiwic3RhZ2dlckZyb21UbyIsInByZXZQYXVzZWQiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicHJldkl0ZXJhdGlvbiIsInByZXZUaW1lIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJyZXdpbmRpbmciLCJkb2VzV3JhcCIsInJlcGVhdFJlZnJlc2giLCJvblJlcGVhdCIsIl9oYXNQYXVzZSIsIl9mb3JjaW5nIiwiX2xhc3QiLCJfZmluZE5leHRQYXVzZVR3ZWVuIiwiYWRqdXN0ZWRUaW1lIiwiYWRkTGFiZWwiLCJnZXRDaGlsZHJlbiIsInR3ZWVucyIsInRpbWVsaW5lcyIsImlnbm9yZUJlZm9yZVRpbWUiLCJyZW1vdmVMYWJlbCIsIl90b3RhbFRpbWUyIiwiYWRkUGF1c2UiLCJyZW1vdmVQYXVzZSIsIm9ubHlBY3RpdmUiLCJnZXRUd2VlbnNPZiIsIl9vdmVyd3JpdGluZ1R3ZWVuIiwicGFyc2VkVGFyZ2V0cyIsImlzR2xvYmFsVGltZSIsIl90YXJnZXRzIiwidGwiLCJfb25TdGFydCIsIm9uU3RhcnRQYXJhbXMiLCJ0d2VlbkZyb21UbyIsImZyb21Qb3NpdGlvbiIsInRvUG9zaXRpb24iLCJuZXh0TGFiZWwiLCJhZnRlclRpbWUiLCJwcmV2aW91c0xhYmVsIiwiYmVmb3JlVGltZSIsImN1cnJlbnRMYWJlbCIsInNoaWZ0Q2hpbGRyZW4iLCJhZGp1c3RMYWJlbHMiLCJjbGVhciIsImluY2x1ZGVMYWJlbHMiLCJ1cGRhdGVSb290IiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJoYXNSYW5kb20iLCJmcCIsIl9zZXR0ZXJGdW5jV2l0aFBhcmFtIiwiX3NldHRlckZ1bmMiLCJfc2V0dGVyUGxhaW4iLCJfcmVuZGVyQm9vbGVhbiIsIl9yZW5kZXJQbGFpbiIsInB0TG9va3VwIiwiX3BhcnNlRnVuY09yU3RyaW5nIiwiX3Byb2Nlc3NWYXJzIiwicHJpb3JpdHkiLCJjbGVhblZhcnMiLCJnc0RhdGEiLCJoYXJuZXNzVmFycyIsIm92ZXJ3cml0dGVuIiwiYXV0b1JldmVydCIsInByZXZTdGFydEF0IiwiX3N0YXJ0QXQiLCJmdWxsVGFyZ2V0cyIsImF1dG9PdmVyd3JpdGUiLCJfb3ZlcndyaXRlIiwiX29wIiwiX29uSW5pdCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJfdGhpczMkdmFycyIsIl9wcm90bzMiLCJwcmV2UmF0aW8iLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJvdmVyd3JpdHRlblByb3BzIiwiY3VyTG9va3VwIiwiY3VyT3ZlcndyaXRlUHJvcHMiLCJraWxsaW5nVGFyZ2V0cyIsInByb3BUd2Vlbkxvb2t1cCIsImZpcnN0UFQiLCJhMSIsImEyIiwiX2FycmF5c01hdGNoIiwicHJvcGVydHlBbGlhc2VzIiwiX2FkZEFsaWFzZXNUb1ZhcnMiLCJvblJldmVyc2VDb21wbGV0ZSIsIm9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zIiwiX3NldHRlckF0dHJpYnV0ZSIsImhhc05vbkRlcGVuZGVudFJlbWFpbmluZyIsIl9zZXR0ZXJXaXRoTW9kaWZpZXIiLCJtU2V0IiwibXQiLCJwdDIiLCJmaXJzdCIsIlR3ZWVuTWF4IiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJfbGVuMiIsIl9rZXkyIiwiZ2V0dGVyIiwiZm9ybWF0Iiwic2V0dGVycyIsInJlZ2lzdGVyRWZmZWN0IiwiZWZmZWN0IiwiZXh0ZW5kVGltZWxpbmUiLCJwbHVnaW5OYW1lIiwiZXhwb3J0Um9vdCIsImluY2x1ZGVEZWxheWVkQ2FsbHMiLCJpbnN0YWxsIiwiZWZmZWN0cyIsImdsb2JhbFRpbWVsaW5lIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwiX2FkZE1vZGlmaWVycyIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsIl9kaXZDb250YWluZXIiLCJfc3ZnQ29udGFpbmVyIiwiX2dFbCIsIl9oYXNPZmZzZXRCdWciLCJfc2V0RG9jIiwiZDEiLCJfc3ZnVGVtcHMiLCJfZGl2VGVtcHMiLCJfc3ZnT3duZXIiLCJfY3JlYXRlU2libGluZyIsIl9nZXRDVE0iLCJfcGxhY2VTaWJsaW5ncyIsImFkanVzdEdPZmZzZXQiLCJzaWJsaW5ncyIsIm51bWJlck9mSXRlbXMiLCJnZXRJdGVtIiwiX2NvbnNvbGlkYXRlIiwiX3NldE1hdHJpeCIsImIyIiwiYzIiLCJlMiIsImRlY29yYXRlZSIsImluY2x1ZGVTY3JvbGxJbkZpeGVkIiwiemVyb1NjYWxlcyIsIl9mb3JjZU5vblplcm9TY2FsZSIsInRlbXBzIiwiYjEiLCJiMyIsIl9iZXN0RGlzdGFuY2UiLCJfc3ZnUGF0aEV4cCIsIl9udW1iZXJzRXhwIiwiX3NjaWVudGlmaWMiLCJfc2VsZWN0b3JFeHAiLCJfbGFyZ2VOdW0iLCJfdGVtcCIsIl90ZW1wMiIsIl9yb3VuZGluZ051bSIsIl93cmFwUHJvZ3Jlc3MiLCJfcm91bmRQcmVjaXNlIiwiX3NwbGl0U2VnbWVudCIsInNlZ0luZGV4Iiwic3ViZGl2aWRlU2VnbWVudCIsIl9nZXRTYW1wbGVJbmRleCIsInNhbXBsZXMiLCJfY29weU1ldGFEYXRhIiwibG9va3VwIiwibWluTGVuZ3RoIiwidG90YWxQb2ludHMiLCJfYXBwZW5kT3JNZXJnZSIsInByZXZTZWciLCJfZ3NQYXRoIiwiY29weVJhd1BhdGgiLCJyZXZlcnNlU2VnbWVudCIsIl90eXBlQXR0cnMiLCJjaXJjbGUiLCJlbGxpcHNlIiwicnkiLCJyY2lyYyIsInJ5Y2lyYyIsIngyIiwieDMiLCJ4NCIsIng1IiwieDYiLCJ5MiIsInkzIiwieTQiLCJ5NSIsInk2IiwiYXR0ciIsImNpcmMiLCJpZ25vcmUiLCJhdHRyaWJ1dGVzIiwic2V0QXR0cmlidXRlTlMiLCJub2RlVmFsdWUiLCJfY3JlYXRlUGF0aCIsImF0dHJzIiwiX2F0dHJUb09iaiIsInJ4IiwiY3giLCJjeSIsIngxIiwieTEiLCJfZ3NSYXdQYXRoIiwiZ2V0Um90YXRpb25BdFByb2dyZXNzIiwiZ2V0UHJvZ3Jlc3NEYXRhIiwiZ2V0Um90YXRpb25BdEJlemllclQiLCJsb29wcyIsInNraXBPdXRlciIsIl9yZXZlcnNlUmF3UGF0aCIsIndyYXBzQmVoaW5kIiwic1NoaWZ0IiwiZVNoaWZ0IiwidG90YWxTZWdtZW50cyIsImVTZWciLCJzU2VnIiwiZVNlZ0luZGV4Iiwic1NlZ0luZGV4IiwiZWkiLCJzYW1lU2VnbWVudCIsInNhbWVCZXppZXIiLCJtZWFzdXJlU2VnbWVudCIsInN0YXJ0SW5kZXgiLCJiZXppZXJRdHkiLCJ4ZCIsInhkMSIsInlkIiwieWQxIiwibGVuZ3RoSW5kZXgiLCJzZWdMZW5ndGgiLCJpbmMiLCJlbmRJbmRleCIsInNhbXBsZXNJbmRleCIsInByZXZMZW5ndGgiLCJheCIsImF5IiwiY3AxeCIsImNwMXkiLCJjcDJ4IiwiY3AyeSIsIngxYSIsInkxYSIsIngyYSIsInkyYSIsInB1c2hUb05leHRJZkF0RW5kIiwiaW5jbHVkZUFuZ2xlIiwiYXJjVG9TZWdtZW50IiwibGFzdFgiLCJsYXN0WSIsImxhcmdlQXJjRmxhZyIsInN3ZWVwRmxhZyIsImFuZ2xlUmFkIiwiY29zQW5nbGUiLCJzaW5BbmdsZSIsIlRXT1BJIiwiZHgyIiwiZHkyIiwieDFfc3EiLCJ5MV9zcSIsInJhZGlpQ2hlY2siLCJyeF9zcSIsInJ5X3NxIiwic3EiLCJjb2VmIiwiY3gxIiwiY3kxIiwidXgiLCJ1eSIsInZ4IiwidnkiLCJhbmdsZVN0YXJ0IiwiYWNvcyIsImFuZ2xlRXh0ZW50Iiwic2VnbWVudHMiLCJhbmdsZUluY3JlbWVudCIsImNvbnRyb2xMZW5ndGgiLCJtYSIsIm1iIiwibWMiLCJtZCIsImNvbW1hbmQiLCJpc1JlbGF0aXZlIiwiZGlmWCIsImRpZlkiLCJiZXppZXJzIiwicHJldkNvbW1hbmQiLCJmbGFnMSIsImZsYWcyIiwicmVsYXRpdmVYIiwicmVsYXRpdmVZIiwidHdvVGhpcmRzIiwiZXJyb3JNZXNzYWdlIiwic3giLCJzeSIsImV4IiwiZXkiLCJjbG9zZWQiLCJiZXppZXJUb1BvaW50cyIsIngxMiIsInkxMiIsIngyMyIsInkyMyIsIngzNCIsInkzNCIsIngxMjMiLCJ5MTIzIiwieDIzNCIsInkyMzQiLCJ4MTIzNCIsInkxMjM0IiwiZDMiLCJjb3JuZXJUaHJlc2hvbGQiLCJzbG9wZSIsImR4MSIsImR4MyIsImR5MSIsImR5MyIsIm5leHRYIiwibmV4dFkiLCJzaW1wbGlmeVN0ZXAiLCJ0b2xlcmFuY2UiLCJzaW1wbGlmaWVkIiwibWF4U3FEaXN0IiwiZmlyc3RYIiwiZmlyc3RZIiwic2ltcGxpZnlQb2ludHMiLCJnZXRDbG9zZXN0UHJvZ3Jlc3NPbkJlemllciIsIml0ZXJhdGlvbnMiLCJweSIsInNsaWNlcyIsIngwIiwieTAiLCJiZXN0IiwiZ2V0Q2xvc2VzdERhdGEiLCJiZXN0RGlzdGFuY2UiLCJzdWJkaXZpZGVTZWdtZW50TmVhciIsImJlc3RUIiwiYmVzdFNlZ21lbnRJbmRleCIsInNsIiwiX3RyaW1FeHAiLCJlbW9qaUV4cCIsIm91dGVySFRNTCIsImNoYXJhY3RlciIsImNoYXJDb2RlQXQiLCJlbW9qaSIsIl9fYXNzaWduIiwiYXNzaWduIiwibmFtZWRfcmVmZXJlbmNlc18xIiwicmVxdWlyZSIsIm51bWVyaWNfdW5pY29kZV9tYXBfMSIsInN1cnJvZ2F0ZV9wYWlyc18xIiwiYWxsTmFtZWRSZWZlcmVuY2VzIiwibmFtZWRSZWZlcmVuY2VzIiwiaHRtbDUiLCJlbmNvZGVSZWdFeHBzIiwic3BlY2lhbENoYXJzIiwibm9uQXNjaWkiLCJub25Bc2NpaVByaW50YWJsZSIsImV4dGVuc2l2ZSIsImRlZmF1bHRFbmNvZGVPcHRpb25zIiwibGV2ZWwiLCJudW1lcmljIiwiZW5jb2RlIiwiX2EiLCJfYyIsIl9iIiwiX2QiLCJfZSIsImVuY29kZVJlZ0V4cCIsInJlZmVyZW5jZXMiLCJjaGFyYWN0ZXJzIiwiaXNIZXgiLCJyZXN1bHRfMSIsImNvZGVfMSIsImdldENvZGVQb2ludCIsImRlZmF1bHREZWNvZGVPcHRpb25zIiwic3RyaWN0IiwiYXR0cmlidXRlIiwiYmFzZURlY29kZVJlZ0V4cHMiLCJ4bWwiLCJib2R5UmVnRXhwcyIsImh0bWw0IiwiZGVjb2RlUmVnRXhwcyIsImZyb21DaGFyQ29kZSIsIm91dE9mQm91bmRzQ2hhciIsImRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIiwiZGVjb2RlRW50aXR5IiwiZW50aXR5IiwiZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMSIsImVudGl0aWVzIiwiZGVjb2RlU2Vjb25kQ2hhcl8xIiwiZGVjb2RlQ29kZV8xIiwiZnJvbUNvZGVQb2ludCIsIm51bWVyaWNVbmljb2RlTWFwIiwiZGVjb2RlIiwiZGVjb2RlUmVnRXhwIiwiaXNBdHRyaWJ1dGUiLCJpc1N0cmljdCIsInJlcGxhY2VSZXN1bHRfMSIsInJlcGxhY2VNYXRjaF8xIiwicmVwbGFjZUxhc3RJbmRleF8xIiwicmVwbGFjZUlucHV0XzEiLCJkZWNvZGVSZXN1bHRfMSIsImRlY29kZUVudGl0eUxhc3RDaGFyXzIiLCJkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yIiwiZGVjb2RlU2Vjb25kQ2hhcl8yIiwiZGVjb2RlQ29kZV8yIiwiJCIsImZqIiwiYXN0cmFsQ29kZVBvaW50IiwiY29kZVBvaW50QXQiLCJpbnB1dCIsImhpZ2hTdXJyb2dhdGVGcm9tIiwiaGlnaFN1cnJvZ2F0ZVRvIiwiRGF0YVZpZXciLCJnZXROYXRpdmUiLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiaGFzaEdldCIsImhhc2hIYXMiLCJoYXNoU2V0IiwiSGFzaCIsImhhcyIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTGlzdENhY2hlIiwiTWFwIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJTZXQiLCJzZXRDYWNoZUFkZCIsInNldENhY2hlSGFzIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsIlN0YWNrIiwiU3ltYm9sIiwiVWludDhBcnJheSIsIldlYWtNYXAiLCJhcnJheSIsIml0ZXJhdGVlIiwicHJlZGljYXRlIiwicmVzSW5kZXgiLCJiYXNlVGltZXMiLCJpc0FyZ3VtZW50cyIsImlzQnVmZmVyIiwiaXNJbmRleCIsImlzVHlwZWRBcnJheSIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImVxIiwiYmFzZUZvck93biIsImJhc2VFYWNoIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsIm9iamVjdCIsImNhc3RQYXRoIiwidG9LZXkiLCJhcnJheVB1c2giLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiYmFzZUdldFRhZyIsImlzT2JqZWN0TGlrZSIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc0VxdWFsIiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwiZ2V0VGFnIiwiYXJnc1RhZyIsImFycmF5VGFnIiwib2JqZWN0VGFnIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJvYmpWYWx1ZSIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJpc0Z1bmN0aW9uIiwiaXNNYXNrZWQiLCJpc09iamVjdCIsInRvU291cmNlIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJmdW5jVG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiaXNMZW5ndGgiLCJ0eXBlZEFycmF5VGFncyIsImJhc2VNYXRjaGVzIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImlkZW50aXR5IiwiaXNQcm90b3R5cGUiLCJuYXRpdmVLZXlzIiwiaXNBcnJheUxpa2UiLCJjb2xsZWN0aW9uIiwiYmFzZUlzTWF0Y2giLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJiYXNlR2V0IiwiYXJyYXlNYXAiLCJpc1N5bWJvbCIsInN5bWJvbFByb3RvIiwic3ltYm9sVG9TdHJpbmciLCJiYXNlVG9TdHJpbmciLCJzdHJpbmdUb1BhdGgiLCJjb3JlSnNEYXRhIiwiZWFjaEZ1bmMiLCJmcm9tUmlnaHQiLCJpdGVyYWJsZSIsImFycmF5U29tZSIsImNhY2hlSGFzIiwiaXNQYXJ0aWFsIiwiYXJyTGVuZ3RoIiwib3RoTGVuZ3RoIiwiYXJyU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwidGFnIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJidWZmZXIiLCJjb252ZXJ0Iiwic3RhY2tlZCIsImdldEFsbEtleXMiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm9ialN0YWNrZWQiLCJza2lwQ3RvciIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImJhc2VHZXRBbGxLZXlzIiwiZ2V0U3ltYm9scyIsImlzS2V5YWJsZSIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwiYXJyYXlGaWx0ZXIiLCJzdHViQXJyYXkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJzeW1ib2wiLCJtYXBUYWciLCJwcm9taXNlVGFnIiwic2V0VGFnIiwid2Vha01hcFRhZyIsImRhdGFWaWV3VGFnIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiQ3RvciIsImN0b3JTdHJpbmciLCJoYXNGdW5jIiwibmF0aXZlQ3JlYXRlIiwicmVJc1VpbnQiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwidWlkIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwiYXNzb2NJbmRleE9mIiwiZ2V0TWFwRGF0YSIsIm1lbW9pemUiLCJvdmVyQXJnIiwiZnJlZUV4cG9ydHMiLCJmcmVlTW9kdWxlIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJiaW5kaW5nIiwiZnJlZVNlbGYiLCJyb290IiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwibWVtb2l6ZUNhcHBlZCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJxdW90ZSIsInN1YlN0cmluZyIsImFycmF5RWFjaCIsImNhc3RGdW5jdGlvbiIsImJhc2VIYXNJbiIsImhhc1BhdGgiLCJiYXNlSXNBcmd1bWVudHMiLCJzdHViRmFsc2UiLCJCdWZmZXIiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZUlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImJhc2VJdGVyYXRlZSIsImJhc2VNYXAiLCJtZW1vaXplZCIsIkNhY2hlIiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJub0RvY3VtZW50Iiwibm9vcCIsInVwZGF0ZUNzcyIsImlzVXJsUmVxdWVzdCIsImlzTG9hZGVkIiwidmlzaXRlZCIsIm5ld0VsIiwiY2xvbmVOb2RlIiwicmVsb2FkU3R5bGUiLCJsb2FkZWQiLCJzdHJpcFdXVyIsImdldFJlbG9hZFVybCIsInJlbG9hZEFsbCIsIm1vZHVsZUlkIiwib3B0aW9ucyIsImZuIiwidGltZW91dCIsImdldFNjcmlwdFNyYyIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsYXN0U2NyaXB0VGFnIiwiZmlsZU1hcCIsInNwbGl0UmVzdWx0IiwiZmlsZW5hbWUiLCJtYXBSdWxlIiwicmVnIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9jYWxzIiwiZnVuY3Rpb25DYWxsIiwidXJsU3RyaW5nIiwicHJvdG9jb2wiLCJjb21wb25lbnRzIiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJhdHRhY2hFdmVudCIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsIl9pZSIsIl9maXJlZm94IiwiX29wZXJhIiwiX3dlYmtpdCIsIl9jaHJvbWUiLCJfaWVfcmVhbF92ZXJzaW9uIiwiX29zeCIsIl93aW5kb3dzIiwiX2xpbnV4IiwiX2FuZHJvaWQiLCJfd2luNjQiLCJfaXBob25lIiwiX2lwYWQiLCJfbmF0aXZlIiwiX21vYmlsZSIsIl9wb3B1bGF0ZWQiLCJfcG9wdWxhdGUiLCJ1YXMiLCJhZ2VudCIsIk5hTiIsImRvY3VtZW50TW9kZSIsInRyaWRlbnQiLCJ2ZXIiLCJVc2VyQWdlbnRfREVQUkVDQVRFRCIsImllIiwiaWVDb21wYXRpYmlsaXR5TW9kZSIsImllNjQiLCJmaXJlZm94Iiwib3BlcmEiLCJ3ZWJraXQiLCJzYWZhcmkiLCJjaHJvbWUiLCJ3aW5kb3dzIiwib3N4IiwibGludXgiLCJpcGhvbmUiLCJtb2JpbGUiLCJuYXRpdmVBcHAiLCJhbmRyb2lkIiwiaXBhZCIsInVzZUhhc0ZlYXR1cmUiLCJpbXBsZW1lbnRhdGlvbiIsImhhc0ZlYXR1cmUiLCJldmVudE5hbWVTdWZmaXgiLCJldmVudE5hbWUiLCJpc1N1cHBvcnRlZCIsImlzRXZlbnRTdXBwb3J0ZWQiLCJzWCIsInNZIiwicFgiLCJwWSIsIndoZWVsRGVsdGEiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGFYIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFNb2RlIiwic3BpblgiLCJzcGluWSIsImdldEV2ZW50VHlwZSIsInRlbXBNYXQ0IiwiTWF0NCIsInRlbXBWZWMzYSIsIlZlYzMiLCJ0ZW1wVmVjM2IiLCJuZWFyIiwiZmFyIiwiem9vbSIsInByb2plY3Rpb25NYXRyaXgiLCJ2aWV3TWF0cml4IiwicHJvamVjdGlvblZpZXdNYXRyaXgiLCJ3b3JsZFBvc2l0aW9uIiwib3J0aG9ncmFwaGljIiwiZnJvbVBlcnNwZWN0aXZlIiwiZnJvbU9ydGhvZ29uYWwiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsIndvcmxkTWF0cml4IiwiZ2V0VHJhbnNsYXRpb24iLCJsb29rQXQiLCJwcm9qZWN0IiwiYXBwbHlNYXRyaXg0IiwidW5wcm9qZWN0IiwidXBkYXRlRnJ1c3R1bSIsImZydXN0dW0iLCJjb25zdGFudCIsImludkxlbiIsImZydXN0dW1JbnRlcnNlY3RzTWVzaCIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsImdldE1heFNjYWxlT25BeGlzIiwiZnJ1c3R1bUludGVyc2VjdHNTcGhlcmUiLCJub3JtYWwiLCJwbGFuZSIsImRvdCIsInRlbXBWZWMzIiwiQVRUUl9JRCIsImlzQm91bmRzV2FybmVkIiwiR2VvbWV0cnkiLCJWQU9zIiwiZHJhd1JhbmdlIiwiaW5zdGFuY2VkQ291bnQiLCJiaW5kVmVydGV4QXJyYXkiLCJjdXJyZW50R2VvbWV0cnkiLCJnbFN0YXRlIiwiYWRkQXR0cmlidXRlIiwiRmxvYXQzMkFycmF5IiwiRkxPQVQiLCJVaW50MTZBcnJheSIsIlVOU0lHTkVEX1NIT1JUIiwiVU5TSUdORURfSU5UIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJBUlJBWV9CVUZGRVIiLCJub3JtYWxpemVkIiwic3RyaWRlIiwiZGl2aXNvciIsImluc3RhbmNlZCIsIm5lZWRzVXBkYXRlIiwiY3JlYXRlQnVmZmVyIiwidXBkYXRlQXR0cmlidXRlIiwiaXNJbnN0YW5jZWQiLCJib3VuZEJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJzZXRJbmRleCIsInNldERyYXdSYW5nZSIsInNldEluc3RhbmNlZENvdW50IiwiY3JlYXRlVkFPIiwiYXR0cmlidXRlT3JkZXIiLCJjcmVhdGVWZXJ0ZXhBcnJheSIsImJpbmRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlTG9jYXRpb25zIiwibnVtTG9jIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliRGl2aXNvciIsImRyYXciLCJUUklBTkdMRVMiLCJkcmF3RWxlbWVudHNJbnN0YW5jZWQiLCJkcmF3QXJyYXlzSW5zdGFuY2VkIiwiZHJhd0VsZW1lbnRzIiwiZHJhd0FycmF5cyIsImdldFBvc2l0aW9uIiwiY29tcHV0ZUJvdW5kaW5nQm94Iiwic3ViIiwiZGl2aWRlIiwibWF4UmFkaXVzU3EiLCJmcm9tQXJyYXkiLCJzcXVhcmVkRGlzdGFuY2UiLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZUJ1ZmZlciIsImZydXN0dW1DdWxsZWQiLCJyZW5kZXJPcmRlciIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsIk1hdDMiLCJiZWZvcmVSZW5kZXJDYWxsYmFja3MiLCJhZnRlclJlbmRlckNhbGxiYWNrcyIsIm9uQmVmb3JlUmVuZGVyIiwib25BZnRlclJlbmRlciIsIm1vZGVsTWF0cml4IiwiY2FtZXJhUG9zaXRpb24iLCJnZXROb3JtYWxNYXRyaXgiLCJmbGlwRmFjZXMiLCJjdWxsRmFjZSIsInVzZSIsImFycmF5Q2FjaGVGMzIiLCJCQUNLIiwiZnJvbnRGYWNlIiwiQ0NXIiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsImRlcHRoRnVuYyIsIkxFU1MiLCJibGVuZEZ1bmMiLCJibGVuZEVxdWF0aW9uIiwicHJlbXVsdGlwbGllZEFscGhhIiwic2V0QmxlbmRGdW5jIiwiT05FIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIlNSQ19BTFBIQSIsInZlcnRleFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsImFkZExpbmVOdW1iZXJzIiwiZnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwidW5pZm9ybUxvY2F0aW9ucyIsIm51bVVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwidUluZGV4IiwidW5pZm9ybSIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtTmFtZSIsImlzU3RydWN0QXJyYXkiLCJzdHJ1Y3RJbmRleCIsInN0cnVjdFByb3BlcnR5IiwiaXNTdHJ1Y3QiLCJsb2NhdGlvbnMiLCJudW1BdHRyaWJzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJhSW5kZXgiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImRzdCIsInNyY0FscGhhIiwiZHN0QWxwaGEiLCJzZXRCbGVuZEVxdWF0aW9uIiwibW9kZVJHQiIsIm1vZGVBbHBoYSIsImFwcGx5U3RhdGUiLCJERVBUSF9URVNUIiwiQ1VMTF9GQUNFIiwiQkxFTkQiLCJzZXRDdWxsRmFjZSIsInNldEZyb250RmFjZSIsInNldERlcHRoTWFzayIsInNldERlcHRoRnVuYyIsInRleHR1cmVVbml0IiwiY3VycmVudFByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiYWN0aXZlVW5pZm9ybSIsInNldFVuaWZvcm0iLCJ0ZXh0dXJlVW5pdHMiLCJDVyIsImRlbGV0ZVByb2dyYW0iLCJhcnJheUxlbiIsInZhbHVlTGVuIiwiZmxhdHRlbiIsInNldFZhbHVlIiwiYXJyYXlzRXF1YWwiLCJzZXRBcnJheSIsInVuaWZvcm0xZnYiLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMmZ2IiwidW5pZm9ybTNmdiIsInVuaWZvcm00ZnYiLCJ1bmlmb3JtMWl2IiwidW5pZm9ybTFpIiwidW5pZm9ybTJpdiIsInVuaWZvcm0zaXYiLCJ1bmlmb3JtNGl2IiwidW5pZm9ybU1hdHJpeDJmdiIsInVuaWZvcm1NYXRyaXgzZnYiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwid2FybkNvdW50IiwiZHByIiwiZGVwdGgiLCJzdGVuY2lsIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwicG93ZXJQcmVmZXJlbmNlIiwiYXV0b0NsZWFyIiwid2ViZ2wiLCJnZXRDb250ZXh0IiwiaXNXZWJnbDIiLCJaRVJPIiwiRlVOQ19BREQiLCJkZXB0aE1hc2siLCJwcmVtdWx0aXBseUFscGhhIiwiZmxpcFkiLCJ1bnBhY2tBbGlnbm1lbnQiLCJmcmFtZWJ1ZmZlciIsInZpZXdwb3J0IiwiYWN0aXZlVGV4dHVyZVVuaXQiLCJleHRlbnNpb25zIiwiZ2V0RXh0ZW5zaW9uIiwiZHJhd0J1ZmZlcnMiLCJwYXJhbWV0ZXJzIiwibWF4VGV4dHVyZVVuaXRzIiwiZ2V0UGFyYW1ldGVyIiwiTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJtYXhBbmlzb3Ryb3B5IiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwic2V0Vmlld3BvcnQiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiZXh0ZW5zaW9uIiwid2ViZ2wyRnVuYyIsImV4dEZ1bmMiLCJzb3J0T3BhcXVlIiwiekRlcHRoIiwic29ydFRyYW5zcGFyZW50Iiwic29ydFVJIiwiZ2V0UmVuZGVyTGlzdCIsImZydXN0dW1DdWxsIiwicmVuZGVyTGlzdCIsInRyYXZlcnNlIiwib3BhcXVlIiwidWkiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsIlNURU5DSUxfQlVGRkVSX0JJVCIsImVtcHR5UGl4ZWwiLCJpc1Bvd2VyT2YyIiwiVEVYVFVSRV8yRCIsIlVOU0lHTkVEX0JZVEUiLCJSR0JBIiwiaW50ZXJuYWxGb3JtYXQiLCJ3cmFwUyIsIkNMQU1QX1RPX0VER0UiLCJ3cmFwVCIsIm1pbkZpbHRlciIsIk5FQVJFU1RfTUlQTUFQX0xJTkVBUiIsIkxJTkVBUiIsIm1hZ0ZpbHRlciIsImFuaXNvdHJvcHkiLCJzdG9yZSIsIlJFUEVBVCIsImJpbmRUZXh0dXJlIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiVU5QQUNLX0FMSUdOTUVOVCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01JTl9GSUxURVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwidGV4UGFyYW1ldGVyZiIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiVEVYVFVSRV9DVUJFX01BUCIsInRleEltYWdlMkQiLCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1giLCJpc0NvbXByZXNzZWRUZXh0dXJlIiwiY29tcHJlc3NlZFRleEltYWdlMkQiLCJnZW5lcmF0ZU1pcG1hcCIsIm1hdHJpeEF1dG9VcGRhdGUiLCJxdWF0ZXJuaW9uIiwiUXVhdCIsIkV1bGVyIiwidXAiLCJmcm9tRXVsZXIiLCJmcm9tUXVhdGVybmlvbiIsIm5vdGlmeVBhcmVudCIsImFkZENoaWxkIiwibm90aWZ5Q2hpbGQiLCJ3b3JsZE1hdHJpeE5lZWRzVXBkYXRlIiwiY29tcG9zZSIsImRlY29tcG9zZSIsImdldFJvdGF0aW9uIiwiZ2V0U2NhbGluZyIsImludmVydCIsIndTZWdzIiwiaFNlZ3MiLCJudW0iLCJudW1JbmRpY2VzIiwidXYiLCJVaW50MzJBcnJheSIsImJ1aWxkUGxhbmUiLCJ1RGlyIiwidkRpciIsImlpIiwiaW8iLCJzZWdXIiwic2VnSCIsIml5IiwiaXgiLCJ0bXBNYXQ0Iiwib3JkZXIiLCJyZW9yZGVyIiwiZnJvbVJvdGF0aW9uTWF0cml4IiwiRXVsZXJGdW5jIiwicSIsIm8iLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJNYXQzRnVuYyIsInRyYW5zbGF0ZSIsImZyb21NYXRyaXg0IiwiZnJvbUJhc2lzIiwidmVjM2EiLCJ2ZWMzYiIsInZlYzNjIiwibTAzIiwibTEzIiwibTIzIiwibTMwIiwibTMxIiwibTMyIiwibTMzIiwiTWF0NEZ1bmMiLCJzZXRQb3NpdGlvbiIsInBvcyIsImV5ZSIsIlF1YXRGdW5jIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwiY29uanVnYXRlIiwicUEiLCJxQiIsImZyb21NYXRyaXgzIiwibWF0cml4MyIsImV1bGVyIiwiZnJvbUF4aXNBbmdsZSIsInNsZXJwIiwiVmVjM0Z1bmMiLCJ2YSIsInZiIiwic3F1YXJlZExlbiIsIm5lZ2F0ZSIsImNyb3NzIiwibWF0NCIsInNjYWxlUm90YXRlTWF0cml4NCIsImFwcGx5UXVhdGVybmlvbiIsInRyYW5zZm9ybURpcmVjdGlvbiIsIm91dCIsImZyb21NYXQ0IiwiZnJvbVF1YXQiLCJ6MiIsInh4IiwieXgiLCJ5eSIsInp4IiwienkiLCJ6eiIsInd4Iiwid3kiLCJ3eiIsInRyYW5zcG9zZSIsImEwMSIsImEwMiIsImEwMCIsImExMCIsImEyMCIsImIwMSIsImIxMSIsImIyMSIsImRldCIsImIwMCIsImIwMiIsImIxMCIsImIxMiIsImIyMCIsImIyMiIsIm5vcm1hbEZyb21NYXQ0IiwiYTAzIiwiYTMwIiwiYTMxIiwiYjAzIiwiYjA0IiwiYjA1IiwiYjA2IiwiYjA3IiwiYjA4IiwiYjA5IiwicHJvamVjdGlvbiIsInN1YnRyYWN0IiwibXVsdGlwbHlTY2FsYXIiLCJiMCIsImh5cG90IiwibWF0Iiwic2NhbGluZyIsImlzMSIsImlzMiIsImlzMyIsInNtMTEiLCJzbTEyIiwic20xMyIsInNtMjEiLCJzbTIyIiwic20yMyIsInNtMzEiLCJzbTMyIiwic20zMyIsInRyYWNlIiwiUyIsImZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUiLCJ4eSIsInh6IiwieXoiLCJzeiIsImZvdnkiLCJuZiIsIm9ydGhvIiwibHIiLCJidCIsInRhcmdldFRvIiwiZXlleCIsImV5ZXkiLCJleWV6IiwidXB4IiwidXB5IiwidXB6IiwiejAiLCJ6MSIsInNldEF4aXNBbmdsZSIsImF6IiwiYXciLCJieCIsImJ5IiwiYnoiLCJidyIsIm9tZWdhIiwiY29zb20iLCJzaW5vbSIsInNjYWxlMCIsInNjYWxlMSIsImEwIiwiYTMiLCJpbnZEb3QiLCJmcm9tTWF0MyIsImZSb290IiwiZlRyYWNlIiwiayIsImN6IiwidmVjNCIsInNxdWFyZWRMZW5ndGgiLCJ0cmFuc2Zvcm1NYXQ0Iiwic2NhbGVSb3RhdGVNYXQ0IiwidHJhbnNmb3JtTWF0MyIsInRyYW5zZm9ybVF1YXQiLCJxeCIsInF5IiwicXoiLCJ1dngiLCJ1dnkiLCJ1dnoiLCJ1dXZ4IiwidXV2eSIsInV1dnoiLCJ3MiIsInRlbXBBIiwidGVtcEIiLCJjb3NpbmUiLCJleGFjdEVxdWFscyIsInByZWZpeGVzIiwidXBwZXIiLCJtZW1vIiwicHJlZml4IiwiY2hhciIsIktleSIsImRhc2giLCJxcyIsInNlcCIsInJlZ2V4cCIsIm1heEtleXMiLCJrc3RyIiwidnN0ciIsImRlY29kZVVSSUNvbXBvbmVudCIsInN0cmluZ2lmeVByaW1pdGl2ZSIsImlzRmluaXRlIiwia3MiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJzZSIsInN0cmluZ2lmeSIsInB1bnljb2RlIiwibWF4SW50IiwicmVnZXhQdW55Y29kZSIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJlcnJvcnMiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJtYXBEb21haW4iLCJwYXJ0cyIsInVjczJkZWNvZGUiLCJvdXRwdXQiLCJjb3VudGVyIiwidWNzMmVuY29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiZmxhZyIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiYmFzaWMiLCJvbGRpIiwiYmFzZU1pbnVzVCIsImNvZGVQb2ludCIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwiZGVmaW5lIiwidXRpbCIsIlVybCIsInNsYXNoZXMiLCJhdXRoIiwicG9ydCIsImhvc3RuYW1lIiwiaGFzaCIsInNlYXJjaCIsInVybFBhcnNlIiwicmVzb2x2ZU9iamVjdCIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwic2xhc2hlZFByb3RvY29sIiwicXVlcnlzdHJpbmciLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJxdWVyeUluZGV4Iiwic3BsaXR0ZXIiLCJ1U3BsaXQiLCJyZXN0Iiwic2ltcGxlUGF0aCIsInByb3RvIiwibG93ZXJQcm90byIsImF0U2lnbiIsImhvc3RFbmQiLCJoZWMiLCJwYXJzZUhvc3QiLCJpcHY2SG9zdG5hbWUiLCJob3N0cGFydHMiLCJwYXJ0IiwibmV3cGFydCIsInZhbGlkUGFydHMiLCJub3RIb3N0IiwiYml0IiwidG9BU0NJSSIsImFlIiwiZXNjIiwiZXNjYXBlIiwicW0iLCJyZWwiLCJ0a2V5cyIsInRrIiwidGtleSIsInJrZXlzIiwicmsiLCJya2V5IiwicmVsUGF0aCIsImlzU291cmNlQWJzIiwiaXNSZWxBYnMiLCJtdXN0RW5kQWJzIiwicmVtb3ZlQWxsRG90cyIsInNyY1BhdGgiLCJwc3ljaG90aWMiLCJpc051bGxPclVuZGVmaW5lZCIsImF1dGhJbkhvc3QiLCJpc051bGwiLCJoYXNUcmFpbGluZ1NsYXNoIiwiaXNBYnNvbHV0ZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiV2ViU29ja2V0Q2xpZW50IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsIldlYlNvY2tldCIsIm9uZXJyb3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJvbm9wZW4iLCJvbmNsb3NlIiwib25tZXNzYWdlIiwiaXNVbmxvYWRpbmciLCJjdXJyZW50SGFzaCIsIl9fd2VicGFja19oYXNoX18iLCJob3QiLCJsaXZlUmVsb2FkIiwib3ZlcmxheSIsInBhcnNlZFJlc291cmNlUXVlcnkiLCJwYXJzZVVSTCIsInNldEFsbExvZ0xldmVsIiwid2VicGFja0hvdExvZyIsInNldExvZ0xldmVsIiwibG9nZ2luZyIsIm9uU29ja2V0TWVzc2FnZSIsImludmFsaWQiLCJzZW5kTWVzc2FnZSIsIl9oYXNoIiwicHJldmlvdXNIYXNoIiwiX3Byb2dyZXNzIiwicGVyY2VudCIsIm1zZyIsIm9rIiwicmVsb2FkQXBwIiwiZmlsZSIsInJlbG9hZCIsIndhcm5pbmdzIiwiX3dhcm5pbmdzIiwic3RyaXBwZWRXYXJuaW5ncyIsInN0cmlwQW5zaSIsIl9lcnJvcnMiLCJzdHJpcHBlZEVycm9ycyIsIl9lcnJvciIsInNvY2tldFVSTCIsImNyZWF0ZVNvY2tldFVSTCIsInNvY2tldCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3VudXNlZF93ZWJwYWNrX21vZHVsZSIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIml0ZXJhdG9yIiwiX2l0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImFycjIiLCJMb2dUeXBlIiwiZnJlZXplIiwiaW5mbyIsImRlYnVnIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsInByb2ZpbGUiLCJwcm9maWxlRW5kIiwiTE9HX1NZTUJPTCIsIlRJTUVSU19TWU1CT0wiLCJUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wiLCJXZWJwYWNrTG9nZ2VyIiwiZ2V0Q2hpbGRMb2dnZXIiLCJfbGVuMyIsIl9rZXkzIiwiX2xlbjQiLCJfa2V5NCIsIl9sZW41IiwiX2tleTUiLCJhc3NlcnRpb24iLCJfbGVuNiIsIl9rZXk2IiwiX2xlbjciLCJfa2V5NyIsIl9sZW44IiwiX2tleTgiLCJfbGVuOSIsIl9rZXk5IiwiX2xlbjEwIiwiX2tleTEwIiwiaHJ0aW1lIiwiZGVsZXRlIiwiTG9nZ2VyIiwiX191bnVzZWRfd2VicGFja19leHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZpbHRlclRvRnVuY3Rpb24iLCJyZWdFeHAiLCJpZGVudCIsIkxvZ0xldmVsIiwiZmFsc2UiLCJ0cnVlIiwidmVyYm9zZSIsIl9yZWYkbGV2ZWwiLCJfcmVmJGRlYnVnIiwiZGVidWdGaWx0ZXJzIiwibG9nbGV2ZWwiLCJsYWJlbGVkQXJncyIsImxvZ1RpbWUiLCJfZXh0ZW5kcyIsIlN5bmNCYWlsSG9vayIsImNyZWF0ZUNvbnNvbGVMb2dnZXIiLCJjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMiLCJjdXJyZW50RGVmYXVsdExvZ2dlciIsImdldExvZ2dlciIsImhvb2tzIiwiY2hpbGROYW1lIiwiY29uZmlndXJlRGVmYXVsdExvZ2dlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsImNhY2hlZE1vZHVsZSIsImRlZmluaXRpb24iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwid2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fIiwiX19lc01vZHVsZSIsIl9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fIiwiYW5zaV9yZWdleF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYW5zaVJlZ2V4IiwiX3JlZiRvbmx5Rmlyc3QiLCJvbmx5Rmlyc3QiLCJwYXR0ZXJuIiwic3RyaXBfYW5zaV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiaWZyYW1lQ29udGFpbmVyRWxlbWVudCIsImNvbnRhaW5lckVsZW1lbnQiLCJvbkxvYWRRdWV1ZSIsImVuc3VyZU92ZXJsYXlFeGlzdHMiLCJjb250ZW50RG9jdW1lbnQiLCJmb250RmFtaWx5Iiwid2hpdGVTcGFjZSIsImhlYWRlckVsZW1lbnQiLCJjbG9zZUJ1dHRvbkVsZW1lbnQiLCJiYWNrZ3JvdW5kIiwiY3NzRmxvYXQiLCJzdHlsZUZsb2F0Iiwib25Mb2FkIiwibWVzc2FnZXMiLCJlbnRyeUVsZW1lbnQiLCJ0eXBlRWxlbWVudCIsIm1lc3NhZ2VUZXh0Tm9kZSIsIkNsaWVudCIsIl9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIiwiZGVmYXVsdCIsInJldHJpZXMiLCJoYW5kbGVycyIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJyZXRyeUluTXMiLCJvbk1lc3NhZ2UiLCJKU09OIiwicGFyc2VkVVJMIiwiaXNJbkFkZHJBbnkiLCJzb2NrZXRVUkxQcm90b2NvbCIsInNvY2tldFVSTEF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwic29ja2V0VVJMSG9zdG5hbWUiLCJzb2NrZXRVUkxQb3J0Iiwic29ja2V0VVJMUGF0aG5hbWUiLCJmcm9tQ3VycmVudFNjcmlwdCIsInNjcmlwdEVsZW1lbnRzIiwic2NyaXB0RWxlbWVudHNXaXRoU3JjIiwibG9nZ2VyIiwicmVzb3VyY2VRdWVyeSIsInNlYXJjaFBhcmFtcyIsInBhaXIiLCJzY3JpcHRTb3VyY2UiLCJnZXRDdXJyZW50U2NyaXB0U291cmNlIiwic2NyaXB0U291cmNlVVJMIiwiVVJMIiwiYWxsb3dUb0hvdCIsImFsbG93VG9MaXZlUmVsb2FkIiwiaG90RW1pdHRlciIsInBvc3RNZXNzYWdlIiwicm9vdFdpbmRvdyIsImludGVydmFsSWQiLCJhcHBseVJlbG9hZCIsIldvcmtlckdsb2JhbFNjb3BlIiwibGFzdEhhc2giLCJ1cFRvRGF0ZSIsImNoZWNrIiwidXBkYXRlZE1vZHVsZXMiLCJjYXRjaCIsImZvcm1hdEVycm9yIiwicmVuZXdlZE1vZHVsZXMiLCJ1bmFjY2VwdGVkTW9kdWxlcyIsImV2ZXJ5IiwibG9nTGV2ZWwiLCJkdW1teSIsInNob3VsZExvZyIsImxvZ0dyb3VwIiwibG9nRm4iLCJjc3NSZWxvYWQiLCJkaXNwb3NlIiwiYWNjZXB0IiwiZXhlY09wdGlvbnMiLCJmYWN0b3J5IiwiaHUiLCJjaHVua0lkIiwibWluaUNzc0YiLCJobXJGIiwiZ2xvYmFsVGhpcyIsImRvbmUiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwiY2hhcnNldCIsIm5jIiwib25TY3JpcHRDb21wbGV0ZSIsImRvbmVGbnMiLCJoZWFkIiwibm1kIiwicGF0aHMiLCJjdXJyZW50Q2hpbGRNb2R1bGUiLCJibG9ja2luZ1Byb21pc2VzIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJyZXN1bHRzIiwid2FpdEZvckJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2VyIiwiaG90Q2hlY2siLCJhcHBseU9uVXBkYXRlIiwiaG1yTSIsImhtckMiLCJwcm9taXNlcyIsImludGVybmFsQXBwbHkiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsImhvdEFwcGx5IiwiQm9vbGVhbiIsImRpc3Bvc2VQcm9taXNlIiwiYXBwbHlQcm9taXNlIiwicmVwb3J0RXJyb3IiLCJvdXRkYXRlZE1vZHVsZXMiLCJtb2R1bGVzIiwiaG1ySSIsImhtckQiLCJtZSIsIl9tYWluIiwicmVxdWVzdCIsImFjdGl2ZSIsInBhcmVudHMiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJwcm9taXNlIiwidHJhY2tCbG9ja2luZ1Byb21pc2UiLCJjcmVhdGVSZXF1aXJlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2FjY2VwdGVkRXJyb3JIYW5kbGVycyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfcmVxdWlyZVNlbGYiLCJlcnJvckhhbmRsZXIiLCJkZWNsaW5lIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImZ1bGxocmVmIiwibGlua1RhZyIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiZXhpc3RpbmdMaW5rVGFncyIsImRhdGFIcmVmIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJvbGRUYWciLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlQ2h1bmtzIiwiY3VycmVudFVwZGF0ZSIsImN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzIiwiY3VycmVudFVwZGF0ZVJ1bnRpbWUiLCJpbnN0YWxsZWRDaHVua3MiLCJobXJTX2pzb25wIiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVhbFNyYyIsImdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsImNoYWluIiwicXVldWVJdGVtIiwicGFyZW50SWQiLCJhZGRBbGxUb1NldCIsImpzb25wSG1yIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsIm5ld01vZHVsZUZhY3RvcnkiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwib3V0ZGF0ZWRNb2R1bGVJZCIsImRlcGVuZGVuY3kiLCJkaXNwb3NlSGFuZGxlcnMiLCJlcnJvckhhbmRsZXJzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJkZXBlbmRlbmN5SWQiLCJlcnIyIiwib25FcnJvcmVkIiwib3JpZ2luYWxFcnJvciIsImlnbm9yZUVycm9yZWQiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJqc29ucCIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImpzb24iXSwic291cmNlUm9vdCI6IiJ9